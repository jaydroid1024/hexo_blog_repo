<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDispatcher-Android组件生命周期分发框架</title>
      <link href="2021/07/31/jdispatcher/"/>
      <url>2021/07/31/jdispatcher/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="JDispatcher"><a href="#JDispatcher" class="headerlink" title="JDispatcher"></a>JDispatcher</h1><p>Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png" alt=""></p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul><li>实现 Application 各个生命周期方法在所有需要的组件中分发</li><li>分发顺序支持多种规则<ul><li>优先级：优先级值越大越先被调用</li><li>依赖项：组件依赖的分发类先初始化</li><li>支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序</li></ul></li><li>分发维度支持多种规则<ul><li>在指定进程(所有进程，主进程，非主进程)中分发</li><li>在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载</li><li>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）</li><li>手动延迟调用分发，实现延迟加载</li><li>通过 ContentProvider 实现在 Application 之前超前预加载（todo）</li><li>只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化</li></ul></li><li>维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效</li><li>支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一</li><li>通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景</li><li>通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能</li><li>AGP Transform 增量支持编译（todo）</li><li>通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效</li><li>支持统计所有分发类的初始化时间，可用于启动优化的统计与排查</li></ul><h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><ul><li><p>jdispatcher-annotation</p><ul><li>模块类型：apply plugin: ‘java’</li><li>模块描述：声明编译时所需的注解类以及公共类等</li></ul></li><li><p>jdispatcher-compiler</p><ul><li>模块类型：apply plugin: ‘java’</li><li>模块描述：编译期(.java–.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java </li></ul></li><li><p>jdispatcher-plugin</p><ul><li><p>模块类型：apply plugin: ‘groovy’</p></li><li><p>模块描述：编译期(.class–.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序</p></li><li><p>模块主要工作：</p><ul><li>第一个：IDispatch 的分发流程<ul><li>扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件</li><li>反射获取收集到的 Map&lt;String, DispatchItem&gt; atlas)</li><li>通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化</li><li>按照 DispatchItem 的排序规则完成排序操作</li><li>将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作</li></ul></li><li>第二个：Application 生命周期方法的自动注册流程<ul><li>通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类</li><li>JDispatcher 调用字节码注入到 onTerminate()</li><li>JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)</li><li>JDispatcher 调用字节码注入到 onLowMemory()</li><li>JDispatcher 调用字节码注入到 onTrimMemory(level: Int)</li></ul></li></ul></li></ul></li><li><p>jdispatcher-api</p><ul><li>模块类型：apply plugin: ‘com.android.library’</li><li>模块描述：运行时用于整个框架的初始化，运行时分发等操作</li></ul></li></ul><h2 id="集成说明"><a href="#集成说明" class="headerlink" title="集成说明"></a>集成说明</h2><p><a href="https://jitpack.io/#jaydroid1024/JDispatcher" target="_blank" rel="noopener"><img src="https://jitpack.io/v/jaydroid1024/JDispatcher.svg" alt=""></a></p><pre class=" language-groovy"><code class="language-groovy"><span class="token comment" spellcheck="true">//Step 1. Add the JitPack repository to your build file</span><span class="token comment" spellcheck="true">//buildscript &amp; allprojects</span>allprojects <span class="token punctuation">{</span>    repositories <span class="token punctuation">{</span>        <span class="token punctuation">...</span>        maven <span class="token punctuation">{</span> url <span class="token string">'https://jitpack.io'</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//dependencies</span>classpath <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version'</span><span class="token comment" spellcheck="true">//Step 2. Add the dependency</span>implementation <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version'</span>kapt <span class="token string">'com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version'</span><span class="token comment" spellcheck="true">//Step 3. apply the plugin and config dispatcher</span>apply plugin<span class="token punctuation">:</span> <span class="token string">'jdispatcher'</span>dispatcher <span class="token punctuation">{</span>    appCanonicalName <span class="token operator">=</span> <span class="token string">"com.jay.android.App"</span>    buildIncremental <span class="token operator">=</span> <span class="token boolean">false</span>    buildDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> App <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//为分发类指定自定义参数，用于三方key的统一收口配置</span>        <span class="token keyword">val</span> dispatchExtraParam <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        dispatchExtraParam<span class="token punctuation">[</span><span class="token string">"com.jay.android.jdispatcher.DispatcherAppDemo"</span><span class="token punctuation">]</span> <span class="token operator">=</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>BuildConfig<span class="token punctuation">.</span>DEBUG<span class="token punctuation">)</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1_debug"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2_debug"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1_release"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2_release"</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//自动分发</span>        JDispatcher<span class="token punctuation">.</span>instance            <span class="token punctuation">.</span><span class="token function">withDebugAble</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调试模式：打印更多日志，实时刷新等</span>            <span class="token punctuation">.</span><span class="token function">withDispatchExtraParam</span><span class="token punctuation">(</span>dispatchExtraParam<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//分发参数</span>            <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// region如果在 app build.gradle 中配置了</span><span class="token comment" spellcheck="true">// dispatcher {appCanonicalName = "com.jay.android.App"}</span><span class="token comment" spellcheck="true">// 就不需要添加以下代码,dispatcher 插件会自动注入</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token operator">:</span> Configuration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>        JDispatcher<span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">onTrimMemory</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//endregion</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//手动调用分发</span>JDispatcher<span class="token punctuation">.</span>instance    <span class="token punctuation">.</span><span class="token function">manualDispatch</span><span class="token punctuation">(</span><span class="token string">"com.jay.android.jdispatcher.DispatcherAppDemo"</span><span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//声明分发类</span><span class="token annotation builtin">@Dispatch</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> Priority<span class="token punctuation">.</span>LOW_DEFAULT<span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"DispatcherAppDemo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> DispatcherAppDemo extends DispatchTemplate <span class="token punctuation">{</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Application app<span class="token punctuation">,</span> <span class="token annotation builtin">@NotNull</span> DispatchItem dispatchItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onCreate"</span> <span class="token operator">+</span> dispatchItem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span><span class="token annotation builtin">@NotNull</span> Configuration newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onConfigurationChanged"</span> <span class="token operator">+</span> newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onLowMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onLowMemory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onTerminate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@Override</span>    <span class="token keyword">public</span> void <span class="token function">onTrimMemory</span><span class="token punctuation">(</span>int level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"Jay"</span><span class="token punctuation">,</span> <span class="token string">"DispatcherAppDemo#onTrimMemory"</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-groovy"><code class="language-groovy">#Jdispatcher 混淆配置<span class="token operator">-</span>keep <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>jay<span class="token punctuation">.</span>android<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span></span><span class="token operator">**</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span>keep <span class="token keyword">class</span> <span class="token operator">*</span> <span class="token keyword">implements</span> <span class="token class-name">com<span class="token punctuation">.</span>jay<span class="token punctuation">.</span>android<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>common<span class="token punctuation">.</span>IDispatch</span><span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li><p>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况</p></li><li><p>通过 ContentProvider 实现在 Application 之前超前预加载</p></li><li><p>AGP Transform 增量支持编译</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">ARouter</a> 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦</p></li><li><p><a href="https://github.com/bingoogolapple/AppInit" target="_blank" rel="noopener">AppInit</a> 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。</p></li><li><p><a href="https://github.com/meituan/WMRouter" target="_blank" rel="noopener"><em>WMRouter</em></a> 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件化 </tag>
            
            <tag> 注解 </tag>
            
            <tag> Gradle Plugin </tag>
            
            <tag> ASM </tag>
            
            <tag> APT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筑基系列-计算机网络基础知识小抄版</title>
      <link href="2021/07/31/computer-net/"/>
      <url>2021/07/31/computer-net/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="筑基系列-计算机网络基础知识小抄版"><a href="#筑基系列-计算机网络基础知识小抄版" class="headerlink" title="筑基系列-计算机网络基础知识小抄版"></a>筑基系列-计算机网络基础知识小抄版</h1><blockquote><p>计算机基础知识筑基三部曲：</p><ul><li><strong><a href="https://juejin.cn/post/6991367806772052004" target="_blank" rel="noopener">第一部：筑基系列-计算机基础知识小抄版</a></strong><ul><li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li></ul></li><li><strong><a href="https://juejin.cn/post/6991385109509193764" target="_blank" rel="noopener">第二部：筑基系列-操作系统基础知识小抄版</a></strong><ul><li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li></ul></li><li><strong><a href="https://juejin.cn/post/6991397445251334151" target="_blank" rel="noopener">第三部：筑基系列-计算机网络基础知识小抄版</a></strong><ul><li>包括OSI七层模型各层详解、IP协议、TCP\IP协议、Http协议、DNS协议等</li></ul></li></ul></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#1.计算机网络概述">1.计算机网络概述</a></p><ul><li><a href="#11-什么是计算机网络">1.1 什么是计算机网络</a></li><li><a href="#12-计算机网络的分类">1.2 计算机网络的分类</a></li><li><a href="#13-计算机网络的发展历史">1.3 计算机网络的发展历史</a></li><li><a href="#14-计算机网络的层次结构">1.4 计算机网络的层次结构</a></li><li><a href="#15-现代互联网的网络拓扑">1.5 现代互联网的网络拓扑</a></li><li><a href="#16-计算机网络的性能指标">1.6 计算机网络的性能指标</a></li></ul></li><li><p><a href="#2.物理层">2.物理层</a></p><ul><li><a href="#21-物理层的作用">2.1 物理层的作用</a></li><li><a href="#22-信道的基本概念">2.2 信道的基本概念</a></li></ul></li><li><p><a href="#3.数据链路层">3.数据链路层</a></p><ul><li><a href="#31-数据链路层主要功能">3.1 数据链路层主要功能</a></li><li><a href="#32-最大传输单元mtu">3.2 最大传输单元MTU</a></li><li><a href="#33-以太网协议详解">3.3 以太网协议详解</a></li></ul></li><li><p><a href="#4.网络层">4.网络层</a></p><ul><li><a href="#41-网络层的主要功能">4.1 网络层的主要功能</a></li><li><a href="#42-ip协议详解">4.2 IP协议详解</a></li><li><a href="#43-ip协议的转发流程">4.3 IP协议的转发流程</a></li><li><a href="#44-arp协议与rarp协议">4.4 ARP协议与RARP协议</a></li><li><a href="#45-ip地址的分类">4.5 IP地址的分类</a></li><li><a href="#46-ip地址的划分子网">4.6 IP地址的划分子网</a></li><li><a href="#47-无分类地址cidr">4.7 无分类地址CIDR</a></li><li><a href="#48-网络地址转换nat技术">4.8 网络地址转换NAT技术</a></li><li><a href="#49-icmp协议详解">4.9 ICMP协议详解</a></li><li><a href="#410-网络层的路由概述">4.10 网络层的路由概述</a></li><li><a href="#411-自治系统as">4.11 自治系统(AS)</a></li><li><a href="#412-内部网关路由协议之rip协议">4.12 内部网关路由协议之RIP协议</a></li><li><a href="#413-外部网关路由协议之bgp协议">4.13 外部网关路由协议之BGP协议</a></li></ul></li><li><p><a href="#5.传输层">5.传输层</a></p><ul><li><a href="#51-传输层的主要功能">5.1 传输层的主要功能</a></li><li><a href="#52-udp协议详解">5.2 UDP协议详解</a></li><li><a href="#53-tcp报文详解">5.3 TCP报文详解</a></li><li><a href="#54-tcp可靠传输的基本原理">5.4 TCP可靠传输的基本原理</a></li><li><a href="#55-tcp协议的可靠传输">5.5 TCP协议的可靠传输</a></li><li><a href="#56-tcp协议的流量控制">5.6 TCP协议的流量控制</a></li><li><a href="#57-tcp协议的拥塞控制">5.7 TCP协议的拥塞控制</a></li><li><a href="#58-tcp连接的建立">5.8 TCP连接的建立</a></li><li><a href="#59-tcp连接的释放">5.9 TCP连接的释放</a></li><li><a href="#510-套接字与套接字编程">5.10 套接字与套接字编程</a></li></ul></li><li><p><a href="#6.应用层">6.应用层</a></p><ul><li><p><a href="#61-应用层概述">6.1 应用层概述</a></p></li><li><p><a href="#62-应用层主要功能">6.2 应用层主要功能</a></p></li><li><p><a href="#63-dns服务详解">6.3 DNS服务详解</a></p></li><li><p><a href="#64-dhcp协议详解">6.4 DHCP协议详解</a></p></li><li><p><a href="#65-http协议详解">6.5 HTTP协议详解</a></p></li><li><p><a href="#66-http工作的结构">6.6 HTTP工作的结构</a></p></li><li><p><a href="#67-https协议详解">6.7 HTTPS协议详解</a></p></li><li><p><a href="#68-输入域名按下回车键的过程有哪些">6.8 输入域名按下回车键的过程有哪些</a></p></li></ul></li><li><p><a href="#7.HTTP协议详解">7.HTTP协议详解</a></p><ul><li><a href="#71-浏览器背后的故事">7.1 浏览器背后的故事</a></li><li><a href="#72-http协议的前世今生">7.2 HTTP协议的前世今生</a></li><li><a href="#73-透过tcpip看http">7.3 透过TCP/IP看HTTP</a></li></ul></li><li><p><a href="#8.计算机网络实践">8.计算机网络实践</a></p><ul><li><a href="#81-网络嗅探工具">8.1 网络嗅探工具</a></li></ul></li><li><p><a href="#9关于我">9.关于我</a></p></li><li><p><a href="#10参考">10.参考</a></p></li></ul><h2 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1.计算机网络概述"></a>1.计算机网络概述</h2><h3 id="1-1-什么是计算机网络"><a href="#1-1-什么是计算机网络" class="headerlink" title="1.1 什么是计算机网络"></a>1.1 什么是计算机网络</h3><ul><li>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</li><li>计算机网络的不是软件概念，还包含硬件设备</li><li>计算机网络不仅仅是信息通信，还可以支持广泛的应用</li></ul><h3 id="1-2-计算机网络的分类"><a href="#1-2-计算机网络的分类" class="headerlink" title="1.2 计算机网络的分类"></a>1.2 计算机网络的分类</h3><table><thead><tr><th>分类</th><th>英文</th><th>范围</th><th>区域</th></tr></thead><tbody><tr><td>广域网</td><td>WAN(Wide Area Network)</td><td>几十到几千公里</td><td>跨省、跨国</td></tr><tr><td>城域网</td><td>MAN(Metro. Area Network)</td><td>5KM-50KM</td><td>城市间</td></tr><tr><td>局域网</td><td>LAN(Local Area Network)</td><td>1KM以内</td><td>地区内</td></tr></tbody></table><h3 id="计算机网络的发展历史"><a href="#计算机网络的发展历史" class="headerlink" title="计算机网络的发展历史"></a>计算机网络的发展历史</h3><ul><li><p>世界互联网发展历史</p><ul><li>单个网络 ARPANET<ul><li>计算机–&gt;交换机&lt;–计算机</li></ul></li><li>三级结构互联网<ul><li>主干网–&gt;地区网–&gt;校园网</li></ul></li><li>多层次ISP互联网<ul><li>ISP(Internet Service Provider): 网络服务提供商</li><li>中国电信、中国移动、中国联通等</li><li>主干ISP(海底电缆)–&gt;地区ISP(山东移动)–&gt;校园、家庭、公司</li><li>查看全球网络地图：<a href="https://www.infrapedia.com/app" target="_blank" rel="noopener">https://www.infrapedia.com/app</a></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171046.jpg" alt=""></p></li><li><p>中国互联网的发展历史</p><ul><li>1980 年开始互联网实验</li><li>1989 年第一个公共网络建立运行</li><li>1994 接入国际互联网</li><li>中国的互联网企业<ul><li>中国电信互联网CHINANET</li><li>中国联通互联网UNINET</li><li>中国移动互联网CMNET</li><li>中国教育与科研计算机网CERNET</li><li>中国科学技术网CSTNET</li><li>1996年，张朝阳创建搜狐</li><li>1997年，丁磊创建网易</li><li>1998年，王志东创建新浪</li><li>1998年，马化腾、张志东创建腾讯</li><li>1999年，马云创建阿里巴巴</li><li>2000年，李彦宏创建百度</li></ul></li></ul></li></ul><h3 id="1-4-计算机网络的层次结构"><a href="#1-4-计算机网络的层次结构" class="headerlink" title="1.4 计算机网络的层次结构"></a>1.4 计算机网络的层次结构</h3><ul><li>层次结构设计的基本原则<ul><li>分层实现不同的功能<ul><li>保证数据通路顺畅</li><li>识别目的计算机</li><li>目的计算机状态</li><li>数据是否错误</li><li>层次划分：网络应用数据(视频、文件、游戏)–&gt;数据可靠通信(数据错误、重复)–&gt;物理网络接入(光电等物理特性)</li></ul></li><li>各层之间是相互独立的</li><li>每一层要有足够的灵活性</li><li>各层之间完全解耦</li></ul></li><li>OSI七层模型<ul><li>应用层：为计算机用户提供接口和服务</li><li>表示层：数据处理（编码解码、加密解密等）</li><li>会话层：管理（建立、维护、重连）通信会话</li><li>传输层：管理端到端的通信连接</li><li>网络层：数据路由（决定数据在网络的路径）</li><li>数据链路层：管理相邻节点之间的数据通信</li><li>物理层：数据通信的光电物理特性</li><li>OSI在市场化过程中困难重重， TCP/IP在全球范围成功运行</li><li>OSI欲成为全球计算机都遵循的标准</li><li>OSI最终并没有成为广为使用的标准模型</li><li>为什么没有被接受<ul><li>OSI标准制定周期过长，按OSI标准生产的设备无法及时进入市场</li><li>OSI的专家缺乏实际经验</li><li>OSI模型设计的并不合理，一些功能在多层中重复出现</li></ul></li></ul></li><li>TCP/IP四层模型<ul><li>应用层：HTTP/FTP/… ，对应OSI的应用层、表示层、会话层</li><li>传输层：TCP/UDP，对应OSI的传输层</li><li>网络层：IP/ICMP，对应OSI的网络层</li><li>网络接口层：Ethernet/ARP/RARP，对应OSI的数据链路层、物理层</li></ul></li></ul><h3 id="1-5-现代互联网的网络拓扑"><a href="#1-5-现代互联网的网络拓扑" class="headerlink" title="1.5 现代互联网的网络拓扑"></a>1.5 现代互联网的网络拓扑</h3><ul><li>边缘部分<ul><li>家庭：终端机器(手机)–&gt;路由器–&gt;网关–&gt;地区ISP</li><li>企业：终端机器(电脑)–&gt;路由器–&gt;内部网关–&gt;统一网关–&gt;地区ISP</li></ul></li><li>核心部分<ul><li>地区ISP–&gt;主干ISP–&gt;国际路由器</li></ul></li><li>网络连接错综复杂</li><li>接入设备数以亿计</li><li>网络覆盖边际全球</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171055.jpg" alt=""></p><ul><li>客户-服务器(C/S)模式<ul><li>C请求服务–&gt;S获得服务</li></ul></li><li>对等连接(P2P)模式</li></ul><h3 id="1-6-计算机网络的性能指标"><a href="#1-6-计算机网络的性能指标" class="headerlink" title="1.6 计算机网络的性能指标"></a>1.6 计算机网络的性能指标</h3><ul><li>速率<ul><li>速率单位： bps=bit/s</li><li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul><li>bps到字节的转换</li><li>网络常用单位为(Mbps)</li><li>100M/s = 100Mbps = 100Mbit/s</li><li>100Mbit/s=(100/8)MB/s=12.5MB/s</li></ul></li></ul></li><li>时延<ul><li>总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延</li><li>发送时延<ul><li>发送时延 = 数据长度(𝑏𝑖𝑡)/发送速率(𝑏𝑖𝑡/𝑠)</li><li>发送速率受限于计算机网卡</li></ul></li><li>传输时延<ul><li>传播时延 = 传输路径距离/传播速率(𝑏𝑖𝑡/𝑠)</li><li>传播速率受限于传输介质，铜线、光线</li></ul></li><li>排队时延<ul><li>数据包在网络设备中等待被处理的时间</li></ul></li><li>处理时延<ul><li>数据包到达设备或者目的机器被处理所需要的时间</li></ul></li></ul></li><li>往返时间RTT<ul><li>RTT表示的是数据报文在端到端通信中的来回一次的时间</li><li>RTT(Route-Trip Time)是评估网络质量的一项重要指标</li><li>通常使用ping命令查看RTT</li></ul></li></ul><h2 id="2-物理层"><a href="#2-物理层" class="headerlink" title="2.物理层"></a>2.物理层</h2><h3 id="2-1-物理层的作用"><a href="#2-1-物理层的作用" class="headerlink" title="2.1 物理层的作用"></a>2.1 物理层的作用</h3><ul><li>相关设备<ul><li>双绞线</li><li>同轴电缆</li><li>光纤</li><li>红外线</li><li>无线</li><li>激光</li></ul></li><li>传输比特流</li><li>连接不同的物理设备</li><li>物理特性<ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul></li></ul><h3 id="2-2-信道的基本概念"><a href="#2-2-信道的基本概念" class="headerlink" title="2.2 信道的基本概念"></a>2.2 信道的基本概念</h3><ul><li><p>一条通信电路包含一个接收信道和一个发送信道</p></li><li><p>信道是往一个方向传送信息的媒体</p></li><li><p>单工信道</p><ul><li>有线电视、无线电收音机等等</li><li>只能一个方向通信，没有反方向反馈的信道</li></ul></li><li><p>半双工信道</p><ul><li>不能双方同时发送，也不能同时接收</li><li>双方都可以发送和接收信息</li></ul></li><li><p>全双工信道</p><ul><li>双方都可以同时发送和接收信息</li></ul></li><li><p>分用-复用技术</p><ul><li>信道利用率并不高？</li><li>分用器</li><li>复用器</li><li>频分复用</li><li>时分复用</li><li>波分复用</li><li>码分复用</li></ul></li></ul><h2 id="3-数据链路层"><a href="#3-数据链路层" class="headerlink" title="3.数据链路层"></a>3.数据链路层</h2><h3 id="3-1-数据链路层主要功能"><a href="#3-1-数据链路层主要功能" class="headerlink" title="3.1 数据链路层主要功能"></a>3.1 数据链路层主要功能</h3><ul><li><p>封装成帧</p><ul><li>发送端在网络层的一段数据前后添加特定标记形成“帧”</li><li>“帧”是数据链路层数据的基本单位</li><li>接收端根据前后特定标记识别出“帧”</li><li>物理层才不管你“帧”不“帧”，物理层之作用bit流的传输</li><li>IP数据报–&gt;“帧”的数据[帧首部， “帧”的数据 ，帧尾部]</li><li>帧首部和尾部是特定的控制字符（特定比特流）SOH: 00000001，EOT: 00000100</li></ul></li><li><p>透明传输</p><ul><li>“一种实际存在的事物却又看起来不存在一样”</li><li>“透明”在计算机领域是非常重要的一个术语</li><li>“即是控制字符在帧数据中，但是要当做不存在的去处理”</li><li>数据中也出现了控制字符，对数据中的控制字符进行特殊处理，转义</li><li>“\n”、“\t”等控制字符，编程语言中“\”一般为转义字符，“\” 、“\\”</li></ul></li><li><p>差错监测</p><ul><li>数据链路层负责起“差错监测”的工作</li><li>物理层只管传输比特流，无法控制是否出错</li><li>循环冗余校验码CRC<ul><li>检测数据传输或者保存后可能出现的错误</li><li>一种根据传输或保存的数据而产生固定位数校验码的方法</li><li>生成的数字计算出来并且附加到数据后面</li><li>模“2”除法<ul><li>与算术除法类似，但除法不借位，实际是“异或”操作</li><li>模“2”除法是二进制下的除法</li><li>0 xor 0 = 0，0 xor 1 = 1，1 xor 0 = 1，1 xor 1 = 0</li></ul></li><li>检测流程<ul><li>选定一个用于校验的多项式G(x)，并在数据尾部添加r个0</li><li>将添加r个0后的数据，使用模“2”除法除以多项式的位串</li><li>得到的余数填充在原数据r个0的位置得到可校验的位串</li><li>例子1：使用CRC计算101001的可校验位串<ul><li>计算过程有点难！！！</li></ul></li></ul></li><li>数据链路层只进行数据的检测，不进行纠正，一旦出错会丢弃</li><li>CRC的错误检测能力与位串的阶数r有关</li></ul></li><li>奇偶校验码<ul><li>检测机制：在比特流最后一位加上一位（1或者0），（所有比特流中的1相加）偶数加0，奇数加1 </li><li>缺陷：出错两位，奇偶校验码校测不到错误</li></ul></li></ul></li></ul><h3 id="3-2-最大传输单元MTU"><a href="#3-2-最大传输单元MTU" class="headerlink" title="3.2 最大传输单元MTU"></a>3.2 最大传输单元MTU</h3><ul><li>MTU<ul><li>数据链路层的数据帧也不是无限大的</li><li>最大传输单元MTU(Maximum Transmission Unit)</li><li>数据帧过大或过小都会影响传输的效率</li><li>总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延</li><li>以太网MTU一般为1500字节</li></ul></li><li>路径MTU<ul><li>路径MTU由链路中MTU的最小值决定</li><li>木桶效应</li></ul></li></ul><h3 id="3-3-以太网协议详解"><a href="#3-3-以太网协议详解" class="headerlink" title="3.3 以太网协议详解"></a>3.3 以太网协议详解</h3><ul><li><p>MAC地址</p><ul><li>MAC地址（Media Access Control Address）直译为媒体存取控制位址，也称为局域网地址（LAN Address）</li><li>每一个设备都拥有唯一的MAC地址</li><li>MAC地址（物理地址、硬件地址）</li><li>MAC地址共48位，使用十六进制表示</li><li>ipconfig/all 查看本机所有MAC地址 ，30-B4-9E-ED-85-CA</li></ul></li><li><p>以太网协议</p><ul><li>以太网是一种应用于数据链路层的协议</li><li>以太网(Ethernet)是一种使用广泛的局域网技术</li><li>使用以太网可以完成相邻设备的数据帧传输</li><li>以太网数据格式<ul><li>类型：0800： IP数据报，0806： ARP请求/应答，8035： RARP请求/应答</li></ul></li></ul><table><thead><tr><th>目的地址（MAC地址) 单位字节</th><th>源地址</th><th>类型</th><th>帧数据</th><th>CRC校验码</th></tr></thead><tbody><tr><td>6</td><td>6</td><td>2</td><td>46-1500</td><td>4</td></tr></tbody></table><ul><li>MAC地址表，路由器持有</li></ul><table><thead><tr><th>MAC地址</th><th>硬件接口</th></tr></thead><tbody><tr><td>31-B4-9E-ED-85-CA</td><td>接口1</td></tr><tr><td>32-B4-9E-ED-85-CB</td><td>接口2</td></tr><tr><td>33-B4-9E-ED-85-CC</td><td>接口4</td></tr></tbody></table><ul><li>A终端通过路由器发送数据到C终端的过程<ul><li>A通过网卡发出数据帧</li><li>数据帧到达路由器，路由器取出前6字节（目的MAC地址）</li><li>路由器匹配MAC地址表，找到对应的网络接口</li><li>路由器往该网络接口发送数据帧</li><li>如果MAC地址表没有匹配成功</li><li>路由器将广播A的数据包到除A以外的端口</li><li>路由器检查MAC地址表，发现没有C的信息</li><li>路由器将收到来自B、 C的回应，并将地址记录</li></ul></li><li>以太网协议只提供相邻物理节点传输，跨设备是无法传输的，需要借助网络层</li></ul></li></ul><h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h2><h3 id="4-1-网络层的主要功能"><a href="#4-1-网络层的主要功能" class="headerlink" title="4.1 网络层的主要功能"></a>4.1 网络层的主要功能</h3><ul><li>网络层：数据路由（决定数据在网络的路径）</li><li>数据链路层只能解决相邻物理节点传输</li></ul><h3 id="4-2-IP协议详解"><a href="#4-2-IP协议详解" class="headerlink" title="4.2 IP协议详解"></a>4.2 IP协议详解</h3><ul><li><p>虚拟互联网络</p><ul><li>物理设备通过使用IP协议，屏蔽了物理网络之间的差异</li><li>实际的计算机网络是错综复杂的</li><li>当网络中的主机使用IP协议连接时，则无需关注网络细节</li><li>IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发</li><li>IP协议使得复杂的实际网络变为一个虚拟互连的网络</li><li>IP协议解决了在虚拟网络中数据报传输路径的问题</li></ul></li><li><p>IP协议</p><ul><li>IP地址<ul><li>MAC地址： 30-B4-9E-ED-85-CA：00110000-11000020-11101101-01000101-11001010<ul><li>48位，16进制表示</li><li>唯一，不可变</li></ul></li><li>P地址： 192.168.11.11：11000000.10101000.00001011.00001011<ul><li>32位，常分成4个8位，一般采用点分十进制表示，共可以表示 2^32 = 4294961296</li><li>IP地址常使用<strong>点分十进制</strong>来表示(0<del>255.0</del>255.0<del>255.0</del>255)，例如：255.255.255.255</li><li>受网络环境影响会发生改变</li></ul></li></ul></li><li>IP报文格式</li></ul><table><thead><tr><th>协议层</th><th>数据格式</th></tr></thead><tbody><tr><td>物理层</td><td>001010101001110110101010101010…10101010101010101010101010101</td></tr><tr><td>数据链路层</td><td>【帧首部 】【“帧”的数据】 【帧尾部】</td></tr><tr><td>网络层</td><td>【IP首部】【 IP数据报的数据】</td></tr></tbody></table><ul><li>IP报文头部各个参数的作用</li></ul><table><thead><tr><th>4位版本</th><th>4位首部长度</th><th>8位服务类型(TOS)</th><th>16位总长度(字节)</th></tr></thead><tbody><tr><td>16位标识</td><td>3位标志</td><td>13位片偏移</td><td></td></tr><tr><td>8位生存时间(TTL)</td><td>8位协议</td><td>16位首部校验和</td><td></td></tr><tr><td>32位源IP地址</td><td></td><td></td><td></td></tr><tr><td>32位目的IP地址</td><td></td><td></td><td></td></tr><tr><td>选项options（若有）</td><td></td><td></td><td></td></tr><tr><td>IP数据</td><td></td><td></td><td></td></tr></tbody></table><ul><li>每一行32位，第六行可选，所以IP报文头部至少占4×5=20个字节</li><li>第一行<ul><li>版本：占4位，指的是IP协议的版本，通信双方的版本必须一致，当前主流版本是4，即IPv4，也有IPv6</li><li>首部位长度：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字”（4个字节），也即是IP首部最大长度为60字节</li><li>8位服务类型(TOS)：TOS包括共8位，包括3 bit的优先权字段（取值可以从000-111所有值），4 bit的TOS子字段和1 bit未用位但必须置0。</li><li>总长度：占16位，最大数值为65535，表示的是IP数据报总长度（IP首部+IP数据），数据链路层MTU,如果IP数据报的数据多余“帧”的数据，需要分片处理</li></ul></li><li>第二行<ul><li>16位标识：IP协议内部使用</li><li>3位标志：标记是否可以分片</li><li>13位片偏移：第几个分片</li></ul></li><li>第三行<ul><li>TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文，避免数据在网络无限传输</li><li>协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP等）<ul><li>协议名 ICMP、 IGMP、 IP 、TCP、 UDP、 OSPF …，字段值 1 、2 、4 、6、 17、 89 …</li></ul></li><li>首部校验和：占16位，校验IP首部是否有出错</li></ul></li><li>源IP地址：发送方</li><li>目的IP地址：接收方</li></ul></li></ul><h3 id="4-3-IP协议的转发流程"><a href="#4-3-IP协议的转发流程" class="headerlink" title="4.3 IP协议的转发流程"></a>4.3 IP协议的转发流程</h3><ul><li><p>逐跳(hop-by-hop)</p></li><li><p>路由表</p><ul><li>计算机或者路由器都拥有路由表</li><li>MAC地址表和路由表</li></ul><table><thead><tr><th>MAC地址</th><th>硬件接口</th><th></th><th>目的IP地址</th><th>下一跳IP地址</th></tr></thead><tbody><tr><td>A</td><td>E1</td><td></td><td>IP1</td><td>IP4</td></tr><tr><td>B</td><td>E2</td><td></td><td>IP2</td><td>IP5</td></tr><tr><td>C</td><td>E3</td><td></td><td>IP3</td><td>IP6</td></tr></tbody></table></li><li><p>转发流程：网络层</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnl5pjkrqtj30nm07gjsc.jpg" alt=""></p><ul><li>A将数据报发送给E</li><li>A发出目的地为C的IP数据报， 查询路由表发现下一跳为E</li><li>E查询路由表发现下一跳为F，将数据报发送给F</li><li>F查询路由表发现目的地C直接连接，将数据报发送给C</li></ul></li><li><p>IP数据报每一跳的IP地址始终不变</p></li><li><p>数据帧每一跳的MAC地址都在变化</p></li></ul><h3 id="4-4-ARP协议与RARP协议"><a href="#4-4-ARP协议与RARP协议" class="headerlink" title="4.4 ARP协议与RARP协议"></a>4.4 ARP协议与RARP协议</h3><ul><li>ARP协议<ul><li>ARP(Address Resolution Protocol)地址解析协议，通过IP地址查找MAC地址</li><li>ARP缓存表：[IP地址, MAC地址] 如：192.168.83.254 —00-50-56-e0-33-40</li><li>ARP缓存表缓存了IP地址到硬件地址之间的映射关系</li><li>ARP缓存表是ARP协议和RARP协议运行的关键</li><li>ARP缓存表中的记录并不是永久有效的，有一定的期限</li><li><strong>arp -a</strong> :查看ARP缓存表</li><li>数据报格式，共28个字节，封装在数据链路层里，用于网络层，【类型0806 ，ARP请求/应答 ，PAD】<ul><li>硬件类型，2位</li><li>协议类型 ，2位</li><li>标记 ，24</li><li>发送端 以太网地址 ，6位</li><li>发送端 IP地址 ，4位</li><li>目的端 以太网地址 ，6位</li><li>目的端 IP地址，4位</li></ul></li></ul></li><li>RARP协议<ul><li>RARP(Reverse Address Resolution Protocol)逆地址解析协议</li><li>数据链路层MAC48位地址–》网络层IP32位地址</li></ul></li><li>ARP和RARP的操作对程序员是透明的</li><li>(R)ARP协议是TCP/IP协议栈里面基础的协议</li><li>理解(R)ARP协议有助于理解网络分层的细节</li><li>转发流程：网络层+数据链路层+物理层<ul><li>第一步：A-&gt;E<ul><li>A发出目的地为C的IP数据报， 查询路由表发现下一跳为E</li><li>A将IP数据报交给数据链路层，并告知目的MAC地址是E</li><li>数据链路层填充源MAC地址A和目的MAC地址E</li><li>数据链路层通过物理层将数据发送给E</li></ul></li><li>第二步：E–&gt;F<ul><li>E的数据链路层接收到数据帧， 把帧数据交给网络层</li><li>E查询路由表， 发现下一跳为F</li><li>E把数据报交给数据链路层， 并告知目的MAC地址为F</li><li>E的数据链路层封装数据帧并发送</li></ul></li><li>第三步：F–&gt;C<ul><li>F的数据链路层接收到数据帧， 把帧数据交给网络层</li><li>F查询路由表， 发现下一跳为C</li><li>F把数据报交给数据链路层，并告知目的MAC地址为C</li><li>F的数据链路层封装数据帧并发送</li></ul></li></ul></li></ul><h3 id="4-5-IP地址的分类"><a href="#4-5-IP地址的分类" class="headerlink" title="4.5 IP地址的分类"></a>4.5 IP地址的分类</h3><ul><li><p>IP地址长度为32位，常分成4个8位，常使用点分十进制来表示(0<del>255.0</del>255.0<del>255.0</del>255)，2^32 = 4294961296</p></li><li><p>直接对42亿多个IP地址规划和分配IP地址非常麻烦</p></li><li><p>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=</p></li><li><p>分类的IP地址</p><ul><li>网络号 <ul><li>网络号的位数直接决定了可以分配的网络数（计算方法=2^网络号位数-特殊网络号数）</li></ul></li><li>主机号<ul><li>主机号的位数则决定了网络中最大的主机数（计算方法=2^主机号位数-特殊主机号数）</li></ul></li></ul><table><thead><tr><th>IP类型</th><th>组成</th><th>最小网络号</th><th>最大网络号</th><th>子网数量(理想)</th><th>最小主机号</th><th>最大主机号</th><th>主机数量</th></tr></thead><tbody><tr><td>A</td><td>8位网络号(0开头）+24位主机号</td><td>0(00000000)</td><td>127(01111111)</td><td>2^7=128</td><td>0.0.0</td><td>255.255.255</td><td>2^24=16,777,216</td></tr><tr><td>B</td><td>16位网络号（10开头）+16位主机号</td><td>128(100000000).0</td><td>191(10111111).255</td><td>2^14(6+8)=16,384</td><td>0.0</td><td>255.255</td><td>2^16=65536</td></tr><tr><td>C</td><td>24位网络号（110开头）+8位主机号</td><td>192(110000000).0.0</td><td>223(11011111).255.255</td><td>2^21(5+8+8)=2,097,252</td><td>0</td><td>255</td><td>2^8=256</td></tr><tr><td>D</td><td>组播地址（1110开头）</td><td>224(111000000).0.0.0</td><td>239(11101111).255.255.255</td><td>2^4=16</td><td></td><td></td><td></td></tr><tr><td>E</td><td>保留以后再用（1111开头）</td><td>240(111110000).0.0.0</td><td>225(11111111).255.255.255</td><td>2^4=16</td><td></td><td></td><td></td></tr></tbody></table><ul><li>特殊的网络号<ul><li>A类地址网络段后7位全1(01111111:127)表示回环地址</li><li>A类地址网络段全0(00000000)表示特殊网络</li><li>B类地址网络段(10000000.00000000:128.0)是不可使用的</li><li>C类地址网络段(192.0.0)是不可使用的</li><li>上表中的A类IP的子网可用数量为：2^7-2，B类:2^14-1，C类：2^21-1</li></ul></li><li>特殊的主机号<ul><li>主机号为全1表示广播地址，向当前网络段所有主机发消息，例如：1.0.0.0</li><li>主机号全0表示当前网络段，不可分配为特定主机，例如：1.255.255.255</li><li>上表中A\B\C的可用主机号数量为：2^24-2、2^16-2、2^8-2</li></ul></li><li>127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。localhost是个域名</li><li>如何判断一个IP属于哪一类IP地址<ul><li>取出首八位：</li><li>A类：(0,127) / 0xxxxxxx，</li><li>B类：[128,19]) / 10xxxxxx，</li><li>C类：[192,223] / 110xxxxx</li></ul></li></ul></li></ul><h3 id="4-6-IP地址的划分子网"><a href="#4-6-IP地址的划分子网" class="headerlink" title="4.6 IP地址的划分子网"></a>4.6 IP地址的划分子网</h3><ul><li>某公司拥有100名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？<ul><li>C类可分配的主机数量为2^8-2=254个</li></ul></li><li>某公司拥有256名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？<ul><li>B类可分配的主机数量为2^16-2=65534个</li><li>造成了很大的地址空间浪费</li></ul></li><li>子网号<ul><li>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=</li><li>例如一个C类IP 193.10.10.0 = 24位网络号（110开头）+8位主机号 </li><li>主机号段为.0=.00000000</li><li>将主机号段最高位分成 <strong>.0</strong>0000000 和  <strong>.1</strong>0000000 两个子网</li><li><strong>.0</strong>0000000 子网可以表示的主机范围为：(0) <strong>.0</strong>0000000 – (127) <strong>.0</strong>1111111 </li><li><strong>.1</strong>0000000 子网可以表示的主机范围为：(128) <strong>.1</strong>0000000 – (255) <strong>.1</strong>1111111 </li><li>某公司拥有100名员工，每人配备一个计算机，就可以申请C类IP的子网从而可以充分利用IP的数量</li></ul></li><li>子网掩码<ul><li>子网号这么多，有没有办法快速判断某个IP的网络子网掩码号？</li><li>子网掩码由连续的1和连续的0组成</li><li>子网掩码和IP地址一样，都是32位</li><li>某一个子网的子网掩码具备网络号位数个连续的1</li><li>A类IP的子网掩码：255.0.0.0 </li><li>B类IP的子网掩码：255.255.0.0 </li><li>C类IP的子网掩码：255.255.255.0</li><li>划分子网的子网掩码：子网掩码-子网号-主机号<ul><li>例如：193.10.10.0 = 24位网络号（110开头）+1位子网号+7位主机号 <ul><li>子网掩码为：255.255.255.128（24+1个1和7个0组成）</li><li>求 193.10.10.6 这个IP对应的子网号</li><li>第一步IP对应的二进制：            193.10.10.6 – 11000001.00001010.00001010.00000110</li><li>第二步子网掩码对应的二进制：255.255.255.128 – 11111111.11111111.11111111.10000000</li><li>第三步：一二步与运算得到子网号 11000001.00001010.00001010.00000000  – 193.10.10.0</li></ul></li></ul></li></ul></li></ul><h3 id="4-7-无分类地址CIDR"><a href="#4-7-无分类地址CIDR" class="headerlink" title="4.7 无分类地址CIDR"></a>4.7 无分类地址CIDR</h3><ul><li><p>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】</p></li><li><p>子网划分相对复杂所以出现了CIDR</p></li><li><p>无类域内路由选择（Classless Inter-Domain Routing）</p></li><li><p>CIDR中没有A、 B、 C类网络号、和子网划分的概念</p></li><li><p>CIDR将网络前缀相同的IP地址称为一个“CIDR地址块”</p></li><li><p>IP地址=【网络前缀+主机号】</p></li><li><p>网络前缀是任意位数的</p></li><li><p>CIDR采用斜线记法来表示一个IP地址</p><ul><li>193.10.10.129/25==11000001.00001010.00001010.10000001</li><li>25表示网络前缀有25位，主机位有7位</li><li>相比原来子网划分更加灵活</li><li>超网-》子网</li></ul><table><thead><tr><th>CIDR前缀长度</th><th>掩码点分十进制</th><th>地址数</th></tr></thead><tbody><tr><td>/13</td><td>255.248.0.0</td><td>2^19=512K</td></tr><tr><td>/14</td><td>255.252.0.0</td><td>2^18=256K</td></tr><tr><td>/15</td><td>255.254.0.0</td><td>2^17=128K</td></tr><tr><td>/16</td><td>255.255.0.0</td><td>2^16=64K</td></tr><tr><td>/17</td><td>255.255.128.0</td><td>2^15=32K</td></tr><tr><td>/18</td><td>255.255.192.0</td><td>2^14=16K</td></tr><tr><td>/19</td><td>255.255.224.0</td><td>2^13=8K</td></tr></tbody></table></li></ul><h3 id="4-8-网络地址转换NAT技术"><a href="#4-8-网络地址转换NAT技术" class="headerlink" title="4.8 网络地址转换NAT技术"></a>4.8 网络地址转换NAT技术</h3><ul><li><p>IPv4最多只有40+亿个IP地址</p></li><li><p>早期IP地址的不合理规划导致IP号浪费</p></li><li><p>网络拓扑：边缘部分：家庭，多个设备如何复用同一个IP地址的</p></li><li><p>内网地址</p><ul><li>内部机构使用</li><li>避免与外网地址重复</li><li>三类内网地址<ul><li>10.0.0.0~10.255.255.255（支持千万数量级设备）</li><li>172.16.0.0~172.31.255.255（支持百万数量级设备）</li><li>192.168.0.0~192.168.255.255（支持万数量级设备）</li></ul></li></ul></li><li><p>外网地址</p><ul><li>全球范围使用</li><li>全球公网唯一</li></ul></li><li><p>网络地址转换NAT技术</p><ul><li>内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？</li><li>网络地址转换NAT(Network Address Translation)</li><li>NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中</li><li>NAT减缓了IP地址的消耗，但是增加了网络通信的复杂度</li><li>端口(Port)号</li><li>端口映射表：NA(P)T表</li></ul><table><thead><tr><th>数据传输方向</th><th>旧的地址和端口号</th><th>新的地址与端口号</th></tr></thead><tbody><tr><td>出</td><td>92.168.2.11:6666</td><td>173.21.59.10:16666</td></tr><tr><td>出</td><td>192.168.2.10:7777</td><td>173.21.59.10:17777</td></tr><tr><td>入</td><td>173.21.59.10:16666</td><td>192.168.2.11:6666</td></tr><tr><td>入</td><td>173.21.59.10:17777</td><td>192.168.2.10:7777</td></tr></tbody></table></li></ul><h3 id="4-9-ICMP协议详解"><a href="#4-9-ICMP协议详解" class="headerlink" title="4.9 ICMP协议详解"></a>4.9 ICMP协议详解</h3><ul><li><p>网际控制报文协议（Internet Control Message Protocol）</p></li><li><p>ICMP协议可以报告错误信息或者异常情况，辅助IP协议</p></li><li><p>网络层  【IP首部】-【 IP数据报的数据】</p></li><li><p>【IP首部】协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP、ICMP等）</p></li><li><p>ICMP数据封装在【 IP数据报的数据】里面</p></li><li><p>【ICMP报文首部】-【 ICMP报文数据】</p></li><li><p>8位类型+ 8位代码 +16位校验和+ICMP报文数据</p></li><li><p>分类</p><ul><li>差错报告报文 </li><li>询问报文</li></ul><table><thead><tr><th>ICMP报文种类</th><th>类型的值</th><th>报文类型</th><th>具体代码</th></tr></thead><tbody><tr><td>差错报告报文</td><td>3 (终点不可达）</td><td>网络不可达 / 主机不可达</td><td>0/1</td></tr><tr><td></td><td>5 (重定向）</td><td>对网络重定向 / 对主机重定向</td><td>0/1</td></tr><tr><td></td><td>11</td><td>传输超时</td><td>-</td></tr><tr><td></td><td>12</td><td>坏的IP头 / 缺少其他必要参数</td><td>0/1</td></tr><tr><td>询问报文</td><td>0或8</td><td>回送(Echo)请求或应答</td><td>-</td></tr><tr><td></td><td>13或14</td><td>时间戳(Timestamp)请求或应答</td><td>-</td></tr></tbody></table></li><li><p>ICMP报文的应用</p><ul><li>Ping应用<ul><li>询问报文-0或8 - 回送(Echo)请求或应答</li><li>Ping回环地址127.0.0.1,如果失败计算机的协议栈可能出问题，需要重装操作系统</li><li>Ping网关地址，如果失败，网关路由器可能出问题</li><li>Ping远端地址，如果失败，家到ISP服务商之间可能出问题了，需要找服务商解决</li></ul></li><li>Traceroute应用<ul><li>Traceroute可以探测IP数据报在网络中走过的路径</li><li>【IP首部】TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文–ICMP终点不可达差错报文</li><li>命令：Windows：tracert github.com ，Mac：traceroute to github.com <ul><li><strong>221.179.159.20来自北京市北京 移动</strong></li><li><strong>111.24.3.17来自 移动</strong></li><li><strong>223.119.2.21来自香港 移动</strong></li><li><strong>52.93.11.39来自新加坡 亚马逊云</strong></li></ul></li></ul></li></ul></li></ul><h3 id="4-10-网络层的路由概述"><a href="#4-10-网络层的路由概述" class="headerlink" title="4.10 网络层的路由概述"></a>4.10 网络层的路由概述</h3><ul><li><p>路由表问题</p><ul><li>路由表是怎么来的</li><li>下一跳地址是唯一的吗？</li><li>下一跳地址是怎么来的？</li><li>下一跳地址是最佳的吗？</li><li>路由器怎么多，他们是怎么协同工作的？</li><li>需要一个好的算法去解决这些事情</li></ul></li><li><p>路由算法</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171345.jpg" alt=""></p><ul><li>每一条边表示一条网络路径</li><li>每一顶点表示一个网络、路由器或计算机</li><li>路由算法实际上是图论的算法</li><li>网络环境复杂，路由算法要比图论的算法要复杂</li><li>路由算法具备哪些特性<ul><li>算法是正确的、 完整的</li><li>算法在计算上应该尽可能的简单</li><li>算法可以适应网络中的变化</li><li>算法是稳定的和公平的</li></ul></li></ul></li></ul><h3 id="4-11-自治系统-AS"><a href="#4-11-自治系统-AS" class="headerlink" title="4.11 自治系统(AS)"></a>4.11 自治系统(AS)</h3><ul><li>对互联网进行划分<ul><li>互联网的规模是非常大的</li><li>互联网环境是非常复杂的</li><li>自治系统(Autonomous System)</li><li>自治系统内部路由的协议称为：内部网关协议(RIP、 OSPF)</li><li>自治系统外部路由的协议称为：外部网关协议(BGP)</li><li>两个内部网关协议需要通过外部网关协议进行通讯</li></ul></li><li>一个自治系统(AS)是处于一个管理机构下的网络设备群</li><li>AS内部网络自行管理， AS对外提供一个或者多个出（入）口</li></ul><h3 id="4-12-内部网关路由协议之RIP协议"><a href="#4-12-内部网关路由协议之RIP协议" class="headerlink" title="4.12 内部网关路由协议之RIP协议"></a>4.12 内部网关路由协议之RIP协议</h3><ul><li><p>距离矢量(DV)算法</p><ul><li>DV=Distance vector</li><li>每一个节点使用两个向量𝐷𝑖和S𝑖</li><li>𝐷𝑖描述的是当前节点到别的节点的距离</li><li>S𝑖描述的是当前节点到别的节点的下一节点</li><li>每一个节点与相邻的节点交换向量𝐷𝑖和S𝑖的信息</li><li>每一个节点根据交换的信息更新自己的节点信息</li><li>算法实现过程<ul><li>todo</li></ul></li></ul></li><li><p>RIP协议的过程</p><ul><li>RIP(Routing Information Protocol)协议</li><li>RIP协议是使用DV算法的一种路由协议</li><li>RIP协议把网络的跳数(hop)作为DV算法的距离</li><li>RIP协议每隔30s交换一次路由信息</li><li>RIP协议认为跳数&gt;15的路由则为不可达路由</li><li>具体流程<ul><li>路由器初始化路由信息(两个向量𝐷𝑖和S𝑖)</li><li>对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）<ul><li>检索本地路由，将信息中新的路由插入到路由表里面</li><li>检索本地路由，对于下一跳为X的，更新为修改后的信息</li><li>检索本地路由，对比相同目的的距离，如果新信息的距离更小，则更新本地路由表</li></ul></li><li>如果3分钟没有收到相邻的路由信息，则把相邻路由设置为不可达(16跳)</li></ul></li></ul></li><li><p>RIP协议的优缺点</p><ul><li>故障信息传递慢</li><li>RIP协议：实现简单，开销很小</li><li>RIP协议：限制了网络的规模</li><li>RIP协议：“坏消息传的慢”，更新收敛时间过长</li></ul></li><li><p>Dijkstra（迪杰斯特拉）算法</p><ul><li>Dijkstra算法是著名的图算法</li><li>Dijkstra算法解决有权图从一个节点到其他节点的最短路径问题</li><li>“以起始点为中心，向外层层扩展”</li><li>最短路径问题<ul><li>初始化两个集合(S, U)（S为只有初始顶点点A的集合， U为其他顶点集合）</li><li>如果U不为空， 对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D<ul><li>将顶点D的纳入S集合</li><li>更新通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）</li><li>重复2步骤</li></ul></li><li>知道U集合为空，算法完成</li></ul></li></ul></li><li><p>内部网关路由协议之OSPF协议</p><ul><li>链路状态(LS)协议<ul><li>向所有的路由器发送消息</li><li>消息描述该路由器与相邻路由器的链路状态<ul><li>距离、时延、带宽</li></ul></li><li>只有链路状态发生变化时，才发送更新信息</li></ul></li><li>OSPF协议的过程<ul><li>OSPF(Open Shortest Path First：开放最短路径优先)</li><li>OSPF协议的核心是Dijkstra算法</li><li>向所有的路由器发送消息<ul><li>获得网络中的所有信息–&gt; “网络的完整拓扑”</li><li>也称为“链路状态数据库”</li><li>“链路状态数据库”是全网一致的</li><li>Dijkstra（迪杰斯特拉）算法</li></ul></li><li>消息描述该路由器与相邻路由器的链路状态<ul><li>OSPF协议更加客观、更加先进</li></ul></li><li>只有链路状态发生变化时，才发送更新信息<ul><li>减少了数据的交换，更快收敛</li></ul></li><li>路由器接入网络</li><li>路由器向邻居发出问候信息</li><li>与邻居交流链路状态数据库</li><li>广播和更新未知路由</li></ul></li><li>五种消息类型<ul><li>问候消息（Hello）</li><li>链路状态数据库描述信息</li><li>链路状态请求信息</li><li>链路状态更新信息</li><li>链路状态确认信息</li></ul></li></ul><table><thead><tr><th>RIP协议</th><th>OSPF协议</th></tr></thead><tbody><tr><td>从邻居看网络</td><td>整个网络的拓扑</td></tr><tr><td>在路由器之间累加距离</td><td>Dijkstra算法计算最短路径</td></tr><tr><td>频繁、周期更新，收敛很慢</td><td>状态变化更新，收敛很快</td></tr><tr><td>路由间拷贝路由信息</td><td>路由间传递链路状态，自行计算路径</td></tr></tbody></table></li></ul><h3 id="4-13-外部网关路由协议之BGP协议"><a href="#4-13-外部网关路由协议之BGP协议" class="headerlink" title="4.13 外部网关路由协议之BGP协议"></a>4.13 外部网关路由协议之BGP协议</h3><ul><li>BGP(Border Gateway Protocol: 边际网关协议)</li><li>BGP协议是运行在自制系统(AS)之间的一种协议</li><li>互联网的规模很大</li><li>AS内部使用不同的路由协议</li><li>AS之间需要考虑除网络特性以外的一些因素（政治、安全…）</li><li>BGP协议能够找到一条到达目的比较好的路由</li><li>BGP发言人(speaker)<ul><li>BGP并不关心内部网络拓扑</li><li>AS之间通过BGP发言人交流信息</li><li>BGP Speaker可以人为配置策略</li></ul></li></ul><h2 id="5-传输层"><a href="#5-传输层" class="headerlink" title="5.传输层"></a>5.传输层</h2><h3 id="5-1-传输层的主要功能"><a href="#5-1-传输层的主要功能" class="headerlink" title="5.1 传输层的主要功能"></a>5.1 传输层的主要功能</h3><ul><li><p>本质：跨设备的进程与进程的通信</p><ul><li>单机进程间通信方式：共享内存、Unix域套接字</li></ul></li><li><p>端口的概念</p><ul><li>使用端口(Port)来标记不同的网络进程</li><li>端口(Port)使用16比特位表示(0~65535)</li></ul><table><thead><tr><th>FTP</th><th>HTTP</th><th>HTTPS</th><th>DNS</th><th>TELNET</th></tr></thead><tbody><tr><td>21</td><td>80</td><td>443</td><td>53</td><td>23</td></tr></tbody></table></li></ul><h3 id="5-2-UDP协议详解"><a href="#5-2-UDP协议详解" class="headerlink" title="5.2 UDP协议详解"></a>5.2 UDP协议详解</h3><ul><li>UDP是一个非常简单的协议</li><li>UDP(User Datagram Protocol: 用户数据报协议)</li><li>数据报(Datagram)<ul><li>不合并 不拆分</li></ul></li><li>层次位置</li></ul><table><thead><tr><th>协议层</th><th>数据格式</th></tr></thead><tbody><tr><td>物理层</td><td>001010101001110110101010101010…10101010101010101010101010101</td></tr><tr><td>数据链路层</td><td>【帧首部 】【“帧”的数据】 【帧尾部】</td></tr><tr><td>网络层</td><td>【IP首部】【 IP数据报的数据】</td></tr><tr><td>传输层</td><td>【UDP首部】【 UDP数据报的数据(应用层数据)】</td></tr></tbody></table><ul><li>报文结构<ul><li>16位源端口号 + 16位目的端口号</li><li>16位UDP长度 + 16位UDP校验和</li><li>头部报文共8个字节</li><li>UDP数据</li><li>各个报文字段的意义<ul><li>16位源端口号<ul><li>源机器使用的网络进程</li></ul></li><li>16位目的端口号<ul><li>目的机器使用的进程</li></ul></li><li>16位UDP长度<ul><li>udp数据报的长度，最小是8个字节仅包括手部</li></ul></li><li>6位UDP校验和<ul><li>检测数据报在传输过程中是否出错</li></ul></li></ul></li></ul></li><li>UDP的特点<ul><li>UDP是无连接协议</li><li>UDP不能保证可靠的交付数据，“想发就发”，“无法保证数据在网络中是否丢失”</li><li>UDP是面向报文传输的</li><li>UDP没有拥塞控制</li><li>UDP的首部开销很小</li></ul></li></ul><h3 id="5-3-TCP报文详解"><a href="#5-3-TCP报文详解" class="headerlink" title="5.3 TCP报文详解"></a>5.3 TCP报文详解</h3><ul><li>TCP(Transmission Control Protocol: 传输控制协议)</li><li>TCP协议是计算机网络中非常复杂的一个协议</li><li>层次位置</li></ul><table><thead><tr><th>协议层</th><th>数据格式</th></tr></thead><tbody><tr><td>物理层</td><td>001010101001110110101010101010…10101010101010101010101010101</td></tr><tr><td>数据链路层</td><td>【帧首部 】【“帧”的数据】 【帧尾部】</td></tr><tr><td>网络层</td><td>【IP首部】【 IP数据报的数据】</td></tr><tr><td>传输层</td><td>【TCP首部】【 TCP数据报的数据 】</td></tr></tbody></table><ul><li><p>特点</p><ul><li>TCP是面向连接的协议</li><li>TCP的一个连接有两端（点对点通信）</li><li>TCP提供可靠的传输服务</li><li>TCP协议提供全双工的通信</li><li>TCP是面向字节流的协议，合并、分拆</li></ul></li><li><p>报文结构</p><ul><li><p>16位源端口 16位目的端口</p></li><li><p>32位序号</p></li><li><p>32位确认号</p></li><li><p>数据偏移 +保留字段 +TCP标记 +窗口</p></li><li><p>16位校验和 + 16位紧急指针</p></li><li><p>以上行固定20个字节</p></li><li><p>TCP选项（可选）+ 填充</p></li><li><p>各个报文字段的意义</p><ul><li><p>16位源端口号</p><ul><li>源机器使用的网络进程</li></ul></li><li><p>16位目的端口号</p><ul><li>目的机器使用的进程</li></ul></li><li><p>32位序号</p><ul><li>0~2^32-1</li><li>面向字节流，一个字节一个序号</li><li>数据首字节序号</li></ul></li><li><p>32位确认号</p><ul><li>0~2^32-1</li><li>一个字节一个序号</li><li>期望收到数据的首字节序号</li><li>确认号为N：则表示N-1序号的数据都已经收到</li></ul></li><li><p>数据偏移</p><ul><li>占4位： 0~15，单位为： 32位字</li><li>数据偏离首部的距离</li></ul></li><li><p>保留字段</p></li><li><p>TCP标记</p><ul><li>占6位，每位各有不同意义</li><li>TCP三次握手和四次挥手会用到这里的标记为</li></ul><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>URG</td><td>Urgent: 紧急位， URG=1，表示紧急数据</td></tr><tr><td>ACK</td><td>Acknowledgement: 确认位， ACK=1，确认号才生效</td></tr><tr><td>PSH</td><td>Push: 推送位， PSH=1，尽快地把数据交付给应用层</td></tr><tr><td>RST</td><td>Reset: 重置位， RST=1，重新建立连接</td></tr><tr><td>SYN</td><td>Synchronization: 同步位， SYN=1 表示连接请求报文</td></tr><tr><td>FIN</td><td>Finish: 终止位， FIN=1 表示释放连接</td></tr></tbody></table></li><li><p>窗口</p><ul><li>占16位： 0~2^16-1</li><li>窗口指明允许对方发送的数据量</li><li>确认号是500，窗口大小1000，则501-1500是可以接收的</li></ul></li><li><p>16位校验和 </p></li><li><p>16位紧急指针</p><ul><li>紧急数据（URG=1）</li><li>指定紧急数据在报文的位置</li></ul></li><li><p>TCP选项（可选）</p><ul><li>最多40字节</li><li>支持未来的拓展</li></ul></li><li><p>填充</p></li></ul></li></ul></li></ul><h3 id="5-4-TCP可靠传输的基本原理"><a href="#5-4-TCP可靠传输的基本原理" class="headerlink" title="5.4 TCP可靠传输的基本原理"></a>5.4 TCP可靠传输的基本原理</h3><ul><li><p>停止等待协议</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171526.jpg" alt=""></p><ul><li>无差错的情况</li><li>出差错的情况<ul><li>发送的消息在路上丢失了</li><li>确认的消息在路上丢失了</li><li>确认的消息很久才到</li><li>超时重传</li><li>超时重传计时器<ul><li>每发送一个消息，都需要设置一个定时器</li></ul></li></ul></li><li>优缺点<ul><li>停止等待协议是最简单的可靠传输协议</li><li>停止等待协议对信道的利用效率不高</li></ul></li></ul></li><li><p>连续ARQ协议</p><ul><li>ARQ(Automatic Repeat reQuest：自动重传请求)</li><li>既然单个发送和确认效率低，可不可以批量发送和确认？</li><li>滑动窗口<ul><li>固定窗口内的字节批量发出，确认几个窗口就向后滑动几个</li></ul></li><li>累计确认<ul><li>只要收到某个消息的确认，那么这个消息之前的消息都确认了</li></ul></li></ul></li></ul><h3 id="5-5-TCP协议的可靠传输"><a href="#5-5-TCP协议的可靠传输" class="headerlink" title="5.5 TCP协议的可靠传输"></a>5.5 TCP协议的可靠传输</h3><ul><li>TCP的可靠传输基于连续ARQ协议</li><li>TCP的滑动窗口以字节为单位</li><li>滑动窗口<ul><li>【已经确认的字节序号】-【窗口】-【不允许发送的字节序号】</li><li>窗口中的字节数据：已发送未确认+可用窗口</li><li>如果没有按顺序收到窗口开始的确认，只收到中间的确认消息，窗口不滑动，执行超时重传</li><li>选择重传<ul><li>选择重传需要指定需要重传的字节</li><li>每一个字节都有唯一的32位序号</li><li>存储在TCP选项（可选）</li><li>最多40个字节，序号展4个字节，最多10个序号，每个序号表示的某段的起止位置，分段传输</li></ul></li></ul></li></ul><h3 id="5-6-TCP协议的流量控制"><a href="#5-6-TCP协议的流量控制" class="headerlink" title="5.6 TCP协议的流量控制"></a>5.6 TCP协议的流量控制</h3><ul><li>流量控制指让发送方发送速率不要太快</li><li>流量控制是使用滑动窗口来实现的</li><li>流量控制流程<ul><li><strong>窗口（rwnd）</strong>指明允许对方发送的数据量，Receiver window</li><li><strong>序号（seq）</strong>用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则TCP用序号对每个字节进行计数。序号是32bit的无符号数，序号到达232－1后又从0开始。sequence</li><li><strong>确认序号（ack）</strong> 是上次已成功收到数据字节序号加1。只有ACK标志位为1时确认序号字段才有效。acknowledgement </li><li><strong>确认位（ACK）</strong>  Acknowledgement: 确认位， ACK=1，确认号才生效</li><li>发送方：发送100字节的数据（seq=1, DATA）</li><li>发送方：发送100字节的数据（seq=101, DATA）</li><li>-&gt;接收方：确认200字节的数据，并告诉对方窗口为300（ACK=1, ack=201, rwnd=300）</li><li>发送方：发送100字节的数据（seq=301, DATA）</li><li>发送方：发送200字节的数据（seq=401, DATA）</li><li>-&gt;接收方：确认300字节的数据，并告诉对方窗口为0（ACK=1, ack=601, rwnd=0）</li><li>-&gt;接收方想再次接受数据需要发送窗口大小给发送方</li><li>如果这个窗口调整请求出错了会产生死锁吗</li><li>坚持定时器来避免死锁的情况</li></ul></li><li>坚持定时器<ul><li>当接收到窗口为0的消息，则启动坚持定时器</li><li>坚持定时器每隔一段时间发送一个窗口探测报文</li></ul></li></ul><h3 id="5-7-TCP协议的拥塞控制"><a href="#5-7-TCP协议的拥塞控制" class="headerlink" title="5.7 TCP协议的拥塞控制"></a>5.7 TCP协议的拥塞控制</h3><ul><li>一条数据链路经过非常多的设备</li><li>数据链路中各个部分都有可能成为网路传输的瓶颈</li><li>拥塞控制 VS 流量控制<ul><li>流量控制考虑点对点的通信量的控制</li><li>拥塞控制考虑整个网络，是全局性的考虑</li></ul></li><li>拥塞判断：报文超时可以认为是拥塞</li><li>拥塞控制算法<ul><li>慢启动算法<ul><li>由小到大逐渐增加发送数据量</li><li>每收到一个报文确认，就加一，例如：1 2 4 8 16 （指数增长）</li><li>慢启动阈值(ssthresh)</li></ul></li><li>拥塞避免算法<ul><li>维护一个拥塞窗口的变量，大于慢启动阈值</li><li>只要网络不拥塞，就试探着拥塞窗口调大，17 18 19</li><li>最大限度的利用管道</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171603.jpg" alt=""></p><h3 id="5-8-TCP连接的建立"><a href="#5-8-TCP连接的建立" class="headerlink" title="5.8 TCP连接的建立"></a>5.8 TCP连接的建立</h3><ul><li>TCP标记：占6位，每位各有不同意义</li></ul><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>SYN</td><td>Synchronization: 同步位， SYN=1 表示连接请求报文</td></tr><tr><td>ACK</td><td>Acknowledgement: 确认位， ACK=1，确认号才生效</td></tr><tr><td>FIN</td><td>Finish: 终止位， FIN=1 表示释放连接</td></tr><tr><td>seq</td><td>sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位</td></tr><tr><td>ack</td><td>acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位</td></tr></tbody></table><ul><li>三次握手建立TCP连接的过程<ul><li>接收方：监听</li><li>发送方：SYN=1, seq=x</li><li>发送方：同步已发送</li><li>接收方：SYN=1, ACK=1, seq=y, ack=x+ 1</li><li>接收方：同步已接受</li><li>发送方：ACK=1, seq=x+ 1, ack=y+1</li><li>发送方：建立连接</li><li>接收方：建立连接</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171620.jpg" alt=""></p><ul><li>为什么需要三次握手<ul><li>避免已经失效的连接请求报文传送到对方， 引起错误</li><li>避免两次建立连接时多次连接的情况</li><li>第三次握手时，发送方可以检查是否已经发起了第三次，如果已经发起了就忽略其它超时的连接</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801172608.jpg" alt=""></p><ul><li>TCP三次握手 <ul><li>使用TCP协议进行通信的双方必须先建立连接，然后才能开始传输数据。为了确保连接双方可靠性，在双方建立连接时, TCP协议采用了三次握手策略。</li><li>第一次握手:客户端发送带有SYN标志的连接请求报文段，然后进入SYN SEND )状态，等待服务端的确认。</li><li>第二次握手:服务端接收到客户端的SYN报文段后需要发送ACK信息对这个SYN报文段进行确认。同时，还要发送自己的SYN请求信息。服务端会将上述的信息放到一个报文段(SYN+ ACK报文段)中，一并发送给客户端此时服务端将会进入SYN RECV状态。</li><li>第三次握手:客户端接收到服务端的SYN+ ACK报文段后,会想服务端发送ACK确认报文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED状态,完成TCP三次握手。</li></ul></li><li>为什么需要第三次<ul><li>确认双方的收发能力，一共八个能力：自己的收发和对方的收发</li><li>第一次：服务端能知道客户端的发送和自己的接收能力正常</li><li>第二次：客户端能知道服务端的接收（第一次）和发送能力和自己的发送（第一次）能力和接收能力都正常</li><li>第三次：服务端能知道客户端的接收（第二次）和自己的发送（第二次）能力正常</li></ul></li></ul><h3 id="5-9-TCP连接的释放"><a href="#5-9-TCP连接的释放" class="headerlink" title="5.9 TCP连接的释放"></a>5.9 TCP连接的释放</h3><ul><li>TCP标记：占6位，每位各有不同意义</li></ul><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>SYN</td><td>Synchronization: 同步位， SYN=1 表示连接请求报文</td></tr><tr><td>ACK</td><td>Acknowledgement: 确认位， ACK=1，确认号才生效</td></tr><tr><td>FIN</td><td>Finish: 终止位， FIN=1 表示释放连接</td></tr><tr><td>seq</td><td>sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位</td></tr><tr><td>ack</td><td>acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位</td></tr></tbody></table><ul><li><p>四次释放</p><ul><li>四次释放TCP连接的过程<ul><li>发送方：FIN=1,seq=u</li><li>发送方：释放等待状态（FIN-WAIT-1）</li><li>接收方：ACK=1,seq=v,ack=u+1</li><li>发送方：释放等待状态（FIN-WAIT-2）</li><li>接收方：关闭等待状态（CLOSE-WAIT）</li><li>接收方：因为是被动关闭可能有未发出的数据需要继续完成发送</li><li>接收方：FIN=1,ACK=1,seq=w,ack=u+1</li><li>接收方：最后确认状态（LAST-ACK）</li><li>发送方：ACK=1,seq=u+1,ack=w+1</li><li>发送方：等待计时（TIME-WAIT）</li><li>接收方：关闭状态</li><li>发送方：关闭状态</li></ul></li><li>等待计时器<ul><li>等待时间：2MSL<ul><li>MSL(Max Segment Lifetime): 最长报文段寿命</li><li>MSL建议设置为2分钟</li></ul></li><li>为什么需要等待2MSL？<ul><li>确保发送方的ACK可以到达接收方</li><li>最后一个报文没有确认</li><li>接收方在 2MSL时间内没有收到，则接收方会重发确认释放请求数据报</li><li>确保当前连接的所有报文都已经过期</li></ul></li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171643.jpg" alt=""></p><h3 id="5-10-套接字与套接字编程"><a href="#5-10-套接字与套接字编程" class="headerlink" title="5.10 套接字与套接字编程"></a>5.10 套接字与套接字编程</h3><ul><li>使用端口(Port)来标记不同的网络进程，端口(Port)使用16比特位表示(0~65535)</li><li>网络套接字<ul><li>𝐼𝑃: 𝑃𝑜𝑟𝑡—— 套接字</li><li>套接字(Socket)是抽象概念，表示TCP连接的一端</li><li>通过套接字可以进行数据发送或接收</li><li>TCP连接由两个套接字组成：TCP={ 𝑆𝑜𝑐𝑘𝑒𝑡1: 𝑆𝑜𝑐𝑘𝑒𝑡2}= { {𝐼𝑃: 𝑃𝑜𝑟𝑡}  { 𝐼𝑃: 𝑃𝑜𝑟𝑡} }</li><li>客户端 –TCP连接—服务端</li><li>服务端<ul><li>创建套接字</li><li>绑定(bind)套接字</li><li>监听(listen)套接字</li><li>接收&amp;处理信息</li></ul></li><li>客户端<ul><li>创建套接字</li><li>连接套接字</li><li>发送信息</li></ul></li></ul></li><li>客户端-服务端编程<ul><li>Java、Pathy</li></ul></li><li>网络套接字 VS 域套接字<ul><li>域套接字：域套接字文件，不会经过tcp/ip协议簇，单机跨进程建议使用</li><li>网络套接字：单机和跨机都会在tcp/ip协议栈走一圈，单机跨进程不建议使用</li></ul></li></ul><h2 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6.应用层"></a>6.应用层</h2><h3 id="6-1-应用层概述"><a href="#6-1-应用层概述" class="headerlink" title="6.1 应用层概述"></a>6.1 应用层概述</h3><ul><li>传输层以及以下的层提供完整的通信服务</li><li>应用层是面向用户的一层</li><li>已有的应用层软件 ，面向传输层的编程</li><li>UDP<ul><li>多媒体信息分发<ul><li>视频 语音 实时信息</li></ul></li></ul></li><li>TCP<ul><li>可靠消息传输<ul><li>金融交易 可靠通讯 MQ</li></ul></li></ul></li></ul><h3 id="6-2-应用层主要功能"><a href="#6-2-应用层主要功能" class="headerlink" title="6.2 应用层主要功能"></a>6.2 应用层主要功能</h3><ul><li>应用进程的报文类型（请求报文、应答报文）</li><li>报文的语法、格式</li><li>应用进程发送数据的时机、规则</li><li>定义应用间通讯的规则</li></ul><h3 id="6-3-DNS服务详解"><a href="#6-3-DNS服务详解" class="headerlink" title="6.3 DNS服务详解"></a>6.3 DNS服务详解</h3><ul><li><p>DNS（Domain Name System: 域名系统）</p><ul><li>域：Domain，网络端，自治域</li><li>名：Name，IP地址</li></ul></li><li><p>主机的进程：Web 服务、网络存储服务、远程调用服务、邮件服务</p></li><li><p>IP地址+端口：14.215.177.39:80 、14.18.245.164:25、161.23.37.215:8810</p></li><li><p>DNS的功能</p><ul><li>使用域名帮助记忆<ul><li>点分十进制转为人容易记忆的单词</li><li>域名–&gt;DNS服务–&gt;IP</li></ul></li></ul></li><li><p>域名详解</p><ul><li><p>域名由点、字母和数字组成</p></li><li><p>点分割不同的域</p></li><li><p>域名可以分为顶级域、二级域、三级域</p><ul><li>例如 ：www(三级域).taobao(二级域).com(顶级域)</li><li>顶级域<ul><li>国家<ul><li>cn：中国</li><li>us：美国</li><li>uk：英国</li><li>ca：加拿大</li></ul></li><li>通用<ul><li>com：公司</li><li>net：网络服务机构</li><li>gov：政府机构</li><li>org：其它组织机构</li></ul></li></ul></li><li>二级域<ul><li>qq、taobao、baidu、alibaba、aliyun、amazon、google、facebook</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171724.jpg" alt=""></p></li></ul></li><li><p>域名服务器</p><ul><li>一般由国际或者机构搭建</li><li>查询过程<ul><li>本地查询，有就返回</li><li>没有去查根域名服务器</li><li>根域名服务器告诉去查哪一个顶级域名服务器</li><li>顶级域名服务器查到后告诉哪一个域名服务器</li><li>如果域名服务器没找到会返回根域名服务器再次查找</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171736.jpg" alt=""></p></li><li><p>DNS域名解析</p><ul><li>通常我们访问一一个网站，使用的是主机名或者域名来进行访问的。因为相对于IP地址(一组纯数字)，域名更容易让人记住。但TCP/IP协议使用的是IP地址进行访问的，所以必须有个机制或服务把域名转换成IP地址。DNS服务就是用来解决这个问题的，它提供域名到IP地址之间的解析服务。</li><li>用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户</li></ul></li><li><p>DNS解析流程</p><ul><li>就近原则</li><li>本机host文件</li><li>本机dns服务</li><li>远程13台根域名服务</li><li>转发模式</li></ul></li></ul><h3 id="6-4-DHCP协议详解"><a href="#6-4-DHCP协议详解" class="headerlink" title="6.4 DHCP协议详解"></a>6.4 DHCP协议详解</h3><ul><li>DHCP是什么<ul><li>DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)</li><li>DHCP是一个局域网协议</li><li>DHCP是应用UDP协议的应用层协议</li></ul></li><li>DHCP的功能<ul><li>即插即用联网<ul><li>临时IP，内网地址，转换为外网</li><li>租期，租期到了会回收</li></ul></li></ul></li><li>DHCP的工作机制<ul><li>DHCP服务器监听默认端口： 67</li><li>主机使用UDP协议广播DHCP发现报文</li><li>DHCP服务器发出DHCP提供报文</li><li>主机向DHCP服务器发出DHCP请求报文</li><li>DHCP服务器回应并提供IP地址</li></ul></li></ul><h3 id="6-5-HTTP协议详解"><a href="#6-5-HTTP协议详解" class="headerlink" title="6.5 HTTP协议详解"></a>6.5 HTTP协议详解</h3><ul><li><p>HTTP是什么</p><ul><li>HTTP(HyperText Transfer Protocol: 超文本传输协议)</li><li>超文本： “超级文本”， “带超链接文本”，“富文本”</li><li>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;，例如：<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></li><li>HTTP协议是可靠的数据传输协议<ul><li>Web内容：文本 图片 文件 动图 音频 视频</li></ul></li><li>C/S: 客户端—&gt;HTTP协议—-&gt; 服务端</li></ul></li><li><p>Web服务器</p><ul><li><p>硬件部分 ：阿里云虚拟服务器、迷你计算机</p></li><li><p>软件部分：Apache、Nginx</p><ul><li><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</li><li>Apache(音译为阿帕奇)是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。</li></ul></li><li><p>工作机制</p><ul><li>接受客户端连接 </li><li>接收请求报文 </li><li>处理请求</li><li>访问Web资源</li><li>构造应答</li><li>发送应答</li></ul></li><li><p>HTTP请求方法</p><ul><li>GET：获取指定的服务端资源</li><li>POST：提交数据到服务端</li><li>DELETE：删除指定的服务端资源</li><li>UPDATE：更新指定的服务端资源</li><li>PUT</li><li>OPTIONS</li><li>PATCH</li><li>HEAD</li><li>TRACE</li></ul></li><li><p>HTTP指定资源</p><ul><li>在地址中指定</li><li>在请求数据中指定</li></ul></li><li><p>HTTP请求报文</p><ul><li>[请求方法] [请求地址] [HTTP版本]</li><li>[请求头]</li><li>[请求内容]</li></ul></li><li><p>HTTP应答报文</p><ul><li>[HTTP版本] [状态码] [状态解释]</li><li>[应答头]</li><li>[应答内容]</li></ul></li><li><p>HTTP应答状态码</p><ul><li>状态码 含义<br>200<del>299 成功状态码<br>300</del>399 重定向状态码<br>400<del>499 客户端错误状态码<br>500</del>599 服务端错误状态码</li></ul><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>200~299</td><td>成功状态码</td></tr><tr><td>300~399</td><td>重定向状态码</td></tr><tr><td>400~499</td><td>客户端错误状态码</td></tr><tr><td>500~599</td><td>服务端错误状态码</td></tr></tbody></table></li></ul></li></ul><h3 id="6-6-HTTP工作的结构"><a href="#6-6-HTTP工作的结构" class="headerlink" title="6.6 HTTP工作的结构"></a>6.6 HTTP工作的结构</h3><ul><li>Web代理<ul><li>正向代理</li><li>反向代理</li></ul></li><li>CDN<ul><li>CDN（Content Delivery Network：内容分发网络）</li><li>多媒体内容</li></ul></li><li>爬虫<ul><li>增加网络拥塞</li><li>损耗服务器资源</li></ul></li></ul><h3 id="6-7-HTTPS协议详解"><a href="#6-7-HTTPS协议详解" class="headerlink" title="6.7 HTTPS协议详解"></a>6.7 HTTPS协议详解</h3><ul><li>敏感信息：账号密码、个人信息、账户金额、交易信息、敏感信息…</li><li>HTTPS(Secure)是安全的HTTP协议</li><li>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;，端口：443</li><li>工作机制<ul><li>加密模型<ul><li>对称加密：使用秘钥加密 ，使用秘钥解密，两个秘钥“一致”</li><li>非对称加密：两个秘钥“不一致”<ul><li>A、 B是拥有一定数学关系的一组秘钥</li><li>私钥：私钥自己使用，不对外公开</li><li>公钥：公钥给大家使用，对外公开</li></ul></li></ul></li><li>数字证书<ul><li>数字证书是可信任组织颁发给特定对象的认证</li><li>证书格式、版本号</li><li>证书序列号</li><li>签名算法</li><li>有效期</li><li>对象名称</li><li>对象公开秘钥</li></ul></li><li>SSL<ul><li>SSL(Secure Sockets Layer: 安全套接层)</li><li>SSL位于传输层与应用层之间</li><li>数据安全和数据完整</li><li>对传输层数据进行加密后传输</li></ul></li><li>HTTPS工作流程<ul><li>443端口的TCP连接</li><li>SSL安全参数握手</li><li>客户端发送数据</li><li>服务端发送数据</li></ul></li><li>SSL安全参数握手过程<ul><li>客户端：随机数1、协议版本、加密算法</li><li>服务端：确定加密算法、数字证书、随机数2</li><li>客户端：<ul><li>确认证书是否有效</li><li>生成随机数3</li><li>使用服务器的公钥加密随机数3</li></ul></li><li>根据随机数1、 2、 3和相同的算法生成对称秘钥</li><li>双方使用对称秘钥进行加密通信</li><li>综合使用对称加密、非对称加密</li><li>双方分别生成秘钥，没有经过传输</li></ul></li></ul></li></ul><h3 id="6-8-输入域名按下回车键的过程有哪些"><a href="#6-8-输入域名按下回车键的过程有哪些" class="headerlink" title="6.8 输入域名按下回车键的过程有哪些"></a>6.8 输入域名按下回车键的过程有哪些</h3><ul><li>域名解析<ul><li>客户端生成DNS的UDP报文</li><li>查询本机配置的DNS IP地址</li><li>UDP报文经本机协议栈发送出去</li><li>网络层 数据链路层 物理层</li><li>请求顶级域名服务器</li></ul></li><li>建立连接<ul><li>TCP三次握手</li><li>SSL握手 交换秘钥</li></ul></li><li>HTTP通信<ul><li>GET</li></ul></li><li>释放连接<ul><li>四次挥手 结束连接</li></ul></li></ul><h2 id="7-HTTP协议详解"><a href="#7-HTTP协议详解" class="headerlink" title="7.HTTP协议详解"></a>7.HTTP协议详解</h2><h3 id="7-1-浏览器背后的故事"><a href="#7-1-浏览器背后的故事" class="headerlink" title="7.1 浏览器背后的故事"></a>7.1 浏览器背后的故事</h3><ul><li><a href="http://www.basedev.cn/">http://www.basedev.cn/</a></li><li>用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户</li><li>HTTP<ul><li>超文本传输协议(HTTP)是一-种通信协议， 它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器</li><li>HTTP是- -个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展</li></ul></li><li>Web与HTTP<ul><li>WEB是一种基于超文本和HTTP的、 全球性的、动态交互的、跨平台的分布式图形信息系统</li><li>建立在Internet上的一种网络服务，为浏览者在Internet.上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超，级链接将Internet上的信息节点组织成一个互为关联的网状结构</li></ul></li></ul><h3 id="7-2-HTTP协议的前世今生"><a href="#7-2-HTTP协议的前世今生" class="headerlink" title="7.2 HTTP协议的前世今生"></a>7.2 HTTP协议的前世今生</h3><ul><li>1990年10月万维网之父TimBerners-Lee最早提出了HTTP协议</li><li>1991年HTTP0.9诞生</li><li>1996年5月HTTP1.0发布</li><li>1997年1月HTTP1.1发布</li><li>2015年5月HTTP2.0提出</li><li>HTTP3.0，QUIC协议</li></ul><h3 id="7-3-透过TCP-IP看HTTP"><a href="#7-3-透过TCP-IP看HTTP" class="headerlink" title="7.3 透过TCP/IP看HTTP"></a>7.3 透过TCP/IP看HTTP</h3><ul><li>TCP/IP协议族<ul><li>TCP/IP协议其实是一-系列与互联网相关联的协议集 合起来的总称</li><li>分层管理是TCP/IP协议的重要特征</li></ul></li><li>应用层<ul><li>应用层一般是我们编写的应用程序,决定了向用户提供的应用服务。应用层可以通过系统调用与传输层进行通信。如: FTP、DNS、HTTP等。</li></ul></li><li>传输层<ul><li>传输层通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。</li><li>在传输层有两个性质不同的协议:TCP和UDP。</li></ul></li><li>网络层<ul><li>网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(传输路线)到达对方计算机，并把数据包传输给对方。</li></ul></li><li>链路层.<ul><li>链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件设备驱动、NIC (Network Interface Card,网络适配器)以及光纤等物理可见部分。硬件. 上的范畴均在链路层的作用范围之内。</li></ul></li><li>数据包的封装过程</li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnqxpcdpezj30ig0aqzm8.jpg" alt=""></p><ul><li>http数据传输过程<ul><li>发送端发送数据时，数据会从上层传输到下层，且每经过一层都会被打上该层的头部信息。</li><li>接收端接收数据时，数据会从下层传输到上层，传输前会把下层的头部信息删除.</li></ul></li></ul><h2 id="8-计算机网络实践"><a href="#8-计算机网络实践" class="headerlink" title="8.计算机网络实践"></a>8.计算机网络实践</h2><h3 id="8-1-网络嗅探工具"><a href="#8-1-网络嗅探工具" class="headerlink" title="8.1 网络嗅探工具"></a>8.1 网络嗅探工具</h3><ul><li><p>实现流程</p><ul><li>搭建服务基本框架</li><li>Python操作字节序列<ul><li>字节序<ul><li>255 = 00000000,11111111</li><li>大端字节序：高位在前，00000000,11111111<ul><li>网络，易读</li></ul></li><li>小端字节序：高位在后，11111111, 00000000<ul><li>主机，CPU对小端字节序处理效率高效</li></ul></li><li>计算机电路先处理低位字节效率比较高</li><li>人类习惯读写大端字节序</li></ul></li><li>格式字符<ul><li>%s 字符串，%d 整数，%x 十六进制，%f 浮点数</li><li>格式字符 C++/Python类型 标准大小（字节）</li><li>B-unsigned char/整数 1</li><li>H unsigned short/整数 2</li><li>L unsigned long/整数 4</li><li>s char[]/字节串 </li></ul></li></ul></li><li>实现IP报文解析器</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801173224.jpg" alt=""></p><ul><li>实现UDP报文解析器</li><li>实现TCP报文解析器</li></ul></li><li><p>网卡模式</p><ul><li>混杂模式 <ul><li>接受所有经过网卡设备的数据 </li></ul></li><li>非混杂模式<ul><li>只接受目的地址指向自己的数据</li></ul></li></ul></li><li><p>IP报文解析</p></li><li><p>TCP报文解析</p></li><li><p>UDP报文解析</p></li><li><p>从零到一实现HTTP服务器开发</p></li></ul><h2 id="9-关于我"><a href="#9-关于我" class="headerlink" title="9.关于我"></a>9.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p><p><a href="http://basedev.cn/" target="_blank" rel="noopener">个人网站 basedev.cn</a>  </p><p><a href="https://github.com/jaydroid1024" target="_blank" rel="noopener">Github</a></p><p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p><h2 id="10-参考"><a href="#10-参考" class="headerlink" title="10.参考"></a>10.参考</h2><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content" target="_blank" rel="noopener">重学操作系统 | 拉钩教育</a></p><p><a href="https://coding.imooc.com/class/package/355.html" target="_blank" rel="noopener">编程必备基础 | 慕课网</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> TCP/IP </tag>
            
            <tag> HTTP/HTTPS </tag>
            
            <tag> OSI七层模型 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筑基系列-Android基础知识小抄版（更新中...）</title>
      <link href="2021/07/31/android-base/"/>
      <url>2021/07/31/android-base/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="筑基系列-Android基础知识小抄版"><a href="#筑基系列-Android基础知识小抄版" class="headerlink" title="筑基系列-Android基础知识小抄版"></a>筑基系列-Android基础知识小抄版</h1><p>Android各版本对应JDK版本</p><table><thead><tr><th align="left">平台版本</th><th align="left">版本名称</th><th align="left">SDK版本</th><th align="left">市场占有率</th><th align="left">JDK版本</th></tr></thead><tbody><tr><td align="left">2.3.3 - 2.3.7</td><td align="left">Gingerbread</td><td align="left">10</td><td align="left">0.4%</td><td align="left">6</td></tr><tr><td align="left">4.0.3 - 4.0.4</td><td align="left">Ice Cream Sandwich</td><td align="left">15</td><td align="left">0.5%</td><td align="left">6</td></tr><tr><td align="left">4.1.x</td><td align="left">Jelly Bean</td><td align="left">16</td><td align="left">2.0%</td><td align="left">6</td></tr><tr><td align="left">4.2.x</td><td align="left">Jelly Bean</td><td align="left">17</td><td align="left">3.0%</td><td align="left">6</td></tr><tr><td align="left">4.3</td><td align="left">Jelly Bean</td><td align="left">18</td><td align="left">0.9%</td><td align="left">6</td></tr><tr><td align="left">4.4</td><td align="left">KitKat</td><td align="left">19</td><td align="left">13.4%</td><td align="left">6</td></tr><tr><td align="left">5.0</td><td align="left">Lollipop</td><td align="left">21</td><td align="left">6.1%</td><td align="left">7</td></tr><tr><td align="left">5.1</td><td align="left">Lollipop</td><td align="left">22</td><td align="left">20.2%</td><td align="left">7</td></tr><tr><td align="left">6.0</td><td align="left">Marshmallow</td><td align="left">23</td><td align="left">29.7%</td><td align="left">7</td></tr><tr><td align="left">7.0</td><td align="left">Nougat</td><td align="left">24</td><td align="left">19.3%</td><td align="left">7</td></tr><tr><td align="left">7.1</td><td align="left">Nougat</td><td align="left">25</td><td align="left">4.0%</td><td align="left">7</td></tr><tr><td align="left">8.0</td><td align="left">Oreo</td><td align="left">26</td><td align="left">0.5%</td><td align="left">8</td></tr></tbody></table><h1 id="1-Java"><a href="#1-Java" class="headerlink" title="1.Java"></a>1.Java</h1><h2 id="1-1-集合"><a href="#1-1-集合" class="headerlink" title="1.1 集合"></a>1.1 集合</h2><h4 id="1-1-1-ArrayList和LinkedList区别"><a href="#1-1-1-ArrayList和LinkedList区别" class="headerlink" title="1.1.1 ArrayList和LinkedList区别"></a>1.1.1 ArrayList和LinkedList区别</h4><ul><li><p><a href="http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/ArrayList.java" target="_blank" rel="noopener">ArrayList 源码</a></p></li><li><p><a href="http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/LinkedList.java" target="_blank" rel="noopener">LinkedList 源码</a></p></li><li><p>⾸先，他们的底层数据结构不同，ArrayList底层是基于数组实现的，LinkedList底层是基于链表实现的</p></li><li><p>由于底层数据结构不同，他们所适⽤的场景也不同，ArrayList更适合随机查找，LinkedList更适合删除和添加，查询、添加、删除的时间复杂度不同</p></li><li><p>另外ArrayList和LinkedList都实现了List接⼝，但是LinkedList还额外实现了Deque接⼝，所以LinkedList还可以当做队列来使⽤</p></li></ul><h4 id="1-1-2-HashMap的Put⽅法的⼤体流程"><a href="#1-1-2-HashMap的Put⽅法的⼤体流程" class="headerlink" title="1.1.2 HashMap的Put⽅法的⼤体流程"></a>1.1.2 HashMap的Put⽅法的⼤体流程</h4><ul><li><a href="http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/HashMap.java" target="_blank" rel="noopener">HashMap 源码1.8</a></li><li><a href="http://androidos.net.cn/android/7.1.1_r28/xref/libcore/ojluni/src/main/java/java/util/HashMap.java" target="_blank" rel="noopener">HashMap 源码1.7</a></li><li>根据Key通过哈希算法与与运算得出数组下标</li><li>如果数组下标位置元素为空，则将key和value封装为Entry对象（JDK1.7中是Entry对象，JDK1.8中是Node对象）并放⼊该位置</li><li>如果数组下标位置元素不为空，则要分情况讨论<ul><li>如果是JDK1.7，则先判断是否需要扩容，如果要扩容就进⾏扩容，如果不⽤扩容就⽣成Entry对象，并使⽤头插法添加到当前位置的链表中</li><li>如果是JDK1.8，则会先判断当前位置上的Node的类型，看是红⿊树Node，还是链表Node<ul><li>如果是红⿊树Node，则将key和value封装为⼀个红⿊树节点并添加到红⿊树中去，在这个过程中会判断红⿊树中是否存在当前key，如果存在则更新value</li><li>如果此位置上的Node对象是链表节点，则将key和value封装为⼀个链表Node并通过尾插法插⼊到链表的最后位置去，因为是尾插法，所以需要遍历链表，在遍历链表的过程中会判断是否存在当前key，如果存在则更新value，当遍历完链表后，将新链表Node插⼊到链表中，插⼊到链表后，会看当前链表的节点个数，如果⼤于等于8，那么则会将该链表转成红⿊树</li><li>将key和value封装为Node插⼊到链表或红⿊树中后，再判断是否需要进⾏扩容，如果需要就<br>扩容，如果不需要就结束PUT⽅法</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筑基系列-操作系统基础知识小抄版</title>
      <link href="2021/07/01/computer-os/"/>
      <url>2021/07/01/computer-os/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="筑基系列-操作系统基础知识小抄版"><a href="#筑基系列-操作系统基础知识小抄版" class="headerlink" title="筑基系列-操作系统基础知识小抄版"></a>筑基系列-操作系统基础知识小抄版</h1><blockquote><p>计算机基础知识筑基三部曲：</p><ul><li><p><strong><a href="https://juejin.cn/post/6991367806772052004" target="_blank" rel="noopener">第一部：筑基系列-计算机基础知识小抄版</a></strong></p><ul><li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li></ul></li><li><p><strong><a href="https://juejin.cn/post/6991385109509193764" target="_blank" rel="noopener">第二部：筑基系列-操作系统基础知识小抄版</a></strong></p><ul><li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li></ul></li><li><p><strong><a href="https://juejin.cn/post/6991397445251334151" target="_blank" rel="noopener">第三部：筑基系列-计算机网络基础知识小抄版</a></strong></p><ul><li>包括OSI七层模型各层详解、IP协议、TCP\IP协议、Http协议、DNS协议等</li></ul></li></ul></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1.操作系统概览">1.操作系统概览</a><ul><li><a href="#11-什么是操作系统">1.1 什么是操作系统</a></li><li><a href="#12-为什么需要操作系统">1.2 为什么需要操作系统</a></li><li><a href="#13-操作系统的基本功能">1.3 操作系统的基本功能</a></li><li><a href="#14-操作系统相关概念">1.4 操作系统相关概念</a></li></ul></li><li><a href="#2.进程管理">2.进程管理</a><ul><li><a href="#21-进程概述">2.1 进程概述</a></li><li><a href="#22-进程管理五状态模型">2.2 进程管理五状态模型</a></li><li><a href="#23-进程同步">2.3 进程同步</a></li><li><a href="#24-linux的进程管理">2.4 Linux的进程管理</a></li></ul></li><li><a href="#3.作业管理">3.作业管理</a><ul><li><a href="#31-进程调度">3.1 进程调度</a></li><li><a href="#32-死锁">3.2 死锁</a></li></ul></li><li><a href="#4.存储管理">4.存储管理</a><ul><li><a href="#41-计算机进行存储管理的必要性">4.1 计算机进行存储管理的必要性</a></li><li><a href="#42-内存的分配过程">4.2 内存的分配过程</a></li><li><a href="#43-内存的回收过程">4.3 内存的回收过程</a></li><li><a href="#44-进程的存储管理">4.4 进程的存储管理</a></li><li><a href="#45-虚拟内存">4.5 虚拟内存</a></li><li><a href="#46-linux的存储管理">4.6 Linux的存储管理</a></li></ul></li><li><a href="#5.文件管理">5.文件管理</a><ul><li><a href="#51-操作系统的文件管理">5.1 操作系统的文件管理</a></li><li><a href="#52-linux文件的基本操作">5.2 Linux文件的基本操作</a></li></ul></li><li><a href="#6设备管理">6.设备管理</a></li><li><a href="#7.实践">7.实践</a><ul><li><a href="#71-线程同步实践">7.1 线程同步实践</a></li><li><a href="#72-进程同步实践">7.2 进程同步实践</a></li></ul></li><li><a href="#8关于我">8.关于我</a></li><li><a href="#9参考">9.参考</a></li></ul><h2 id="1-操作系统概览"><a href="#1-操作系统概览" class="headerlink" title="1 操作系统概览"></a>1 操作系统概览</h2><h3 id="1-1-什么是操作系统"><a href="#1-1-什么是操作系统" class="headerlink" title="1.1 什么是操作系统"></a>1.1 什么是操作系统</h3><ul><li>管理配置内存、决定资源供需顺序、控制输入输出设备等</li><li>操作系统是管理计算机硬件和软件资源的计算机程序</li><li>操作系统提供让用户和系统交互的操作界面</li><li>从手机到超级计算机，操作系统可简单也可复杂</li><li>操作系统的种类是多种多样的，不局限于计算机</li><li>在不同的设备上，操作系统可向用户呈现多种操作手段</li><li>Android，IOS，HarmonyOS</li><li>Windows ，Linux ，MacOS</li><li>总结：管理硬件、提供用户交互的软件系统</li></ul><h3 id="1-2-为什么需要操作系统"><a href="#1-2-为什么需要操作系统" class="headerlink" title="1.2 为什么需要操作系统"></a>1.2 为什么需要操作系统</h3><ul><li>我们不可能直接操作计算机硬件</li><li>设备种类繁多复杂，需要统一界面</li><li>设备种类繁多复杂，需要统一界面</li></ul><h3 id="1-3-操作系统的基本功能"><a href="#1-3-操作系统的基本功能" class="headerlink" title="1.3 操作系统的基本功能"></a>1.3 操作系统的基本功能</h3><ul><li>操作系统统一管理着计算机资源<ul><li>处理器资源</li><li>IO设备资源</li><li>存储器资源</li><li>文件资源</li></ul></li><li>操作系统实现了对计算机资源的抽象<ul><li>IO设备管理软件，提供读写接口</li><li>用户无需面向硬件接口编程</li><li>文件管理软件，提供操作文件接口</li></ul></li><li>操作系统提供了用户与计算机之间的接口<ul><li>命令形式</li><li>图像窗口形式</li><li>系统调用形式</li></ul></li></ul><h3 id="1-4-操作系统相关概念"><a href="#1-4-操作系统相关概念" class="headerlink" title="1.4 操作系统相关概念"></a>1.4 操作系统相关概念</h3><ul><li>并发性/并行性<ul><li>多道程序设计<ul><li>多道程序设计是指在计算机内存中同时存放多个程序</li><li>多道程序在计算机的管理程序之下相互穿插运行</li></ul></li><li>并行是指两个或多个事件可以在同一个时刻发生</li><li>并发是指两个或多个事件可以在同一个时间间隔发生</li></ul></li><li>共享性<ul><li>共享性表现为操作系统中的资源可供多个并发的程序共同使用</li><li>这种共同使用的形式称之为资源共享</li><li>多个程序可以同时使用主存资源</li><li>资源共享根据属性可分为两种方式<ul><li>互斥共享形式 <ul><li>当资源被程序A占用时，其他想使用的话只能等待</li><li>只有进程A使用完以后，其他进程才可以使用该资源</li><li>打印机</li></ul></li><li>同时访问形式<ul><li>某种资源在一段时间内并发地被多个程序访问</li><li>这种“同时”是宏观的，从宏观去看该资源可以被同时访问</li><li>向磁盘写数据</li></ul></li></ul></li></ul></li><li>虚拟性<ul><li>虚拟性表现为把一个物理实体转变为若干个逻辑实体</li><li>物理实体是真实存在的，逻辑实体是虚拟的</li><li>虚拟的技术主要有时分复用技术和空分复用技术</li><li>时分复用技术<ul><li>资源在时间上进行复用，不同程序并发使用</li><li>多道程序分时使用计算机的硬件资源</li><li>提高资源的利用率</li><li>虚拟处理器技术 <ul><li>借助多道程序设计技术</li><li>为每个程序建立进程</li><li>多个程序分时复用处理器</li></ul></li><li>虚拟设备技术<ul><li>物理设备虚拟为多个逻辑设备</li><li>每个程序占用一个逻辑设备</li><li>多个程序通过逻辑设备并发访问</li></ul></li></ul></li><li>空分复用技术<ul><li>空分复用技术用来实现虚拟磁盘、虚拟内存等</li><li>提高资源的利用率，提升编程效率</li><li>虚拟磁盘技术 <ul><li>物理磁盘虚拟为逻辑磁盘</li><li>C、 D、 E等逻辑盘</li><li>使用起来更加安全、方便</li></ul></li><li>虚拟内存技术<ul><li>在逻辑上扩大程序的存储容量</li><li>使用比实际内存更大的容量</li><li>大大提升编程效率</li></ul></li></ul></li></ul></li><li>异步性<ul><li>在多道程序环境下，允许多个进程并发执行</li><li>进程在使用资源时可能需要等待或放弃</li><li>进程的执行并不是一气呵成的，而是以走走停停的形式推进</li><li>进程以不可预知的速度向前推进</li></ul></li></ul><h2 id="2-进程管理"><a href="#2-进程管理" class="headerlink" title="2.进程管理"></a>2.进程管理</h2><h3 id="2-1-进程概述"><a href="#2-1-进程概述" class="headerlink" title="2.1 进程概述"></a>2.1 进程概述</h3><ul><li><p>为什么需要进程</p><ul><li>没有配置OS之前，资源属于当前运行的程序</li><li>配置OS之后，引入多道程序设计的概念</li><li>合理的隔离资源、运行环境，提升资源利用率</li><li>进程是系统进行资源分配和调度的基本单位</li><li>进程作为程序独立运行的载体保障程序正常执行</li><li>进程的存在使得操作系统资源的利用率大幅提升</li></ul></li><li><p>主存中的进程形态-进程控制块（PCB）</p><ul><li>用于描述和控制进程运行的通用数据结构</li><li>记录进程当前状态和控制进程运行的全部信息</li><li>PCB的使得进程是能够独立运行的基本单位</li><li>PCB是操作系统进行调度经常会被读取的信息</li><li>PCB是常驻内存的，存放在系统专门开辟的PCB区域内</li><li>标识符<ul><li>标识符唯一标记一个进程，用于区别其他进程</li></ul></li><li>状态<ul><li>标记进程的进程状态，如：运行态</li></ul></li><li>优先级</li><li>程序计数器<ul><li>进程即将被执行的下一条指令的地址</li></ul></li><li>内存指针<ul><li>程序代码、进程数据相关指针</li></ul></li><li>上下文数据<ul><li>进程执行时处理器存储的数据</li></ul></li><li>IO状态信息<ul><li>被进程IO操作所占用的文件列表</li></ul></li><li>记账信息<ul><li>使用处理器时间、时钟数总和等</li></ul></li></ul></li><li><p>进程与线程</p><ul><li>关系<ul><li>一个进程可以有一个或多个线程</li><li>进程是系统进行资源分配和调度的基本单位</li><li>线程是操作系统进行运行调度的最小单位</li><li>包含在进程之中，是进程中实际运行工作的单位</li><li>一个进程可以并发多个线程，每个线程执行不同的任务</li><li>进程的线程共享进程资源</li></ul></li><li>区别</li></ul><table><thead><tr><th></th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>资源</td><td>资源分配的基本单位</td><td>不拥有资源</td></tr><tr><td>调度</td><td>独立调度的基本单位</td><td>独立调度的最小单位</td></tr><tr><td>系统开销</td><td>进程系统开销大</td><td>线程系统开销小</td></tr><tr><td>通信</td><td>进程IPC</td><td>读写同一进程数据通信</td></tr></tbody></table></li></ul><h3 id="2-2-进程管理五状态模型"><a href="#2-2-进程管理五状态模型" class="headerlink" title="2.2 进程管理五状态模型"></a>2.2 进程管理五状态模型</h3><ul><li>就绪状态<ul><li>当进程被分配到除CPU以外所有必要的资源后</li><li>只要再获得CPU的使用权，就可以立即运行</li><li>其他资源都准备好、只差CPU资源的状态为就绪状态</li><li>就绪队列：在一个系统中多个处于就绪状态的进程通常排成一个队列</li></ul></li><li>阻塞状态<ul><li>进程因某种原因如：其他设备未就绪而无法继续执行</li><li>从而放弃CPU的状态称为阻塞状态</li><li>阻塞队列</li></ul></li><li>执行状态<ul><li>进程获得CPU，其程序正在执行称为执行状态</li><li>在单处理机中，在某个时刻只能有一个进程是处于执行状态</li></ul></li><li>创建状态<ul><li>分配PCB—&gt; 插入就绪队列</li><li>创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态</li><li>操作系统提供fork函数接口创建进程</li></ul></li><li>终止状态<ul><li>系统清理 —&gt;PCB归还</li><li>进程结束由系统清理或者归还PCB的状态称为终止状态</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163657.jpg" alt=""></p><h3 id="2-3-进程同步"><a href="#2-3-进程同步" class="headerlink" title="2.3 进程同步"></a>2.3 进程同步</h3><ul><li><p>为什么需要进程间同步</p><ul><li><p>生产者-消费者问题</p><ul><li>生产者进程将生产的产品提供给消费者进程进行消费</li><li>生产者进程和消费者进程可以并发执行</li><li>在两者之间设置了一个具有n个缓冲区的缓冲池</li><li>生产者将产品缓冲区中，消费者进程从缓冲区取走产品消费</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163907.jpg" alt=""></p><ul><li>单从生产者程序或消费者程序去看是没问题的</li><li>单两者并发执行时就可能出差错</li><li>临界资源：缓存区</li></ul></li><li><p>哲学家进餐问题</p><ul><li>有五个哲学家，他们的生活方式是交替地进行思考和进餐</li><li>哲学家们共同使用一张圆桌，分别坐在周围的五张椅子上</li><li>在圆桌上有五个碗和五支筷子。平时哲学家们只进行思考，饥饿时则试图取靠近他们的左、右两支筷子</li><li>只有两支筷子都被他拿到的时候才能进餐</li><li>进餐完毕之后，放下左右筷子继续思考</li><li>五个哲学家同时拿起左边筷子</li><li>五个哲学家都等待右边筷子释放</li><li>五个哲学家饿死</li><li>临界资源：筷子</li></ul></li><li><p>问题的根源</p><ul><li>根源问题是：彼此相互之间没有通信</li><li>如果生产者通知消费者我已经完成一件生产</li><li>哲学家向旁边哲学家说我要进餐了</li></ul></li><li><p>进程同步的目的</p><ul><li>对竞争资源在多进程间进行使用次序的协调</li><li>使得并发执行的多个进程之间可以有效使用资源和相互合作</li></ul></li><li><p>临界资源</p><ul><li>临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。</li><li>当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使<br>用共享资源。</li></ul></li></ul></li><li><p>进程间同步的原则</p><ul><li>空闲让进：资源无占用，允许使用</li><li>忙则等待：资源有占用，请求进程等待</li><li>有限等待：保证有限等待时间能够使用资源</li><li>让权等待：等待时，进程需要让出CPU</li></ul></li><li><p>进程间同步的方法</p><ul><li>消息队列</li><li>共享存储</li><li>信号量</li></ul></li><li><p>线程同步</p><ul><li>进程的线程共享进程资源</li><li>当多个线程并发使用进程资源时，也需要同步</li><li>线程间同步的方法<ul><li>互斥量</li><li>读写锁</li><li>自旋锁</li><li>条件变量</li></ul></li></ul></li></ul><h3 id="2-4-Linux的进程管理"><a href="#2-4-Linux的进程管理" class="headerlink" title="2.4 Linux的进程管理"></a>2.4 Linux的进程管理</h3><ul><li><p>进程的类型</p><ul><li>前台进程<ul><li>前台进程就是具有终端，可以和用户交互的进程</li></ul></li><li>后台进程<ul><li>与前台进程相对，没有占用终端的就是后台进程</li><li>后台程序基本上不和用户交互，优先级比前台进程低</li><li>将需要执行的命令以“&amp;”符号结束</li></ul></li><li>守护进程<ul><li>守护(daemon)进程是特殊的后台进程</li><li>很多守护进程在系统引导的时候启动，一直运行直到系统关闭</li><li>Linux有很多典型的守护进程</li><li>进程名字以“d”结尾的一般都是守护进程<ul><li>crond</li><li>httpd</li><li>sshd</li><li>mysqld</li></ul></li></ul></li></ul></li><li><p>进程的标记</p><ul><li><p>进程ID</p><ul><li>进程ID是进程的唯一标记，每个进程拥有不同的ID</li><li>进程ID表现为一个非负整数，最大值由操作系统限定</li><li>top命令查看系统中的所有进程信息</li><li>ID为0的进程为idle进程，是系统创建的第一个进程</li><li>ID为1的进程为init进程，是0号进程的子进程，完成系统初始化</li><li>Init进程是所有用户进程的祖先进程</li></ul></li><li><p>进程的状态标记</p><ul><li>man ps 命令查看用户命令帮助文档</li></ul><table><thead><tr><th>状态符号</th><th>状态说明</th></tr></thead><tbody><tr><td>R</td><td>(TASK_RUNNING)，进程正处于运行状态</td></tr><tr><td>S</td><td>(TASK_INTERRUPTIBLE)，进程正处于睡眠状态</td></tr><tr><td>D</td><td>(TASK_UNINTERRUPTIBLE)，进程正在处于IO等待的睡眠状态</td></tr><tr><td>T</td><td>(TASK_STOPPED)，进程正处于暂停状态</td></tr><tr><td>Z</td><td>(TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程</td></tr></tbody></table></li><li><p>父子进程</p><ul><li>操作系统提供fork函数接口创建进程</li><li>父子进程关系:进程A调用fork函数创建进程B,进程A就是进程B的父进程</li><li>父子进程关系可以通过pstree命令查看</li></ul></li></ul></li><li><p>操作进程的相关命令</p><ul><li>ps命令<ul><li>ps命令常用于显示当前进程的状态</li><li>ps命令常配合aux参数或ef参数和grep命令检索特定进程</li></ul></li><li>jobs<ul><li>只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略</li></ul></li><li>nohup<ul><li>不挂断地运行命令</li></ul></li><li>fg/bg命令<ul><li>fg命令将一个后台命令调换至前台终端继续执行</li><li>bg命令将一个后台暂停的命令变成继续执行</li><li>ctrl+z将前台工作暂停</li></ul></li><li>kill<ul><li>kill命令发送指定信号给进程</li><li>kill –l 可以查看操作系统支持的信号</li><li>只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略</li></ul></li></ul></li></ul><h2 id="3-作业管理"><a href="#3-作业管理" class="headerlink" title="3.作业管理"></a>3.作业管理</h2><h3 id="3-1-进程调度"><a href="#3-1-进程调度" class="headerlink" title="3.1 进程调度"></a>3.1 进程调度</h3><ul><li><p>进程调度是指计算机通过决策决定哪个就绪进程可以获得CPU使用权</p></li><li><p>保留旧进程的运行信息，请出旧进程（收拾包袱）</p></li><li><p>选择新进程，准备运行环境并分配CPU（新进驻）</p></li><li><p>调度机制</p><ul><li>就绪队列的委派机制<ul><li>将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程</li></ul></li><li>选择运行进程的委派机制<ul><li>调度程序以一定的策略选择就绪进程，将CPU资源分配给它</li></ul></li><li>新老进程的上下文切换机制<ul><li>保存当前进程的上下文信息，装入被委派执行进程的运行上下文</li><li>老进程的上下文存入主存</li><li>新进程的上下文装载到高速缓存中</li></ul></li></ul></li><li><p>调度方式</p><ul><li>非抢占式的调度<ul><li>处理器一旦分配给某个进程，就让该进程一直使用下去</li><li>调度程序不以任何原因抢占正在被使用的处理器</li><li>直到进程完成工作或因为IO阻塞才会让出处理器</li></ul></li><li>抢占式的调度<ul><li>允许调度程序以一定的策略暂停当前运行的进程</li><li>保存好旧进程的上下文信息，分配处理器给新进程</li></ul></li></ul><table><thead><tr><th></th><th>抢占式调度</th><th>抢占式调度</th></tr></thead><tbody><tr><td>系统开销</td><td>频繁切换，开销大</td><td>切换次数少，开销小</td></tr><tr><td>公平性</td><td>相对公平</td><td>不公平</td></tr><tr><td>应用</td><td>通用系统</td><td>专用系统</td></tr></tbody></table></li><li><p>调度算法</p><ul><li>先来先服务调度算法<ul><li>从就绪队列按照顺序从队列头开始调度</li></ul></li><li>短进程优先调度算法<ul><li>调度程序优先选择就绪队列中估计运行时间最短的进程</li><li>短进程优先调度算法不利于长作业进程的执行</li></ul></li><li>高优先权优先调度算法<ul><li>进程附带优先权，调度程序优先选择权重高的进程</li><li>高优先权优先调度算法使得紧迫的任务可以优先处理</li><li>前台进程优先级高于后台进程</li></ul></li><li>时间片轮转算法<ul><li>按先来先服务的原则排列就绪进程</li><li>每次从队列头部取出待执行进程，分配一个时间片执行</li><li>是相对公平的调度算法，但不能保证及时响应用户</li></ul></li></ul></li></ul><h3 id="3-2-死锁"><a href="#3-2-死锁" class="headerlink" title="3.2 死锁"></a>3.2 死锁</h3><ul><li><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p></li><li><p>死锁的产生</p><ul><li><p>基本原因</p><ul><li>竞争资源<ul><li>共享资源数量不满足各个进程需求</li><li>各个进程之间发生资源竞争导致死锁</li></ul></li><li>进程调度顺序不当<ul><li>调度顺序导致共享资源被多个进程互相持有无法释放，可以优先满足进程A的调度再调度B</li></ul></li></ul></li><li><p>必要条件</p><ul><li>互斥条件<ul><li>进程对资源的使用是排他性的使用</li><li>某资源只能由一个进程使用，其他进程需要使用只能等待</li></ul></li><li>请求保持条件<ul><li>进程至少保持一个资源，又提出新的资源请求</li><li>新资源被占用，请求被阻塞</li><li>被阻塞的进程不释放自己保持的资源</li></ul></li><li>不可剥夺条件<ul><li>进程获得的资源在未完成使用前不能被剥夺</li><li>获得的资源只能由进程自身释放</li></ul></li><li>环路等待条件<ul><li>发生死锁时，必然存在进程-资源环形链</li><li>P1(R1)-&gt; P2(R2)-&gt;P3(R3-&gt;)P4(R4) -&gt;P1(R1)</li></ul></li></ul></li></ul></li><li><p>死锁的处理</p><ul><li><p>预防死锁的方法-破坏必要条件</p><ul><li>摒弃请求保持条件<ul><li>系统规定进程运行之前，一次性申请所有需要的资源</li><li>进程在运行期间不会提出资源请求，从而摒弃请求保持条件</li></ul></li><li>摒弃不可剥夺条件<ul><li>当一个进程请求新的资源得不到满足时，必须释放占有的资源</li><li>进程运行时占有的资源可以被释放，意味着可以被剥夺</li></ul></li><li>摒弃环路等待条件<ul><li>可用资源线性排序，申请必须按照需要递增申请</li><li>线性申请不再形成环路，从而摒弃了环路等待条件，A B C D E</li></ul></li></ul></li><li><p>银行家算法</p><ul><li>是一个可操作的著名的避免死锁的算法</li><li>以银行借贷系统分配策略为基础的算法</li><li>客户申请的贷款是有限的，每次申请需声明最大资金量</li><li>银行家在能够满足贷款时，都应该给用户贷款</li><li>客户在使用贷款后，能够及时归还贷款用来满足其它客户</li><li>已分配资源表 </li></ul><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">4</td></tr><tr><td align="center">P2</td><td align="center">1</td><td align="center">4</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">P3</td><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">4</td></tr><tr><td align="center">P4</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><ul><li>所需资源表</li></ul><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0</td><td align="center">6</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">P2</td><td align="center">1</td><td align="center">9</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">P3</td><td align="center">1</td><td align="center">3</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">P4</td><td align="center">1</td><td align="center">7</td><td align="center">5</td><td align="center">0</td></tr></tbody></table><ul><li>可分配资源表</li></ul><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">-</td><td align="center">1</td><td align="center">5</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><ul><li>还需分配资源表</li><li>通过可分配资源表看它能够满足哪一个进程所需就把可分配资源给谁，不满足的就不执行知道有资源能够满足任何一个为止</li><li>所以P2会先获得资源</li></ul><table><thead><tr><th align="center"></th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center">P1</td><td align="center">0</td><td align="center">6</td><td align="center">4</td><td align="center">2</td></tr><tr><td align="center">P2</td><td align="center">0</td><td align="center">5</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">P3</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">2</td></tr><tr><td align="center">P4</td><td align="center">0</td><td align="center">7</td><td align="center">5</td><td align="center">0</td></tr></tbody></table></li></ul></li></ul><h2 id="4-存储管理"><a href="#4-存储管理" class="headerlink" title="4.存储管理"></a>4.存储管理</h2><h3 id="4-1-计算机进行存储管理的必要性"><a href="#4-1-计算机进行存储管理的必要性" class="headerlink" title="4.1 计算机进行存储管理的必要性"></a>4.1 计算机进行存储管理的必要性</h3><ul><li>早期计算机编程并不需要过多的存储管理</li><li>随着计算机和程序越来越复杂，存储管理成为必要</li><li>确保计算机有足够的内存处理数据</li><li>确保程序可以从可用内存中获取一部分内存使用</li><li>确保程序可以归还使用后的内存以供其他程序使用</li></ul><h3 id="4-2-内存的分配过程"><a href="#4-2-内存的分配过程" class="headerlink" title="4.2 内存的分配过程"></a>4.2 内存的分配过程</h3><ul><li><p>分配方法</p></li><li><p>单一连续分配</p><ul><li>单一连续分配是最简单的内存分配方式</li><li>只能在单用户、单进程的操作系统中使用</li><li>分为系统区，用户区</li></ul></li><li><p>固定分区分配</p><ul><li>固定分区分配是支持多道程序的最简单存储分配方式</li><li>内存空间被划分为若干固定大小的区域</li><li>每个分区只提供给一个程序使用，互不干扰</li></ul></li><li><p>动态分区分配（常用）</p><ul><li>根据进程实际需要，动态分配内存空间</li><li>相关数据结构、分配算法</li><li>动态分区空闲表数据结构，1：已使用，0：未使用</li></ul><table><thead><tr><th>分区</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>标记</td><td>0</td><td>1</td><td>1</td><td>0</td></tr></tbody></table><ul><li>动态分区空闲链数据结构<ul><li>采用双向链表将内存块链接起来，连续的空闲区可以合并在一个链表节点里</li><li>节点需记录可存储的容量</li></ul></li><li>动态分区分配算法<ul><li>首次适应算法(FF算法)<ul><li>分配内存时从开始顺序查找适合内存区</li><li>若没有合适的空闲区，则该次分配失败</li><li>每次从头部开始，使得头部地址空间不断被划分</li><li>循环适应算法，每次分配不从头开始，从上一次结束的地方开始分配</li></ul></li><li>最佳适应算法(BF算法)<ul><li>最佳适应算法要求空闲区链表按照容量大小排序</li><li>遍历空闲区链表找到最佳合适空闲区</li></ul></li><li>快速适应算法(QF算法)<ul><li>快速适应算法要求有多个空闲区链表</li><li>每个空闲区链表存储一种容量的空闲区</li></ul></li></ul></li></ul></li></ul><h3 id="4-3-内存的回收过程"><a href="#4-3-内存的回收过程" class="headerlink" title="4.3 内存的回收过程"></a>4.3 内存的回收过程</h3><ul><li>存在回收内存的四种情况<ul><li>回收区与空闲区链接在一起并且链接在后面<ul><li>不需要新建空闲链表节点</li><li>只需要把空闲区1的容量增大为空闲区即可</li></ul></li><li>回收区与空闲区链接在一起并且链接在前面<ul><li>将回收区与空闲区合并</li><li>新的空闲区使用回收区的地址</li></ul></li><li>回收区与空闲区链接在一起并且链接在中间<ul><li>将空闲区1、空闲区2和回收区合并</li><li>新的空闲区使用空闲区1的地址</li></ul></li><li>未链接空闲区，单一的回收区<ul><li>为回收区创建新的空闲节点</li><li>插入到相应的空闲区链表中去</li></ul></li></ul></li></ul><h3 id="4-4-进程的存储管理"><a href="#4-4-进程的存储管理" class="headerlink" title="4.4 进程的存储管理"></a>4.4 进程的存储管理</h3><ul><li><p>页式存储管理</p><ul><li>字块是相对物理设备的定义，页面则是相对逻辑空间的定义</li><li>将进程逻辑空间等分成若干大小的页面</li><li>相应的把物理内存空间分成与页面大小的物理块</li><li>以页面为单位把进程空间装进物理内存中分散的物理块</li><li>页面大小应该适中，过大难以分配，过小内存碎片过多</li><li>页面大小通常是512B~8K</li><li><strong>页表</strong>：记录进程逻辑空间与物理空间的映射，表示为 [页面编号，字块编号]</li><li><strong>页地址</strong>：[地址，页内偏移]</li><li><strong>问题</strong>：现代计算机系统中，可以支持非常大的逻辑地址空间（2^32~2^64），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M(2^20)个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间<ul><li>2^32/2^12=2^20=1M个页表项</li></ul></li><li><strong>多级页表</strong>：根页表的字块存的是子页表的地址，在运行时可以按需加载子页表</li><li><strong>不足</strong>：有一段连续的逻辑分布在多个页面中，将大大降低执行效率</li></ul></li><li><p>段式存储管理</p><ul><li>将进程逻辑空间划分成若干段（非等分）</li><li>段的长度由连续逻辑的长度决定</li><li>主函数MAIN、子程序段X、子函数Y等</li><li><strong>段表</strong>：[段号 ,基址. 段长]</li><li><strong>段地址</strong>：[段号, 段内偏移]</li></ul></li><li><p>页式存储管理与段式存储管理的对比</p><ul><li>段式存储和页式存储都离散地管理了进程的逻辑空间</li><li>页是物理单位，段是逻辑单位</li><li>分页是为了合理利用空间，分段是满足用户要求</li><li>页大小由硬件固定，段长度可动态变化</li><li>页表信息是一维的，段表信息是二维的</li></ul></li><li><p>段页式存储管理</p><ul><li>分页可以有效提高内存利用率（虽然说存在页内碎片）</li><li>分段可以更好满足用户需求，因为逻辑可以通过用户来写</li><li>两者结合，形成段页式存储管理</li><li>先将逻辑空间按段式管理分成若干段</li><li>再把段内空间按页式管理等分成若干页</li><li><strong>段页地址</strong>：[段号, 段内页号. 页内地址]</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801164213.jpg" alt=""></p></li></ul><h3 id="4-5-虚拟内存"><a href="#4-5-虚拟内存" class="headerlink" title="4.5 虚拟内存"></a>4.5 虚拟内存</h3><ul><li>虚拟内存概述<ul><li>有些进程实际需要的内存很大，超过物理内存的容量</li><li>多道程序设计，使得每个进程可用物理内存更加稀缺</li><li>不可能无限增加物理内存，物理内存总有不够的时候</li><li>虚拟内存是操作系统内存管理的关键技术</li><li>使得多道程序运行和大程序运行成为现实</li><li>把程序使用内存划分，将部分暂时不使用的内存放置在辅存</li><li>虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存</li></ul></li><li>程序的局部性原理<ul><li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li><li>程序运行时，无需全部装入内存，装载部分即可</li><li>如果访问页不在内存，则发出缺页中断，发起页面置换</li><li>从用户层面看，程序拥有很大的空间，即是虚拟内存</li></ul></li><li>虚拟内存的置换</li><li>替换策略发生在Cache-主存层次、主存-辅存层次<ul><li>Cache-主存层次的替换策略主要是为了解决速度问题</li><li>主存-辅存层次主要是为了解决容量问题</li><li>置换时机<ul><li>高速缓存的替换时机<ul><li>缓存没有数据，需要从主存载入所需数据</li></ul></li><li>主存页面的替换时机<ul><li>主存缺页，需要从辅存载入页面数据</li></ul></li></ul></li><li>置换算法<ul><li>先进先出算法(FIFO)<ul><li>把主存看做是一个先进先出的队列</li><li>优先替换最先进入队列的字块</li></ul></li><li>最不经常使用算法(LFU)<ul><li>优先淘汰最不经常使用的字块</li><li>需要额外的空间记录字块的使用频率</li></ul></li><li>最近最少使用算法(LRU)<ul><li>优先淘汰一段时间内没有使用的字块</li><li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li><li>有多种实现方法，一般使用双向链表</li></ul></li></ul></li></ul></li></ul><h3 id="4-6-Linux的存储管理"><a href="#4-6-Linux的存储管理" class="headerlink" title="4.6 Linux的存储管理"></a>4.6 Linux的存储管理</h3><ul><li><p>页内碎片 </p><ul><li>内部碎片是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。</li></ul></li><li><p>页外碎片</p><ul><li>外部碎片是指还没有分配出去（不属于任何进程），但是由于大小而无法分配给申请内存空间的新进程的内存空闲块。</li></ul></li><li><p>Buddy内存管理算法</p><ul><li>Buddy算法是经典的内存管理算法</li><li>算法基于计算机处理二进制的优势具有极高的效率</li><li>算法主要是为了解决内存外碎片的问题</li><li>实际是将内存外碎片问题 转移成内存内碎片问题</li><li>努力让内存分配与相邻内存合并能快速进行</li><li>内存分配原则<ul><li>向上取整为2的幂大小</li><li>70k→128k</li><li>129k→256k</li><li>666k→1024k</li></ul></li><li>伙伴系统<ul><li>“伙伴”指的是内存的“伙伴”</li><li>一片连续内存的“伙伴”是相邻的另一片大小一样的连续内存</li></ul></li><li>分配过程<ul><li>创建一系列空闲块链表，每一种都是2的幂</li><li>假设存储空间有1M大小，分配100k内存</li><li>100k向上取2的幂=128k</li><li>查询是否有128k空闲内存块？</li><li>没有！查询是否有256k空闲内存块？</li><li>没有！查询是否有512k空闲内存块？</li><li>没有！查询是否有1M空闲内存块？</li><li>有，摘下1M空闲内存块，分配出去</li><li>拆下512k放在512k的空闲链表，其余的分配出去</li><li>拆下256k放在256k的空闲链表，其余的分配出去</li><li>拆下128k放在128k的空闲链表，其余的分配出去</li><li>分配完毕</li></ul></li><li>回收过程<ul><li>判断刚才分配的内存伙伴在空闲链表上吗？</li><li>在！移除伙伴，合并为256k空闲内存，判断</li><li>在！移除伙伴，合并为512k空闲内存，判断</li><li>在！移除伙伴，合并为1M空闲内存</li><li>插入1M空闲链表，回收完成</li></ul></li></ul></li><li><p>Linux交换空间</p><ul><li>交换空间(Swap)是磁盘的一个分区</li><li>Linux物理内存满时，会把一些内存交换至Swap空间</li><li>Swap空间是初始化系统时配置的</li><li>top命令可以查看交换空间的分配情况</li><li>主要用途：<ul><li>冷启动内存依赖</li><li>系统睡眠依赖</li><li>大进程空间依赖</li></ul></li><li>交换空间VS虚拟内存<ul><li>Swap空间是操作系统概念</li><li>Swap空间解决系统物理内存不足问题</li><li>Swap空间存在于磁盘</li><li>Swap空间与主存发生置换</li><li>虚拟内存是进程概念</li><li>虚拟内存解决进程物理内存不足问题</li><li>虚拟内存存在于磁盘</li><li>虚拟内存与主存发生置换</li></ul></li></ul></li></ul><h2 id="5-文件管理"><a href="#5-文件管理" class="headerlink" title="5.文件管理"></a>5.文件管理</h2><h3 id="5-1-操作系统的文件管理"><a href="#5-1-操作系统的文件管理" class="headerlink" title="5.1 操作系统的文件管理"></a>5.1 操作系统的文件管理</h3><ul><li><p>文件的逻辑结构</p><ul><li>逻辑结构的文件类型<ul><li>有结构文件<ul><li>文本文件、 文档 、媒体文件</li><li>文件内容由定长记录和可变长记录组成</li><li>定长记录存储文件格式、文件描述等结构化数据项</li><li>可变长记录存储文件具体内容</li><li>例如：PNG文件标记–PNG数据块–文件结束标记</li></ul></li><li>无结构文件<ul><li>exe文件、 dll链接库文件、 so文件</li><li>二进制文件 、链接库</li><li>也称为流式文件</li><li>文件内容长度以字节为单位</li></ul></li></ul></li><li>顺序文件<ul><li>顺序文件是指按顺序存放在存储介质中的文件</li><li>磁带的存储特性使得磁带文件只能存储顺序文件</li><li>顺序文件是所有逻辑文件当中存储效率最高的</li><li>顺序文件的增删改效率低</li></ul></li><li>索引文件<ul><li>可变长文件不适合使用顺序文件格式存储</li><li>索引文件是为了解决可变长文件存储而发明的一种文件格式</li><li>索引文件需要配合索引表完成存储的操作</li><li>索引表：[键 ,逻辑地址]</li></ul></li></ul></li><li><p>辅存的存储空间分配</p><ul><li>辅存的分配方式<ul><li>连续分配<ul><li>顺序读取文件内容非常容易，速度很快</li><li>对存储要求高，要求满足容量的连续存储空间</li></ul></li><li>链接分配<ul><li>链接分配可以将文件存储在离散的盘块中<br>需要额外的存储空间存储文件的盘块链接顺序</li><li>隐式链接 <ul><li>隐式分配的下一个链接指向存储在当前盘块内</li><li>隐式分配适合顺序访问，随机访问效率很低</li><li>可靠性差，任何一个链接出问题都影响整个文件</li></ul></li><li>显式链接<ul><li>FAT( File Allocation Table)  [物理块 ,下一盘块]</li><li>不支持高效的直接存储（FAT记录项多）</li><li>检索时FAT表占用较大的存储空间（需要将整个FAT加载到内存）</li></ul></li></ul></li><li>索引分配<ul><li>把文件的所有盘块集中存储（索引）</li><li>读取某个文件时，将文件索引读取进内存即可</li><li>每个文件拥有一个索引块，记录所有盘块信息</li><li>索引分配方式支持直接访问盘块</li><li>文件较大时，索引分配方式具有明显优势</li></ul></li></ul></li></ul></li><li><p>辅存的存储空间管理</p><ul><li><p>空闲表</p><ul><li>[序号, 第一个空闲盘块号, 空闲盘块数]</li><li>空闲盘区的分配与内存分配类似</li><li>首次适应算法、循环适应算法等</li><li>回收过程也与内存回收类似</li></ul></li><li><p>空闲链表 </p><ul><li>空闲链表法把所有空闲盘区组成一个空闲链表</li><li>每个链表节点存储空闲盘块和空闲的数目</li></ul></li><li><p>位示图</p><ul><li>位示图维护成本很低</li><li>位示图可以非常容易找到空闲盘块</li><li>位示图使用0/1比特位，占用空间很小</li><li>0：未使用，1：已使用</li></ul><table><thead><tr><th align="center">盘块/磁道</th><th align="center">1</th><th align="center">2</th><th align="center">3</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr></tbody></table></li></ul></li><li><p>目录管理</p><ul><li>目录树：<ul><li>任何文件或目录都只有唯一路径</li></ul></li><li>文件描述信息<ul><li>文件标识符 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针</li></ul></li></ul></li></ul><h3 id="5-2-Linux文件的基本操作"><a href="#5-2-Linux文件的基本操作" class="headerlink" title="5.2 Linux文件的基本操作"></a>5.2 Linux文件的基本操作</h3><ul><li><p>Linux目录</p><ul><li>Linux一切皆文件</li><li>常用目录：/bin /etc /home /usr /opt /proc /dev /mnt /lib /var …</li></ul><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>/bin</td><td>存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里</td></tr><tr><td>/etc</td><td>存放系统管理和配置文件</td></tr><tr><td>/home</td><td>存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user</td></tr><tr><td>/usr</td><td>用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录</td></tr><tr><td>/opt</td><td>额外安装的可选应用程序包所放置的位置</td></tr><tr><td>/proc</td><td>虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</td></tr><tr><td>/root</td><td>超级用户（系统管理员）的主目录</td></tr><tr><td>/sbin</td><td>存放二进制可执行文件，只有root才能访问</td></tr><tr><td>/dev</td><td>用于存放设备文件</td></tr><tr><td>/mnt</td><td>系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。</td></tr><tr><td>/boot</td><td>存放用于系统引导时使用的各种文件</td></tr><tr><td>/lib</td><td>存放跟文件系统中的程序运行所需要的共享库及内核模块</td></tr><tr><td>/var</td><td>用于存放运行时需要改变数据的文件</td></tr></tbody></table><ul><li>相对路径：相对当前目录开始的目录</li><li>绝对路径：相对根目录开始的目录</li></ul></li><li><p>Linux文件常用操作</p><ul><li>创建：<ul><li>touch file </li><li>vim file2 创建并编辑file2</li><li>mkdir dir1 创建文件夹dir1</li></ul></li><li>删除<ul><li>rm file </li><li>rm -r dir1/ 递归删除文件夹dir1</li></ul></li><li>读取<ul><li>cat file2</li></ul></li><li>写入<ul><li>vim file2 创建并编辑file2</li></ul></li></ul></li><li><p>文件类型</p><ul><li>普通文件(-)</li><li>目录文件(d) </li><li>符号链接(l) </li><li>设备文件(b、 c)</li><li>套接字(s) </li><li>FIFO(p)</li></ul></li><li><p>Linux的文件系统</p><ul><li><p>文件系统概览</p><ul><li>FAT<ul><li>FAT(File Allocation Table)</li><li>FAT16、 FAT32等，微软Dos/Windows使用的文件系统</li></ul></li></ul></li><li><p>使用一张表保存盘块的信息</p><ul><li>NTFS</li></ul></li><li><p>NTFS (New Technology File System)</p><ul><li>WindowsNT环境的文件系统</li><li>NTFS对FAT进行了改进，取代了旧的文件系统<ul><li>EXT2/3/4</li></ul></li><li>EXT(Extended file system)：扩展文件系统</li><li>Linux的文件系统</li><li>EXT2/3/4 数字表示第几代</li></ul></li><li><p>Ext文件系统</p><ul><li>Boot Sector：启动扇区，安装开机管理程序</li></ul></li><li><p>Block Group：块组，存储数据的实际位置</p><ul><li><p>Boot Sector</p></li><li><p>Block Group</p><ul><li>SuperBlock<ul><li>记录整个文件系统相关信息的地方</li><li>Block和Inode的使用情况</li><li>时间信息、控制信息等</li></ul></li><li>Inode Bitmap<ul><li>Inode的位示图</li><li>记录已分配的Inode和未分配的Inode</li></ul></li><li>Block Bitmap<ul><li>功能与Inode bitmap类似</li><li>记录Data block的使用情况</li></ul></li><li>Inode Table<ul><li>存放文件Inode的地方</li><li>每一个文件（目录）都有一个Inode</li><li>是每一个文件（目录）的索引节点</li><li>Inode：<ul><li>文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针 …</li><li>文件名不是存放在Inode节点上的，而是存放在目录的Inode节点</li><li>列出目录文件的时候无需加载文件的Inode</li></ul></li></ul></li><li>Data Block<ul><li>Data block是存放文件内容的地方</li><li>每个block都有唯一的编号</li><li>文件的block记录在文件的Inode上</li></ul></li></ul><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnhudx17c4j30ku0b9dhl.jpg" alt=""></p></li></ul></li></ul></li></ul><h2 id="6-设备管理"><a href="#6-设备管理" class="headerlink" title="6.设备管理"></a>6.设备管理</h2><ul><li><p>广义的IO设备</p><ul><li>对CPU而言，凡是对CPU进行数据输入的都</li><li>对CPU而言，凡是CPU进行数据输出的都是输出设备是输入设备</li></ul></li><li><p>广义的IIO设备分类</p><ul><li>使用特性分类<ul><li>存储设备： U盘 内存 磁盘 </li><li>交互IO设备：键盘 显示器 鼠标</li></ul></li><li>信息交换的单位<ul><li>块设备 ：磁盘 SD卡 </li><li>字符设备：打印机 Shell终端</li></ul></li><li>设备共享属性<ul><li>独占设备 </li><li>共享设备 </li><li>虚拟设备</li></ul></li><li>传输速率<ul><li>低速设备 </li><li>中速设备 </li><li>高速设备</li></ul></li></ul></li><li><p>IO设备的缓冲区</p><ul><li>背景：CPU与IO设备的速率不匹配</li><li>减少CPU处理IO请求的频率</li><li>提高CPU与IO设备之间的并行性</li><li>专用缓冲区只适用于特定的IO进程</li><li>当这样的IO进程比较多时，对内存的消耗也很大</li><li>操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池</li></ul></li><li><p>SPOOLing技术</p><ul><li>虚拟设备技术</li><li>是关于慢速字符设备如何与计算机主机交换信息的一种技术</li><li>利用高速共享设备将低速的独享设备模拟为高速的共享设备</li><li>逻辑上，系统为每一个用户都分配了一台独立的高速独享设备</li><li>SPOOLing技术把同步调用低速设备改为异步调用</li><li>在输入、输出之间增加了排队转储环节（输入井、输出井）</li><li>SPOOLing负责输入（出）井与低速设备之间的调度</li><li>逻辑上，进程直接与高速设备交互，减少了进程的等待时间</li></ul></li></ul><h2 id="7-实践"><a href="#7-实践" class="headerlink" title="7.实践"></a>7.实践</h2><h3 id="7-1-线程同步实践"><a href="#7-1-线程同步实践" class="headerlink" title="7.1 线程同步实践"></a>7.1 线程同步实践</h3><ul><li>互斥量<ul><li>两个线程的指令交叉执行导致了同步问题</li><li>互斥量可以保证先后执行</li><li>原子性<ul><li>这一系列操作要么全部执行完成，要么全部没有执行</li><li>原子性是指一系列操作不可被中断的特性</li><li>不存在部分执行部分未执行的情况 </li></ul></li><li>互斥量（互斥锁），处于两态之一的变量：解锁和加锁</li><li>互斥量是最简单的线程同步的方法</li><li>两个状态可以保证资源访问的串行</li><li>开发者可以直接使用API完成资源的加锁、解锁操作</li><li>操作系统直接提供了互斥量的API<ul><li>C 语言<ul><li>pthread_mutex_lock</li><li>pthread_mutex_t</li><li>pthread_mutex_unlock</li></ul></li><li>Java<ul><li>synchronized</li></ul></li></ul></li></ul></li><li>自旋锁<ul><li>和互斥锁有什么不一样的？</li><li>使用自旋锁的线程会反复检查锁变量是否可用</li><li>自旋锁也是一种多线程同步的变量</li><li>自旋锁不会让出CPU，是一种忙等待状态</li><li>死循环等待锁被释放</li><li>操作系统内部很多地方使用的是自旋锁</li><li>自旋锁避免了进程或线程上下文切换的开销</li><li>自旋锁不适合在单核CPU使用，因为自旋锁不会让出CPU</li><li>api<ul><li>pthread_spinlock_t</li><li>pthread_ spinlock <em>lock</em></li><li>pthread_ spinlock _unlock</li></ul></li></ul></li><li>读写锁<ul><li>读取的时候并不会改变临界资源的值</li><li>临界资源多读少写</li><li>是否存在效率更高的同步方法？</li><li>允许多个读者同时访问资源以提高读性能</li><li>读写锁是一种特殊的自旋锁</li><li>对于写操作则是互斥的</li><li>API<ul><li>pthread_rwlock_t</li><li>pthread_rwlock_rdlock（读锁）</li><li>pthread_rwlock_wrlock（写锁）</li></ul></li><li>互斥量、自旋锁、读写锁 同步过程：等待解锁–加锁–【临界资源】–解锁</li></ul></li><li>条件变量<ul><li>条件变量允许线程睡眠，直到满足某种条件</li><li>条件变量是一种相对复杂的线程同步方法</li><li>当满足条件时，可以向该线程信号，通知唤醒</li><li>生产者消费者问题<ul><li>缓冲区满时，不允许生产者往缓冲区生产，生产者必须等待</li><li>缓冲区小于等于0时，不允许消费者消费，消费者必须等待</li><li>当生产者生产一个产品时，唤醒可能等待的消费者</li><li>当消费者消费一个产品时，唤醒可能等待的生产者</li></ul></li><li>API<ul><li>pthread_cond_t,配合互斥量使用</li><li>pthread_cond_wait(等待条件满足)</li><li>pthread_cond_signal(等待被唤醒)</li></ul></li><li>条件变量同步流程：等待解锁–加锁保护条件变量–等待条件满足被唤醒–【临界资源】–解锁</li></ul></li></ul><table><thead><tr><th>同步方法</th><th>描述</th></tr></thead><tbody><tr><td>互斥锁</td><td>最简单的一种线程同步方法，会阻塞线程</td></tr><tr><td>自旋锁</td><td>避免切换的一种线程同步方法，属于“忙等待”，不让出CPU</td></tr><tr><td>读写锁</td><td>为“读多写少” 的资源设计的线程同步方法，可以显著提高性能</td></tr><tr><td>条件变量</td><td>相对复杂的一种线程同步方法，有更灵活的使用场景</td></tr></tbody></table><h3 id="7-2-进程同步实践"><a href="#7-2-进程同步实践" class="headerlink" title="7.2 进程同步实践"></a>7.2 进程同步实践</h3><ul><li><p>使用fork系统调用创建进程</p><ul><li>fork创建的进程初始化状态与父进程一样</li><li>fork系统调用是用于创建进程的</li><li>系统会为fork的进程分配新的资源</li><li>fork会返回两次，分别返回子进程id和0</li><li>fork系统调用无参数</li><li>返回子进程id的是父进程，返回0的是子进程</li></ul></li><li><p>共享内存</p><ul><li>进程的线程共享进程资源</li><li>进程共享计算机资源</li><li>在某种程度上，多进程是共同使用物理内存的</li><li>由于操作系统的进程管理，进程间的内存空间是独立的</li><li>进程默认是不能访问进程空间之外的内存空间的</li><li>共享存储允许不相关的进程访问同一片物理内存</li><li>共享内存是两个进程之间共享和传递数据最快的方式</li><li>共享内存未提供同步机制，需要借助其他机制管理访问，比如通过一个Boolean的变量来控制是否可读可写</li><li>共享内存是高性能后台开发中最常用的进程同步方式</li><li>共享内存 使用流程<ul><li>申请共享内存 </li><li>连接到进程空间</li><li>脱离进程空间 </li><li>使用共享内存&amp;删除</li></ul></li><li>代码实现</li></ul></li><li><p>Unix域套接字</p><ul><li>域套接字是一种高级的进程间通信的方法</li><li>Unix域套接字可以用于同一机器进程间通信</li><li>套接字(socket)原是网络通信中使用的术语</li><li>Unix系统提供的域套接字提供了网络套接字类似的功能</li><li>Nginx、uWSGI</li><li>服务端<ul><li>创建套接字</li><li>绑定(bind)套接字</li><li>监听(listen)套接字</li><li>接收&amp;处理信息</li></ul></li><li>客户端<ul><li>创建套接字</li><li>连接套接字</li><li>发送信息</li></ul></li><li>代码实现</li><li>提供了单机简单可靠的进程通信同步服务</li><li>只能在单机使用，不能跨机器使用</li></ul></li></ul><h2 id="8-关于我"><a href="#8-关于我" class="headerlink" title="8.关于我"></a>8.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p><p><a href="http://basedev.cn/" target="_blank" rel="noopener">个人网站 basedev.cn</a>  </p><p><a href="https://github.com/jaydroid1024" target="_blank" rel="noopener">Github</a></p><p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p><h2 id="9-参考"><a href="#9-参考" class="headerlink" title="9.参考"></a>9.参考</h2><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content" target="_blank" rel="noopener">重学操作系统 | 拉钩教育</a></p><p><a href="https://coding.imooc.com/class/package/355.html" target="_blank" rel="noopener">编程必备基础 | 慕课网</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
            <tag> 作业管理 </tag>
            
            <tag> 文件管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>筑基系列-计算机基础知识小抄版</title>
      <link href="2021/05/31/computer-composition/"/>
      <url>2021/05/31/computer-composition/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="筑基系列-计算机基础知识小抄版"><a href="#筑基系列-计算机基础知识小抄版" class="headerlink" title="筑基系列-计算机基础知识小抄版"></a>筑基系列-计算机基础知识小抄版</h1><blockquote><p>计算机基础知识筑基三部曲：</p><ul><li><strong><a href="https://juejin.cn/post/6991367806772052004" target="_blank" rel="noopener">第一部：筑基系列-计算机基础知识小抄版</a></strong><ul><li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li></ul></li><li><strong><a href="https://juejin.cn/post/6991385109509193764" target="_blank" rel="noopener">第二部：筑基系列-操作系统基础知识小抄版</a></strong><ul><li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li></ul></li><li><strong><a href="https://juejin.cn/post/6991397445251334151" target="_blank" rel="noopener">第三部：筑基系列-计算机网络基础知识小抄版</a></strong><ul><li>包括OSI七层模型各层详解、IP协议、TCP\IP协议、Http协议、DNS协议等</li></ul></li></ul></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#1.背景篇">1.背景篇</a><ul><li><a href="#11-计算机发展史">1.1 计算机发展史</a></li><li><a href="#12-cpu发展史">1.2 CPU发展史</a></li><li><a href="#13-32-位-vs-64-位">1.3 32 位 VS 64 位</a></li><li><a href="#14-计算机的分类">1.4 计算机的分类</a></li><li><a href="#15-计算机的体系与结构">1.5 计算机的体系与结构</a></li><li><a href="#16-程序翻译与解释">1.6 程序翻译与解释</a></li><li><a href="#17-计算机的层次">1.7 计算机的层次</a></li><li><a href="#18-计算机的计算单位">1.8 计算机的计算单位</a></li><li><a href="#19-计算机的字符与编码集">1.9 计算机的字符与编码集</a></li></ul></li><li><a href="#2.组成篇">2.组成篇</a><ul><li><a href="#21-计算机的总线">2.1 计算机的总线</a></li><li><a href="#22-计算机的输入输出设备">2.2 计算机的输入输出设备</a></li><li><a href="#23-计算机存储器">2.3 计算机存储器</a></li><li><a href="#24-主存储器与辅助存储器">2.4 主存储器与辅助存储器</a></li><li><a href="#25-高速缓存">2.5 高速缓存</a></li><li><a href="#26-计算机的指令系统">2.6 计算机的指令系统</a></li><li><a href="#27-计算机的控制器">2.7 计算机的控制器</a></li><li><a href="#28-计算机的运算器">2.8 计算机的运算器</a></li><li><a href="#29-计算机指令的执行过程">2.9 计算机指令的执行过程</a></li></ul></li><li><a href="#3.计算篇">3.计算篇</a><ul><li><a href="#31-进制运算的基础">3.1 进制运算的基础</a></li><li><a href="#32-原码反码补码">3.2 原码&amp;反码&amp;补码</a></li><li><a href="#33-定点数与浮点数">3.3 定点数与浮点数</a></li><li><a href="#34-定点数的加减法运算">3.4 定点数的加减法运算</a></li><li><a href="#35-浮点数的加减法运算">3.5 浮点数的加减法运算</a></li><li><a href="#36-浮点数的乘除法运算">3.6 浮点数的乘除法运算</a></li></ul></li><li><a href="#4.关于我">4.关于我</a></li><li><a href="#5.参考">5.参考</a></li></ul><h2 id="1-背景篇"><a href="#1-背景篇" class="headerlink" title="1.背景篇"></a>1.背景篇</h2><h3 id="1-1-计算机发展史"><a href="#1-1-计算机发展史" class="headerlink" title="1.1 计算机发展史"></a>1.1 计算机发展史</h3><ul><li>电子管计算机 (1946-1957)<ul><li>埃尼阿克(ENIAC)</li></ul></li><li>晶体管计算机(1957-1964)<ul><li>贝尔实验室、MIT林肯实验室的TX-0、PDP-1配备4k内存和显示器</li></ul></li><li>集成电路计算机 (1964-1980)<ul><li>德州仪器的工程师发明了集成电路(IC)、IBM(7094,1401) 、System/360 操作系统</li></ul></li><li>超大规模集成电路计算机 (1980-现在)<ul><li>乔布斯 Apple 和 Apple二代</li></ul></li><li>未来的计算机 <ul><li>生物计算机</li><li>量子计算机</li></ul></li></ul><h3 id="1-2-CPU发展史"><a href="#1-2-CPU发展史" class="headerlink" title="1.2 CPU发展史"></a>1.2 CPU发展史</h3><ul><li>摩尔定律<ul><li>定义：当价格不变时，集成电路中可容纳的晶体管数目约每隔 18～24 个月就会增加一倍，性能也将提升一倍。</li><li>这一定律揭示了信息技术发展的速度，但到今天，摩尔定律失效了。因为随着芯片越来越小，在尺寸和散热等方面已经挑战了人类的极限，芯片中无法再放入更多的电子元件了。</li><li>所以计算能力又开始以另一种方式发展，那就是多核心，比如一个普普通通的 NVIDA 显卡中就拥有了几百个核心，这样就可以进行大量的并发计算；另外，一个分布式的大数据集群，里面就可能有上千个核心。</li></ul></li><li>单核CPU发展史<ul><li>（1971～ 1973） 500KHz频率的微型计算机（字长8位）</li><li>（1978～ 1985） 500MHz频率的微型计算机（字长16位）</li><li>（1985～ 2000） 高于1GHz频率的微型计算机（字长32位）</li><li>（1973～ 1978） 高于1MHz频率的微型计算机（字长8位）</li><li>（2000～ 现在） 高于2GHz频率的微型计算机（字长为64位）</li></ul></li><li>多核CPU发展史<ul><li>（2005） Intel奔腾系列双核CPU、 AMD速龙系列</li><li>（2006） Intel酷睿四核CPU</li><li>Intel酷睿系列十六核CPU</li><li>Intel至强系列五十六核CPU</li></ul></li><li>CPU数字能量是如何产生的<ul><li>时间是最重要的输入：晶振</li><li>电能供给给芯片，芯片中的一种电子元件晶振（也就是石英晶体）通电后产生震荡</li><li>震荡会产生频率稳定的脉冲信号，通常这是一种高频的脉冲信号，每秒可达百万次</li><li>然后通过谐振效应发放这个信号，形成方波</li><li>再通过电子元件调整这种脉冲的频率，把脉冲信号转换为需要的频率，这就形成了驱动芯片工作的时钟信号</li><li>最后，时钟信号驱动着芯片工作，就像人体的脉搏一样，每一次脉冲到来，都让芯片的状态发生一次变化，最终存储器中的指令被一行行执行</li></ul></li></ul><h3 id="1-3-32-位-VS-64-位"><a href="#1-3-32-位-VS-64-位" class="headerlink" title="1.3 32 位 VS 64 位"></a>1.3 32 位 VS 64 位</h3><ul><li>32、64 位可以表示操作系统、软件、 CPU等</li><li>32位的容量：2^32 = 4 × 2^30 = 4𝐺𝐵 </li><li>64位的容量：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li><li>如果是 CPU，那么有 32 位 CPU，也有 64 位 CPU<ul><li>如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU</li><li>如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU</li><li>这里的 32 和 64，称作 CPU 的位宽</li><li>64 位 CPU 可以执行更大数字的运算，这个优势在普通应用上不明显，但是对于数值计算较多的应用就非常明显。</li><li>64 位 CPU 可以寻址更大的内存空间</li></ul></li><li>如果 32 位/64 位说的是程序，那么说的是指令是 64 位还是 32 位的。<ul><li>32 位指令在 64 位机器上执行，困难不大，可以兼容。 </li><li>如果是 64 位指令，在 32 位机器上执行就困难了，32 位的寄存器都存不下指令的参数。</li></ul></li><li>如果 32 位/64 位说的是操作系统<ul><li>操作系统也是一种程序，如果是 64 位操作系统，也就是操作系统中程序的指令都是 64 位指令，因此不能安装在 32 位机器上。</li></ul></li></ul><h3 id="1-4-计算机的分类"><a href="#1-4-计算机的分类" class="headerlink" title="1.4 计算机的分类"></a>1.4 计算机的分类</h3><ul><li>超级计算机<ul><li>功能最强</li><li>运算速度的单位是TFlop/s（1TFlop/s=每秒一万亿次浮点计算）</li><li>Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz： 44.87 GFlop/s（  0.04487TFlop/s）</li><li>世界排名：Summit IBM（美国) &gt; 神威太湖之光(中国)  &gt; Sierra IBM（美国） </li><li>中国排名：神威 太湖之光 &gt; 天河二号&gt;  天河一号</li></ul></li><li>大型机 (又称大型机、大型主机、主机等)<ul><li>IBM Z9 </li><li>大型机造价高昂</li><li>去“IOE”行动 (I(IBM) O(Oracle) E(EMC)) –阿里云</li></ul></li><li>迷你计算机（服务器）<ul><li>普通服务器已经代替了传统的大型机，成为大规模企业计算的中枢</li></ul></li><li>工作站<ul><li>高端的通用微型计算机，提供比个人计算机更强大的性能</li><li>类似于普通台式电脑，体积较大，但性能强劲</li></ul></li><li>微型计算机<ul><li>麻雀虽小、五脏俱全</li><li>从构成的本质上来讲，个人计算机与前面的分类无异</li></ul></li></ul><h3 id="1-5-计算机的体系与结构"><a href="#1-5-计算机的体系与结构" class="headerlink" title="1.5 计算机的体系与结构"></a>1.5 计算机的体系与结构</h3><ul><li><p>阿兰.图灵</p><ul><li>英国(1912-1954) 数学家成逻辑学家网密肯进分析家和理论生物学家，被誉为计算机科学和人工智能之父。</li><li>图灵机</li><li>图灵测试</li><li>图灵完备</li><li>可判定性</li></ul></li><li><p>图灵机</p><ul><li><p>图灵机拥有一条无限长的纸带，纸带上是一个格子挨着一个格子，格子中可以写字符，你可以把纸带看作内存，而这些字符可以看作是内存中的数据或者程序。</p></li><li><p>图灵机有一个读写头，读写头可以读取任意格子上的字符，也可以改写任意格子的字符。</p></li><li><p>读写头上面的盒子里是一些精密的零件，包括图灵机的存储、控制单元和运算单元。</p></li><li><p>图灵通过数学证明了，一个问题如果可以拆解成图灵机的可执行步骤，那问题就是可计算的。</p></li><li><p>另一方面，图灵机定义了计算机的组成以及工作原理，但是没有给出具体的实现。</p></li></ul></li><li><p>冯诺依曼体系</p><ul><li><p>将程序指令和数据一起存储的计算机设计概念结构,现代计算机都是冯诺依曼机</p></li><li><p>能够长期记忆程序、数据、中间结果及最终运算结果的能力</p></li><li><p>能够把需要的程序和数据送至计算机中</p></li><li><p>能够具备算术、逻辑运算和数据传送等数据加工处理的能力</p></li><li><p>能够按照要求将处理结果输出给用户</p></li><li><p>冯诺依曼瓶颈：CPU和存储器速率之间的问题无法调和导致CPU经常空转等待数据传输</p></li></ul></li><li><p>冯诺依曼机组成结构</p><ul><li>输入设备<ul><li>鼠标、键盘</li></ul></li><li>输出设备<ul><li>显示器</li></ul></li><li>存储器<ul><li>CPU、内存、硬盘</li></ul></li><li>控制器<ul><li>CPU</li></ul></li><li>运算器<ul><li>CPU</li></ul></li></ul></li></ul><h3 id="1-6-程序翻译与解释"><a href="#1-6-程序翻译与解释" class="headerlink" title="1.6 程序翻译与解释"></a>1.6 程序翻译与解释</h3><ul><li><p>人类语言与计算机语言需要进行语言之间的转换</p></li><li><p>程序翻译</p><ul><li><p>L1是描述程序逻辑的高级语言</p></li><li><p>L0是计算机实际执行的低级语言</p></li><li><p>编译器：高级语言对应的编译器</p></li><li><p>程序翻译就是编译器将L1语言翻译并生成L0语言</p></li><li><p>翻译过程生成新的L0程序</p></li><li><p>通过编译器执行的相关语言</p><ul><li>C/C++</li><li>Object-C</li><li>Go</li></ul></li></ul></li><li><p>程序解释</p><ul><li><p>L1是描述程序逻辑的高级语言</p></li><li><p>L0是计算机实际执行的低级语言</p></li><li><p>解释器：使用L0语言实现的程序</p></li><li><p>程序解释的过程就是解释器将L1语言解释为L0语言</p></li><li><p>解释过程不生成新的L0程序</p></li><li><p>相关语言</p><ul><li>Python</li><li>Php</li><li>Javascript</li></ul></li></ul></li><li><p>混合型语言 </p><ul><li>Java （java程序翻译成字节码， 字节码解释成机器码）</li><li>C#</li></ul></li></ul><h3 id="1-7-计算机的层次"><a href="#1-7-计算机的层次" class="headerlink" title="1.7 计算机的层次"></a>1.7 计算机的层次</h3><ul><li>硬件逻辑层<ul><li>门、触发器等逻辑电路组成</li><li>属于电子工程的领域</li></ul></li><li>微程序机器层<ul><li>编程语言是微指令集</li><li>微指令所组成的微程序直接交由硬件执行</li><li>一般是硬件厂商公司处理该层</li></ul></li><li>传统机器层<ul><li>编程语言是CPU指令集（机器指令）</li><li>一条机器指令对应一个微程序，一个微程序对应一组微指令</li><li>编程语言和硬件是直接相关</li><li>不同架构的CPU使用不同的CPU指令集 （英特尔、AMD、x86/X86_64）</li></ul></li><li>操作系统层<ul><li>向上提供了简易的操作界面</li><li>向下对接了指令系统，管理硬件资源</li><li>操作系统层是在软件和硬件之间的适配层</li></ul></li><li>汇编语言层<ul><li>编程语言是汇编语言（PUSH DS/PUSH DS）</li><li>汇编语言可以翻译成可直接执行的机器语言</li><li>完成翻译的过程的程序就是汇编器</li></ul></li><li>高级语言层<ul><li>高级语言的类别非常多，由几百种</li><li>常见的高级语言有： Python、 Java、 C/C++、 Golang等</li></ul></li><li>应用层<ul><li>满足计算机针对某种用途而专门设计</li><li>WPS、IDE</li></ul></li></ul><h3 id="1-8-计算机的计算单位"><a href="#1-8-计算机的计算单位" class="headerlink" title="1.8 计算机的计算单位"></a>1.8 计算机的计算单位</h3><ul><li><p>容量单位</p><ul><li><p>在物理层面，高低电平记录信息</p></li><li><p>理论上只认识0/1两种状态，0/1称为bit（比特位）</p></li><li><p>0/1能够表示的内容太少了，需要更大的容量表示方法</p></li><li><p>更大的容量单位：字节、千字节、兆字节、吉字节、太字节、拍字节、艾字节</p></li><li><p>为什么网上买的移动硬盘500G，格式化之后就只剩465G了？</p><ul><li>硬盘商一般用10进位标记容量 𝟓𝟎𝟎 ∗ 𝟏𝟎𝟎𝟎^3/𝟏𝟎𝟐𝟒^3约等于𝟒𝟔𝟓</li><li>厂商采用十进制更好沟通</li></ul></li></ul></li></ul><table><thead><tr><th align="center">容量单位</th><th align="center">bit</th><th align="center">Byte</th><th align="center">KB</th><th align="center">MB</th><th align="center">GB</th><th align="center">TB</th><th align="center">PB</th><th align="center">EB</th></tr></thead><tbody><tr><td align="center">名字</td><td align="center">比特位</td><td align="center">字节</td><td align="center">千字节（kilobyte）</td><td align="center">兆字节=百万字节（megabyte）</td><td align="center">吉字节=十亿字节（GigaByte）</td><td align="center">太字节=万亿字节(terabyte)</td><td align="center">拍字节=千万亿字节（petabyte）</td><td align="center">艾字节=2^60字节（ExaByte）</td></tr><tr><td align="center">换算</td><td align="center">-</td><td align="center">8bits</td><td align="center">1024B</td><td align="center">1024K</td><td align="center">1024M</td><td align="center">1024G</td><td align="center">1024T</td><td align="center">1024P</td></tr><tr><td align="center">常见设备</td><td align="center">门电路</td><td align="center"></td><td align="center">寄存器</td><td align="center">高速缓存</td><td align="center">内存/硬盘</td><td align="center">硬盘</td><td align="center">云硬盘</td><td align="center">数据仓库</td></tr></tbody></table><ul><li>速度单位<ul><li>网络速度<ul><li>100M带宽=100M/s</li><li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul><li>网络常用单位为(Mbps) </li><li>bps(bits per second):每秒传送位数 </li><li>100M/s = 100Mbps = 100Mbit/s</li><li>100Mbit/s=(100/8)MB/s=12.5MB/s</li></ul></li></ul></li><li>计算速度<ul><li>CPU的速度一般体现为CPU的时钟频率</li><li>CPU的时钟频率的单位一般是赫兹Hz（hertz）</li><li>目前主流CPU的时钟频率都在2GHz以上</li><li>Hz其实就是秒分之，并不只是描述计算机领域所专有的单位</li><li>Hz它是每秒中的周期性变动重复次数的计量</li><li>在CPU中就表示高低电瓶在每秒中变化的次数，2GHz = 2*1000^3Hz = 每秒20亿次</li></ul></li></ul></li></ul><h3 id="1-9-计算机的字符与编码集"><a href="#1-9-计算机的字符与编码集" class="headerlink" title="1.9 计算机的字符与编码集"></a>1.9 计算机的字符与编码集</h3><ul><li><p>早期英美的ASCII码</p><ul><li><p>美国信息交换标准码（American Standard Code for Information Interchange）</p></li><li><p>使用7个bits就可以完全表示ASCII码</p></li><li><p>包含95个可打印字符，33个不可打印字符（包括控制字符）</p></li><li><p>很多应用或者国家中的符号都无法表示</p></li><li><p>无法表示数学符号：“÷ ≠ ≥ ≈ π”</p></li><li><p>𝟑𝟑 + 𝟗𝟓 = 𝟏𝟐𝟖 = 𝟐^7</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143402.jpg" alt=""></p></li></ul></li><li><p>Externed ASCII码</p><ul><li><p>第一次对ASCII码进行扩充， 7bits =&gt; 8bits</p></li><li><p>常见数学运算符</p></li><li><p>带音标的欧洲字符</p></li><li><p>其他常用符、表格符等</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143429.jpg" alt=""></p></li></ul></li><li><p>国际化</p><ul><li>欧洲、中亚、东亚、拉丁美洲国家的语言多样性</li><li>语言体系不一样，不以有限字符组合的语言</li><li>中国、韩国、日本等的语言最为复杂</li><li>中文编码集<ul><li>GB2312<ul><li>《信息交换用汉字编码字符集——基本集》</li><li>一共收录了 7445 个字符</li><li>包括 6763 个汉字和 682 个其它符号</li><li>不兼容国际标准</li></ul></li><li>GBK<ul><li>向下兼容GB2312，向上支持国际ISO标准</li><li>《汉字内码扩展规范》</li><li>收录了21003个汉字，支持全部中日韩汉字</li><li>国际电脑不安装GBK编码就会显示乱码</li><li>国内的Windows系统默认使用GBK编码</li></ul></li></ul></li><li>Unicode<ul><li>Unicode：统一码、万国码、单一码，兼容全球的字符集</li><li>Unicode定义了世界通用的符号集， UTF-*实现了编码</li><li>UTF-8以字节为单位对Unicode进行编码</li></ul></li></ul></li></ul><h2 id="2-组成篇"><a href="#2-组成篇" class="headerlink" title="2.组成篇"></a>2.组成篇</h2><h3 id="2-1-计算机的总线"><a href="#2-1-计算机的总线" class="headerlink" title="2.1 计算机的总线"></a>2.1 计算机的总线</h3><ul><li><p>总线的概述</p><ul><li><p>USB = Universal Serial Bus ，通用串行总线</p><ul><li>提供了对外连接的接口</li><li>不同设备可以通过USB接口进行连接</li><li>连接的标准，促使外围设备接口的统一</li></ul></li><li><p>总线的分类</p><ul><li>片内总线<ul><li>芯片内部的总线</li><li>寄存器与寄存器之间</li><li>寄存器与控制器、运算器之间</li></ul></li><li>系统总线<ul><li>CPU、主内存、 IO设备、各组件之间的信息传输线</li><li>数据总线<ul><li>双向传输各个部件的数据信息</li><li>一般与CPU位数相同（32位、 64位）</li><li>数据总线的位数（总线宽度）是数据总线的重要参数，64位总线一次可传输8个字节的数据</li></ul></li><li>地址总线<ul><li>指定源数据或目的数据在内存中的地址</li><li>地址总线位数=n，寻址范围： 0~𝟐^n</li><li>地址总线的位数与存储单元有关</li></ul></li><li>控制总线<ul><li>控制总线是用来发出各种控制信号的传输线</li><li>控制信号经由控制总线从一个组件发给另外一个组件</li><li>控制总线可以监视不同组件之间的状态（就绪/未就绪）</li></ul></li></ul></li></ul></li></ul></li><li><p>总线的仲裁</p><ul><li>为了解决总线使用权的冲突问题</li><li>总线的仲裁的方法<ul><li>链式查询-串联<ul><li>所有设备都可想仲裁器发出使用权申请，仲裁器在分配使用权时是按照链式顺序逐个询问，轮到谁就是谁</li><li>好处：电路复杂度低，仲裁方式简单</li><li>坏处：优先级低的设备难以获得总线使用权</li><li>坏处：优先级低的设备难以获得总线使用权</li></ul></li><li>计时器定时查询-并联<ul><li>仲裁控制器对设备编号并使用计数器累计计数</li><li>接收到仲裁信号后，往所有设备同时发出计数值</li><li>计数值与设备编号一致则获得总线使用权</li></ul></li><li>独立请求-循环<ul><li>每个设备均有总线独立连接仲裁器</li><li>设备可单独向仲裁器发送请求和接收请求</li><li>当同时收到多个请求信号，仲裁器有权按优先级分配使用权</li><li>好处：响应速度快，优先顺序可动态改变</li><li>好处：响应速度快，优先顺序可动态改变</li></ul></li></ul></li></ul></li></ul><h3 id="2-2-计算机的输入输出设备"><a href="#2-2-计算机的输入输出设备" class="headerlink" title="2.2 计算机的输入输出设备"></a>2.2 计算机的输入输出设备</h3><ul><li><p>常见输入输出设备</p><ul><li><p>输入设备</p><ul><li>字符输入设备<ul><li>键盘：<ul><li>薄膜键盘</li><li>机械键盘（根据段落感、声音、压力、键程的不同分为：黑轴、红轴、青轴、茶轴）</li><li>电容键盘</li></ul></li></ul></li><li>图像输入设备<ul><li>鼠标</li><li>数位板：常用于绘图设计创作，输入板和压感笔</li><li>扫描仪：将图形信息转换为数字信号</li></ul></li></ul></li><li><p>输出设备</p><ul><li>显示器<ul><li>CRT显示器</li><li>液晶显示器</li></ul></li><li>打印机</li><li>投影仪</li></ul></li></ul></li><li><p>输入输出接口的通用设计</p><ul><li>通用设计考虑的问题：读取数据、向设备发送数据、设备有没有被占用？、设备是否已经启动？、设备是否已经连接？</li><li>数据线<ul><li>是I/O设备与主机之间进行数据交换的传送线</li><li>单向传输数据线</li><li>双向传输数据线</li></ul></li><li>状态线<ul><li>IO设备状态向主机报告的信号线</li><li>查询设备是否已经正常连接并就绪</li><li>查询设备是否已经被占用</li></ul></li><li>命令线<ul><li>CPU向设备发送命令的信号线</li><li>发送读写信号</li><li>发送启动停止信号</li></ul></li><li>设备选择线<ul><li>主机选择I/O设备进行操作的信号线</li><li>对连在总线上的设备进行选择</li></ul></li></ul></li><li><p>CPU与IO设备的通信</p><ul><li><p>CPU速度与IO设备速度不一致</p></li><li><p>程序中断</p><ul><li><p>当外围IO设备就绪时，向CPU发出中断信号</p></li><li><p>CPU有专门的电路响应中断信号</p></li><li><p>中断的意义</p><ul><li>提供低速设备通知CPU的一种异步的方式</li><li>CPU可以高速运转同时兼顾低速设备的响应</li><li>提高工作效率(polling的问题) </li><li>故障恢复(异常处理、紧急事件等)</li><li>简化编程模型(try/cache, 计时器等)</li></ul></li></ul></li><li><p>例如通过电脑打印资料的过程</p><ul><li><p>中断相应过程</p><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143825.jpg" alt=""></p></li><li><p>中断请求类型</p><ul><li>硬件设备发给主板(打印机、键盘、鼠标等)</li><li>硬件中断: CPU异常(除以0), 时钟信号等</li><li>软件中断:发出(异常、切换到内核态等)</li></ul></li><li><p>中断向量表</p><ul><li><p>(一般在内存中) 一块块区域，存储了中断类型和中断响应程序的对应关系。每一行叫做一个中断向量。</p><table><thead><tr><th>中断类型</th><th>ISR地址</th><th>描述</th></tr></thead><tbody><tr><td>00</td><td>0x0000</td><td>除以0</td></tr><tr><td>01</td><td>0x0004</td><td>单步</td></tr><tr><td>09</td><td>0x0024</td><td>键盘</td></tr><tr><td>18</td><td>0x0048</td><td>打印机</td></tr><tr><td>100</td><td>0x0190</td><td>自定义</td></tr></tbody></table></li></ul></li><li><p>中断QA</p><ul><li>32位机器上的中断响应路径(ISR) 只有4个字节，怎么实现复杂的程序?</li><li>按键程序中断响应路径到操作系统再到应用， 但是到底哪些键被按了怎么知道?</li><li>中断响应后，如何恢复到中断执行前的状态?</li><li>既然出错了?为什么不出错了直接跳转到错误处理位置?</li></ul></li></ul></li><li><p>DMA（direct memory access）直接存储器存取</p><ul><li>DMA直接连接主存与IO设备</li><li>DMA直接连接主存与IO设备</li><li>当主存与IO设备交换信息时，不需要中断CPU</li><li>可以提高CPU的效率</li><li>硬盘和外置显卡中都有DMA设备</li></ul></li></ul></li></ul><h3 id="2-3-计算机存储器"><a href="#2-3-计算机存储器" class="headerlink" title="2.3 计算机存储器"></a>2.3 计算机存储器</h3><ul><li><p>存储器的分类</p><ul><li>按存储介质分类<ul><li>半导体存储器 ：内存条、 U盘、 固态硬盘</li><li>磁存储器：磁带、磁盘</li></ul></li><li>按存取方式分类<ul><li>随机存储器(RAM)： 随机读取 与位置无关</li><li>串行存储器 ：与位置有关 按顺序查找</li><li>只读存储器(ROM）：只读不写</li></ul></li></ul></li><li><p>存储器指标</p><ul><li>读写速度：7200转</li><li>存储容量：2T</li><li>价格：容量+价格=&gt;位价：每比特位价格</li></ul></li><li><p>层次结构</p><ul><li>高速缓存：速度快，位格高</li><li>主存：速度适中，位格适中</li><li>辅存：速度慢，位格低</li><li>缓存-主存层次<ul><li>原理：局部性原理</li><li>实现：在CPU与主存之间增加一层速度快（容量小）的Cache</li><li>目的：解决主存速度不足的问题</li></ul></li><li>主存-辅存层次<ul><li>原理：局部性原理</li><li>实现：主存之外增加辅助存储器（磁盘、 SD卡、 U盘等）</li><li>目的：解决主存容量不足的问题</li></ul></li><li>局部性原理<ul><li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li></ul></li></ul></li></ul><h3 id="2-4-主存储器与辅助存储器"><a href="#2-4-主存储器与辅助存储器" class="headerlink" title="2.4 主存储器与辅助存储器"></a>2.4 主存储器与辅助存储器</h3><ul><li><p>计算机断电，内存数据丢失</p></li><li><p>计算机断电，磁盘数据不会丢失</p></li><li><p>主存</p><ul><li>RAM（随机存取存储器： Random Access Memory）</li><li>RAM 通过电容存储数据，必须隔一段时间刷新一次</li><li>如果掉电，那么一段时间后将丢失所有数据</li><li>内存与CPU如何交互的</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143858.jpg" alt=""></p><ul><li>32位系统：2^32 = 4 × 2^30 = 4𝐺𝐵 </li><li>64位系统：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li><li>32位的系统最大支持4GB的内存寻址范围，每一个字节都对应一个内存地址。内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。</li><li>工作原理<ul><li>字：是指存放在一个存储单元中的二进制代码组合</li><li>字块：存储在连续的存储单元中而被看作是一个单元的一组字</li><li>假设一个字有32位，一个字块共B个字，主存共M个字块<ul><li>B×M = 主存总字数；B×M×32 = 主存总容量(bits)</li></ul></li><li>字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址<ul><li>2^𝑚 = 𝑀 , 前m位能表示出的寻址范围是0–2^𝑚</li><li>2^𝒃 = 𝐵，后b位能表示出的寻址范围是0–2^b</li></ul></li></ul></li></ul></li><li><p>辅存：磁盘</p><ul><li><p>表面是可磁化的硬磁特性材料</p></li><li><p>移动磁头径向运动读取磁道信息</p></li><li><p>磁道、扇区、磁头位置、磁头方向</p></li><li><p>寻道调度算法</p><ul><li>先来先服务算法<ul><li>按顺序访问进程的磁道读写需求</li></ul></li><li>最短寻道时间优先<ul><li>与磁头当前位置有关</li><li>优先访问离磁头最近的磁道</li></ul></li><li>扫描算法（电梯算法）<ul><li>每次只往一个方向移动</li><li>到达一个方向需要服务的尽头再反方向移动</li></ul></li><li>循环扫描算法<ul><li>每次只往一个方向移动</li><li>一个方向到头后再从头开始从同一个方向开始移动</li></ul></li></ul></li></ul></li></ul><h3 id="2-5-高速缓存"><a href="#2-5-高速缓存" class="headerlink" title="2.5 高速缓存"></a>2.5 高速缓存</h3><ul><li><p>为了解决CPU与主存的速度不匹配的问题</p></li><li><p>缓存与主存的关系</p><ul><li>存储的逻辑结构类似</li><li>缓存的容量较小</li><li>缓存的速度更快</li></ul></li><li><p>在主存缓存层次结构中的工作原理</p><ul><li>CPU需要的数据在缓存里：直接获取</li><li>CPU需要的数据不在缓存里：需要去主存拿，替换策略<ul><li>需要性能良好的缓存替换策略</li></ul></li><li>命中率：从缓存取数据的命中率<ul><li>命中率是衡量缓存的重要性能指标</li><li>理论上CPU每次都能从高速缓存取数据的时候，命中率为1</li><li>访问主存次数： N𝑚，访问Cache次数： N𝑐</li><li>命中率ℎ =𝑁𝑐/(𝑁𝑐＋𝑁𝑚)</li></ul></li><li>访问效率： 𝑒<ul><li>访问主存时间： 𝑡𝑚 ，访问缓存时间：𝑡𝑐</li><li>访问Cache-主存系统平均时间： 𝑡𝑎 = ℎ×𝑡𝑐 + (1 − ℎ)×𝑡𝑚</li><li>𝑒 =𝑡𝑐/𝑡𝑎</li></ul></li></ul></li><li><p>高速缓存替换策略</p><ul><li>随机算法</li><li>先进先出算法(FIFO)<ul><li>把高速缓存看做是一个先进先出的队列</li><li>优先替换最先进入队列的字块</li></ul></li><li>最不经常使用算法(LFU)<ul><li>优先淘汰最不经常使用的字块</li><li>需要额外的空间记录字块的使用频率</li></ul></li><li>最近最少使用算法(LRU)<ul><li>优先淘汰一段时间内没有使用的字块</li><li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li><li>有多种实现方法，一般使用双向链表</li></ul></li></ul></li></ul><h3 id="2-6-计算机的指令系统"><a href="#2-6-计算机的指令系统" class="headerlink" title="2.6 计算机的指令系统"></a>2.6 计算机的指令系统</h3><ul><li><p>计算机指令</p><ul><li>计算机通过指令指挥计算机工作。</li><li>CPU被时钟驱动，不断的读取PC指针指向的指令，并增加PC指针，从内存中读取指令并执行。(如此周而复始)</li><li>不同的CPU架构使用不同指令。目前使用最广泛的是RISC(Reduced instruction set computer,精简指令集)</li></ul></li><li><p>机器指令的形式</p><ul><li>机器指令主要由两部分组成：操作码、地址码</li><li>操作码指明指令所要完成的操作</li><li>操作码的位数反映了机器的操作种类，如果操作码有8位就有2^8 = 256种操作</li><li>地址码直接给出操作数或者操作数的地址</li><li>分三地址指令、二地址指令和一地址指令与零地址指令<ul><li>零地址指令<ul><li>在机器指令中无地址码</li><li>空操作、停机操作、中断返回操作等</li></ul></li><li>一地址指令<ul><li>(addr1)OP→ (addr1)：自己对自己的操作</li><li>(addr1)OP(ACC) → (addr1)：自增操作</li></ul></li><li>二地址指令<ul><li>(addr1)OP(addr2) → (addr1)或(addr2)： 结果放在addr1或addr2)</li></ul></li><li>三地址指令<ul><li>一个操作码和三个地址码</li><li>(addr1)OP(addr2) → (addr3)：结果放在addr3， 例如： 1+2=3</li></ul></li></ul></li></ul></li><li><p>操作类型</p><ul><li>数据传输<ul><li>寄存器之间、寄存器与存储单元、存储单元之间传送</li><li>数据读写、交换地址数据、清零置一等操作</li></ul></li></ul></li><li><p>load/store指令用来从内存中读/写入内存。通常会有多个版本的实现，助记符是:</p><pre><code>- load类: Iw,Ib,Ih- store类: sw,sb,sh</code></pre><ul><li>算术逻辑<ul><li>操作数之间的加减乘除运算<ul><li>加减乘除等：addi, subi, divi, multi</li></ul></li><li>操作数的与或非等逻辑位运算<ul><li>位运算指令：and/or/xor</li></ul></li></ul></li></ul></li><li><p>移位操作</p><ul><li>数据左移（乘2）、数据右移（除2）</li><li>完成数据在算术逻辑单元的必要操作</li><li>控制指令<ul><li>等待指令、停机指令、空操作指令、中断指令等</li></ul></li></ul></li><li><p>寻址方式</p><ul><li><p>指令寻址</p><ul><li><p>顺序寻址</p></li><li><p>跳跃寻址</p><table><thead><tr><th align="center">地址</th><th align="center">指令</th></tr></thead><tbody><tr><td align="center">101</td><td align="center">MOV R0,R1</td></tr><tr><td align="center">102</td><td align="center">ADD R1,R2</td></tr><tr><td align="center">103</td><td align="center">JMP 102</td></tr></tbody></table></li></ul></li><li><p>数据寻址</p><ul><li>立即寻址<ul><li>指令直接获得操作数</li><li>无需访问存储器</li><li>优点：速度快</li><li>缺点：地址码位数限制操作数表示范围</li></ul></li><li>直接寻址<ul><li>直接给出操作数在主存的地址</li><li>寻找操作数简单，无需计算数据地址</li><li>优点：寻找操作数简单</li><li>缺点：地址码位数限制操作数表示范围</li></ul></li><li>间接寻址<ul><li>指令地址码给出的是操作数地址的地址</li><li>需要访问一次或多次主存来获取操作数</li><li>优点：操作数寻址范围大</li><li>缺点：速度较慢</li></ul></li></ul></li></ul></li></ul><h3 id="2-7-计算机的控制器"><a href="#2-7-计算机的控制器" class="headerlink" title="2.7 计算机的控制器"></a>2.7 计算机的控制器</h3><ul><li>控制器是协调和控制计算机运行的</li><li>程序计数器<ul><li>程序计数器用来存储下一条指令的地址</li><li>循环从程序计数器中拿出指令</li><li>当指令被拿出时，指向下一条指令</li></ul></li><li>时序发生器<ul><li>电气工程领域，用于发送时序脉冲</li><li>CPU依据不同的时序脉冲有节奏的进行工作</li></ul></li><li>指令译码器<ul><li>指令译码器是控制器的主要部件之一</li><li>计算机指令由操作码和地址码组成</li><li>翻译操作码对应的操作以及控制传输地址码对应的数据</li></ul></li><li>指令寄存器<ul><li>指令寄存器也是控制器的主要部件之一</li><li>从主存或高速缓存取计算机指令</li></ul></li><li>主存地址寄存器<ul><li>保存当前CPU正要访问的内存单元的地址</li></ul></li><li>主存数据寄存器<ul><li>保存当前CPU正要读或写的主存数据</li></ul></li><li>通用寄存器<ul><li>用于暂时存放或传送数据或指令</li><li>可保存ALU的运算中间结果</li><li>容量比一般专用寄存器要大</li></ul></li></ul><h3 id="2-8-计算机的运算器"><a href="#2-8-计算机的运算器" class="headerlink" title="2.8 计算机的运算器"></a>2.8 计算机的运算器</h3><ul><li><p>运算器是用来进行数据运算加工的</p></li><li><p>数据缓冲器</p><ul><li>分为输入缓冲和输出缓冲</li><li>输入缓冲暂时存放外设送过来的数据</li><li>输出缓冲暂时存放送往外设的数据</li></ul></li><li><p>ALU</p><ul><li>ALU：算术逻辑单元，是运算器的主要组成</li><li>常见的位运算（左右移、与或非等）</li><li>算术运算（加减乘除等）</li></ul></li><li><p>通用寄存器</p><ul><li>用于暂时存放或传送数据或指令</li><li>可保存ALU的运算中间结果</li><li>容量比一般专用寄存器要大</li></ul></li><li><p>状态字寄存器</p><ul><li>存放运算状态（条件码、进位、溢出、结果正负等）</li><li>存放运算控制信息（调试跟踪标记位、允许中断位等）</li></ul></li><li><p>总线</p></li></ul><h3 id="2-9-计算机指令的执行过程"><a href="#2-9-计算机指令的执行过程" class="headerlink" title="2.9 计算机指令的执行过程"></a>2.9 计算机指令的执行过程</h3><ul><li><p>指令执行过程</p><ul><li>取指令 <ul><li>从缓存取指令</li><li>送到指令寄存器</li></ul></li><li>分析指令<ul><li>指令译码器译码</li><li>发出控制信号</li><li>程序计数器+1</li></ul></li><li>执行指令<ul><li>装载数据到寄存器</li><li>ALU处理数据</li><li>记录运算状态</li><li>送出运算结果</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144002.jpg" alt=""></p></li><li><p>CPU的流水线设计</p><ul><li>提高CPU的综合利用率</li><li>类似工厂的装配线</li><li>工厂的装配线使得多个产品可以同时被加工</li><li>在同一个时刻，不同产品均位于不同的加工阶段</li><li>串行执行m条指令： 𝑇1 = 3t × 𝑚</li><li>流水线执行m条指令： 𝑇2 = 𝑡 × (𝑚 + 2)</li><li>流水线执行效率:H=𝑇2/𝑇1= 𝑡 × (𝑚 + 2)/3t × 𝑚=1/3+1/3m, m很大的情况下是串行执行的3倍效率</li></ul><table><thead><tr><th>指令</th><th>时间片</th><th>时间片</th><th>时间片</th><th>时间片</th><th>时间片</th></tr></thead><tbody><tr><td>1</td><td>取指令</td><td>分析指令</td><td>执行指令</td><td></td><td></td></tr><tr><td>2</td><td></td><td>取指令</td><td>分析指令</td><td>执行指令</td><td></td></tr><tr><td>3</td><td></td><td></td><td>取指令</td><td>分析指令</td><td>执行指令</td></tr></tbody></table></li></ul><h2 id="3-计算篇"><a href="#3-计算篇" class="headerlink" title="3.计算篇"></a>3.计算篇</h2><h3 id="3-1-进制运算的基础"><a href="#3-1-进制运算的基础" class="headerlink" title="3.1 进制运算的基础"></a>3.1 进制运算的基础</h3><ul><li>什么是进制<ul><li>进位制是一种记数方式，亦称进位计数法或位值计数法</li><li>有限种数字符号来表示无限的数值</li><li>使用的数字符号的数目称为这种进位制的基数或底数</li><li>计算机喜欢二进制，但是二进制表达太长了</li><li>使用大进制位可以解决这个问题</li><li>八进制、十六进制满足2的n次方的要求</li><li>二进制<ul><li>1024=0b1000000000 </li></ul></li><li>八进制<ul><li>1024=0o2000</li></ul></li><li>十进制： [0-9] </li><li>十六进制<ul><li>MAC地址：[0-9]和A、 B、 C、 D、 E、 F</li><li>1024=0x400</li></ul></li><li>二十进制<ul><li>玛雅文明的玛雅数字</li><li>因努伊特的因努伊特数字</li></ul></li><li>六十进制<ul><li>时间、坐标、角度等量化数据</li></ul></li></ul></li><li>进制的表示法<ul><li>正整数N，基数为r，位数为n</li><li>N=𝑑𝑛−1×r𝑛−1 +𝑑𝑛−2× r𝑛−2 + ⋯ + 𝑑1×𝑟 + 𝑑0</li><li>N= 1024  = 1 ×10^3 +0×10^3+ 2 × 10^1 + 4× 10^0</li><li>𝑁 = 10000000000  = 1 × 2^10</li></ul></li><li>二进制转十进制的方法<ul><li>按权展开法</li><li>𝑁 = 01100101 = 1 × 2^6 + 1 × 2^5 + 1 ×2^2 + 1 = 101</li><li>小数的按权展开法</li><li>𝑁 = 0.11001 = 1×2^−1 + 1×2^−2 + 1× 2^−5 = 0.78125=25/32</li></ul></li><li>十进制转二进制的方法<ul><li>（整数）重复相除法</li><li>重复除以2 ，得商， 取余数，最后一个余数为最高位</li><li>（小数）重复相乘法</li><li>重复乘以2， 得积 ，取1，第一个余数为最高位</li></ul></li></ul><h3 id="3-2-原码-amp-反码-amp-补码"><a href="#3-2-原码-amp-反码-amp-补码" class="headerlink" title="3.2 原码&amp;反码&amp;补码"></a>3.2 原码&amp;反码&amp;补码</h3><ul><li><p>使用0表示正数，使用1表示负数，最高位表示符号位，其它都是数字位</p></li><li><p>+237=011101101， -237=111101101</p></li><li><p>两个字节16位表示+237 【0】 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1</p></li><li><p>原码表示法</p><ul><li>使用0表示正数、 1表示负数</li><li>规定符号位位于数值第一位</li><li>表达简单明了，是人类最容易理解的表示法</li><li>0有两种表示方法： 00、 10</li><li>原码进行运算非常复杂，特别是两个操作数符号不同的时候<ul><li>判断两个操作数绝对值大小</li><li>使用绝对值大的数减去绝对值小的数</li><li>对于符号值，以绝对值大的为准</li></ul></li><li>希望找到不同符号操作数更加简单的运算方法</li><li>希望找到使用正数代替负数的方法</li><li>使用加法操作代替减法操作，从而消除减法</li></ul></li><li><p>补码表示法</p><ul><li>整数的补码<ul><li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li><li>如果 x∈[−2^𝑛, 0) X=2^(𝑛+1) + 𝑥<ul><li>例如：n=4， x=13，计算x的二进制原码和补码<ul><li>原码： x=0,1101</li><li>补码： x=0,1101</li></ul></li><li>例如：n=4，x=-13，计算x的二进制原码和补码<ul><li>原码： x=1,1101</li><li>补码： 2^(𝑛+1) + 𝑥= 2^(4+1() − 13 = 100000 − 1101 = 10011</li></ul></li></ul></li></ul></li><li>小数的补码<ul><li>如果 x∈[0, 1) X=x  </li><li>如果 x∈[−1, 0) X=2+x</li><li>规律：小数的反码等于原码除符号位外按位取反，补码等于反码+1</li></ul></li><li>在计算补码的过程中，还是使用了减法</li><li>需要寻找使用正数代替负数的方法</li></ul></li><li><p>反码表示法</p><ul><li>反码的目的是找出原码和补码之间的规律，消除转换过程中的减法</li><li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li><li>如果 x∈[−2^𝑛, 0) X=（2^(𝑛+1)-1） + 𝑥</li><li>规律：负数的反码等于原码除符号位外按位取反，负数的补码等于反码+1<ul><li>-13， 原码：1,1101 ，反码：1,0011 ，补码：1,0010</li><li>-7， 原码： 1,0111，反码： 1,1001，补码： 1,1000</li><li>-1， 原码： 1,0001 ，反码：1,1111，补码： 1,1110</li></ul></li><li>x=-13，计算x的二进制原码和反码<ul><li>原码： x=1,1101</li><li>反码： (2𝑛+1−1) + 𝑥 = (2^4+1−1) − 13 = 011111 − 1101 = 1,0010</li><li>反码： x=1,0010</li></ul></li></ul></li></ul><p>  <img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144040.jpg" alt=""></p><h3 id="3-3-定点数与浮点数"><a href="#3-3-定点数与浮点数" class="headerlink" title="3.3 定点数与浮点数"></a>3.3 定点数与浮点数</h3><ul><li><p>定点数的表示方法</p><ul><li>小数点固定在某个位置的数称之为定点数</li><li>纯小数 ：符号位【小数点】数值位</li><li>纯整数：符号位 数值位 【小数点】</li><li>其它小数需要乘以比例因子以满足定点数保存格式，10.01 需要左移两位或者右移两位</li><li>计算机中的存储形式见下表，小数点不显示</li></ul><table><thead><tr><th align="left">数值</th><th align="center">符号位</th><th align="center">数值位</th></tr></thead><tbody><tr><td align="left">0.1011</td><td align="center">0</td><td align="center">1011</td></tr><tr><td align="left">-0.1011</td><td align="center">1</td><td align="center">1011</td></tr><tr><td align="left">1011</td><td align="center">0</td><td align="center">1011</td></tr><tr><td align="left">-1011</td><td align="center">1</td><td align="center">1011</td></tr></tbody></table></li><li><p>浮点数的表示方法</p><ul><li><p>计算机处理的很大程度上不是纯小数或纯整数</p></li><li><p>数据范围很大，定点数难以表达</p></li><li><p>浮点数的表示格式</p><ul><li>类比科学计数法：123450000000 = 1.2345 × 10^11 ， 1.2345：尾数 ，10：基数 ，11：阶码</li><li>𝑁 = 𝑆 × 𝑟^𝑗 ，S：尾数， r：基数， j：阶码</li><li>阶码符号位|阶码数值位|尾数符号位|尾数数值位</li><li>尾数规定使用纯小数</li><li>11.0101 = 0.110101 × 2^10</li><li>11.0101 = 0.0110101 × 2^11</li><li>计算机中的存储形式见下表，小数点不显示</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>0.110101 × 2^10</td><td>0</td><td>10</td><td>0</td><td>1010100</td></tr><tr><td>0.0110101 × 2^11</td><td>0</td><td>11</td><td>0</td><td>01101010</td></tr></tbody></table></li></ul></li></ul><ul><li><p>浮点数的表示范围</p><ul><li>假设阶码数值取m位，尾数数值取n位</li><li>阶码表示范围： [−(𝟐^𝒎 − 𝟏),  𝟐^𝒎 − 𝟏]</li><li>尾数表示范围： [−(𝟏 − 𝟐^−𝒏), −(𝟐^−𝒏)] [𝟐^−𝒏,  𝟏 − 𝟐−^𝒏]</li><li>单精度浮点数：使用4字节、 32位来表达浮点数(float)</li><li>双精度浮点数：使用8字节、 64位来表达浮点数(double)</li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144101.jpg" alt=""></p></li><li><p>浮点数的规格化</p><ul><li>尾数规定使用纯小数</li><li>尾数最高位必须是1</li><li>例如：11.0101 = 0.110101 × 2^10</li></ul></li></ul><ul><li><p>两者的对比</p><ul><li>当定点数与浮点数位数相同时， 浮点数表示的范围更大</li><li>当浮点数尾数为规格化数时， 浮点数的精度更高（尾数存8位，前面的0多了丢失的精度就更多）</li><li>浮点数运算包含阶码和尾数， 浮点数的运算更为复杂</li><li>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</li><li>浮点数在数的运算规则、运算速度、硬件成本方面不如定点数</li></ul></li></ul><h3 id="3-4-定点数的加减法运算"><a href="#3-4-定点数的加减法运算" class="headerlink" title="3.4 定点数的加减法运算"></a>3.4 定点数的加减法运算</h3><ul><li><p>整数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2^(𝑛+1))</p></li><li><p>小数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2)</p></li><li><p>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</p></li><li><p>整数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补  (𝑚𝑜𝑑2^(𝑛+1))</p></li><li><p>小数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补 (𝑚𝑜𝑑2)</p></li><li><p>-B[补]等于B[补]连同符号位按位取反，末位加一，B 补 = 1,0010101， (−B) 补 = 0,1101011</p></li><li><p>负数的反码等于原码按位取反，补码等于反码+1</p></li><li><p>例如： A=-110010， B=001101，求A+B</p><ul><li>A[补] = 1,001110</li><li>B 补 = B[原] = 0,001101</li><li>A 补 + B 补 = (A + B) 补 =1,011011</li><li>(A + B)原 = −100101</li></ul></li><li><p>例如：A=11001000， B=-00110100，求A-B</p><ul><li>A 补 = A[原] = 0,11001000</li><li>B 补 = 1,11001100</li><li>(−B) 补 = 0,00110100</li><li>A 补 − B 补 = A + (−B) 补=0,11111100</li><li>A − B（原） = 111111100</li></ul></li><li><p>双符号位判断溢出</p><ul><li>双符号位判断法<ul><li>单符号位表示变成双符号位： 0=&gt;00,1=&gt;11</li><li>双符号位产生的进位丢弃</li><li>结果的双符号位不同则表示溢出</li></ul></li></ul></li></ul><h3 id="3-5-浮点数的加减法运算"><a href="#3-5-浮点数的加减法运算" class="headerlink" title="3.5 浮点数的加减法运算"></a>3.5 浮点数的加减法运算</h3><ul><li><p>𝑥 = 𝑆𝑥 × 𝑟^𝑗𝑥，𝑥 = 0.1101 × 2^01</p></li><li><p>𝑦 = 𝑆𝑦 × 𝑟^𝑗y，𝑦 = (−0.1010) × 2^11</p></li><li><p>対阶</p><ul><li>対阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算</li><li>浮点数尾数运算简单</li><li>浮点数位数实际小数位与阶码有关</li><li>阶码按小阶看齐大阶的原则</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>0.1101 × 2^01</td><td>00</td><td>0001</td><td>00</td><td>1101</td></tr><tr><td>(−0.1010) × 2^11</td><td>00</td><td>0011</td><td>01</td><td>1010</td></tr></tbody></table><ul><li>対阶操作：将x的数值右移两位，𝑥 = 0.001101 × 2^11</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>0.001101 × 2^11</td><td>00</td><td><strong>0011</strong></td><td>00</td><td>0011(01)舍弃后两位</td></tr><tr><td>(−0.1010) × 2^11</td><td>00</td><td>0011</td><td>01</td><td>1010</td></tr></tbody></table></li><li><p>尾数求和</p><ul><li>使用补码进行运算</li><li>减法运算转化为加法运算： A - B = A + (-B)</li><li>𝑥[原] = 00.0011，𝑥[补] = 00.0011</li><li>𝑦[原] = 11.1010，𝑦[补] = 11.0110</li><li>S = (𝑥 + 𝑦)[补] = 11.1001</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>11.1001</td><td>00</td><td><strong>0011</strong></td><td>11</td><td>1001</td></tr></tbody></table></li><li><p>尾数规格化</p><ul><li>◆ 对补码进行规格化需要判断两种情况： S&gt;0和S&lt;0</li><li>S[补] = 00.1xxxxxx(𝑆 &gt; 0)</li><li>S[补] = 11.0xxxxxx(𝑆 &lt; 0)</li><li>如果不满足此格式，需要进行左移， 同时阶码相应变化，以满足规格化</li><li>S = (𝑥 + 𝑦)[补] = 11.1001，不满足约定格式</li><li>S = (𝑥 + 𝑦)[补] = 11. (1)0010(左移舍弃，阶码数值位也要相应变化)</li></ul><table><thead><tr><th>数字</th><th>阶码符号位</th><th>阶码数值位</th><th>尾数符号位</th><th>尾数数值位（8位）</th></tr></thead><tbody><tr><td>11.0010</td><td>00</td><td>0010</td><td>11</td><td>0010</td></tr></tbody></table><ul><li>S = 𝑥 + 𝑦 补 = 11.0010，𝑥 + 𝑦 原 = −0.1110</li><li>𝑥 + 𝑦 = −0.1110× 2^10</li><li>一般情况下都是左移，符号位不一致下需要右移(定点运算的溢出情况)</li><li>右移的话则需要进行舍入操作</li></ul></li><li><p>舍入</p><ul><li>0舍1入” 法（二进制的四舍五入）</li><li>S 补 = 10.10110111，符号位不一致，右移舍弃尾数再+1， S 补 = 11.01011011(1)+1=11.01011100</li><li>右移阶码要+1</li></ul></li><li><p>溢出判断</p><ul><li>定点运算双符号位不一致为溢出</li><li>浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规</li><li>浮点运算主要通过阶码的双符号位判断是否溢出</li><li>如果规格化后，阶码双符号位不一致，则认为是溢出</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144134.jpg" alt=""></p><h3 id="3-6-浮点数的乘除法运算"><a href="#3-6-浮点数的乘除法运算" class="headerlink" title="3.6 浮点数的乘除法运算"></a>3.6 浮点数的乘除法运算</h3><ul><li><p>乘法：阶码相加，尾数求积</p></li><li><p>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) × 𝑟^(𝑗𝑥+𝑗y)</p></li><li><p>除法：阶码相减，尾数求商</p></li><li><p>𝑥/𝑦 = (𝑆𝑥/𝑆𝑦) × 𝑟^(𝑗𝑥−𝑗y)</p></li><li><p>阶码运算</p></li><li><p>尾数运算</p></li><li><p>尾数规格化</p></li><li><p>舍入</p></li><li><p>溢出判断</p></li><li><p>例如： 𝑥 = 0.11010011 × 2^1101， 𝑦 = 0.11101110 × 2^0001，假设阶码4位，尾数8位，计算x * y</p><ul><li>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) ×^𝑟(𝑗𝑥+𝑗y)</li><li>= (0.11010011 × 0.11101110) × 𝑟^(1101+0001)</li><li>= 0.11000100(保留八位) × 𝑟^1110</li></ul></li></ul><h2 id="4-关于我"><a href="#4-关于我" class="headerlink" title="4.关于我"></a>4.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p><p><a href="http://basedev.cn/" target="_blank" rel="noopener">个人网站 basedev.cn</a>  </p><p><a href="https://github.com/jaydroid1024" target="_blank" rel="noopener">Github</a></p><p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践。</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5.参考"></a>5.参考</h2><ul><li><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content" target="_blank" rel="noopener">重学操作系统 | 拉钩教育</a></p></li><li><p><a href="https://coding.imooc.com/class/package/355.html" target="_blank" rel="noopener">编程必备基础 | 慕课网</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
            <tag> 组成原理 </tag>
            
            <tag> CPU </tag>
            
            <tag> 存储器 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客框架使用简介</title>
      <link href="2018/09/07/hexo-intro/"/>
      <url>2018/09/07/hexo-intro/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png" alt=""></p><h1 id="Hexo-博客框架"><a href="#Hexo-博客框架" class="headerlink" title="Hexo 博客框架"></a>Hexo 博客框架</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="1-主题：hexo-theme-matery"><a href="#1-主题：hexo-theme-matery" class="headerlink" title="1. 主题：hexo-theme-matery"></a>1. 主题：hexo-theme-matery</h2><p>matery 这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p><h3 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1.1 特性"></a>1.1 特性</h3><ul><li><p>简单漂亮，文章内容美观易读</p></li><li><p><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</p></li><li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p></li><li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p></li><li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p></li><li><p>时间轴式的归档页</p></li><li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p></li><li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p></li><li><p>可自定义的数据的友情链接页面</p></li><li><p>支持文章置顶和文章打赏</p></li><li><p>支持 <code>MathJax</code></p></li><li><p><code>TOC</code> 目录</p></li><li><p>可设置复制文章内容时追加版权信息</p></li><li><p>可设置阅读文章时做密码验证</p></li><li><p><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p></li><li><p>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p></li><li><p>支持在首页的音乐播放和视频播放功能</p></li><li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</p></li><li><p>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</p></li></ul><h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h3><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h3 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h3><h4 id="1-3-1-切换主题"><a href="#1-3-1-切换主题" class="headerlink" title="1.3.1 切换主题"></a>1.3.1 切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><p><code>_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h4 id="1-3-2-新建分类-categories-页"><a href="#1-3-2-新建分类-categories-页" class="headerlink" title="1.3.2 新建分类 categories 页"></a>1.3.2 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-3-新建标签-tags-页"><a href="#1-3-3-新建标签-tags-页" class="headerlink" title="1.3.3 新建标签 tags 页"></a>1.3.3 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-4-新建关于我-about-页"><a href="#1-3-4-新建关于我-about-页" class="headerlink" title="1.3.4 新建关于我 about 页"></a>1.3.4 新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-5-新建留言板-contact-页（可选的）"><a href="#1-3-5-新建留言板-contact-页（可选的）" class="headerlink" title="1.3.5 新建留言板 contact 页（可选的）"></a>1.3.5 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="1-3-6-新建友情链接-friends-页（可选的）"><a href="#1-3-6-新建友情链接-friends-页（可选的）" class="headerlink" title="1.3.6 新建友情链接 friends 页（可选的）"></a>1.3.6 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="1-3-7-新建-404-页"><a href="#1-3-7-新建-404-页" class="headerlink" title="1.3.7 新建 404 页"></a>1.3.7 新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span><span class="token punctuation">---</span></code></pre><h4 id="1-3-8-菜单导航配置"><a href="#1-3-8-菜单导航配置" class="headerlink" title="1.3.8 菜单导航配置"></a>1.3.8 菜单导航配置</h4><p>配置基本菜单导航的名称、路径url和图标icon.</p><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找   </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book</code></pre><h4 id="1-3-9-二级菜单配置方法"><a href="#1-3-9-二级菜单配置方法" class="headerlink" title="1.3.9 二级菜单配置方法"></a>1.3.9 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h4 id="1-3-10-代码高亮"><a href="#1-3-10-代码高亮" class="headerlink" title="1.3.10 代码高亮"></a>1.3.10 代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span></code></pre><h4 id="1-3-11-搜索"><a href="#1-3-11-搜索" class="headerlink" title="1.3.11 搜索"></a>1.3.11 搜索</h4><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post</code></pre><h4 id="1-3-12-中文链接转拼音（建议安装）"><a href="#1-3-12-中文链接转拼音（建议安装）" class="headerlink" title="1.3.12 中文链接转拼音（建议安装）"></a>1.3.12 中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h4 id="1-3-13-文章字数统计插件（建议安装）"><a href="#1-3-13-文章字数统计插件（建议安装）" class="headerlink" title="1.3.13 文章字数统计插件（建议安装）"></a>1.3.13 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span></code></pre><h4 id="1-3-14-添加emoji表情支持（可选的）"><a href="#1-3-14-添加emoji表情支持（可选的）" class="headerlink" title="1.3.14 添加emoji表情支持（可选的）"></a>1.3.14 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><h4 id="1-3-15-添加-RSS-订阅支持（可选的）"><a href="#1-3-15-添加-RSS-订阅支持（可选的）" class="headerlink" title="1.3.15 添加 RSS 订阅支持（可选的）"></a>1.3.15 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h4 id="1-3-16-添加-DaoVoice-在线聊天功能（可选的）"><a href="#1-3-16-添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="1.3.16 添加 DaoVoice 在线聊天功能（可选的）"></a>1.3.16 添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h4><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="1-3-17-添加-Tidio-在线聊天功能（可选的）"><a href="#1-3-17-添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="1.3.17 添加 Tidio 在线聊天功能（可选的）"></a>1.3.17 添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h4><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h4 id="1-3-18-修改页脚"><a href="#1-3-18-修改页脚" class="headerlink" title="1.3.18 修改页脚"></a>1.3.18 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h4 id="1-3-19-修改社交链接"><a href="#1-3-19-修改社交链接" class="headerlink" title="1.3.19 修改社交链接"></a>1.3.19 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h4 id="1-3-20-修改打赏的二维码图片"><a href="#1-3-20-修改打赏的二维码图片" class="headerlink" title="1.3.20 修改打赏的二维码图片"></a>1.3.20 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="1-3-21-配置音乐播放器（可选的）"><a href="#1-3-21-配置音乐播放器（可选的）" class="headerlink" title="1.3.21 配置音乐播放器（可选的）"></a>1.3.21 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 非吸底模式有效</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">server</span><span class="token punctuation">:</span> netease   <span class="token comment" spellcheck="true"># require music platform: netease, tencent, kugou, xiami, baidu</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> playlist    <span class="token comment" spellcheck="true"># require song, playlist, album, search, artist</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> <span class="token number">503838841     </span><span class="token comment" spellcheck="true"># require song id / playlist id / album id / search keyword</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false      </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>       <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'random'</span>   <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>   <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7       </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 列表默认折叠</span></code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h4 id="1-3-22-Front-matter-选项详解"><a href="#1-3-22-Front-matter-选项详解" class="headerlink" title="1.3.22  Front-matter 选项详解"></a>1.3.22  Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><p>1.2 最简示例</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><p>1.3 最全示例</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="2-Hexo-常用命令"><a href="#2-Hexo-常用命令" class="headerlink" title="2. Hexo 常用命令"></a>2. Hexo 常用命令</h2><h3 id="2-1-Create-a-new-post"><a href="#2-1-Create-a-new-post" class="headerlink" title="2.1 Create a new post"></a>2.1 Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="2-2-Run-server"><a href="#2-2-Run-server" class="headerlink" title="2.2 Run server"></a>2.2 Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="2-3-Generate-static-files"><a href="#2-3-Generate-static-files" class="headerlink" title="2.3 Generate static files"></a>2.3 Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="2-4-Deploy-to-remote-sites"><a href="#2-4-Deploy-to-remote-sites" class="headerlink" title="2.4 Deploy to remote sites"></a>2.4 Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo - Matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
