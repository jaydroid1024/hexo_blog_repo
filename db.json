{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/f.png","path":"f.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/l.png","path":"medias/l.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner_post.png","path":"medias/banner_post.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e9d9d8394e6628c7588d7c034e77e7c147187ae0","modified":1634444551028},{"_id":"source/404.md","hash":"d8941d95ca8cfbefd576e208b21116cdb53fee86","modified":1604741709505},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1604375413482},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1604375413483},{"_id":"themes/hexo-theme-matery/README.md","hash":"56299cf1fe60a11fef61b3948fe148f995df747e","modified":1604375413483},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"0fdf818476a444663cc8ffa2f194199d9fd93508","modified":1604375413484},{"_id":"themes/hexo-theme-matery/README 2.md","hash":"a8dc4521f5d0ecbe3fb8f56998e03c4a6015b502","modified":1604388139322},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"926c573ca7015bc31c49cba71cdd6ffb3155fa7f","modified":1623724414466},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"beae7e3614a43256e70fda2ea1da411367e56e8c","modified":1627727999034},{"_id":"source/_data/.DS_Store","hash":"cb2279427e7fc8e13c5e8a7b0396c82a46fcbe41","modified":1612804325981},{"_id":"source/_data/friends.json","hash":"d89ab3aa1224b250d9c186884dab4d852418e41d","modified":1604741632822},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1590316132669},{"_id":"source/_posts/hello-world.md","hash":"81e811ccf0ba37449c4650d157f11e2c5c754576","modified":1627727152646},{"_id":"source/about/index.md","hash":"a6af6b4554f3b1eb8bd952f734ba135fead32316","modified":1604741194654},{"_id":"source/categories/index.md","hash":"b0626f6c32790d70bb1909bb945d2eb418d467c3","modified":1604741121567},{"_id":"source/contact/index.md","hash":"df200366f9e2c014b2b7957eed4ab9eb02cdde41","modified":1604741253144},{"_id":"source/friends/index.md","hash":"2be114a59665f3f4e39e39e1db1173e98d7b84c4","modified":1604741457555},{"_id":"source/tags/index.md","hash":"9897e22b3e10cb380eacc82eed0f1267b00ea810","modified":1604741155279},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"ae34ac0e175c3037675722e436637efbceea32f0","modified":1604375413485},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"9c8ca67377211e5d60fdde272a975faa9a91a22a","modified":1604375413485},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1604375413494},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1604375413494},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1604375413494},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"4dc6f08e7709cc04e886be72dbf0d06469f0effc","modified":1604375413494},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"c7453d5b064d42529e8c9fdef52d0901d51acb9b","modified":1604375413494},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1604375413484},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1604375413494},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1604375413494},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1604375413484},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1604375413495},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"015611a240c69a2c1bd338bdde09a583e86a215c","modified":1604773366883},{"_id":"themes/hexo-theme-matery/source/f.png","hash":"26a20f0a3942bfa3e11b0ab2eca1f27e034e040b","modified":1604771423247},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1604771495234},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1604375413491},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1604375413491},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1604375413491},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1604375413492},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1604375413493},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1604375413485},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1604375413485},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1604375413485},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1604375413486},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"28617bf2a35a4269eba6df466acd174e416d2d1e","modified":1604375413486},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1604375413486},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1604375413486},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"4b5476478ba12183b7c97a33d5545fc53be362a8","modified":1604375413486},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1604375413486},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1604375413487},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1604375413487},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1604375413487},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f8438ac80df005934a330b029de292d26f0b6ecb","modified":1604375413487},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1604375413488},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1604375413487},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"76b4a37e0364380b143fdf94bf1a5e6941564414","modified":1604375413487},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"5f09386aece8f9cf31f6059bbde79cd6c5171493","modified":1604375413488},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1604375413488},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"a0de13cde718c7951cbf8eff809e76538e32e8e2","modified":1604375413489},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1604375413488},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1604375413489},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1604375413489},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"d05926e79aa6dfc235193b9d8c6aa03118b0eade","modified":1604375413490},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1604375413490},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1604375413490},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1604375413490},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"81eca110e533693a5369c0cc9106bf0f0432ee37","modified":1604375413491},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1604375413490},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1604375413491},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1604375413491},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1604375413491},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1604375413495},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1604375413495},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1604375413496},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1604375413496},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1604375413496},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1604375413496},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1604771526046},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"4801131b666d38eab488e1be48fc1f2b7d6bb29b","modified":1604769726615},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1604375413577},{"_id":"themes/hexo-theme-matery/source/medias/l.png","hash":"26a20f0a3942bfa3e11b0ab2eca1f27e034e040b","modified":1604771423247},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"015611a240c69a2c1bd338bdde09a583e86a215c","modified":1604773366883},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1604375413554},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1604375413497},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1604375413497},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1604375413518},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1604375413519},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1604375413519},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1604375413497},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1604375413519},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1604375413497},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1604375413519},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1604375413519},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1604375413519},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1604375413520},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1604375413520},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1604375413520},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1604375413525},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1604375413527},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1604375413528},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1604375413528},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1604375413528},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1604375413531},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1604375413539},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1604375413538},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1604375413539},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1604375413539},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1604375413542},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1604375413542},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1604375413555},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1604375413560},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1604375413562},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1604375413567},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1604375413566},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1604375413567},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1604375413570},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1604375413568},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1604375413575},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1604375413569},{"_id":"themes/hexo-theme-matery/source/medias/reward/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1604771423751},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1604375413576},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"95574c946f1653fb1853e30acdf886786ffd172f","modified":1604770539421},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"0152aba5e0142619669808b5fa2b0f64e1b4a2cd","modified":1604770539641},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1604375413498},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1604375413521},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1604375413529},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1604375413527},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1604375413543},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1604375413548},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1604375413548},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1604375413556},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1604375413558},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1604375413557},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1604375413559},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1604375413563},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1604375413565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1604375413563},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1604375413561},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1604375413560},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1604375413564},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1604375413566},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1604375413570},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1604375413574},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1604375413576},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1604375413507},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1604375413509},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1604375413508},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1604375413509},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1604375413526},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1604375413529},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1604375413529},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1604375413530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1604375413530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1604375413529},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1604375413530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1604375413530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1604375413530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1604375413530},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1604375413531},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1604375413540},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1604375413541},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1604375413532},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1604375413540},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1604375413540},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1604375413541},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1604375413542},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1604375413542},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1604375413544},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1604375413533},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1604375413546},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1604375413552},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1604375413554},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1604375413507},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1604375413547},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1604375413498},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1604375413506},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1604375413518},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1604375413500},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1604375413505},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1604375413517},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1604375413508},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1604375413550},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1604375413510},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1604375413516},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1604375413525},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1604375413504},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1604375413515},{"_id":"public/atom.xml","hash":"98662a2547d851079f2030d51a3f6af0e0fdc706","modified":1637514942498},{"_id":"public/search.xml","hash":"e59ee15dda0ade1638d2a193cc03ee00cc4068f7","modified":1637514942498},{"_id":"public/content.json","hash":"ea5385db65c9ed366b229bb8773c886bbedfa9bb","modified":1637514656942},{"_id":"public/404.html","hash":"3fd480893a27666447ff65b9a62072afb85b5e77","modified":1637514656942},{"_id":"public/about/index.html","hash":"1bdd8fced733c40282d82a0bfdf4cdc6b8854d50","modified":1637514656942},{"_id":"public/categories/index.html","hash":"4857a9816b5bcf96f146630c9e09daa45cc2cd59","modified":1637514656942},{"_id":"public/contact/index.html","hash":"11c80680bba2d8f8acb0bf495f7ce146bf777b5a","modified":1637514656942},{"_id":"public/friends/index.html","hash":"217964835905a36707f8ddc8ecc18841ce8744d8","modified":1637514656942},{"_id":"public/tags/index.html","hash":"5f1a518679f8c0747cf97bec418068028eb843de","modified":1637514656942},{"_id":"public/2020/05/04/hello-world/index.html","hash":"d3ec9a5a33a720ee2f04b5e2b8d3bb86cc77c0a9","modified":1627712514660},{"_id":"public/archives/index.html","hash":"3e7a83ddd7e469abb03137f86aca7853ca1b2ebd","modified":1637514656942},{"_id":"public/archives/2020/index.html","hash":"1c24c7c1df72c8a5516e3afd3120cf2cbf57c8f8","modified":1637514656942},{"_id":"public/archives/2020/05/index.html","hash":"06d56a6d492d57db6ab4b5aafc0bff47e04d4275","modified":1627712514660},{"_id":"public/categories/Hello/index.html","hash":"4394e8fa966753fea22612490bb782b65770d79f","modified":1627712514660},{"_id":"public/index.html","hash":"d703cdae04e53b01ade83b1a1851316dccf965b9","modified":1637514942498},{"_id":"public/tags/W/index.html","hash":"6281c4c46dd40131015307cd69c1dbe4022c65d5","modified":1627712514660},{"_id":"public/tags/H/index.html","hash":"b38233f6f9b07c6b181707ac9d888de9df8bcc90","modified":1627712514660},{"_id":"public/f.png","hash":"26a20f0a3942bfa3e11b0ab2eca1f27e034e040b","modified":1623751481162},{"_id":"public/favicon.png","hash":"015611a240c69a2c1bd338bdde09a583e86a215c","modified":1623751481162},{"_id":"public/medias/avatar.jpg","hash":"4801131b666d38eab488e1be48fc1f2b7d6bb29b","modified":1623751481162},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1623751481162},{"_id":"public/medias/l.png","hash":"26a20f0a3942bfa3e11b0ab2eca1f27e034e040b","modified":1623751481162},{"_id":"public/medias/logo.png","hash":"015611a240c69a2c1bd338bdde09a583e86a215c","modified":1623751481162},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1623751481162},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1623751481162},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1623751481162},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1623751481162},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1623751481162},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1623751481162},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1623751481162},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1623751481162},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1623751481162},{"_id":"public/medias/reward/alipay.jpg","hash":"95574c946f1653fb1853e30acdf886786ffd172f","modified":1623751481162},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1623751481162},{"_id":"public/medias/reward/wechat.png","hash":"0152aba5e0142619669808b5fa2b0f64e1b4a2cd","modified":1623751481162},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1623751481162},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1623751481162},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1623751481162},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1623751481162},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1623751481162},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1623751481162},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1623751481162},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1623751481162},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1623751481162},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1623751481162},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1623751481162},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1623751481162},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1623751481162},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1623751481162},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1623751481162},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1623751481162},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1623751481162},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1623751481162},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1623751481162},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1623751481162},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1623751481162},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1623751481162},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1623751481162},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1623751481162},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1623751481162},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1623751481162},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1623751481162},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1623751481162},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1623751481162},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1623751481162},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1623751481162},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1623751481162},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1623751481162},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1623751481162},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1623751481162},{"_id":"public/js/search.js","hash":"e1482406c58ea2a0eb178d7e4efb2c879cdddc80","modified":1623751481162},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1623751481162},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1623751481162},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1623751481162},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1623751481162},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1623751481162},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1623751481162},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1623751481162},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1623751481162},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1623751481162},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1623751481162},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1623751481162},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1623751481162},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1623751481162},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1623751481162},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1623751481162},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1623751481162},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1623751481162},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1623751481162},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1623751481162},{"_id":"public/css/matery.css","hash":"b53f4b6b7b2d992c904a9bf98b504fba247b220e","modified":1623751481162},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1623751481162},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1623751481162},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1623751481162},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1623751481162},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1623751481162},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1623751481162},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1623751481162},{"_id":"public/libs/minivaline/MiniValine.js","hash":"fbb58c37e2c74f127ae0c566afa9b48889aab79f","modified":1623751481162},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1623751481162},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1623751481162},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1623751481162},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1623751481162},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1623751481162},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1623751481162},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1623751481162},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1623751481162},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1623751481162},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1623751481162},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1623751481162},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1623751481162},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1623751481162},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1623751481162},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1623751481162},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1623751481162},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1623751481162},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1623751481162},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1623751481162},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1623751481162},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1623751481162},{"_id":"source/_posts/jdispatcher.md","hash":"196f1a9bf6ab1233ed4f6659b4926e7e6c5cb824","modified":1629764467761},{"_id":"public/2021/07/31/jdispatcher/index.html","hash":"9012cbcd13132a375f5eb8cb76dd75a6efdcf5ed","modified":1637514656942},{"_id":"public/archives/2021/07/index.html","hash":"f34da45c95ce5e3f80adfe9d11bdc00f9af757f7","modified":1637514656942},{"_id":"public/archives/2021/index.html","hash":"f505723e9380512a50abdcb037051c3f8aa7802b","modified":1637514656942},{"_id":"public/tags/组件化/index.html","hash":"8f42643f553985f2443db44d779cc12216d22ad9","modified":1637514656942},{"_id":"themes/hexo-theme-matery/source/medias/banner_post.png","hash":"5519a4b9d540e9d00115593600b71bbdab3c31d4","modified":1572513021000},{"_id":"public/2018/09/07/hello-world/index.html","hash":"12f16d3ead72e315fe127bf567a520ed88bd2c1b","modified":1627727156831},{"_id":"public/archives/2018/index.html","hash":"c6fdbb37e4ca78fed2802319da521b13f3adf94d","modified":1637514656942},{"_id":"public/archives/2018/09/index.html","hash":"6147821e6fa8efe165690a8f24d6b7cc0cdca25d","modified":1637514656942},{"_id":"public/categories/Hexo/index.html","hash":"e35c389b8296431382d3970cd66fab8cd12c8d71","modified":1627728227317},{"_id":"public/tags/Hexo/index.html","hash":"7c15ae436ad6b8a9b3c5009be7af3bd959f9a798","modified":1627727922037},{"_id":"public/medias/banner_post.png","hash":"5519a4b9d540e9d00115593600b71bbdab3c31d4","modified":1627725721923},{"_id":"source/_posts/hexo_intro.md","hash":"58e6bbb8bc5f25a4d95a466ee077b9988ae0fb19","modified":1627803292111},{"_id":"public/2018/09/07/hexo-intro/index.html","hash":"f3f68c635ce5434463e23c7604d7c0cedf465054","modified":1637514656942},{"_id":"public/categories/框架/index.html","hash":"9b9366832ff86f71a08d328301c02a2bc620c1c9","modified":1637514656942},{"_id":"public/tags/Hexo-Matery/index.html","hash":"6d1de04675b6928b50dfc8c350df8438c4fbf3bd","modified":1637514656942},{"_id":"public/tags/注解/index.html","hash":"36d1d9f6310ddec7ddd0c42aa7b7d5baec87e53f","modified":1637514656942},{"_id":"public/tags/Gradle-Plugin/index.html","hash":"202f7a9350640e3f31b77b6fe58c607c18a21d0a","modified":1637514656942},{"_id":"public/tags/ASM/index.html","hash":"2bbb3868baa2920740a350bfae35ce57fc98f2d0","modified":1637514656942},{"_id":"public/tags/APT/index.html","hash":"31eb9a6e59999742bcff497d3d80d151358c4f48","modified":1637514656942},{"_id":"public/categories/博客/index.html","hash":"944cd953511e827b9ab1a1a7d0fb239dd490afe3","modified":1637514656942},{"_id":"source/_posts/computer_composition.md","hash":"691d60f2b00e972f04658f5c0565f2d1d749a673","modified":1635958570645},{"_id":"public/2021/05/31/computer-composition/index.html","hash":"39b801743a80c189ac02ee0a9e8864f08fe27101","modified":1637514656942},{"_id":"public/archives/2021/05/index.html","hash":"43d64bec458ad201a74616195112b428d971d187","modified":1637514656942},{"_id":"public/categories/计算机/index.html","hash":"113a96d31cae4ce2d839b4684a090c03d12cbf37","modified":1637514656942},{"_id":"public/tags/组成原理/index.html","hash":"2fbfc2243f2eb9ec46b4d5bd32537ca03441e768","modified":1637514656942},{"_id":"public/tags/计算机基础/index.html","hash":"56dabbe04298c3544412509f74ceb61cfae9d5ca","modified":1637514656942},{"_id":"public/tags/CPU/index.html","hash":"8dd3a73165d0ac7544e545f910744e4d09019388","modified":1637514656942},{"_id":"public/tags/位运算/index.html","hash":"bb4e7cf259c442fc507c87745e0d0adb93eeb716","modified":1637514656942},{"_id":"public/tags/存储器/index.html","hash":"bdcedfd364c55dde2a4d1d19488057759c69f04c","modified":1637514656942},{"_id":"source/_posts/computer_os.md","hash":"2d897036a2b9d97767dc0dc1736fc5b520bf8865","modified":1627812201291},{"_id":"public/2021/05/31/computer-os/index.html","hash":"e31bae125ef2ed85456036fce62d7e7381a674a6","modified":1627808344756},{"_id":"public/tags/操作系统/index.html","hash":"1c425fe0262b12fdf6780aa19ecf3f91ca4354b1","modified":1637514656942},{"_id":"public/tags/Linux/index.html","hash":"69169fe71bffa4d636ceb1a76ad1370418843d47","modified":1637514656942},{"_id":"public/tags/线程/index.html","hash":"a94f5b6059bbb6eeeea0ba83e4d712bf0e756776","modified":1637514656942},{"_id":"public/tags/进程/index.html","hash":"a0162a14869ff218033e4cc67bdb80ac0e08efd7","modified":1637514656942},{"_id":"public/tags/作业管理/index.html","hash":"92351db39f460a5f2b66ff143fa6a8644e1000ba","modified":1637514656942},{"_id":"public/tags/文件管理/index.html","hash":"b27a6c74d24cca3e9968e32e5dbefa86301a7129","modified":1637514656942},{"_id":"source/_posts/computer_net.md","hash":"06dc7058236aa4cdc5555d2aaec3dd7c6f701fd3","modified":1627812238071},{"_id":"public/tags/计算机网络/index.html","hash":"40917b83457d5aacda0afe6fa42586755811b39e","modified":1637514656942},{"_id":"public/tags/TCP-IP/index.html","hash":"5a8018c25718bf2411ce9145f49e98024aa22041","modified":1637514656942},{"_id":"public/tags/HTTP-HTTPS/index.html","hash":"92c6c0737d62113a03605c3fc98a588e3b81c74e","modified":1637514656942},{"_id":"public/tags/OSI七层模型/index.html","hash":"9e6725b95811eba729f55fb014d5022f31f2a9d7","modified":1637514656942},{"_id":"public/tags/DNS/index.html","hash":"a17ab4207358b92ea48d52944520c82a3774bb02","modified":1637514656942},{"_id":"public/2021/07/31/computer-net/index.html","hash":"1f400b0671f4802930dca4dfa4183854da90f1d4","modified":1637514656942},{"_id":"public/2021/07/01/computer-os/index.html","hash":"cefaaeffb601c0060c2bb963ae2dd6b2288dc8c9","modified":1637514656942},{"_id":"source/_posts/android_base.md","hash":"03cc5bbe06f9e808a628dccad82ad87039e601b5","modified":1635926377843},{"_id":"public/2021/07/31/android-base/index.html","hash":"a4981432c5153f103b6ccbd890e033dbb27620da","modified":1637514656942},{"_id":"public/categories/Android/index.html","hash":"bdd95020f8ff697c61925c7d29d9c5b3fdf0d42b","modified":1637514656942},{"_id":"public/tags/Android/index.html","hash":"95c1c97acc70dabcb9620648e40f1cf391f3cf15","modified":1637514656942},{"_id":"public/tags/Java/index.html","hash":"08a26955811d68870367db4679a7add3a8483cb4","modified":1637514656942},{"_id":"source/_posts/pattern_all.md","hash":"00ab46a09163e60e53e388e27aa83ac4df687664","modified":1628788353969},{"_id":"public/2020/11/15/pattern-all/index.html","hash":"250240e7230e005c54a42af55d543c094b7469fc","modified":1628788096150},{"_id":"public/archives/2020/11/index.html","hash":"7e7335d393130d9043b888b35f52e92d8c2e8c87","modified":1635958780652},{"_id":"public/2021/05/31/pattern-all/index.html","hash":"4e69afbfaa03766bc51cf9f355d504c2de253b4d","modified":1637514656942},{"_id":"public/categories/设计模式/index.html","hash":"c360785bc5e0bfeb42469f7ae083850bf5225825","modified":1637514656942},{"_id":"public/tags/设计模式/index.html","hash":"ee96fd0f07e63e07dc4c181e3c777975f5c83ff9","modified":1637514656942},{"_id":"source/_posts/java_jvm.md","hash":"293b2bb53015dcc4c6a5bf80289ef12cb8b7feac","modified":1629764624297},{"_id":"public/2020/07/31/java-jvm/index.html","hash":"63dbc8bd8e4ec1d032d2120b0c421725668381c7","modified":1637514656942},{"_id":"public/archives/2020/07/index.html","hash":"ec7a18912b40e716b7e44a9b9e4d4627fc25dc45","modified":1637514656942},{"_id":"public/tags/JVM/index.html","hash":"bee688986b1f58841fedcb528587f791bc5e39fe","modified":1637514656942},{"_id":"source/_posts/android_component_aar.md","hash":"1d0b71b9402616d752c8ed3ea8ccf8de869d1589","modified":1629967838007},{"_id":"public/2021/07/31/android-component-aar/index.html","hash":"14ab1bade8a2e2c3bb4de0a32ade1ebc765e7455","modified":1637514656942},{"_id":"public/categories/组件化/index.html","hash":"9f4c6dc2318f8c67505732ddac1c9bf81035af63","modified":1637514656942},{"_id":"public/tags/Maven/index.html","hash":"d5c09f8421dba890f06c0427e36dfee033b70403","modified":1637514656942},{"_id":"public/tags/aar化/index.html","hash":"db24422326289a995cdd6d90efce5c140dcc2cfc","modified":1637514656942},{"_id":"public/tags/编译优化/index.html","hash":"fb5ef0418824ef49288c39c3c84bd919bcaa4a60","modified":1637514656942},{"_id":"source/_posts/jetpack_viewbinding.md","hash":"aeb94e21e49000ed1a0872c33788368d6cf982b6","modified":1631096518651},{"_id":"public/2021/05/31/jetpack-viewbinding/index.html","hash":"589dc1e12a90eddb3a49d3bc360912e9afd0c84d","modified":1637514656942},{"_id":"public/categories/Jetpack/index.html","hash":"4ebc61639f655873815bc507de741bd5a9804f5d","modified":1637514656942},{"_id":"public/tags/Jetpack/index.html","hash":"edf6a04b152d6f8a764025d45109d40c5e7d26da","modified":1637514656942},{"_id":"public/tags/ViewBinding/index.html","hash":"5e27e70ec0781851908bc1fcc48c5f343043384d","modified":1637514656942},{"_id":"public/tags/VBHelper/index.html","hash":"202a9ba922f380de17b0db250c80997565b6c966","modified":1637514656942},{"_id":"source/_posts/Kotlin_delegate.md","hash":"5da34173c008a8916429c7d995f530cd58cc8e28","modified":1631988013917},{"_id":"public/2021/05/31/kotlin-delegate/index.html","hash":"4dea79a96d731de887fbebb730cbfddcb53414c5","modified":1631987903249},{"_id":"public/categories/Kotlin/index.html","hash":"40fc0a53dd8e1a2bb3d3b764a8e47087627200cf","modified":1637514656942},{"_id":"public/page/2/index.html","hash":"97f87dc718817982bd0e7681112dc57ba3ecf547","modified":1637514656942},{"_id":"public/tags/Kotlin-委托/index.html","hash":"ed03c888869de9a7cf55615e24855be1c4a385c9","modified":1637514656942},{"_id":"public/tags/属性委托/index.html","hash":"719108a02484b533857affb6edfd51c416ca54af","modified":1637514656942},{"_id":"public/tags/ViewModel/index.html","hash":"7af974c020d306901e0c4203c3c1ffe46a7e865d","modified":1637514656942},{"_id":"public/2021/08/31/kotlin-delegate/index.html","hash":"976985e1df4eecf3bbd47430d71bfda4c82e64d5","modified":1637514656942},{"_id":"public/archives/2021/08/index.html","hash":"8f3e204f3e6ec666fe38308e34ca6758a3945601","modified":1637514656942},{"_id":"source/_posts/code_all.md","hash":"97fa5379dfbf0a5418654eb7c32363d8b20487c7","modified":1636044344746},{"_id":"public/2020/11/15/code-all/index.html","hash":"92f16b252d4960b2ecc792070b8cb23dc1765803","modified":1635958780652},{"_id":"public/2021/10/31/code-all/index.html","hash":"f116321b8b2883a42ebb95f5434ce870ee4bafee","modified":1637514656942},{"_id":"public/archives/2021/10/index.html","hash":"3d1ba2aff21f76a1de1e28c92407d69e4d47930d","modified":1637514656942},{"_id":"public/categories/算法/index.html","hash":"2b4d15c1bf507b85e4b9ba1768c5313fbe43686c","modified":1637514656942},{"_id":"public/tags/算法/index.html","hash":"56ebbd81452a9984df35728fdd9003aa3296a3df","modified":1637514656942},{"_id":"source/_posts/lib_eventbus.md","hash":"2e72ffd6fae084ffa42134a04e94e601789506f9","modified":1637346821886},{"_id":"public/2021/01/31/lib-eventbus/index.html","hash":"bcb0dc377d70bf07226585bb49688949522dbe8a","modified":1637514656942},{"_id":"public/archives/page/2/index.html","hash":"4004e71e8fda2979e793efb1652a3778373a92d0","modified":1637514656942},{"_id":"public/archives/2021/01/index.html","hash":"77fb08e29f44bcc60df3ed386c47aec047107383","modified":1637514656942},{"_id":"public/tags/观察者模式/index.html","hash":"a9b276fd7d384c7eacbbcea6c263e500433a100c","modified":1637514656942},{"_id":"public/tags/EventBus/index.html","hash":"4c1faf70a88feaa5a128d70bf8f2d5d974f367dd","modified":1637514656942},{"_id":"public/tags/事件总线/index.html","hash":"3c340eba972b0680fbb79060958bbd389cde07f3","modified":1637514656942},{"_id":"public/tags/框架/index.html","hash":"8e376ed39e12d52f889e11ec4e053ae1703b4f1e","modified":1637514656942},{"_id":"source/_posts/jetpack_lifecycle.md","hash":"9523b1abfe6702e8cef2a274dd2cedeab29eda71","modified":1637514903449},{"_id":"public/2021/05/21/jetpack-lifecycle/index.html","hash":"8b3ac9697fc6b2ef70fd3cb0d3199733d44e0ac4","modified":1637514942498},{"_id":"public/tags/Lifecycle/index.html","hash":"046a715e6a88edaff82229e568080f54d3893a5c","modified":1637514656942}],"Category":[{"name":"Hello","_id":"ckpxvpknh0004ruxfcx6z1qt1"},{"name":"Hexo","_id":"ckrrlvakv000042xf99jshde0"},{"name":"框架","_id":"ckrrnczno0002ezxf1dtg93ad"},{"name":"博客","_id":"ckrrnebsw0000ftxf12kq5zul"},{"name":"计算机","_id":"ckrswgm680001fexfc4q7bdiu"},{"name":"Android","_id":"ckrtie1py00019ixfaq7aekpr"},{"name":"设计模式","_id":"cks96jcmo0000lexfe7z8bsm8"},{"name":"组件化","_id":"ckssof6ut0001unfya221ge9q"},{"name":"Jetpack","_id":"cktbcrlt80001fxxf3qkqeyja"},{"name":"Kotlin","_id":"cktq3gnzg0001ccxfd318b8h1"},{"name":"算法","_id":"ckvjrt0q70000zxxf0jpz7jeb"}],"Data":[{"_id":".DS_Store","data":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"},{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2020-11-07T09:35:09.505Z","path":"404.html","comments":1,"_id":"ckpxvpkjy0000ruxf8efp921h","content":"","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2020-11-07T09:26:34.654Z","path":"about/index.html","comments":1,"_id":"ckpxvpknc0002ruxf50tsczpf","content":"","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2020-11-07T09:25:21.567Z","path":"categories/index.html","comments":1,"_id":"ckpxvpkne0003ruxf281056g4","content":"","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2020-11-07T09:27:33.144Z","path":"contact/index.html","comments":1,"_id":"ckpxvpknt0006ruxfefi426ca","content":"","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2020-11-07T09:30:57.555Z","path":"friends/index.html","comments":1,"_id":"ckpxvpknu0007ruxf3qs84ojf","content":"","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2020-11-07T09:25:55.279Z","path":"tags/index.html","comments":1,"_id":"ckpxvpko50009ruxf1v6u6c22","content":"","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"JDispatcher-Android组件生命周期分发框架","date":"2021-07-31T06:16:55.000Z","cover":true,"summary":"Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n\n\n# JDispatcher\n\nAndroid 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png)\n\n\n## 功能介绍\n\n- 实现 Application 各个生命周期方法在所有需要的组件中分发\n- 分发顺序支持多种规则\n  - 优先级：优先级值越大越先被调用\n  - 依赖项：组件依赖的分发类先初始化\n  - 支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序\n- 分发维度支持多种规则\n  - 在指定进程(所有进程，主进程，非主进程)中分发\n  - 在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载\n  - 支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）\n  - 手动延迟调用分发，实现延迟加载\n  - 通过 ContentProvider 实现在 Application 之前超前预加载（todo）\n  - 只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化\n- 维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效\n- 支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一\n- 通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景\n- 通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能\n- AGP Transform 增量支持编译（todo）\n- 通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效\n- 支持统计所有分发类的初始化时间，可用于启动优化的统计与排查\n\n\n\n## 框架结构\n\n- jdispatcher-annotation\n  - 模块类型：apply plugin: 'java'\n  - 模块描述：声明编译时所需的注解类以及公共类等\n\n- jdispatcher-compiler\n  - 模块类型：apply plugin: 'java'\n  - 模块描述：编译期(.java--.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java \n\n- jdispatcher-plugin\n\n  - 模块类型：apply plugin: 'groovy'\n\n  - 模块描述：编译期(.class--.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序\n\n  - 模块主要工作：\n    - 第一个：IDispatch 的分发流程\n      - 扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件\n      - 反射获取收集到的 Map<String, DispatchItem> atlas)\n      - 通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化\n      - 按照 DispatchItem 的排序规则完成排序操作\n      - 将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作\n    - 第二个：Application 生命周期方法的自动注册流程\n      - 通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类\n      - JDispatcher 调用字节码注入到 onTerminate()\n      - JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)\n      - JDispatcher 调用字节码注入到 onLowMemory()\n      - JDispatcher 调用字节码注入到 onTrimMemory(level: Int)\n- jdispatcher-api\n  - 模块类型：apply plugin: 'com.android.library'\n  - 模块描述：运行时用于整个框架的初始化，运行时分发等操作\n\n\n\n## 集成说明\n\n[![](https://jitpack.io/v/jaydroid1024/JDispatcher.svg)](https://jitpack.io/#jaydroid1024/JDispatcher)\n\n\n```groovy\n//Step 1. Add the JitPack repository to your build file\n//buildscript & allprojects\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n//dependencies\nclasspath 'com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version'\n\n//Step 2. Add the dependency\nimplementation 'com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version'\nkapt 'com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version'\n\n//Step 3. apply the plugin and config dispatcher\napply plugin: 'jdispatcher'\ndispatcher {\n    appCanonicalName = \"com.jay.android.App\"\n    buildIncremental = false\n    buildDebug = true\n}\n\n```\n\n\n\n## 使用说明\n\n```kotlin\nclass App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        //为分发类指定自定义参数，用于三方key的统一收口配置\n        val dispatchExtraParam = HashMap<String, HashMap<String, String>>()\n        dispatchExtraParam[\"com.jay.android.jdispatcher.DispatcherAppDemo\"] =\n            if (BuildConfig.DEBUG) hashMapOf(\n                Pair(\"key1\", \"value1_debug\"),\n                Pair(\"key2\", \"value2_debug\")\n            )\n            else hashMapOf(\n                Pair(\"key1\", \"value1_release\"),\n                Pair(\"key2\", \"value2_release\")\n            )\n\n        //自动分发\n        JDispatcher.instance\n            .withDebugAble(true)//调试模式：打印更多日志，实时刷新等\n            .withDispatchExtraParam(dispatchExtraParam)//分发参数\n            .init(this)\n    }\n  \n  \n// region如果在 app build.gradle 中配置了\n// dispatcher {appCanonicalName = \"com.jay.android.App\"}\n// 就不需要添加以下代码,dispatcher 插件会自动注入\n\n    override fun onTerminate() {\n        super.onTerminate()\n        JDispatcher.instance.onTerminate()\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)\n        JDispatcher.instance.onConfigurationChanged(newConfig)\n    }\n\n    override fun onLowMemory() {\n        super.onLowMemory()\n        JDispatcher.instance.onLowMemory()\n    }\n\n    override fun onTrimMemory(level: Int) {\n        super.onTrimMemory(level)\n        JDispatcher.instance.onTrimMemory(level)\n    }\n//endregion\n}\n```\n\n\n\n```kotlin\n//手动调用分发\nJDispatcher.instance\n    .manualDispatch(\"com.jay.android.jdispatcher.DispatcherAppDemo\")\n```\n\n\n\n\n```kotlin\n//声明分发类\n@Dispatch(priority = Priority.LOW_DEFAULT, description = \"DispatcherAppDemo\")\npublic class DispatcherAppDemo extends DispatchTemplate {\n\n    @Override\n    public void onCreate(@NotNull Application app, @NotNull DispatchItem dispatchItem) {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onCreate\" + dispatchItem);\n    }\n\n    @Override\n    public void onConfigurationChanged(@NotNull Configuration newConfig) {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onConfigurationChanged\" + newConfig);\n    }\n\n    @Override\n    public void onLowMemory() {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onLowMemory\");\n\n    }\n\n    @Override\n    public void onTerminate() {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onTerminate\");\n\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onTrimMemory\" + level);\n\n    }\n}\n```\n\n\n\n```groovy\n#Jdispatcher 混淆配置\n-keep public class com.jay.android.dispatcher.**{*;}\n-keep class * implements com.jay.android.dispatcher.common.IDispatch{*;}\n```\n\n\n\n## Todo\n\n  - 支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况\n\n  - 通过 ContentProvider 实现在 Application 之前超前预加载\n\n  - AGP Transform 增量支持编译\n\n    \n\n## 参考\n\n- [ARouter](https://github.com/alibaba/ARouter/blob/master/README_CN.md) 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦\n\n- [AppInit](https://github.com/bingoogolapple/AppInit) 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。\n- [*WMRouter*](https://github.com/meituan/WMRouter) 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点\n\n","source":"_posts/jdispatcher.md","raw":"---\ntitle: JDispatcher-Android组件生命周期分发框架\ndate: 2021-07-31 14:16:55\ncover: true\ntags: \n    - 组件化\n    - 注解\n    - Gradle Plugin \n    - ASM\n    - APT\ncategory: \n\t- 框架\nsummary: Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n\n\n# JDispatcher\n\nAndroid 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png)\n\n\n## 功能介绍\n\n- 实现 Application 各个生命周期方法在所有需要的组件中分发\n- 分发顺序支持多种规则\n  - 优先级：优先级值越大越先被调用\n  - 依赖项：组件依赖的分发类先初始化\n  - 支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序\n- 分发维度支持多种规则\n  - 在指定进程(所有进程，主进程，非主进程)中分发\n  - 在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载\n  - 支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）\n  - 手动延迟调用分发，实现延迟加载\n  - 通过 ContentProvider 实现在 Application 之前超前预加载（todo）\n  - 只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化\n- 维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效\n- 支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一\n- 通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景\n- 通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能\n- AGP Transform 增量支持编译（todo）\n- 通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效\n- 支持统计所有分发类的初始化时间，可用于启动优化的统计与排查\n\n\n\n## 框架结构\n\n- jdispatcher-annotation\n  - 模块类型：apply plugin: 'java'\n  - 模块描述：声明编译时所需的注解类以及公共类等\n\n- jdispatcher-compiler\n  - 模块类型：apply plugin: 'java'\n  - 模块描述：编译期(.java--.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java \n\n- jdispatcher-plugin\n\n  - 模块类型：apply plugin: 'groovy'\n\n  - 模块描述：编译期(.class--.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序\n\n  - 模块主要工作：\n    - 第一个：IDispatch 的分发流程\n      - 扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件\n      - 反射获取收集到的 Map<String, DispatchItem> atlas)\n      - 通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化\n      - 按照 DispatchItem 的排序规则完成排序操作\n      - 将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作\n    - 第二个：Application 生命周期方法的自动注册流程\n      - 通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类\n      - JDispatcher 调用字节码注入到 onTerminate()\n      - JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)\n      - JDispatcher 调用字节码注入到 onLowMemory()\n      - JDispatcher 调用字节码注入到 onTrimMemory(level: Int)\n- jdispatcher-api\n  - 模块类型：apply plugin: 'com.android.library'\n  - 模块描述：运行时用于整个框架的初始化，运行时分发等操作\n\n\n\n## 集成说明\n\n[![](https://jitpack.io/v/jaydroid1024/JDispatcher.svg)](https://jitpack.io/#jaydroid1024/JDispatcher)\n\n\n```groovy\n//Step 1. Add the JitPack repository to your build file\n//buildscript & allprojects\nallprojects {\n    repositories {\n        ...\n        maven { url 'https://jitpack.io' }\n    }\n}\n//dependencies\nclasspath 'com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version'\n\n//Step 2. Add the dependency\nimplementation 'com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version'\nkapt 'com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version'\n\n//Step 3. apply the plugin and config dispatcher\napply plugin: 'jdispatcher'\ndispatcher {\n    appCanonicalName = \"com.jay.android.App\"\n    buildIncremental = false\n    buildDebug = true\n}\n\n```\n\n\n\n## 使用说明\n\n```kotlin\nclass App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        //为分发类指定自定义参数，用于三方key的统一收口配置\n        val dispatchExtraParam = HashMap<String, HashMap<String, String>>()\n        dispatchExtraParam[\"com.jay.android.jdispatcher.DispatcherAppDemo\"] =\n            if (BuildConfig.DEBUG) hashMapOf(\n                Pair(\"key1\", \"value1_debug\"),\n                Pair(\"key2\", \"value2_debug\")\n            )\n            else hashMapOf(\n                Pair(\"key1\", \"value1_release\"),\n                Pair(\"key2\", \"value2_release\")\n            )\n\n        //自动分发\n        JDispatcher.instance\n            .withDebugAble(true)//调试模式：打印更多日志，实时刷新等\n            .withDispatchExtraParam(dispatchExtraParam)//分发参数\n            .init(this)\n    }\n  \n  \n// region如果在 app build.gradle 中配置了\n// dispatcher {appCanonicalName = \"com.jay.android.App\"}\n// 就不需要添加以下代码,dispatcher 插件会自动注入\n\n    override fun onTerminate() {\n        super.onTerminate()\n        JDispatcher.instance.onTerminate()\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)\n        JDispatcher.instance.onConfigurationChanged(newConfig)\n    }\n\n    override fun onLowMemory() {\n        super.onLowMemory()\n        JDispatcher.instance.onLowMemory()\n    }\n\n    override fun onTrimMemory(level: Int) {\n        super.onTrimMemory(level)\n        JDispatcher.instance.onTrimMemory(level)\n    }\n//endregion\n}\n```\n\n\n\n```kotlin\n//手动调用分发\nJDispatcher.instance\n    .manualDispatch(\"com.jay.android.jdispatcher.DispatcherAppDemo\")\n```\n\n\n\n\n```kotlin\n//声明分发类\n@Dispatch(priority = Priority.LOW_DEFAULT, description = \"DispatcherAppDemo\")\npublic class DispatcherAppDemo extends DispatchTemplate {\n\n    @Override\n    public void onCreate(@NotNull Application app, @NotNull DispatchItem dispatchItem) {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onCreate\" + dispatchItem);\n    }\n\n    @Override\n    public void onConfigurationChanged(@NotNull Configuration newConfig) {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onConfigurationChanged\" + newConfig);\n    }\n\n    @Override\n    public void onLowMemory() {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onLowMemory\");\n\n    }\n\n    @Override\n    public void onTerminate() {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onTerminate\");\n\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        Log.d(\"Jay\", \"DispatcherAppDemo#onTrimMemory\" + level);\n\n    }\n}\n```\n\n\n\n```groovy\n#Jdispatcher 混淆配置\n-keep public class com.jay.android.dispatcher.**{*;}\n-keep class * implements com.jay.android.dispatcher.common.IDispatch{*;}\n```\n\n\n\n## Todo\n\n  - 支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况\n\n  - 通过 ContentProvider 实现在 Application 之前超前预加载\n\n  - AGP Transform 增量支持编译\n\n    \n\n## 参考\n\n- [ARouter](https://github.com/alibaba/ARouter/blob/master/README_CN.md) 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦\n\n- [AppInit](https://github.com/bingoogolapple/AppInit) 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。\n- [*WMRouter*](https://github.com/meituan/WMRouter) 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点\n\n","slug":"jdispatcher","published":1,"updated":"2021-08-24T00:21:07.761Z","_id":"ckrre08ha0000hxxf10x6e2ni","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"JDispatcher\"><a href=\"#JDispatcher\" class=\"headerlink\" title=\"JDispatcher\"></a>JDispatcher</h1><p>Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png\" alt=\"\"></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li>实现 Application 各个生命周期方法在所有需要的组件中分发</li>\n<li>分发顺序支持多种规则<ul>\n<li>优先级：优先级值越大越先被调用</li>\n<li>依赖项：组件依赖的分发类先初始化</li>\n<li>支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序</li>\n</ul>\n</li>\n<li>分发维度支持多种规则<ul>\n<li>在指定进程(所有进程，主进程，非主进程)中分发</li>\n<li>在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载</li>\n<li>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）</li>\n<li>手动延迟调用分发，实现延迟加载</li>\n<li>通过 ContentProvider 实现在 Application 之前超前预加载（todo）</li>\n<li>只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化</li>\n</ul>\n</li>\n<li>维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效</li>\n<li>支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一</li>\n<li>通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景</li>\n<li>通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能</li>\n<li>AGP Transform 增量支持编译（todo）</li>\n<li>通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效</li>\n<li>支持统计所有分发类的初始化时间，可用于启动优化的统计与排查</li>\n</ul>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h2><ul>\n<li><p>jdispatcher-annotation</p>\n<ul>\n<li>模块类型：apply plugin: ‘java’</li>\n<li>模块描述：声明编译时所需的注解类以及公共类等</li>\n</ul>\n</li>\n<li><p>jdispatcher-compiler</p>\n<ul>\n<li>模块类型：apply plugin: ‘java’</li>\n<li>模块描述：编译期(.java–.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java </li>\n</ul>\n</li>\n<li><p>jdispatcher-plugin</p>\n<ul>\n<li><p>模块类型：apply plugin: ‘groovy’</p>\n</li>\n<li><p>模块描述：编译期(.class–.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序</p>\n</li>\n<li><p>模块主要工作：</p>\n<ul>\n<li>第一个：IDispatch 的分发流程<ul>\n<li>扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件</li>\n<li>反射获取收集到的 Map&lt;String, DispatchItem&gt; atlas)</li>\n<li>通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化</li>\n<li>按照 DispatchItem 的排序规则完成排序操作</li>\n<li>将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作</li>\n</ul>\n</li>\n<li>第二个：Application 生命周期方法的自动注册流程<ul>\n<li>通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类</li>\n<li>JDispatcher 调用字节码注入到 onTerminate()</li>\n<li>JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)</li>\n<li>JDispatcher 调用字节码注入到 onLowMemory()</li>\n<li>JDispatcher 调用字节码注入到 onTrimMemory(level: Int)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>jdispatcher-api</p>\n<ul>\n<li>模块类型：apply plugin: ‘com.android.library’</li>\n<li>模块描述：运行时用于整个框架的初始化，运行时分发等操作</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集成说明\"><a href=\"#集成说明\" class=\"headerlink\" title=\"集成说明\"></a>集成说明</h2><p><a href=\"https://jitpack.io/#jaydroid1024/JDispatcher\" target=\"_blank\" rel=\"noopener\"><img src=\"https://jitpack.io/v/jaydroid1024/JDispatcher.svg\" alt=\"\"></a></p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\" spellcheck=\"true\">//Step 1. Add the JitPack repository to your build file</span>\n<span class=\"token comment\" spellcheck=\"true\">//buildscript &amp; allprojects</span>\nallprojects <span class=\"token punctuation\">{</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">...</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://jitpack.io'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//dependencies</span>\nclasspath <span class=\"token string\">'com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Step 2. Add the dependency</span>\nimplementation <span class=\"token string\">'com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version'</span>\nkapt <span class=\"token string\">'com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version'</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Step 3. apply the plugin and config dispatcher</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'jdispatcher'</span>\ndispatcher <span class=\"token punctuation\">{</span>\n    appCanonicalName <span class=\"token operator\">=</span> <span class=\"token string\">\"com.jay.android.App\"</span>\n    buildIncremental <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n    buildDebug <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> App <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//为分发类指定自定义参数，用于三方key的统一收口配置</span>\n        <span class=\"token keyword\">val</span> dispatchExtraParam <span class=\"token operator\">=</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dispatchExtraParam<span class=\"token punctuation\">[</span><span class=\"token string\">\"com.jay.android.jdispatcher.DispatcherAppDemo\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BuildConfig<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">)</span> <span class=\"token function\">hashMapOf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1_debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2_debug\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span> <span class=\"token function\">hashMapOf</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value1_release\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value2_release\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//自动分发</span>\n        JDispatcher<span class=\"token punctuation\">.</span>instance\n            <span class=\"token punctuation\">.</span><span class=\"token function\">withDebugAble</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//调试模式：打印更多日志，实时刷新等</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">withDispatchExtraParam</span><span class=\"token punctuation\">(</span>dispatchExtraParam<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//分发参数</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// region如果在 app build.gradle 中配置了</span>\n<span class=\"token comment\" spellcheck=\"true\">// dispatcher {appCanonicalName = \"com.jay.android.App\"}</span>\n<span class=\"token comment\" spellcheck=\"true\">// 就不需要添加以下代码,dispatcher 插件会自动注入</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onTerminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onTerminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        JDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">onTerminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onConfigurationChanged</span><span class=\"token punctuation\">(</span>newConfig<span class=\"token operator\">:</span> Configuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onConfigurationChanged</span><span class=\"token punctuation\">(</span>newConfig<span class=\"token punctuation\">)</span>\n        JDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">onConfigurationChanged</span><span class=\"token punctuation\">(</span>newConfig<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onLowMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onLowMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        JDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">onLowMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onTrimMemory</span><span class=\"token punctuation\">(</span>level<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onTrimMemory</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span>\n        JDispatcher<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">onTrimMemory</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//endregion</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//手动调用分发</span>\nJDispatcher<span class=\"token punctuation\">.</span>instance\n    <span class=\"token punctuation\">.</span><span class=\"token function\">manualDispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.jay.android.jdispatcher.DispatcherAppDemo\"</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//声明分发类</span>\n<span class=\"token annotation builtin\">@Dispatch</span><span class=\"token punctuation\">(</span>priority <span class=\"token operator\">=</span> Priority<span class=\"token punctuation\">.</span>LOW_DEFAULT<span class=\"token punctuation\">,</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"DispatcherAppDemo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> DispatcherAppDemo extends DispatchTemplate <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NotNull</span> Application app<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@NotNull</span> DispatchItem dispatchItem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DispatcherAppDemo#onCreate\"</span> <span class=\"token operator\">+</span> dispatchItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onConfigurationChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NotNull</span> Configuration newConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DispatcherAppDemo#onConfigurationChanged\"</span> <span class=\"token operator\">+</span> newConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onLowMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DispatcherAppDemo#onLowMemory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onTerminate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DispatcherAppDemo#onTerminate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onTrimMemory</span><span class=\"token punctuation\">(</span>int level<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DispatcherAppDemo#onTrimMemory\"</span> <span class=\"token operator\">+</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">#Jdispatcher 混淆配置\n<span class=\"token operator\">-</span>keep <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">com<span class=\"token punctuation\">.</span>jay<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span></span><span class=\"token operator\">**</span><span class=\"token punctuation\">{</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span>keep <span class=\"token keyword\">class</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">com<span class=\"token punctuation\">.</span>jay<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>dispatcher<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>IDispatch</span><span class=\"token punctuation\">{</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><ul>\n<li><p>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况</p>\n</li>\n<li><p>通过 ContentProvider 实现在 Application 之前超前预加载</p>\n</li>\n<li><p>AGP Transform 增量支持编译</p>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://github.com/alibaba/ARouter/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">ARouter</a> 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦</p>\n</li>\n<li><p><a href=\"https://github.com/bingoogolapple/AppInit\" target=\"_blank\" rel=\"noopener\">AppInit</a> 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。</p>\n</li>\n<li><p><a href=\"https://github.com/meituan/WMRouter\" target=\"_blank\" rel=\"noopener\"><em>WMRouter</em></a> 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点</p>\n</li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"JDispatcher\"><a href=\"#JDispatcher\" class=\"headerlink\" title=\"JDispatcher\"></a>JDispatcher</h1><p>Android 组件生命周期分发框架，适用于组件化，模块化，启动优化等场景</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210729184216.png\" alt=\"\"></p>\n<h2 id=\"功能介绍\"><a href=\"#功能介绍\" class=\"headerlink\" title=\"功能介绍\"></a>功能介绍</h2><ul>\n<li>实现 Application 各个生命周期方法在所有需要的组件中分发</li>\n<li>分发顺序支持多种规则<ul>\n<li>优先级：优先级值越大越先被调用</li>\n<li>依赖项：组件依赖的分发类先初始化</li>\n<li>支持自动校正在优先级和依赖项两种规则交叉使用情况下的分发顺序</li>\n</ul>\n</li>\n<li>分发维度支持多种规则<ul>\n<li>在指定进程(所有进程，主进程，非主进程)中分发</li>\n<li>在指定线程(主线程，空闲线程，工作线程)中分发，实现异步加载</li>\n<li>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况（todo）</li>\n<li>手动延迟调用分发，实现延迟加载</li>\n<li>通过 ContentProvider 实现在 Application 之前超前预加载（todo）</li>\n<li>只在debug模式下分发，实现 DevTools、DoKit 等开发工具的初始化</li>\n</ul>\n</li>\n<li>维度值采用对整型 or/and 的位操作完成多维度值的收集与识别，灵活且高效</li>\n<li>支持初始化时批量传参，可用于多项目多环境的三方 sdk 的初始化，使环境配置更统一</li>\n<li>通过注解打点，APT 增量收集分发类，降低耦合，可用于模块化，组件化场景</li>\n<li>通过拦截 AGP 构建流程实现在编译期间对分发类的扫描和排序，提高运行时性能</li>\n<li>AGP Transform 增量支持编译（todo）</li>\n<li>通过 ASM 字节码插桩实现分发表和 Application  生命周期回调方法的自动注入，集成更高效</li>\n<li>支持统计所有分发类的初始化时间，可用于启动优化的统计与排查</li>\n</ul>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a>框架结构</h2><ul>\n<li><p>jdispatcher-annotation</p>\n<ul>\n<li>模块类型：apply plugin: ‘java’</li>\n<li>模块描述：声明编译时所需的注解类以及公共类等</li>\n</ul>\n</li>\n<li><p>jdispatcher-compiler</p>\n<ul>\n<li>模块类型：apply plugin: ‘java’</li>\n<li>模块描述：编译期(.java–.class阶段) 收集和处理整个工程中的Dispatch注解信息并通过 javapoet 生成辅助类文件 JDispatcher$$Group_hash.java </li>\n</ul>\n</li>\n<li><p>jdispatcher-plugin</p>\n<ul>\n<li><p>模块类型：apply plugin: ‘groovy’</p>\n</li>\n<li><p>模块描述：编译期(.class–.dex阶段) 自定义Transform拦截AGP的构建过程，找到所有Dispatch并排序</p>\n</li>\n<li><p>模块主要工作：</p>\n<ul>\n<li>第一个：IDispatch 的分发流程<ul>\n<li>扫描到所有 APT 生成的 JDispatcher$$Group_hash.java 文件</li>\n<li>反射获取收集到的 Map&lt;String, DispatchItem&gt; atlas)</li>\n<li>通过 atlas 集合收集到的 DispatchItem 实现对 IDispatch 对象的反射实例化</li>\n<li>按照 DispatchItem 的排序规则完成排序操作</li>\n<li>将排好序的 IDispatch 集合通过字节码插桩到 JDispatcher 中，运行时执行对所有 IDispatch 的分发操作</li>\n</ul>\n</li>\n<li>第二个：Application 生命周期方法的自动注册流程<ul>\n<li>通过调用方在gradle中配置的 Application 全类名，在自定义Transform中扫描到该类</li>\n<li>JDispatcher 调用字节码注入到 onTerminate()</li>\n<li>JDispatcher 调用字节码注入到 onConfigurationChanged(newConfig: Configuration)</li>\n<li>JDispatcher 调用字节码注入到 onLowMemory()</li>\n<li>JDispatcher 调用字节码注入到 onTrimMemory(level: Int)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>jdispatcher-api</p>\n<ul>\n<li>模块类型：apply plugin: ‘com.android.library’</li>\n<li>模块描述：运行时用于整个框架的初始化，运行时分发等操作</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"集成说明\"><a href=\"#集成说明\" class=\"headerlink\" title=\"集成说明\"></a>集成说明</h2><p><a href=\"https://jitpack.io/#jaydroid1024/JDispatcher\" target=\"_blank\" rel=\"noopener\"><img src=\"https://jitpack.io/v/jaydroid1024/JDispatcher.svg\" alt=\"\"></a></p>\n<pre><code class=\"groovy\">//Step 1. Add the JitPack repository to your build file\n//buildscript &amp; allprojects\nallprojects {\n    repositories {\n        ...\n        maven { url &#39;https://jitpack.io&#39; }\n    }\n}\n//dependencies\nclasspath &#39;com.github.jaydroid1024.JDispatcher:jdispatcher-plugin:$last_version&#39;\n\n//Step 2. Add the dependency\nimplementation &#39;com.github.jaydroid1024.JDispatcher:jdispatcher-api:$last_version&#39;\nkapt &#39;com.github.jaydroid1024.JDispatcher:jdispatcher-compiler:$last_version&#39;\n\n//Step 3. apply the plugin and config dispatcher\napply plugin: &#39;jdispatcher&#39;\ndispatcher {\n    appCanonicalName = &quot;com.jay.android.App&quot;\n    buildIncremental = false\n    buildDebug = true\n}\n</code></pre>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><pre><code class=\"kotlin\">class App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        //为分发类指定自定义参数，用于三方key的统一收口配置\n        val dispatchExtraParam = HashMap&lt;String, HashMap&lt;String, String&gt;&gt;()\n        dispatchExtraParam[&quot;com.jay.android.jdispatcher.DispatcherAppDemo&quot;] =\n            if (BuildConfig.DEBUG) hashMapOf(\n                Pair(&quot;key1&quot;, &quot;value1_debug&quot;),\n                Pair(&quot;key2&quot;, &quot;value2_debug&quot;)\n            )\n            else hashMapOf(\n                Pair(&quot;key1&quot;, &quot;value1_release&quot;),\n                Pair(&quot;key2&quot;, &quot;value2_release&quot;)\n            )\n\n        //自动分发\n        JDispatcher.instance\n            .withDebugAble(true)//调试模式：打印更多日志，实时刷新等\n            .withDispatchExtraParam(dispatchExtraParam)//分发参数\n            .init(this)\n    }\n\n\n// region如果在 app build.gradle 中配置了\n// dispatcher {appCanonicalName = &quot;com.jay.android.App&quot;}\n// 就不需要添加以下代码,dispatcher 插件会自动注入\n\n    override fun onTerminate() {\n        super.onTerminate()\n        JDispatcher.instance.onTerminate()\n    }\n\n    override fun onConfigurationChanged(newConfig: Configuration) {\n        super.onConfigurationChanged(newConfig)\n        JDispatcher.instance.onConfigurationChanged(newConfig)\n    }\n\n    override fun onLowMemory() {\n        super.onLowMemory()\n        JDispatcher.instance.onLowMemory()\n    }\n\n    override fun onTrimMemory(level: Int) {\n        super.onTrimMemory(level)\n        JDispatcher.instance.onTrimMemory(level)\n    }\n//endregion\n}</code></pre>\n<pre><code class=\"kotlin\">//手动调用分发\nJDispatcher.instance\n    .manualDispatch(&quot;com.jay.android.jdispatcher.DispatcherAppDemo&quot;)</code></pre>\n<pre><code class=\"kotlin\">//声明分发类\n@Dispatch(priority = Priority.LOW_DEFAULT, description = &quot;DispatcherAppDemo&quot;)\npublic class DispatcherAppDemo extends DispatchTemplate {\n\n    @Override\n    public void onCreate(@NotNull Application app, @NotNull DispatchItem dispatchItem) {\n        Log.d(&quot;Jay&quot;, &quot;DispatcherAppDemo#onCreate&quot; + dispatchItem);\n    }\n\n    @Override\n    public void onConfigurationChanged(@NotNull Configuration newConfig) {\n        Log.d(&quot;Jay&quot;, &quot;DispatcherAppDemo#onConfigurationChanged&quot; + newConfig);\n    }\n\n    @Override\n    public void onLowMemory() {\n        Log.d(&quot;Jay&quot;, &quot;DispatcherAppDemo#onLowMemory&quot;);\n\n    }\n\n    @Override\n    public void onTerminate() {\n        Log.d(&quot;Jay&quot;, &quot;DispatcherAppDemo#onTerminate&quot;);\n\n    }\n\n    @Override\n    public void onTrimMemory(int level) {\n        Log.d(&quot;Jay&quot;, &quot;DispatcherAppDemo#onTrimMemory&quot; + level);\n\n    }\n}</code></pre>\n<pre><code class=\"groovy\">#Jdispatcher 混淆配置\n-keep public class com.jay.android.dispatcher.**{*;}\n-keep class * implements com.jay.android.dispatcher.common.IDispatch{*;}</code></pre>\n<h2 id=\"Todo\"><a href=\"#Todo\" class=\"headerlink\" title=\"Todo\"></a>Todo</h2><ul>\n<li><p>支持通过非阻塞式异步通知机制实现异步加载与同步加载交叉使用的情况</p>\n</li>\n<li><p>通过 ContentProvider 实现在 Application 之前超前预加载</p>\n</li>\n<li><p>AGP Transform 增量支持编译</p>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://github.com/alibaba/ARouter/blob/master/README_CN.md\" target=\"_blank\" rel=\"noopener\">ARouter</a> 是一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦</p>\n</li>\n<li><p><a href=\"https://github.com/bingoogolapple/AppInit\" target=\"_blank\" rel=\"noopener\">AppInit</a> 是一款 Android 应用初始化框架，基于组件化的设计思路，功能灵活，使用简单。</p>\n</li>\n<li><p><a href=\"https://github.com/meituan/WMRouter\" target=\"_blank\" rel=\"noopener\"><em>WMRouter</em></a> 是一款Android路由框架，基于组件化的设计思路，有功能灵活、使用简单的特点</p>\n</li>\n</ul>\n"},{"title":"Hexo 博客框架使用简介","date":"2018-09-07T01:25:00.000Z","author":"Jay","top":false,"cover":false,"coverImg":"/medias/banner_post.png","toc":true,"mathjax":false,"summary":"Hexo 博客框架使用简介以及 hexo-theme-matery 主题简介","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Hexo 博客框架\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n\n## 1. 主题：hexo-theme-matery\n\nmatery 这是一个采用 `Material Design` 和响应式设计的 Hexo 博客主题。\n\n### 1.1 特性\n\n- 简单漂亮，文章内容美观易读\n\n- [Material Design](https://material.io/) 设计\n\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n\n- 首页轮播文章及每天动态切换 `Banner` 图片\n\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n\n- 时间轴式的归档页\n\n- **词云**的标签页和**雷达图**的分类页\n\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n\n- 可自定义的数据的友情链接页面\n\n- 支持文章置顶和文章打赏\n\n- 支持 `MathJax`\n\n- `TOC` 目录\n\n- 可设置复制文章内容时追加版权信息\n\n- 可设置阅读文章时做密码验证\n\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n\n- 支持在首页的音乐播放和视频播放功能\n\n- 支持`emoji`表情，用`markdown emoji`语法书写直接生成对应的能**跳跃**的表情。\n\n- 支持 [DaoVoice](http://www.daovoice.io/)、[Tidio](https://www.tidio.com/) 在线聊天功能。\n\n  \n\n### 1.2 下载\n\n当你看到这里的时候，应该已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了。如果还没有的话，不妨使用 Hexo 和 [Markdown](https://www.appinn.com/markdown/) 来写博客和文章。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `Git clone` 命令来下载:\n\n```bash\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n### 1.3 配置\n\n#### 1.3.1 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的  `theme` 的值：`theme: hexo-theme-matery`\n\n`_config.yml` 文件的其它修改建议:\n\n- 请修改 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://xxx.github.io`）。\n- 建议修改两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改 `language` 的值为 `zh-CN`。\n\n#### 1.3.2 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n#### 1.3.3 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n\n#### 1.3.4 新建关于我 about 页\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"about\"\n```\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n```\n\n#### 1.3.5 新建留言板 contact 页（可选的）\n\n`contact` 页是用来展示**留言板**信息的页面，如果在你的博客 `source` 目录下还没有 `contact/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"contact\"\n```\n\n编辑你刚刚新建的页面文件 `/source/contact/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n```\n\n> **注**：本留言板功能依赖于第三方评论系统，请**激活**你的评论系统才有效果。并且在主题的 `_config.yml` 文件中，第 `19` 至 `21` 行的“**菜单**”配置，取消关于留言板的注释即可。\n\n#### 1.3.6 新建友情链接 friends 页（可选的）\n\n`friends` 页是用来展示**友情链接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"friends\"\n```\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n```\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，文件内容如下所示：\n\n```json\n[{\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\",\n    \"name\": \"闪烁之狐\",\n    \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\n    \"url\": \"https://blinkfox.github.io/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\",\n    \"name\": \"ja_rome\",\n    \"introduction\": \"平凡的脚步也可以走出伟大的行程\",\n    \"url\": \"https://me.csdn.net/jlh912008548\",\n    \"title\": \"前去学习\"\n}]\n```\n\n#### 1.3.7 新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n编辑你刚刚新建的页面文件 `/source/404.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n```\n\n#### 1.3.8 菜单导航配置\n\n配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) \n2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找   \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n```\n\n#### 1.3.9 二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作     \n1.在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)     \n2.在`children`下创建二级菜单的 名称name,路径url和图标icon.      \n3.注意每个二级菜单模块前要加 `-`.     \n4.注意缩进格式  \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n#### 1.3.10 代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n```bash\nnpm i -S hexo-prism-plugin\n```\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n```yaml\nhighlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n\n#### 1.3.11 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```bash\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n```\n\n#### 1.3.12 中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n#### 1.3.13 文章字数统计插件（建议安装）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```bash\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n```yaml\npostInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.\n```\n\n#### 1.3.14 添加emoji表情支持（可选的）\n\n本主题新增了对`emoji`表情的支持，使用到了 [hexo-filter-github-emojis](https://npm.taobao.org/package/hexo-filter-github-emojis) 的 Hexo 插件来支持 `emoji`表情的生成，把对应的`markdown emoji`语法（`::`,例如：`:smile:`）转变成会跳跃的`emoji`表情，安装命令如下：\n\n```bash\nnpm install hexo-filter-github-emojis --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\ngithubEmojis:\n  enable: true\n  className: github-emoji\n  inject: true\n  styles:\n  customEmojis:\n```\n\n#### 1.3.15 添加 RSS 订阅支持（可选的）\n\n本主题中还使用到了 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 的 Hexo 插件来做 `RSS`，安装命令如下：\n\n```bash\nnpm install hexo-generator-feed --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后在 `public` 文件夹中即可看到 `atom.xml` 文件，说明你已经安装成功了。\n\n#### 1.3.16 添加 [DaoVoice](http://www.daovoice.io/) 在线聊天功能（可选的）\n\n前往 [DaoVoice](http://www.daovoice.io/) 官网注册并且获取 `app_id`，并将 `app_id` 填入主题的 `_config.yml` 文件中。\n\n#### 1.3.17 添加 [Tidio](https://www.tidio.com/) 在线聊天功能（可选的）\n\n前往 [Tidio](https://www.tidio.com/) 官网注册并且获取 `Public Key`，并将 `Public Key` 填入主题的 `_config.yml` 文件中。\n\n#### 1.3.18 修改页脚\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n#### 1.3.19 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n```html\n<% if (theme.socialLink.github) { %>\n    <a href=\"<%= theme.socialLink.github %>\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\">\n        <i class=\"fab fa-github\"></i>\n    </a>\n<% } %>\n```\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n- Facebook: `fab fa-facebook`\n- Twitter: `fab fa-twitter`\n- Google-plus: `fab fa-google-plus`\n- Linkedin: `fab fa-linkedin`\n- Tumblr: `fab fa-tumblr`\n- Medium: `fab fa-medium`\n- Slack: `fab fa-slack`\n- Sina Weibo: `fab fa-weibo`\n- Wechat: `fab fa-weixin`\n- QQ: `fab fa-qq`\n- Zhihu: `fab fa-zhihu`\n\n> **注意**: 本主题中使用的 `Font Awesome` 版本为 `5.11.0`。\n\n#### 1.3.20 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n#### 1.3.21 配置音乐播放器（可选的）\n\n要支持音乐播放，在主题的 `_config.yml` 配置文件中激活music配置即可：\n\n```yaml\n# 是否在首页显示音乐\nmusic:\n  enable: true\n  title:     \t    # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠\n```\n\n> `server`可选`netease`（网易云音乐），`tencent`（QQ音乐），`kugou`（酷狗音乐），`xiami`（虾米音乐），\n>\n> `baidu`（百度音乐）。\n>\n> `type`可选`song`（歌曲），`playlist`（歌单），`album`（专辑），`search`（搜索关键字），`artist`（歌手）\n>\n> `id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id`\n>\n> 即为这串数字。\n\n\n\n#### 1.3.22  Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项      | 默认值                         | 描述                                                         |\n| ------------- | ------------------------------ | ------------------------------------------------------------ |\n| title         | `Markdown` 的文件标题          | 文章标题，强烈建议填写此选项                                 |\n| date          | 文件创建时的日期时间           | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author        | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img           | `featureImages` 中的某个值     | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top           | `true`                         | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| cover         | `false`                        | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中     |\n| coverImg      | 无                             | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password      | 无                             | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc           | `true`                         | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax       | `false`                        | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary       | 无                             | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories    | 无                             | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags          | 无                             | 文章标签，一篇文章可以多个标签                               |\n| keywords      | 文章标题                       | 文章关键字，SEO 时需要                                       |\n| reprintPolicy | cc_by                          | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n>\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n\n以下为文章的 `Front-matter` 示例。\n\n1.2 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n1.3 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n\n\n## 2. Hexo 常用命令\n\n### 2.1 Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 2.2 Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 2.3 Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 2.4 Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n","source":"_posts/hexo_intro.md","raw":"---\ntitle: Hexo 博客框架使用简介\ncategory: \n\t- 博客\ntags:\n\t- Hexo\n    - Matery\ndate: 2018-09-07 09:25:00\nauthor: Jay\ntop: false\ncover: false\ncoverImg: /medias/banner_post.png \ntoc: true\nmathjax: false\nsummary: Hexo 博客框架使用简介以及 hexo-theme-matery 主题简介\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Hexo 博客框架\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n\n## 1. 主题：hexo-theme-matery\n\nmatery 这是一个采用 `Material Design` 和响应式设计的 Hexo 博客主题。\n\n### 1.1 特性\n\n- 简单漂亮，文章内容美观易读\n\n- [Material Design](https://material.io/) 设计\n\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n\n- 首页轮播文章及每天动态切换 `Banner` 图片\n\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n\n- 时间轴式的归档页\n\n- **词云**的标签页和**雷达图**的分类页\n\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n\n- 可自定义的数据的友情链接页面\n\n- 支持文章置顶和文章打赏\n\n- 支持 `MathJax`\n\n- `TOC` 目录\n\n- 可设置复制文章内容时追加版权信息\n\n- 可设置阅读文章时做密码验证\n\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n\n- 支持在首页的音乐播放和视频播放功能\n\n- 支持`emoji`表情，用`markdown emoji`语法书写直接生成对应的能**跳跃**的表情。\n\n- 支持 [DaoVoice](http://www.daovoice.io/)、[Tidio](https://www.tidio.com/) 在线聊天功能。\n\n  \n\n### 1.2 下载\n\n当你看到这里的时候，应该已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了。如果还没有的话，不妨使用 Hexo 和 [Markdown](https://www.appinn.com/markdown/) 来写博客和文章。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `Git clone` 命令来下载:\n\n```bash\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n### 1.3 配置\n\n#### 1.3.1 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的  `theme` 的值：`theme: hexo-theme-matery`\n\n`_config.yml` 文件的其它修改建议:\n\n- 请修改 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://xxx.github.io`）。\n- 建议修改两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改 `language` 的值为 `zh-CN`。\n\n#### 1.3.2 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n#### 1.3.3 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n\n#### 1.3.4 新建关于我 about 页\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"about\"\n```\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n```\n\n#### 1.3.5 新建留言板 contact 页（可选的）\n\n`contact` 页是用来展示**留言板**信息的页面，如果在你的博客 `source` 目录下还没有 `contact/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"contact\"\n```\n\n编辑你刚刚新建的页面文件 `/source/contact/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n```\n\n> **注**：本留言板功能依赖于第三方评论系统，请**激活**你的评论系统才有效果。并且在主题的 `_config.yml` 文件中，第 `19` 至 `21` 行的“**菜单**”配置，取消关于留言板的注释即可。\n\n#### 1.3.6 新建友情链接 friends 页（可选的）\n\n`friends` 页是用来展示**友情链接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"friends\"\n```\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n```\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，文件内容如下所示：\n\n```json\n[{\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\",\n    \"name\": \"闪烁之狐\",\n    \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\n    \"url\": \"https://blinkfox.github.io/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\",\n    \"name\": \"ja_rome\",\n    \"introduction\": \"平凡的脚步也可以走出伟大的行程\",\n    \"url\": \"https://me.csdn.net/jlh912008548\",\n    \"title\": \"前去学习\"\n}]\n```\n\n#### 1.3.7 新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n编辑你刚刚新建的页面文件 `/source/404.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n```\n\n#### 1.3.8 菜单导航配置\n\n配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) \n2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找   \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n```\n\n#### 1.3.9 二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作     \n1.在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)     \n2.在`children`下创建二级菜单的 名称name,路径url和图标icon.      \n3.注意每个二级菜单模块前要加 `-`.     \n4.注意缩进格式  \n\n```yaml\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n#### 1.3.10 代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n```bash\nnpm i -S hexo-prism-plugin\n```\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n```yaml\nhighlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n\n#### 1.3.11 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```bash\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n```\n\n#### 1.3.12 中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n#### 1.3.13 文章字数统计插件（建议安装）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```bash\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n```yaml\npostInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.\n```\n\n#### 1.3.14 添加emoji表情支持（可选的）\n\n本主题新增了对`emoji`表情的支持，使用到了 [hexo-filter-github-emojis](https://npm.taobao.org/package/hexo-filter-github-emojis) 的 Hexo 插件来支持 `emoji`表情的生成，把对应的`markdown emoji`语法（`::`,例如：`:smile:`）转变成会跳跃的`emoji`表情，安装命令如下：\n\n```bash\nnpm install hexo-filter-github-emojis --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\ngithubEmojis:\n  enable: true\n  className: github-emoji\n  inject: true\n  styles:\n  customEmojis:\n```\n\n#### 1.3.15 添加 RSS 订阅支持（可选的）\n\n本主题中还使用到了 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 的 Hexo 插件来做 `RSS`，安装命令如下：\n\n```bash\nnpm install hexo-generator-feed --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后在 `public` 文件夹中即可看到 `atom.xml` 文件，说明你已经安装成功了。\n\n#### 1.3.16 添加 [DaoVoice](http://www.daovoice.io/) 在线聊天功能（可选的）\n\n前往 [DaoVoice](http://www.daovoice.io/) 官网注册并且获取 `app_id`，并将 `app_id` 填入主题的 `_config.yml` 文件中。\n\n#### 1.3.17 添加 [Tidio](https://www.tidio.com/) 在线聊天功能（可选的）\n\n前往 [Tidio](https://www.tidio.com/) 官网注册并且获取 `Public Key`，并将 `Public Key` 填入主题的 `_config.yml` 文件中。\n\n#### 1.3.18 修改页脚\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n#### 1.3.19 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n```html\n<% if (theme.socialLink.github) { %>\n    <a href=\"<%= theme.socialLink.github %>\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\">\n        <i class=\"fab fa-github\"></i>\n    </a>\n<% } %>\n```\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n- Facebook: `fab fa-facebook`\n- Twitter: `fab fa-twitter`\n- Google-plus: `fab fa-google-plus`\n- Linkedin: `fab fa-linkedin`\n- Tumblr: `fab fa-tumblr`\n- Medium: `fab fa-medium`\n- Slack: `fab fa-slack`\n- Sina Weibo: `fab fa-weibo`\n- Wechat: `fab fa-weixin`\n- QQ: `fab fa-qq`\n- Zhihu: `fab fa-zhihu`\n\n> **注意**: 本主题中使用的 `Font Awesome` 版本为 `5.11.0`。\n\n#### 1.3.20 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n#### 1.3.21 配置音乐播放器（可选的）\n\n要支持音乐播放，在主题的 `_config.yml` 配置文件中激活music配置即可：\n\n```yaml\n# 是否在首页显示音乐\nmusic:\n  enable: true\n  title:     \t    # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠\n```\n\n> `server`可选`netease`（网易云音乐），`tencent`（QQ音乐），`kugou`（酷狗音乐），`xiami`（虾米音乐），\n>\n> `baidu`（百度音乐）。\n>\n> `type`可选`song`（歌曲），`playlist`（歌单），`album`（专辑），`search`（搜索关键字），`artist`（歌手）\n>\n> `id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id`\n>\n> 即为这串数字。\n\n\n\n#### 1.3.22  Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项      | 默认值                         | 描述                                                         |\n| ------------- | ------------------------------ | ------------------------------------------------------------ |\n| title         | `Markdown` 的文件标题          | 文章标题，强烈建议填写此选项                                 |\n| date          | 文件创建时的日期时间           | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author        | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img           | `featureImages` 中的某个值     | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top           | `true`                         | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| cover         | `false`                        | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中     |\n| coverImg      | 无                             | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password      | 无                             | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc           | `true`                         | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax       | `false`                        | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary       | 无                             | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories    | 无                             | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags          | 无                             | 文章标签，一篇文章可以多个标签                               |\n| keywords      | 文章标题                       | 文章关键字，SEO 时需要                                       |\n| reprintPolicy | cc_by                          | 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 |\n\n> **注意**:\n>\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n> 4. 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则\n\n以下为文章的 `Front-matter` 示例。\n\n1.2 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n1.3 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n\n\n## 2. Hexo 常用命令\n\n### 2.1 Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 2.2 Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 2.3 Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 2.4 Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n\n","slug":"hexo_intro","published":1,"updated":"2021-08-01T07:34:52.111Z","_id":"ckrrn6h3u0000dkxf5ykp8xvf","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Hexo-博客框架\"><a href=\"#Hexo-博客框架\" class=\"headerlink\" title=\"Hexo 博客框架\"></a>Hexo 博客框架</h1><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"1-主题：hexo-theme-matery\"><a href=\"#1-主题：hexo-theme-matery\" class=\"headerlink\" title=\"1. 主题：hexo-theme-matery\"></a>1. 主题：hexo-theme-matery</h2><p>matery 这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p>\n<h3 id=\"1-1-特性\"><a href=\"#1-1-特性\" class=\"headerlink\" title=\"1.1 特性\"></a>1.1 特性</h3><ul>\n<li><p>简单漂亮，文章内容美观易读</p>\n</li>\n<li><p><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener\">Material Design</a> 设计</p>\n</li>\n<li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p>\n</li>\n<li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p>\n</li>\n<li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p>\n</li>\n<li><p>时间轴式的归档页</p>\n</li>\n<li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p>\n</li>\n<li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p>\n</li>\n<li><p>可自定义的数据的友情链接页面</p>\n</li>\n<li><p>支持文章置顶和文章打赏</p>\n</li>\n<li><p>支持 <code>MathJax</code></p>\n</li>\n<li><p><code>TOC</code> 目录</p>\n</li>\n<li><p>可设置复制文章内容时追加版权信息</p>\n</li>\n<li><p>可设置阅读文章时做密码验证</p>\n</li>\n<li><p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\" target=\"_blank\" rel=\"noopener\">Gitment</a>、<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a> 和 <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p>\n</li>\n<li><p>集成了<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p>\n</li>\n<li><p>支持在首页的音乐播放和视频播放功能</p>\n</li>\n<li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</p>\n</li>\n<li><p>支持 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a>、<a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能。</p>\n</li>\n</ul>\n<h3 id=\"1-2-下载\"><a href=\"#1-2-下载\" class=\"headerlink\" title=\"1.2 下载\"></a>1.2 下载</h3><p>当你看到这里的时候，应该已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href=\"https://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a> 来写博客和文章。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\" target=\"_blank\" rel=\"noopener\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre>\n<h3 id=\"1-3-配置\"><a href=\"#1-3-配置\" class=\"headerlink\" title=\"1.3 配置\"></a>1.3 配置</h3><h4 id=\"1-3-1-切换主题\"><a href=\"#1-3-1-切换主题\" class=\"headerlink\" title=\"1.3.1 切换主题\"></a>1.3.1 切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<p><code>_config.yml</code> 文件的其它修改建议:</p>\n<ul>\n<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>\n<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h4 id=\"1-3-2-新建分类-categories-页\"><a href=\"#1-3-2-新建分类-categories-页\" class=\"headerlink\" title=\"1.3.2 新建分类 categories 页\"></a>1.3.2 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"categories\"</span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> categories\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"categories\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"categories\"</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<h4 id=\"1-3-3-新建标签-tags-页\"><a href=\"#1-3-3-新建标签-tags-页\" class=\"headerlink\" title=\"1.3.3 新建标签 tags 页\"></a>1.3.3 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"tags\"</span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> tags\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 18:23:38</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tags\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"tags\"</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<h4 id=\"1-3-4-新建关于我-about-页\"><a href=\"#1-3-4-新建关于我-about-页\" class=\"headerlink\" title=\"1.3.4 新建关于我 about 页\"></a>1.3.4 新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"about\"</span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> about\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"about\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"about\"</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<h4 id=\"1-3-5-新建留言板-contact-页（可选的）\"><a href=\"#1-3-5-新建留言板-contact-页（可选的）\" class=\"headerlink\" title=\"1.3.5 新建留言板 contact 页（可选的）\"></a>1.3.5 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"contact\"</span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> contact\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"contact\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"contact\"</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<blockquote>\n<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p>\n</blockquote>\n<h4 id=\"1-3-6-新建友情链接-friends-页（可选的）\"><a href=\"#1-3-6-新建友情链接-friends-页（可选的）\" class=\"headerlink\" title=\"1.3.6 新建友情链接 friends 页（可选的）\"></a>1.3.6 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">hexo new page <span class=\"token string\">\"friends\"</span></code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> friends\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-12-12 21:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"friends\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"friends\"</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/1_qq_27922023.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"码酱\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"我不是大佬，只是在追寻大佬的脚步\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://luokangyuan.com/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/4027734.jpeg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"闪烁之狐\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://blinkfox.github.io/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/avatar.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ja_rome\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"平凡的脚步也可以走出伟大的行程\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://me.csdn.net/jlh912008548\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span></code></pre>\n<h4 id=\"1-3-7-新建-404-页\"><a href=\"#1-3-7-新建-404-页\" class=\"headerlink\" title=\"1.3.7 新建 404 页\"></a>1.3.7 新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p>\n<p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token number\">404</span>\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-30 17:25:30</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"404\"</span>\n<span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"404\"</span>\n<span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Oops～，我崩溃了！找不到你想要的页面 :(\"</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<h4 id=\"1-3-8-菜单导航配置\"><a href=\"#1-3-8-菜单导航配置\" class=\"headerlink\" title=\"1.3.8 菜单导航配置\"></a>1.3.8 菜单导航配置</h4><p>配置基本菜单导航的名称、路径url和图标icon.</p>\n<p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中查找   </p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Index</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>home\n  <span class=\"token key atrule\">Tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /tags\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>tags\n  <span class=\"token key atrule\">Categories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /categories\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>bookmark\n  <span class=\"token key atrule\">Archives</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /archives\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>archive\n  <span class=\"token key atrule\">About</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /about\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>circle\n  <span class=\"token key atrule\">Friends</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /friends\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">-</span>book</code></pre>\n<h4 id=\"1-3-9-二级菜单配置方法\"><a href=\"#1-3-9-二级菜单配置方法\" class=\"headerlink\" title=\"1.3.9 二级菜单配置方法\"></a>1.3.9 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Index</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>home\n  <span class=\"token key atrule\">Tags</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /tags\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>tags\n  <span class=\"token key atrule\">Categories</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /categories\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>bookmark\n  <span class=\"token key atrule\">Archives</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /archives\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>archive\n  <span class=\"token key atrule\">About</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /about\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>circle<span class=\"token punctuation\">-</span>o\n  <span class=\"token key atrule\">Friends</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /friends\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>address<span class=\"token punctuation\">-</span>book\n  <span class=\"token key atrule\">Medias</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>list\n    <span class=\"token key atrule\">children</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Musics\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /musics\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>music\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Movies\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /movies\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>film\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Books\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /books\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>book\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Galleries\n        <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /galleries\n        <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> fas fa<span class=\"token punctuation\">-</span>image</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h4 id=\"1-3-10-代码高亮\"><a href=\"#1-3-10-代码高亮\" class=\"headerlink\" title=\"1.3.10 代码高亮\"></a>1.3.10 代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\" target=\"_blank\" rel=\"noopener\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i -S hexo-prism-plugin</code></pre>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n\n<span class=\"token key atrule\">prism_plugin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'preprocess'</span>    <span class=\"token comment\" spellcheck=\"true\"># realtime/preprocess</span>\n  <span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'tomorrow'</span>\n  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false    </span><span class=\"token comment\" spellcheck=\"true\"># default false</span>\n  custom_css<span class=\"token punctuation\">:</span></code></pre>\n<h4 id=\"1-3-11-搜索\"><a href=\"#1-3-11-搜索\" class=\"headerlink\" title=\"1.3.11 搜索\"></a>1.3.11 搜索</h4><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-search --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">search</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> search.xml\n  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> post</code></pre>\n<h4 id=\"1-3-12-中文链接转拼音（建议安装）\"><a href=\"#1-3-12-中文链接转拼音（建议安装）\" class=\"headerlink\" title=\"1.3.12 中文链接转拼音（建议安装）\"></a>1.3.12 中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\" target=\"_blank\" rel=\"noopener\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i hexo-permalink-pinyin --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">permalink_pinyin</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">separator</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'-'</span> <span class=\"token comment\" spellcheck=\"true\"># default: '-'</span></code></pre>\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\" target=\"_blank\" rel=\"noopener\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h4 id=\"1-3-13-文章字数统计插件（建议安装）\"><a href=\"#1-3-13-文章字数统计插件（建议安装）\" class=\"headerlink\" title=\"1.3.13 文章字数统计插件（建议安装）\"></a>1.3.13 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"noopener\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i --save hexo-wordcount</code></pre>\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">postInfo</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">update</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">wordCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 设置文章字数统计为 true.</span>\n  <span class=\"token key atrule\">totalCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 设置站点文章总字数统计为 true.</span>\n  <span class=\"token key atrule\">min2read</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 阅读时长.</span>\n  <span class=\"token key atrule\">readCount</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false </span><span class=\"token comment\" spellcheck=\"true\"># 阅读次数.</span></code></pre>\n<h4 id=\"1-3-14-添加emoji表情支持（可选的）\"><a href=\"#1-3-14-添加emoji表情支持（可选的）\" class=\"headerlink\" title=\"1.3.14 添加emoji表情支持（可选的）\"></a>1.3.14 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href=\"https://npm.taobao.org/package/hexo-filter-github-emojis\" target=\"_blank\" rel=\"noopener\">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-filter-github-emojis --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">githubEmojis</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">className</span><span class=\"token punctuation\">:</span> github<span class=\"token punctuation\">-</span>emoji\n  <span class=\"token key atrule\">inject</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">styles</span><span class=\"token punctuation\">:</span>\n  customEmojis<span class=\"token punctuation\">:</span></code></pre>\n<h4 id=\"1-3-15-添加-RSS-订阅支持（可选的）\"><a href=\"#1-3-15-添加-RSS-订阅支持（可选的）\" class=\"headerlink\" title=\"1.3.15 添加 RSS 订阅支持（可选的）\"></a>1.3.15 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-generator-feed --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> atom\n  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> atom.xml\n  <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span>\n  <span class=\"token key atrule\">hub</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">content_limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">140</span>\n  <span class=\"token key atrule\">content_limit_delim</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span>\n  <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span>date</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>\n<h4 id=\"1-3-16-添加-DaoVoice-在线聊天功能（可选的）\"><a href=\"#1-3-16-添加-DaoVoice-在线聊天功能（可选的）\" class=\"headerlink\" title=\"1.3.16 添加 DaoVoice 在线聊天功能（可选的）\"></a>1.3.16 添加 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 在线聊天功能（可选的）</h4><p>前往 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h4 id=\"1-3-17-添加-Tidio-在线聊天功能（可选的）\"><a href=\"#1-3-17-添加-Tidio-在线聊天功能（可选的）\" class=\"headerlink\" title=\"1.3.17 添加 Tidio 在线聊天功能（可选的）\"></a>1.3.17 添加 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能（可选的）</h4><p>前往 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h4 id=\"1-3-18-修改页脚\"><a href=\"#1-3-18-修改页脚\" class=\"headerlink\" title=\"1.3.18 修改页脚\"></a>1.3.18 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h4 id=\"1-3-19-修改社交链接\"><a href=\"#1-3-19-修改社交链接\" class=\"headerlink\" title=\"1.3.19 修改社交链接\"></a>1.3.19 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">if</span> <span class=\"token attr-name\">(theme.socialLink.github)</span> <span class=\"token attr-name\">{</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>&lt;%<span class=\"token punctuation\">=</span> theme.socialLink.github %<span class=\"token punctuation\">></span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tooltipped<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-tooltip</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>访问我的GitHub<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-position</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>top<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-delay</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fab fa-github<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>%</span> <span class=\"token attr-name\">}</span> <span class=\"token attr-name\">%</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fab fa-facebook</code></li>\n<li>Twitter: <code>fab fa-twitter</code></li>\n<li>Google-plus: <code>fab fa-google-plus</code></li>\n<li>Linkedin: <code>fab fa-linkedin</code></li>\n<li>Tumblr: <code>fab fa-tumblr</code></li>\n<li>Medium: <code>fab fa-medium</code></li>\n<li>Slack: <code>fab fa-slack</code></li>\n<li>Sina Weibo: <code>fab fa-weibo</code></li>\n<li>Wechat: <code>fab fa-weixin</code></li>\n<li>QQ: <code>fab fa-qq</code></li>\n<li>Zhihu: <code>fab fa-zhihu</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>\n</blockquote>\n<h4 id=\"1-3-20-修改打赏的二维码图片\"><a href=\"#1-3-20-修改打赏的二维码图片\" class=\"headerlink\" title=\"1.3.20 修改打赏的二维码图片\"></a>1.3.20 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h4 id=\"1-3-21-配置音乐播放器（可选的）\"><a href=\"#1-3-21-配置音乐播放器（可选的）\" class=\"headerlink\" title=\"1.3.21 配置音乐播放器（可选的）\"></a>1.3.21 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\" spellcheck=\"true\"># 是否在首页显示音乐</span>\n<span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span>             <span class=\"token comment\" spellcheck=\"true\"># 非吸底模式有效</span>\n    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> 听听音乐\n  <span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span> netease   <span class=\"token comment\" spellcheck=\"true\"># require music platform: netease, tencent, kugou, xiami, baidu</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> playlist    <span class=\"token comment\" spellcheck=\"true\"># require song, playlist, album, search, artist</span>\n  <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">503838841     </span><span class=\"token comment\" spellcheck=\"true\"># require song id / playlist id / album id / search keyword</span>\n  <span class=\"token key atrule\">fixed</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false      </span><span class=\"token comment\" spellcheck=\"true\"># 开启吸底模式</span>\n  <span class=\"token key atrule\">autoplay</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false   </span><span class=\"token comment\" spellcheck=\"true\"># 是否自动播放</span>\n  <span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> '<span class=\"token comment\" spellcheck=\"true\">#42b983'</span>\n  <span class=\"token key atrule\">loop</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'all'</span>       <span class=\"token comment\" spellcheck=\"true\"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>\n  <span class=\"token key atrule\">order</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'random'</span>   <span class=\"token comment\" spellcheck=\"true\"># 音频循环顺序, 可选值: 'list', 'random'</span>\n  <span class=\"token key atrule\">preload</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'auto'</span>   <span class=\"token comment\" spellcheck=\"true\"># 预加载，可选值: 'none', 'metadata', 'auto'</span>\n  <span class=\"token key atrule\">volume</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7       </span><span class=\"token comment\" spellcheck=\"true\"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>\n  <span class=\"token key atrule\">listFolded</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true  </span><span class=\"token comment\" spellcheck=\"true\"># 列表默认折叠</span></code></pre>\n<blockquote>\n<p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>\n<p><code>baidu</code>（百度音乐）。</p>\n<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>\n<p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p>\n<p>即为这串数字。</p>\n</blockquote>\n<h4 id=\"1-3-22-Front-matter-选项详解\"><a href=\"#1-3-22-Front-matter-选项详解\" class=\"headerlink\" title=\"1.3.22  Front-matter 选项详解\"></a>1.3.22  Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\" target=\"_blank\" rel=\"noopener\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\" target=\"_blank\" rel=\"noopener\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\" target=\"_blank\" rel=\"noopener\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<p>1.2 最简示例</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token punctuation\">---</span></code></pre>\n<p>1.3 最全示例</p>\n<pre class=\" language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">---</span>\n<span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> typora<span class=\"token punctuation\">-</span>vue<span class=\"token punctuation\">-</span>theme主题介绍\n<span class=\"token key atrule\">date</span><span class=\"token punctuation\">:</span> <span class=\"token datetime number\">2018-09-07 09:25:00</span>\n<span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> 赵奇\n<span class=\"token key atrule\">img</span><span class=\"token punctuation\">:</span> /source/images/xxx.jpg\n<span class=\"token key atrule\">top</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">coverImg</span><span class=\"token punctuation\">:</span> /images/1.jpg\n<span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\n<span class=\"token key atrule\">toc</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">mathjax</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n<span class=\"token key atrule\">summary</span><span class=\"token punctuation\">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\n<span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> Markdown\n<span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> Typora\n  <span class=\"token punctuation\">-</span> Markdown\n<span class=\"token punctuation\">---</span></code></pre>\n<h2 id=\"2-Hexo-常用命令\"><a href=\"#2-Hexo-常用命令\" class=\"headerlink\" title=\"2. Hexo 常用命令\"></a>2. Hexo 常用命令</h2><h3 id=\"2-1-Create-a-new-post\"><a href=\"#2-1-Create-a-new-post\" class=\"headerlink\" title=\"2.1 Create a new post\"></a>2.1 Create a new post</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"2-2-Run-server\"><a href=\"#2-2-Run-server\" class=\"headerlink\" title=\"2.2 Run server\"></a>2.2 Run server</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"2-3-Generate-static-files\"><a href=\"#2-3-Generate-static-files\" class=\"headerlink\" title=\"2.3 Generate static files\"></a>2.3 Generate static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"2-4-Deploy-to-remote-sites\"><a href=\"#2-4-Deploy-to-remote-sites\" class=\"headerlink\" title=\"2.4 Deploy to remote sites\"></a>2.4 Deploy to remote sites</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Hexo-博客框架\"><a href=\"#Hexo-博客框架\" class=\"headerlink\" title=\"Hexo 博客框架\"></a>Hexo 博客框架</h1><p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"1-主题：hexo-theme-matery\"><a href=\"#1-主题：hexo-theme-matery\" class=\"headerlink\" title=\"1. 主题：hexo-theme-matery\"></a>1. 主题：hexo-theme-matery</h2><p>matery 这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p>\n<h3 id=\"1-1-特性\"><a href=\"#1-1-特性\" class=\"headerlink\" title=\"1.1 特性\"></a>1.1 特性</h3><ul>\n<li><p>简单漂亮，文章内容美观易读</p>\n</li>\n<li><p><a href=\"https://material.io/\" target=\"_blank\" rel=\"noopener\">Material Design</a> 设计</p>\n</li>\n<li><p>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</p>\n</li>\n<li><p>首页轮播文章及每天动态切换 <code>Banner</code> 图片</p>\n</li>\n<li><p>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</p>\n</li>\n<li><p>时间轴式的归档页</p>\n</li>\n<li><p><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</p>\n</li>\n<li><p>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</p>\n</li>\n<li><p>可自定义的数据的友情链接页面</p>\n</li>\n<li><p>支持文章置顶和文章打赏</p>\n</li>\n<li><p>支持 <code>MathJax</code></p>\n</li>\n<li><p><code>TOC</code> 目录</p>\n</li>\n<li><p>可设置复制文章内容时追加版权信息</p>\n</li>\n<li><p>可设置阅读文章时做密码验证</p>\n</li>\n<li><p><a href=\"https://gitalk.github.io/\" target=\"_blank\" rel=\"noopener\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\" target=\"_blank\" rel=\"noopener\">Gitment</a>、<a href=\"https://valine.js.org/\" target=\"_blank\" rel=\"noopener\">Valine</a> 和 <a href=\"https://disqus.com/\" target=\"_blank\" rel=\"noopener\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</p>\n</li>\n<li><p>集成了<a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</p>\n</li>\n<li><p>支持在首页的音乐播放和视频播放功能</p>\n</li>\n<li><p>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</p>\n</li>\n<li><p>支持 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a>、<a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能。</p>\n</li>\n</ul>\n<h3 id=\"1-2-下载\"><a href=\"#1-2-下载\" class=\"headerlink\" title=\"1.2 下载\"></a>1.2 下载</h3><p>当你看到这里的时候，应该已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href=\"https://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown</a> 来写博客和文章。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\" target=\"_blank\" rel=\"noopener\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p>\n<pre><code class=\"bash\">git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre>\n<h3 id=\"1-3-配置\"><a href=\"#1-3-配置\" class=\"headerlink\" title=\"1.3 配置\"></a>1.3 配置</h3><h4 id=\"1-3-1-切换主题\"><a href=\"#1-3-1-切换主题\" class=\"headerlink\" title=\"1.3.1 切换主题\"></a>1.3.1 切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<p><code>_config.yml</code> 文件的其它修改建议:</p>\n<ul>\n<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>\n<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h4 id=\"1-3-2-新建分类-categories-页\"><a href=\"#1-3-2-新建分类-categories-页\" class=\"headerlink\" title=\"1.3.2 新建分类 categories 页\"></a>1.3.2 新建分类 categories 页</h4><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">hexo new page &quot;categories&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre><code class=\"yaml\">---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: &quot;categories&quot;\nlayout: &quot;categories&quot;\n---</code></pre>\n<h4 id=\"1-3-3-新建标签-tags-页\"><a href=\"#1-3-3-新建标签-tags-页\" class=\"headerlink\" title=\"1.3.3 新建标签 tags 页\"></a>1.3.3 新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">hexo new page &quot;tags&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre><code class=\"yaml\">---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: &quot;tags&quot;\nlayout: &quot;tags&quot;\n---</code></pre>\n<h4 id=\"1-3-4-新建关于我-about-页\"><a href=\"#1-3-4-新建关于我-about-页\" class=\"headerlink\" title=\"1.3.4 新建关于我 about 页\"></a>1.3.4 新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">hexo new page &quot;about&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<pre><code class=\"yaml\">---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: &quot;about&quot;\nlayout: &quot;about&quot;\n---</code></pre>\n<h4 id=\"1-3-5-新建留言板-contact-页（可选的）\"><a href=\"#1-3-5-新建留言板-contact-页（可选的）\" class=\"headerlink\" title=\"1.3.5 新建留言板 contact 页（可选的）\"></a>1.3.5 新建留言板 contact 页（可选的）</h4><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">hexo new page &quot;contact&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>\n<pre><code class=\"yaml\">---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: &quot;contact&quot;\nlayout: &quot;contact&quot;\n---</code></pre>\n<blockquote>\n<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p>\n</blockquote>\n<h4 id=\"1-3-6-新建友情链接-friends-页（可选的）\"><a href=\"#1-3-6-新建友情链接-friends-页（可选的）\" class=\"headerlink\" title=\"1.3.6 新建友情链接 friends 页（可选的）\"></a>1.3.6 新建友情链接 friends 页（可选的）</h4><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"bash\">hexo new page &quot;friends&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<pre><code class=\"yaml\">---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: &quot;friends&quot;\nlayout: &quot;friends&quot;\n---</code></pre>\n<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<pre><code class=\"json\">[{\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,\n    &quot;name&quot;: &quot;码酱&quot;,\n    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,\n    &quot;url&quot;: &quot;http://luokangyuan.com/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n}, {\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,\n    &quot;name&quot;: &quot;闪烁之狐&quot;,\n    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,\n    &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n}, {\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,\n    &quot;name&quot;: &quot;ja_rome&quot;,\n    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,\n    &quot;url&quot;: &quot;https://me.csdn.net/jlh912008548&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n}]</code></pre>\n<h4 id=\"1-3-7-新建-404-页\"><a href=\"#1-3-7-新建-404-页\" class=\"headerlink\" title=\"1.3.7 新建 404 页\"></a>1.3.7 新建 404 页</h4><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p>\n<p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p>\n<pre><code class=\"yaml\">---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: &quot;404&quot;\nlayout: &quot;404&quot;\ndescription: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;\n---</code></pre>\n<h4 id=\"1-3-8-菜单导航配置\"><a href=\"#1-3-8-菜单导航配置\" class=\"headerlink\" title=\"1.3.8 菜单导航配置\"></a>1.3.8 菜单导航配置</h4><p>配置基本菜单导航的名称、路径url和图标icon.</p>\n<p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中查找   </p>\n<pre><code class=\"yaml\">menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book</code></pre>\n<h4 id=\"1-3-9-二级菜单配置方法\"><a href=\"#1-3-9-二级菜单配置方法\" class=\"headerlink\" title=\"1.3.9 二级菜单配置方法\"></a>1.3.9 二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p>\n<pre><code class=\"yaml\">menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h4 id=\"1-3-10-代码高亮\"><a href=\"#1-3-10-代码高亮\" class=\"headerlink\" title=\"1.3.10 代码高亮\"></a>1.3.10 代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\" target=\"_blank\" rel=\"noopener\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<pre><code class=\"bash\">npm i -S hexo-prism-plugin</code></pre>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre><code class=\"yaml\">highlight:\n  enable: false\n\nprism_plugin:\n  mode: &#39;preprocess&#39;    # realtime/preprocess\n  theme: &#39;tomorrow&#39;\n  line_number: false    # default false\n  custom_css:</code></pre>\n<h4 id=\"1-3-11-搜索\"><a href=\"#1-3-11-搜索\" class=\"headerlink\" title=\"1.3.11 搜索\"></a>1.3.11 搜索</h4><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\" target=\"_blank\" rel=\"noopener\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre><code class=\"bash\">npm install hexo-generator-search --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yaml\">search:\n  path: search.xml\n  field: post</code></pre>\n<h4 id=\"1-3-12-中文链接转拼音（建议安装）\"><a href=\"#1-3-12-中文链接转拼音（建议安装）\" class=\"headerlink\" title=\"1.3.12 中文链接转拼音（建议安装）\"></a>1.3.12 中文链接转拼音（建议安装）</h4><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\" target=\"_blank\" rel=\"noopener\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre><code class=\"bash\">npm i hexo-permalink-pinyin --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yaml\">permalink_pinyin:\n  enable: true\n  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre>\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\" target=\"_blank\" rel=\"noopener\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h4 id=\"1-3-13-文章字数统计插件（建议安装）\"><a href=\"#1-3-13-文章字数统计插件（建议安装）\" class=\"headerlink\" title=\"1.3.13 文章字数统计插件（建议安装）\"></a>1.3.13 文章字数统计插件（建议安装）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\" target=\"_blank\" rel=\"noopener\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre><code class=\"bash\">npm i --save hexo-wordcount</code></pre>\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre><code class=\"yaml\">postInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.</code></pre>\n<h4 id=\"1-3-14-添加emoji表情支持（可选的）\"><a href=\"#1-3-14-添加emoji表情支持（可选的）\" class=\"headerlink\" title=\"1.3.14 添加emoji表情支持（可选的）\"></a>1.3.14 添加emoji表情支持（可选的）</h4><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href=\"https://npm.taobao.org/package/hexo-filter-github-emojis\" target=\"_blank\" rel=\"noopener\">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>\n<pre><code class=\"bash\">npm install hexo-filter-github-emojis --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yaml\">githubEmojis:\n  enable: true\n  className: github-emoji\n  inject: true\n  styles:\n  customEmojis:</code></pre>\n<h4 id=\"1-3-15-添加-RSS-订阅支持（可选的）\"><a href=\"#1-3-15-添加-RSS-订阅支持（可选的）\" class=\"headerlink\" title=\"1.3.15 添加 RSS 订阅支持（可选的）\"></a>1.3.15 添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>\n<pre><code class=\"bash\">npm install hexo-generator-feed --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code class=\"yaml\">feed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: &#39; &#39;\n  order_by: -date</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>\n<h4 id=\"1-3-16-添加-DaoVoice-在线聊天功能（可选的）\"><a href=\"#1-3-16-添加-DaoVoice-在线聊天功能（可选的）\" class=\"headerlink\" title=\"1.3.16 添加 DaoVoice 在线聊天功能（可选的）\"></a>1.3.16 添加 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 在线聊天功能（可选的）</h4><p>前往 <a href=\"http://www.daovoice.io/\" target=\"_blank\" rel=\"noopener\">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h4 id=\"1-3-17-添加-Tidio-在线聊天功能（可选的）\"><a href=\"#1-3-17-添加-Tidio-在线聊天功能（可选的）\" class=\"headerlink\" title=\"1.3.17 添加 Tidio 在线聊天功能（可选的）\"></a>1.3.17 添加 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 在线聊天功能（可选的）</h4><p>前往 <a href=\"https://www.tidio.com/\" target=\"_blank\" rel=\"noopener\">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h4 id=\"1-3-18-修改页脚\"><a href=\"#1-3-18-修改页脚\" class=\"headerlink\" title=\"1.3.18 修改页脚\"></a>1.3.18 修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h4 id=\"1-3-19-修改社交链接\"><a href=\"#1-3-19-修改社交链接\" class=\"headerlink\" title=\"1.3.19 修改社交链接\"></a>1.3.19 修改社交链接</h4><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<pre><code class=\"html\">&lt;% if (theme.socialLink.github) { %&gt;\n    &lt;a href=&quot;&lt;%= theme.socialLink.github %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;\n        &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;\n    &lt;/a&gt;\n&lt;% } %&gt;</code></pre>\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\" target=\"_blank\" rel=\"noopener\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fab fa-facebook</code></li>\n<li>Twitter: <code>fab fa-twitter</code></li>\n<li>Google-plus: <code>fab fa-google-plus</code></li>\n<li>Linkedin: <code>fab fa-linkedin</code></li>\n<li>Tumblr: <code>fab fa-tumblr</code></li>\n<li>Medium: <code>fab fa-medium</code></li>\n<li>Slack: <code>fab fa-slack</code></li>\n<li>Sina Weibo: <code>fab fa-weibo</code></li>\n<li>Wechat: <code>fab fa-weixin</code></li>\n<li>QQ: <code>fab fa-qq</code></li>\n<li>Zhihu: <code>fab fa-zhihu</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>\n</blockquote>\n<h4 id=\"1-3-20-修改打赏的二维码图片\"><a href=\"#1-3-20-修改打赏的二维码图片\" class=\"headerlink\" title=\"1.3.20 修改打赏的二维码图片\"></a>1.3.20 修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h4 id=\"1-3-21-配置音乐播放器（可选的）\"><a href=\"#1-3-21-配置音乐播放器（可选的）\" class=\"headerlink\" title=\"1.3.21 配置音乐播放器（可选的）\"></a>1.3.21 配置音乐播放器（可选的）</h4><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>\n<pre><code class=\"yaml\"># 是否在首页显示音乐\nmusic:\n  enable: true\n  title:             # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: &#39;#42b983&#39;\n  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;\n  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;\n  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠</code></pre>\n<blockquote>\n<p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>\n<p><code>baidu</code>（百度音乐）。</p>\n<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>\n<p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p>\n<p>即为这串数字。</p>\n</blockquote>\n<h4 id=\"1-3-22-Front-matter-选项详解\"><a href=\"#1-3-22-Front-matter-选项详解\" class=\"headerlink\" title=\"1.3.22  Front-matter 选项详解\"></a>1.3.22  Front-matter 选项详解</h4><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>文章标题</td>\n<td>文章关键字，SEO 时需要</td>\n</tr>\n<tr>\n<td>reprintPolicy</td>\n<td>cc_by</td>\n<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\" target=\"_blank\" rel=\"noopener\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\" target=\"_blank\" rel=\"noopener\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\" target=\"_blank\" rel=\"noopener\">站长工具</a>。</li>\n<li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<p>1.2 最简示例</p>\n<pre><code class=\"yaml\">---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---</code></pre>\n<p>1.3 最全示例</p>\n<pre><code class=\"yaml\">---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---</code></pre>\n<h2 id=\"2-Hexo-常用命令\"><a href=\"#2-Hexo-常用命令\" class=\"headerlink\" title=\"2. Hexo 常用命令\"></a>2. Hexo 常用命令</h2><h3 id=\"2-1-Create-a-new-post\"><a href=\"#2-1-Create-a-new-post\" class=\"headerlink\" title=\"2.1 Create a new post\"></a>2.1 Create a new post</h3><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"2-2-Run-server\"><a href=\"#2-2-Run-server\" class=\"headerlink\" title=\"2.2 Run server\"></a>2.2 Run server</h3><pre><code class=\"bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"2-3-Generate-static-files\"><a href=\"#2-3-Generate-static-files\" class=\"headerlink\" title=\"2.3 Generate static files\"></a>2.3 Generate static files</h3><pre><code class=\"bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"2-4-Deploy-to-remote-sites\"><a href=\"#2-4-Deploy-to-remote-sites\" class=\"headerlink\" title=\"2.4 Deploy to remote sites\"></a>2.4 Deploy to remote sites</h3><pre><code class=\"bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"筑基系列-计算机基础知识小抄版","date":"2021-05-31T06:16:55.000Z","cover":true,"summary":"计算机基础知识提纲挈领，包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n# 筑基系列-计算机基础知识小抄版\n\n\n\n> 计算机基础知识筑基三部曲：\n>\n> - **[第一部：筑基系列-计算机基础知识小抄版](https://juejin.cn/post/6991367806772052004)**\n>   - 包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n> - **[第二部：筑基系列-操作系统基础知识小抄版](https://juejin.cn/post/6991385109509193764)**\n>   - 包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n> - **[第三部：筑基系列-计算机网络基础知识小抄版](https://juejin.cn/post/6991397445251334151)**\n>   - 包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n## 目录\n\n- [1.背景篇](#1.背景篇)\n  - [1.1 计算机发展史](#11-计算机发展史)\n  - [1.2 CPU发展史](#12-cpu发展史)\n  - [1.3 32 位 VS 64 位](#13-32-位-vs-64-位)\n  - [1.4 计算机的分类](#14-计算机的分类)\n  - [1.5 计算机的体系与结构](#15-计算机的体系与结构)\n  - [1.6 程序翻译与解释](#16-程序翻译与解释)\n  - [1.7 计算机的层次](#17-计算机的层次)\n  - [1.8 计算机的计算单位](#18-计算机的计算单位)\n  - [1.9 计算机的字符与编码集](#19-计算机的字符与编码集)\n- [2.组成篇](#2.组成篇)\n  - [2.1 计算机的总线](#21-计算机的总线)\n  - [2.2 计算机的输入输出设备](#22-计算机的输入输出设备)\n  - [2.3 计算机存储器](#23-计算机存储器)\n  - [2.4 主存储器与辅助存储器](#24-主存储器与辅助存储器)\n  - [2.5 高速缓存](#25-高速缓存)\n  - [2.6 计算机的指令系统](#26-计算机的指令系统)\n  - [2.7 计算机的控制器](#27-计算机的控制器)\n  - [2.8 计算机的运算器](#28-计算机的运算器)\n  - [2.9 计算机指令的执行过程](#29-计算机指令的执行过程)\n- [3.计算篇](#3.计算篇)\n  - [3.1 进制运算的基础](#31-进制运算的基础)\n  - [3.2 原码&反码&补码](#32-原码反码补码)\n  - [3.3 定点数与浮点数](#33-定点数与浮点数)\n  - [3.4 定点数的加减法运算](#34-定点数的加减法运算)\n  - [3.5 浮点数的加减法运算](#35-浮点数的加减法运算)\n  - [3.6 浮点数的乘除法运算](#36-浮点数的乘除法运算)\n- [4.关于我](#4.关于我)\n- [5.参考](#5.参考)\n\n\n\n## 1.背景篇\n\n### 1.1 计算机发展史\n\n- 电子管计算机 (1946-1957)\n  - 埃尼阿克(ENIAC)\n- 晶体管计算机(1957-1964)\n  - 贝尔实验室、MIT林肯实验室的TX-0、PDP-1配备4k内存和显示器\n- 集成电路计算机 (1964-1980)\n  - 德州仪器的工程师发明了集成电路(IC)、IBM(7094,1401) 、System/360 操作系统\n- 超大规模集成电路计算机 (1980-现在)\n  - 乔布斯 Apple 和 Apple二代\n- 未来的计算机 \n  - 生物计算机\n  - 量子计算机\n\n\n\n### 1.2 CPU发展史\n\n- 摩尔定律\n  - 定义：当价格不变时，集成电路中可容纳的晶体管数目约每隔 18～24 个月就会增加一倍，性能也将提升一倍。\n  - 这一定律揭示了信息技术发展的速度，但到今天，摩尔定律失效了。因为随着芯片越来越小，在尺寸和散热等方面已经挑战了人类的极限，芯片中无法再放入更多的电子元件了。\n  - 所以计算能力又开始以另一种方式发展，那就是多核心，比如一个普普通通的 NVIDA 显卡中就拥有了几百个核心，这样就可以进行大量的并发计算；另外，一个分布式的大数据集群，里面就可能有上千个核心。\n- 单核CPU发展史\n  - （1971～ 1973） 500KHz频率的微型计算机（字长8位）\n  - （1978～ 1985） 500MHz频率的微型计算机（字长16位）\n  - （1985～ 2000） 高于1GHz频率的微型计算机（字长32位）\n  - （1973～ 1978） 高于1MHz频率的微型计算机（字长8位）\n  - （2000～ 现在） 高于2GHz频率的微型计算机（字长为64位）\n- 多核CPU发展史\n  - （2005） Intel奔腾系列双核CPU、 AMD速龙系列\n  - （2006） Intel酷睿四核CPU\n  - Intel酷睿系列十六核CPU\n  - Intel至强系列五十六核CPU\n- CPU数字能量是如何产生的\n  - 时间是最重要的输入：晶振\n  - 电能供给给芯片，芯片中的一种电子元件晶振（也就是石英晶体）通电后产生震荡\n  - 震荡会产生频率稳定的脉冲信号，通常这是一种高频的脉冲信号，每秒可达百万次\n  - 然后通过谐振效应发放这个信号，形成方波\n  - 再通过电子元件调整这种脉冲的频率，把脉冲信号转换为需要的频率，这就形成了驱动芯片工作的时钟信号\n  - 最后，时钟信号驱动着芯片工作，就像人体的脉搏一样，每一次脉冲到来，都让芯片的状态发生一次变化，最终存储器中的指令被一行行执行\n\n\n\n### 1.3 32 位 VS 64 位\n\n-  32、64 位可以表示操作系统、软件、 CPU等\n-  32位的容量：2^32 = 4 × 2^30 = 4𝐺𝐵 \n-  64位的容量：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB\n-  如果是 CPU，那么有 32 位 CPU，也有 64 位 CPU\n   - 如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU\n   - 如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU\n   - 这里的 32 和 64，称作 CPU 的位宽\n   - 64 位 CPU 可以执行更大数字的运算，这个优势在普通应用上不明显，但是对于数值计算较多的应用就非常明显。\n   - 64 位 CPU 可以寻址更大的内存空间\n-  如果 32 位/64 位说的是程序，那么说的是指令是 64 位还是 32 位的。\n   - 32 位指令在 64 位机器上执行，困难不大，可以兼容。 \n   - 如果是 64 位指令，在 32 位机器上执行就困难了，32 位的寄存器都存不下指令的参数。\n-  如果 32 位/64 位说的是操作系统\n   - 操作系统也是一种程序，如果是 64 位操作系统，也就是操作系统中程序的指令都是 64 位指令，因此不能安装在 32 位机器上。\n\n\n\n### 1.4 计算机的分类\n\n- 超级计算机\n  - 功能最强\n  - 运算速度的单位是TFlop/s（1TFlop/s=每秒一万亿次浮点计算）\n  - Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz： 44.87 GFlop/s（  0.04487TFlop/s）\n  - 世界排名：Summit IBM（美国) > 神威太湖之光(中国)  > Sierra IBM（美国） \n  - 中国排名：神威 太湖之光 > 天河二号>  天河一号\n- 大型机 (又称大型机、大型主机、主机等)\n  - IBM Z9 \n  - 大型机造价高昂\n  - 去“IOE”行动 (I(IBM) O(Oracle) E(EMC)) --阿里云\n- 迷你计算机（服务器）\n  - 普通服务器已经代替了传统的大型机，成为大规模企业计算的中枢\n- 工作站\n  - 高端的通用微型计算机，提供比个人计算机更强大的性能\n  - 类似于普通台式电脑，体积较大，但性能强劲\n- 微型计算机\n  - 麻雀虽小、五脏俱全\n  - 从构成的本质上来讲，个人计算机与前面的分类无异\n\n\n\n### 1.5 计算机的体系与结构\n\n- 阿兰.图灵\n  - 英国(1912-1954) 数学家成逻辑学家网密肯进分析家和理论生物学家，被誉为计算机科学和人工智能之父。\n  - 图灵机\n  - 图灵测试\n  - 图灵完备\n  - 可判定性\n\n- 图灵机\n  - 图灵机拥有一条无限长的纸带，纸带上是一个格子挨着一个格子，格子中可以写字符，你可以把纸带看作内存，而这些字符可以看作是内存中的数据或者程序。\n\n  - 图灵机有一个读写头，读写头可以读取任意格子上的字符，也可以改写任意格子的字符。\n\n  - 读写头上面的盒子里是一些精密的零件，包括图灵机的存储、控制单元和运算单元。\n  - 图灵通过数学证明了，一个问题如果可以拆解成图灵机的可执行步骤，那问题就是可计算的。\n  - 另一方面，图灵机定义了计算机的组成以及工作原理，但是没有给出具体的实现。\n\n- 冯诺依曼体系\n  - 将程序指令和数据一起存储的计算机设计概念结构,现代计算机都是冯诺依曼机\n  - 能够长期记忆程序、数据、中间结果及最终运算结果的能力\n\n  - 能够把需要的程序和数据送至计算机中\n  - 能够具备算术、逻辑运算和数据传送等数据加工处理的能力\n  - 能够按照要求将处理结果输出给用户\n\n  - 冯诺依曼瓶颈：CPU和存储器速率之间的问题无法调和导致CPU经常空转等待数据传输\n\n- 冯诺依曼机组成结构\n  - 输入设备\n    - 鼠标、键盘\n  - 输出设备\n    - 显示器\n  - 存储器\n    - CPU、内存、硬盘\n  - 控制器\n    - CPU\n  - 运算器\n    - CPU\n\n\n\n### 1.6 程序翻译与解释\n\n- 人类语言与计算机语言需要进行语言之间的转换\n\n- 程序翻译\n  - L1是描述程序逻辑的高级语言\n  - L0是计算机实际执行的低级语言\n  - 编译器：高级语言对应的编译器\n  - 程序翻译就是编译器将L1语言翻译并生成L0语言\n  - 翻译过程生成新的L0程序\n  - 通过编译器执行的相关语言\n\n    - C/C++\n    - Object-C\n    - Go\n\n- 程序解释\n  - L1是描述程序逻辑的高级语言\n  - L0是计算机实际执行的低级语言\n  - 解释器：使用L0语言实现的程序\n  - 程序解释的过程就是解释器将L1语言解释为L0语言\n  - 解释过程不生成新的L0程序\n  - 相关语言\n\n    - Python\n    - Php\n    - Javascript\n\n- 混合型语言 \n\n  - Java （java程序翻译成字节码， 字节码解释成机器码）\n  - C#\n\n\n\n\n### 1.7 计算机的层次\n\n- 硬件逻辑层\n  - 门、触发器等逻辑电路组成\n  - 属于电子工程的领域\n- 微程序机器层\n  - 编程语言是微指令集\n  - 微指令所组成的微程序直接交由硬件执行\n  - 一般是硬件厂商公司处理该层\n- 传统机器层\n  - 编程语言是CPU指令集（机器指令）\n  - 一条机器指令对应一个微程序，一个微程序对应一组微指令\n  - 编程语言和硬件是直接相关\n  - 不同架构的CPU使用不同的CPU指令集 （英特尔、AMD、x86/X86_64）\n- 操作系统层\n  - 向上提供了简易的操作界面\n  - 向下对接了指令系统，管理硬件资源\n  - 操作系统层是在软件和硬件之间的适配层\n- 汇编语言层\n  - 编程语言是汇编语言（PUSH DS/PUSH DS）\n  - 汇编语言可以翻译成可直接执行的机器语言\n  - 完成翻译的过程的程序就是汇编器\n- 高级语言层\n  - 高级语言的类别非常多，由几百种\n  - 常见的高级语言有： Python、 Java、 C/C++、 Golang等\n- 应用层\n  - 满足计算机针对某种用途而专门设计\n  - WPS、IDE\n\n\n\n### 1.8 计算机的计算单位\n\n- 容量单位\n  - 在物理层面，高低电平记录信息\n  - 理论上只认识0/1两种状态，0/1称为bit（比特位）\n  - 0/1能够表示的内容太少了，需要更大的容量表示方法\n  - 更大的容量单位：字节、千字节、兆字节、吉字节、太字节、拍字节、艾字节\n  - 为什么网上买的移动硬盘500G，格式化之后就只剩465G了？\n\n    - 硬盘商一般用10进位标记容量 𝟓𝟎𝟎 ∗ 𝟏𝟎𝟎𝟎^3/𝟏𝟎𝟐𝟒^3约等于𝟒𝟔𝟓\n    - 厂商采用十进制更好沟通\n\n| 容量单位 |  bit   | Byte  |         KB         |             MB              |             GB              |            TB             |              PB               |             EB             |\n| :------: | :----: | :---: | :----------------: | :-------------------------: | :-------------------------: | :-----------------------: | :---------------------------: | :------------------------: |\n|   名字   | 比特位 | 字节  | 千字节（kilobyte） | 兆字节=百万字节（megabyte） | 吉字节=十亿字节（GigaByte） | 太字节=万亿字节(terabyte) | 拍字节=千万亿字节（petabyte） | 艾字节=2^60字节（ExaByte） |\n|   换算   |   -    | 8bits |       1024B        |            1024K            |            1024M            |           1024G           |             1024T             |           1024P            |\n| 常见设备 | 门电路 |       |       寄存器       |          高速缓存           |          内存/硬盘          |           硬盘            |            云硬盘             |          数据仓库          |\n\n- 速度单位\n  - 网络速度\n    - 100M带宽=100M/s\n    - 为什么电信拉的100M光纤，测试峰值速度只有12M每秒？\n      - 网络常用单位为(Mbps) \n      - bps(bits per second):每秒传送位数 \n      - 100M/s = 100Mbps = 100Mbit/s\n      - 100Mbit/s=(100/8)MB/s=12.5MB/s\n  - 计算速度\n    - CPU的速度一般体现为CPU的时钟频率\n    - CPU的时钟频率的单位一般是赫兹Hz（hertz）\n    - 目前主流CPU的时钟频率都在2GHz以上\n    - Hz其实就是秒分之，并不只是描述计算机领域所专有的单位\n    - Hz它是每秒中的周期性变动重复次数的计量\n    - 在CPU中就表示高低电瓶在每秒中变化的次数，2GHz = 2*1000^3Hz = 每秒20亿次\n\n\n\n### 1.9 计算机的字符与编码集\n\n- 早期英美的ASCII码\n\n  - 美国信息交换标准码（American Standard Code for Information Interchange）\n\n  - 使用7个bits就可以完全表示ASCII码\n\n  - 包含95个可打印字符，33个不可打印字符（包括控制字符）\n\n  - 很多应用或者国家中的符号都无法表示\n\n  - 无法表示数学符号：“÷ ≠ ≥ ≈ π”\n\n  - 𝟑𝟑 + 𝟗𝟓 = 𝟏𝟐𝟖 = 𝟐^7\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143402.jpg)\n\n- Externed ASCII码\n\n  - 第一次对ASCII码进行扩充， 7bits => 8bits\n\n  - 常见数学运算符\n\n  - 带音标的欧洲字符\n\n  - 其他常用符、表格符等\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143429.jpg)\n\n- 国际化\n\n  - 欧洲、中亚、东亚、拉丁美洲国家的语言多样性\n  - 语言体系不一样，不以有限字符组合的语言\n  - 中国、韩国、日本等的语言最为复杂\n  - 中文编码集\n    - GB2312\n      - 《信息交换用汉字编码字符集——基本集》\n      - 一共收录了 7445 个字符\n      - 包括 6763 个汉字和 682 个其它符号\n      - 不兼容国际标准\n    - GBK\n      - 向下兼容GB2312，向上支持国际ISO标准\n      - 《汉字内码扩展规范》\n      - 收录了21003个汉字，支持全部中日韩汉字\n      - 国际电脑不安装GBK编码就会显示乱码\n      - 国内的Windows系统默认使用GBK编码\n  - Unicode\n    - Unicode：统一码、万国码、单一码，兼容全球的字符集\n    - Unicode定义了世界通用的符号集， UTF-*实现了编码\n    - UTF-8以字节为单位对Unicode进行编码\n\n## 2.组成篇\n\n### 2.1 计算机的总线\n\n- 总线的概述\n  - USB = Universal Serial Bus ，通用串行总线\n    - 提供了对外连接的接口\n    - 不同设备可以通过USB接口进行连接\n    - 连接的标准，促使外围设备接口的统一\n  - 总线的分类\n\n    - 片内总线\n      - 芯片内部的总线\n      - 寄存器与寄存器之间\n      - 寄存器与控制器、运算器之间\n    - 系统总线\n      - CPU、主内存、 IO设备、各组件之间的信息传输线\n      - 数据总线\n        - 双向传输各个部件的数据信息\n        - 一般与CPU位数相同（32位、 64位）\n        - 数据总线的位数（总线宽度）是数据总线的重要参数，64位总线一次可传输8个字节的数据\n      - 地址总线\n        - 指定源数据或目的数据在内存中的地址\n        - 地址总线位数=n，寻址范围： 0~𝟐^n\n        - 地址总线的位数与存储单元有关\n      - 控制总线\n        - 控制总线是用来发出各种控制信号的传输线\n        - 控制信号经由控制总线从一个组件发给另外一个组件\n        - 控制总线可以监视不同组件之间的状态（就绪/未就绪）\n\n- 总线的仲裁\n  - 为了解决总线使用权的冲突问题\n  - 总线的仲裁的方法\n    - 链式查询-串联\n      - 所有设备都可想仲裁器发出使用权申请，仲裁器在分配使用权时是按照链式顺序逐个询问，轮到谁就是谁\n      - 好处：电路复杂度低，仲裁方式简单\n      - 坏处：优先级低的设备难以获得总线使用权\n      - 坏处：优先级低的设备难以获得总线使用权\n    - 计时器定时查询-并联\n      - 仲裁控制器对设备编号并使用计数器累计计数\n      - 接收到仲裁信号后，往所有设备同时发出计数值\n      - 计数值与设备编号一致则获得总线使用权\n    - 独立请求-循环\n      -  每个设备均有总线独立连接仲裁器\n      -  设备可单独向仲裁器发送请求和接收请求\n      -  当同时收到多个请求信号，仲裁器有权按优先级分配使用权\n      -  好处：响应速度快，优先顺序可动态改变\n      -  好处：响应速度快，优先顺序可动态改变\n\n\n\n### 2.2 计算机的输入输出设备\n\n- 常见输入输出设备\n\n  - 输入设备\n\n    - 字符输入设备\n      - 键盘：\n        - 薄膜键盘\n        - 机械键盘（根据段落感、声音、压力、键程的不同分为：黑轴、红轴、青轴、茶轴）\n        - 电容键盘\n    - 图像输入设备\n      - 鼠标\n      - 数位板：常用于绘图设计创作，输入板和压感笔\n      - 扫描仪：将图形信息转换为数字信号\n  - 输出设备\n    - 显示器\n      - CRT显示器\n      - 液晶显示器\n    - 打印机\n    - 投影仪\n\n- 输入输出接口的通用设计\n\n  - 通用设计考虑的问题：读取数据、向设备发送数据、设备有没有被占用？、设备是否已经启动？、设备是否已经连接？\n  - 数据线\n    - 是I/O设备与主机之间进行数据交换的传送线\n    - 单向传输数据线\n    - 双向传输数据线\n  - 状态线\n    - IO设备状态向主机报告的信号线\n    - 查询设备是否已经正常连接并就绪\n    - 查询设备是否已经被占用\n  - 命令线\n    - CPU向设备发送命令的信号线\n    - 发送读写信号\n    - 发送启动停止信号\n  - 设备选择线\n    - 主机选择I/O设备进行操作的信号线\n    - 对连在总线上的设备进行选择\n\n- CPU与IO设备的通信\n\n  - CPU速度与IO设备速度不一致\n\n  - 程序中断\n\n    - 当外围IO设备就绪时，向CPU发出中断信号\n\n    - CPU有专门的电路响应中断信号\n\n    - 中断的意义\n\n      - 提供低速设备通知CPU的一种异步的方式\n      - CPU可以高速运转同时兼顾低速设备的响应\n      - 提高工作效率(polling的问题) \n      - 故障恢复(异常处理、紧急事件等)\n      - 简化编程模型(try/cache, 计时器等)\n\n  - 例如通过电脑打印资料的过程\n\n    - 中断相应过程\n\n      ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143825.jpg)\n\n    - 中断请求类型\n\n      - 硬件设备发给主板(打印机、键盘、鼠标等)\n      - 硬件中断: CPU异常(除以0), 时钟信号等\n      - 软件中断:发出(异常、切换到内核态等)\n\n    - 中断向量表\n\n      - (一般在内存中) 一块块区域，存储了中断类型和中断响应程序的对应关系。每一行叫做一个中断向量。\n\n        | 中断类型 | ISR地址 | 描述   |\n        | -------- | ------- | ------ |\n        | 00       | 0x0000  | 除以0  |\n        | 01       | 0x0004  | 单步   |\n        | 09       | 0x0024  | 键盘   |\n        | 18       | 0x0048  | 打印机 |\n        | 100      | 0x0190  | 自定义 |\n\n    - 中断QA\n\n      - 32位机器上的中断响应路径(ISR) 只有4个字节，怎么实现复杂的程序?\n      - 按键程序中断响应路径到操作系统再到应用， 但是到底哪些键被按了怎么知道?\n      - 中断响应后，如何恢复到中断执行前的状态?\n      - 既然出错了?为什么不出错了直接跳转到错误处理位置?\n\n  - DMA（direct memory access）直接存储器存取\n\n    - DMA直接连接主存与IO设备\n    - DMA直接连接主存与IO设备\n    - 当主存与IO设备交换信息时，不需要中断CPU\n    - 可以提高CPU的效率\n    - 硬盘和外置显卡中都有DMA设备\n\n  \n\n### 2.3 计算机存储器\n\n- 存储器的分类\n\n  - 按存储介质分类\n    - 半导体存储器 ：内存条、 U盘、 固态硬盘\n    - 磁存储器：磁带、磁盘\n  - 按存取方式分类\n    - 随机存储器(RAM)： 随机读取 与位置无关\n    - 串行存储器 ：与位置有关 按顺序查找\n    - 只读存储器(ROM）：只读不写\n\n- 存储器指标\n\n  - 读写速度：7200转\n  - 存储容量：2T\n  - 价格：容量+价格=>位价：每比特位价格\n\n- 层次结构\n\n  - 高速缓存：速度快，位格高\n  - 主存：速度适中，位格适中\n  - 辅存：速度慢，位格低\n  - 缓存-主存层次\n    - 原理：局部性原理\n    - 实现：在CPU与主存之间增加一层速度快（容量小）的Cache\n    - 目的：解决主存速度不足的问题\n  - 主存-辅存层次\n    - 原理：局部性原理\n    - 实现：主存之外增加辅助存储器（磁盘、 SD卡、 U盘等）\n    - 目的：解决主存容量不足的问题\n  - 局部性原理\n    - 局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。\n\n  \n\n### 2.4 主存储器与辅助存储器\n\n- 计算机断电，内存数据丢失\n\n- 计算机断电，磁盘数据不会丢失\n\n- 主存\n\n  - RAM（随机存取存储器： Random Access Memory）\n  - RAM 通过电容存储数据，必须隔一段时间刷新一次\n  - 如果掉电，那么一段时间后将丢失所有数据\n  - 内存与CPU如何交互的\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143858.jpg)\n\n  - 32位系统：2^32 = 4 × 2^30 = 4𝐺𝐵 \n  - 64位系统：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB\n  - 32位的系统最大支持4GB的内存寻址范围，每一个字节都对应一个内存地址。内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。\n  - 工作原理\n    - 字：是指存放在一个存储单元中的二进制代码组合\n    - 字块：存储在连续的存储单元中而被看作是一个单元的一组字\n    - 假设一个字有32位，一个字块共B个字，主存共M个字块\n      - B×M = 主存总字数；B×M×32 = 主存总容量(bits)\n    - 字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址\n      - 2^𝑚 = 𝑀 , 前m位能表示出的寻址范围是0--2^𝑚\n      - 2^𝒃 = 𝐵，后b位能表示出的寻址范围是0--2^b\n\n- 辅存：磁盘\n\n  - 表面是可磁化的硬磁特性材料\n  - 移动磁头径向运动读取磁道信息\n  - 磁道、扇区、磁头位置、磁头方向\n  - 寻道调度算法\n\n    - 先来先服务算法\n      - 按顺序访问进程的磁道读写需求\n    - 最短寻道时间优先\n      - 与磁头当前位置有关\n      - 优先访问离磁头最近的磁道\n    - 扫描算法（电梯算法）\n      - 每次只往一个方向移动\n      - 到达一个方向需要服务的尽头再反方向移动\n    - 循环扫描算法\n      - 每次只往一个方向移动\n      - 一个方向到头后再从头开始从同一个方向开始移动\n\n\n\n### 2.5 高速缓存\n\n- 为了解决CPU与主存的速度不匹配的问题\n\n- 缓存与主存的关系\n\n  - 存储的逻辑结构类似\n  - 缓存的容量较小\n  - 缓存的速度更快\n\n- 在主存缓存层次结构中的工作原理\n\n  - CPU需要的数据在缓存里：直接获取\n  - CPU需要的数据不在缓存里：需要去主存拿，替换策略\n    - 需要性能良好的缓存替换策略\n  - 命中率：从缓存取数据的命中率\n    - 命中率是衡量缓存的重要性能指标\n    - 理论上CPU每次都能从高速缓存取数据的时候，命中率为1\n    - 访问主存次数： N𝑚，访问Cache次数： N𝑐\n    - 命中率ℎ =𝑁𝑐/(𝑁𝑐＋𝑁𝑚)\n  - 访问效率： 𝑒\n    - 访问主存时间： 𝑡𝑚 ，访问缓存时间：𝑡𝑐\n    - 访问Cache-主存系统平均时间： 𝑡𝑎 = ℎ×𝑡𝑐 + (1 − ℎ)×𝑡𝑚\n    - 𝑒 =𝑡𝑐/𝑡𝑎\n\n- 高速缓存替换策略\n\n  - 随机算法\n  - 先进先出算法(FIFO)\n    - 把高速缓存看做是一个先进先出的队列\n    - 优先替换最先进入队列的字块\n  - 最不经常使用算法(LFU)\n    - 优先淘汰最不经常使用的字块\n    - 需要额外的空间记录字块的使用频率\n  - 最近最少使用算法(LRU)\n    - 优先淘汰一段时间内没有使用的字块\n    - 如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的\n    - 有多种实现方法，一般使用双向链表\n\n  \n\n### 2.6 计算机的指令系统\n\n- 计算机指令\n\n  - 计算机通过指令指挥计算机工作。\n  - CPU被时钟驱动，不断的读取PC指针指向的指令，并增加PC指针，从内存中读取指令并执行。(如此周而复始)\n  - 不同的CPU架构使用不同指令。目前使用最广泛的是RISC(Reduced instruction set computer,精简指令集)\n\n- 机器指令的形式\n\n  - 机器指令主要由两部分组成：操作码、地址码\n  - 操作码指明指令所要完成的操作\n  - 操作码的位数反映了机器的操作种类，如果操作码有8位就有2^8 = 256种操作\n  - 地址码直接给出操作数或者操作数的地址\n  - 分三地址指令、二地址指令和一地址指令与零地址指令\n    - 零地址指令\n      - 在机器指令中无地址码\n      - 空操作、停机操作、中断返回操作等\n    - 一地址指令\n      - (addr1)OP→ (addr1)：自己对自己的操作\n      - (addr1)OP(ACC) → (addr1)：自增操作\n    - 二地址指令\n      - (addr1)OP(addr2) → (addr1)或(addr2)： 结果放在addr1或addr2)\n    - 三地址指令\n      - 一个操作码和三个地址码\n      - (addr1)OP(addr2) → (addr3)：结果放在addr3， 例如： 1+2=3\n\n- 操作类型\n\n  - 数据传输\n    - 寄存器之间、寄存器与存储单元、存储单元之间传送\n    - 数据读写、交换地址数据、清零置一等操作\n\n- load/store指令用来从内存中读/写入内存。通常会有多个版本的实现，助记符是:\n      - load类: Iw,Ib,Ih\n      - store类: sw,sb,sh\n\n  - 算术逻辑\n    - 操作数之间的加减乘除运算\n      - 加减乘除等：addi, subi, divi, multi\n    - 操作数的与或非等逻辑位运算\n      - 位运算指令：and/or/xor\n\n- 移位操作\n\n  - 数据左移（乘2）、数据右移（除2）\n  - 完成数据在算术逻辑单元的必要操作\n  - 控制指令\n    - 等待指令、停机指令、空操作指令、中断指令等\n\n- 寻址方式\n\n  - 指令寻址\n\n    - 顺序寻址\n\n    - 跳跃寻址\n\n      | 地址 |   指令    |\n      | :--: | :-------: |\n      | 101  | MOV R0,R1 |\n      | 102  | ADD R1,R2 |\n      | 103  |  JMP 102  |\n\n  - 数据寻址\n\n    - 立即寻址\n      - 指令直接获得操作数\n      - 无需访问存储器\n      - 优点：速度快\n      - 缺点：地址码位数限制操作数表示范围\n    - 直接寻址\n      - 直接给出操作数在主存的地址\n      - 寻找操作数简单，无需计算数据地址\n      - 优点：寻找操作数简单\n      - 缺点：地址码位数限制操作数表示范围\n    - 间接寻址\n      - 指令地址码给出的是操作数地址的地址\n      - 需要访问一次或多次主存来获取操作数\n      - 优点：操作数寻址范围大\n      - 缺点：速度较慢\n\n  \n\n### 2.7 计算机的控制器\n\n- 控制器是协调和控制计算机运行的\n- 程序计数器\n  - 程序计数器用来存储下一条指令的地址\n  - 循环从程序计数器中拿出指令\n  - 当指令被拿出时，指向下一条指令\n- 时序发生器\n  - 电气工程领域，用于发送时序脉冲\n  - CPU依据不同的时序脉冲有节奏的进行工作\n- 指令译码器\n  - 指令译码器是控制器的主要部件之一\n  - 计算机指令由操作码和地址码组成\n  - 翻译操作码对应的操作以及控制传输地址码对应的数据\n- 指令寄存器\n  - 指令寄存器也是控制器的主要部件之一\n  - 从主存或高速缓存取计算机指令\n- 主存地址寄存器\n  - 保存当前CPU正要访问的内存单元的地址\n- 主存数据寄存器\n  - 保存当前CPU正要读或写的主存数据\n- 通用寄存器\n  - 用于暂时存放或传送数据或指令\n  - 可保存ALU的运算中间结果\n  - 容量比一般专用寄存器要大\n\n\n\n### 2.8 计算机的运算器\n\n- 运算器是用来进行数据运算加工的\n\n- 数据缓冲器\n  - 分为输入缓冲和输出缓冲\n  - 输入缓冲暂时存放外设送过来的数据\n  - 输出缓冲暂时存放送往外设的数据\n- ALU\n  - ALU：算术逻辑单元，是运算器的主要组成\n  - 常见的位运算（左右移、与或非等）\n  - 算术运算（加减乘除等）\n- 通用寄存器\n  - 用于暂时存放或传送数据或指令\n  - 可保存ALU的运算中间结果\n  - 容量比一般专用寄存器要大\n- 状态字寄存器\n  - 存放运算状态（条件码、进位、溢出、结果正负等）\n  - 存放运算控制信息（调试跟踪标记位、允许中断位等）\n- 总线\n\n\n\n### 2.9 计算机指令的执行过程\n\n- 指令执行过程\n\n  - 取指令 \n    - 从缓存取指令\n    - 送到指令寄存器\n  - 分析指令\n    - 指令译码器译码\n    - 发出控制信号\n    - 程序计数器+1\n  - 执行指令\n    - 装载数据到寄存器\n    - ALU处理数据\n    - 记录运算状态\n    - 送出运算结果\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144002.jpg)\n\n- CPU的流水线设计\n\n  - 提高CPU的综合利用率\n  - 类似工厂的装配线\n  - 工厂的装配线使得多个产品可以同时被加工\n  - 在同一个时刻，不同产品均位于不同的加工阶段\n  - 串行执行m条指令： 𝑇1 = 3t × 𝑚\n  - 流水线执行m条指令： 𝑇2 = 𝑡 × (𝑚 + 2)\n  - 流水线执行效率:H=𝑇2/𝑇1= 𝑡 × (𝑚 + 2)/3t × 𝑚=1/3+1/3m, m很大的情况下是串行执行的3倍效率\n\n  | 指令 | 时间片 | 时间片   | 时间片   | 时间片   | 时间片   |\n  | ---- | ------ | -------- | -------- | -------- | -------- |\n  | 1    | 取指令 | 分析指令 | 执行指令 |          |          |\n  | 2    |        | 取指令   | 分析指令 | 执行指令 |          |\n  | 3    |        |          | 取指令   | 分析指令 | 执行指令 |\n\n\n\n\n\n\n## 3.计算篇\n\n### 3.1 进制运算的基础\n\n- 什么是进制\n  - 进位制是一种记数方式，亦称进位计数法或位值计数法\n  - 有限种数字符号来表示无限的数值\n  - 使用的数字符号的数目称为这种进位制的基数或底数\n  - 计算机喜欢二进制，但是二进制表达太长了\n  - 使用大进制位可以解决这个问题\n  - 八进制、十六进制满足2的n次方的要求\n  - 二进制\n    - 1024=0b1000000000 \n  - 八进制\n    - 1024=0o2000\n  - 十进制： [0-9] \n  - 十六进制\n    - MAC地址：[0-9]和A、 B、 C、 D、 E、 F\n    - 1024=0x400\n  - 二十进制\n    - 玛雅文明的玛雅数字\n    - 因努伊特的因努伊特数字\n  - 六十进制\n    - 时间、坐标、角度等量化数据\n- 进制的表示法\n  - 正整数N，基数为r，位数为n\n  - N=𝑑𝑛−1×r𝑛−1 +𝑑𝑛−2× r𝑛−2 + ⋯ + 𝑑1×𝑟 + 𝑑0\n  - N= 1024  = 1 ×10^3 +0×10^3+ 2 × 10^1 + 4× 10^0\n  - 𝑁 = 10000000000  = 1 × 2^10\n- 二进制转十进制的方法\n  - 按权展开法\n  - 𝑁 = 01100101 = 1 × 2^6 + 1 × 2^5 + 1 ×2^2 + 1 = 101\n  - 小数的按权展开法\n  - 𝑁 = 0.11001 = 1×2^−1 + 1×2^−2 + 1× 2^−5 = 0.78125=25/32\n- 十进制转二进制的方法\n  - （整数）重复相除法\n  - 重复除以2 ，得商， 取余数，最后一个余数为最高位\n  - （小数）重复相乘法\n  - 重复乘以2， 得积 ，取1，第一个余数为最高位\n\n\n\n### 3.2 原码&反码&补码\n\n- 使用0表示正数，使用1表示负数，最高位表示符号位，其它都是数字位\n\n- +237=011101101， -237=111101101\n\n- 两个字节16位表示+237 【0】 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1\n\n- 原码表示法\n\n  - 使用0表示正数、 1表示负数\n  - 规定符号位位于数值第一位\n  - 表达简单明了，是人类最容易理解的表示法\n  - 0有两种表示方法： 00、 10\n  - 原码进行运算非常复杂，特别是两个操作数符号不同的时候\n    - 判断两个操作数绝对值大小\n    - 使用绝对值大的数减去绝对值小的数\n    - 对于符号值，以绝对值大的为准\n  - 希望找到不同符号操作数更加简单的运算方法\n  - 希望找到使用正数代替负数的方法\n  - 使用加法操作代替减法操作，从而消除减法\n\n- 补码表示法\n\n  - 整数的补码\n    - 如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数\n    - 如果 x∈[−2^𝑛, 0) X=2^(𝑛+1) + 𝑥\n      - 例如：n=4， x=13，计算x的二进制原码和补码\n        - 原码： x=0,1101\n        - 补码： x=0,1101\n      - 例如：n=4，x=-13，计算x的二进制原码和补码\n        - 原码： x=1,1101\n        - 补码： 2^(𝑛+1) + 𝑥= 2^(4+1() − 13 = 100000 − 1101 = 10011\n  - 小数的补码\n    - 如果 x∈[0, 1) X=x  \n    - 如果 x∈[−1, 0) X=2+x\n    - 规律：小数的反码等于原码除符号位外按位取反，补码等于反码+1\n  - 在计算补码的过程中，还是使用了减法\n  - 需要寻找使用正数代替负数的方法\n\n- 反码表示法\n\n  - 反码的目的是找出原码和补码之间的规律，消除转换过程中的减法\n  - 如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数\n  - 如果 x∈[−2^𝑛, 0) X=（2^(𝑛+1)-1） + 𝑥\n  - 规律：负数的反码等于原码除符号位外按位取反，负数的补码等于反码+1\n    - -13， 原码：1,1101 ，反码：1,0011 ，补码：1,0010\n    - -7， 原码： 1,0111，反码： 1,1001，补码： 1,1000\n    - -1， 原码： 1,0001 ，反码：1,1111，补码： 1,1110\n  - x=-13，计算x的二进制原码和反码\n    - 原码： x=1,1101\n    - 反码： (2𝑛+1−1) + 𝑥 = (2^4+1−1) − 13 = 011111 − 1101 = 1,0010\n    - 反码： x=1,0010\n\n  \n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144040.jpg)\n\n\n\n### 3.3 定点数与浮点数\n\n- 定点数的表示方法\n\n  - 小数点固定在某个位置的数称之为定点数\n  - 纯小数 ：符号位【小数点】数值位\n  - 纯整数：符号位 数值位 【小数点】\n  - 其它小数需要乘以比例因子以满足定点数保存格式，10.01 需要左移两位或者右移两位\n  - 计算机中的存储形式见下表，小数点不显示\n\n  | 数值    | 符号位 | 数值位 |\n  | :------ | :----: | :----: |\n  | 0.1011  |   0    |  1011  |\n  | -0.1011 |   1    |  1011  |\n  | 1011    |   0    |  1011  |\n  | -1011   |   1    |  1011  |\n\n- 浮点数的表示方法\n\n  - 计算机处理的很大程度上不是纯小数或纯整数\n\n  - 数据范围很大，定点数难以表达\n\n  - 浮点数的表示格式\n\n    - 类比科学计数法：123450000000 = 1.2345 × 10^11 ， 1.2345：尾数 ，10：基数 ，11：阶码\n    - 𝑁 = 𝑆 × 𝑟^𝑗 ，S：尾数， r：基数， j：阶码\n    - 阶码符号位|阶码数值位|尾数符号位|尾数数值位\n    - 尾数规定使用纯小数\n    - 11.0101 = 0.110101 × 2^10\n    - 11.0101 = 0.0110101 × 2^11\n    - 计算机中的存储形式见下表，小数点不显示\n\n    | 数字             | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n    | ---------------- | ---------- | ---------- | ---------- | ----------------- |\n    | 0.110101 × 2^10  | 0          | 10         | 0          | 1010100           |\n    | 0.0110101 × 2^11 | 0          | 11         | 0          | 01101010          |\n\n    \n\n  - 浮点数的表示范围\n\n    - 假设阶码数值取m位，尾数数值取n位\n    - 阶码表示范围： [−(𝟐^𝒎 − 𝟏),  𝟐^𝒎 − 𝟏]\n    - 尾数表示范围： [−(𝟏 − 𝟐^−𝒏), −(𝟐^−𝒏)] [𝟐^−𝒏,  𝟏 − 𝟐−^𝒏]\n    - 单精度浮点数：使用4字节、 32位来表达浮点数(float)\n    - 双精度浮点数：使用8字节、 64位来表达浮点数(double)\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144101.jpg)\n\n  - 浮点数的规格化\n\n    - 尾数规定使用纯小数\n    - 尾数最高位必须是1\n    - 例如：11.0101 = 0.110101 × 2^10\n\n- 两者的对比\n\n  -  当定点数与浮点数位数相同时， 浮点数表示的范围更大\n  -  当浮点数尾数为规格化数时， 浮点数的精度更高（尾数存8位，前面的0多了丢失的精度就更多）\n  -  浮点数运算包含阶码和尾数， 浮点数的运算更为复杂\n  -  浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数\n  -  浮点数在数的运算规则、运算速度、硬件成本方面不如定点数\n\n\n\n### 3.4 定点数的加减法运算\n\n- 整数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2^(𝑛+1))\n- 小数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2)\n- 数值位与符号位一同运算，并将符号位产生的进位自然丢掉\n- 整数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补  (𝑚𝑜𝑑2^(𝑛+1))\n- 小数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补 (𝑚𝑜𝑑2)\n- -B[补]等于B[补]连同符号位按位取反，末位加一，B 补 = 1,0010101， (−B) 补 = 0,1101011\n- 负数的反码等于原码按位取反，补码等于反码+1\n- 例如： A=-110010， B=001101，求A+B\n  - A[补] = 1,001110\n  - B 补 = B[原] = 0,001101\n  - A 补 + B 补 = (A + B) 补 =1,011011\n  - (A + B)原 = −100101\n- 例如：A=11001000， B=-00110100，求A-B\n  - A 补 = A[原] = 0,11001000\n  - B 补 = 1,11001100\n  - (−B) 补 = 0,00110100\n  - A 补 − B 补 = A + (−B) 补=0,11111100\n  - A − B（原） = 111111100\n\n- 双符号位判断溢出\n  - 双符号位判断法\n    - 单符号位表示变成双符号位： 0=>00,1=>11\n    - 双符号位产生的进位丢弃\n    - 结果的双符号位不同则表示溢出\n\n\n\n### 3.5 浮点数的加减法运算\n\n- 𝑥 = 𝑆𝑥 × 𝑟^𝑗𝑥，𝑥 = 0.1101 × 2^01\n\n- 𝑦 = 𝑆𝑦 × 𝑟^𝑗y，𝑦 = (−0.1010) × 2^11\n\n- 対阶\n\n  - 対阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算\n  - 浮点数尾数运算简单\n  - 浮点数位数实际小数位与阶码有关\n  - 阶码按小阶看齐大阶的原则\n\n  | 数字             | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n  | ---------------- | ---------- | ---------- | ---------- | ----------------- |\n  | 0.1101 × 2^01    | 00         | 0001       | 00         | 1101              |\n  | (−0.1010) × 2^11 | 00         | 0011       | 01         | 1010              |\n\n  - 対阶操作：将x的数值右移两位，𝑥 = 0.001101 × 2^11\n\n  | 数字             | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位）  |\n  | ---------------- | ---------- | ---------- | ---------- | ------------------ |\n  | 0.001101 × 2^11  | 00         | **0011**   | 00         | 0011(01)舍弃后两位 |\n  | (−0.1010) × 2^11 | 00         | 0011       | 01         | 1010               |\n\n- 尾数求和\n\n  - 使用补码进行运算\n  - 减法运算转化为加法运算： A - B = A + (-B)\n  - 𝑥[原] = 00.0011，𝑥[补] = 00.0011\n  - 𝑦[原] = 11.1010，𝑦[补] = 11.0110\n  - S = (𝑥 + 𝑦)[补] = 11.1001\n\n  | 数字    | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n  | ------- | ---------- | ---------- | ---------- | ----------------- |\n  | 11.1001 | 00         | **0011**   | 11         | 1001              |\n\n- 尾数规格化\n\n  - ◆ 对补码进行规格化需要判断两种情况： S>0和S<0\n  - S[补] = 00.1xxxxxx(𝑆 > 0)\n  - S[补] = 11.0xxxxxx(𝑆 < 0)\n  - 如果不满足此格式，需要进行左移， 同时阶码相应变化，以满足规格化\n  - S = (𝑥 + 𝑦)[补] = 11.1001，不满足约定格式\n  - S = (𝑥 + 𝑦)[补] = 11. (1)0010(左移舍弃，阶码数值位也要相应变化)\n\n  | 数字    | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n  | ------- | ---------- | ---------- | ---------- | ----------------- |\n  | 11.0010 | 00         | 0010       | 11         | 0010              |\n\n  - S = 𝑥 + 𝑦 补 = 11.0010，𝑥 + 𝑦 原 = −0.1110\n  - 𝑥 + 𝑦 = −0.1110× 2^10\n  - 一般情况下都是左移，符号位不一致下需要右移(定点运算的溢出情况)\n  - 右移的话则需要进行舍入操作\n\n- 舍入\n\n  - 0舍1入” 法（二进制的四舍五入）\n  - S 补 = 10.10110111，符号位不一致，右移舍弃尾数再+1， S 补 = 11.01011011(1)+1=11.01011100\n  - 右移阶码要+1\n\n- 溢出判断\n\n  - 定点运算双符号位不一致为溢出\n  - 浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规\n  - 浮点运算主要通过阶码的双符号位判断是否溢出\n  - 如果规格化后，阶码双符号位不一致，则认为是溢出\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144134.jpg)\n\n\n\n### 3.6 浮点数的乘除法运算\n\n- 乘法：阶码相加，尾数求积\n- 𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) × 𝑟^(𝑗𝑥+𝑗y)\n- 除法：阶码相减，尾数求商\n- 𝑥/𝑦 = (𝑆𝑥/𝑆𝑦) × 𝑟^(𝑗𝑥−𝑗y)\n\n- 阶码运算\n- 尾数运算\n- 尾数规格化\n- 舍入\n- 溢出判断\n- 例如： 𝑥 = 0.11010011 × 2^1101， 𝑦 = 0.11101110 × 2^0001，假设阶码4位，尾数8位，计算x * y\n  - 𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) ×^𝑟(𝑗𝑥+𝑗y)\n  - = (0.11010011 × 0.11101110) × 𝑟^(1101+0001)\n  - = 0.11000100(保留八位) × 𝑟^1110\n\n\n\n## 4.关于我\n\n一个专注基础知识的十二线小码农，本着 **基础，体系，实践，分享** 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。\n\n[个人网站 basedev.cn](http://basedev.cn/)  \n\n[Github](https://github.com/jaydroid1024)\n\nBaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践。\n\n\n\n## 5.参考\n\n- [重学操作系统 | 拉钩教育](https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content)\n\n- [编程必备基础 | 慕课网](https://coding.imooc.com/class/package/355.html)\n\n\n\n","source":"_posts/computer_composition.md","raw":"---\ntitle: 筑基系列-计算机基础知识小抄版\ndate: 2021-05-31 14:16:55\ncover: true\ntags: \n    - 计算机基础\n    - 组成原理\n    - CPU\n    - 存储器\n    - 位运算\ncategory: \n\t- 计算机\nsummary: 计算机基础知识提纲挈领，包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n# 筑基系列-计算机基础知识小抄版\n\n\n\n> 计算机基础知识筑基三部曲：\n>\n> - **[第一部：筑基系列-计算机基础知识小抄版](https://juejin.cn/post/6991367806772052004)**\n>   - 包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n> - **[第二部：筑基系列-操作系统基础知识小抄版](https://juejin.cn/post/6991385109509193764)**\n>   - 包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n> - **[第三部：筑基系列-计算机网络基础知识小抄版](https://juejin.cn/post/6991397445251334151)**\n>   - 包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n## 目录\n\n- [1.背景篇](#1.背景篇)\n  - [1.1 计算机发展史](#11-计算机发展史)\n  - [1.2 CPU发展史](#12-cpu发展史)\n  - [1.3 32 位 VS 64 位](#13-32-位-vs-64-位)\n  - [1.4 计算机的分类](#14-计算机的分类)\n  - [1.5 计算机的体系与结构](#15-计算机的体系与结构)\n  - [1.6 程序翻译与解释](#16-程序翻译与解释)\n  - [1.7 计算机的层次](#17-计算机的层次)\n  - [1.8 计算机的计算单位](#18-计算机的计算单位)\n  - [1.9 计算机的字符与编码集](#19-计算机的字符与编码集)\n- [2.组成篇](#2.组成篇)\n  - [2.1 计算机的总线](#21-计算机的总线)\n  - [2.2 计算机的输入输出设备](#22-计算机的输入输出设备)\n  - [2.3 计算机存储器](#23-计算机存储器)\n  - [2.4 主存储器与辅助存储器](#24-主存储器与辅助存储器)\n  - [2.5 高速缓存](#25-高速缓存)\n  - [2.6 计算机的指令系统](#26-计算机的指令系统)\n  - [2.7 计算机的控制器](#27-计算机的控制器)\n  - [2.8 计算机的运算器](#28-计算机的运算器)\n  - [2.9 计算机指令的执行过程](#29-计算机指令的执行过程)\n- [3.计算篇](#3.计算篇)\n  - [3.1 进制运算的基础](#31-进制运算的基础)\n  - [3.2 原码&反码&补码](#32-原码反码补码)\n  - [3.3 定点数与浮点数](#33-定点数与浮点数)\n  - [3.4 定点数的加减法运算](#34-定点数的加减法运算)\n  - [3.5 浮点数的加减法运算](#35-浮点数的加减法运算)\n  - [3.6 浮点数的乘除法运算](#36-浮点数的乘除法运算)\n- [4.关于我](#4.关于我)\n- [5.参考](#5.参考)\n\n\n\n## 1.背景篇\n\n### 1.1 计算机发展史\n\n- 电子管计算机 (1946-1957)\n  - 埃尼阿克(ENIAC)\n- 晶体管计算机(1957-1964)\n  - 贝尔实验室、MIT林肯实验室的TX-0、PDP-1配备4k内存和显示器\n- 集成电路计算机 (1964-1980)\n  - 德州仪器的工程师发明了集成电路(IC)、IBM(7094,1401) 、System/360 操作系统\n- 超大规模集成电路计算机 (1980-现在)\n  - 乔布斯 Apple 和 Apple二代\n- 未来的计算机 \n  - 生物计算机\n  - 量子计算机\n\n\n\n### 1.2 CPU发展史\n\n- 摩尔定律\n  - 定义：当价格不变时，集成电路中可容纳的晶体管数目约每隔 18～24 个月就会增加一倍，性能也将提升一倍。\n  - 这一定律揭示了信息技术发展的速度，但到今天，摩尔定律失效了。因为随着芯片越来越小，在尺寸和散热等方面已经挑战了人类的极限，芯片中无法再放入更多的电子元件了。\n  - 所以计算能力又开始以另一种方式发展，那就是多核心，比如一个普普通通的 NVIDA 显卡中就拥有了几百个核心，这样就可以进行大量的并发计算；另外，一个分布式的大数据集群，里面就可能有上千个核心。\n- 单核CPU发展史\n  - （1971～ 1973） 500KHz频率的微型计算机（字长8位）\n  - （1978～ 1985） 500MHz频率的微型计算机（字长16位）\n  - （1985～ 2000） 高于1GHz频率的微型计算机（字长32位）\n  - （1973～ 1978） 高于1MHz频率的微型计算机（字长8位）\n  - （2000～ 现在） 高于2GHz频率的微型计算机（字长为64位）\n- 多核CPU发展史\n  - （2005） Intel奔腾系列双核CPU、 AMD速龙系列\n  - （2006） Intel酷睿四核CPU\n  - Intel酷睿系列十六核CPU\n  - Intel至强系列五十六核CPU\n- CPU数字能量是如何产生的\n  - 时间是最重要的输入：晶振\n  - 电能供给给芯片，芯片中的一种电子元件晶振（也就是石英晶体）通电后产生震荡\n  - 震荡会产生频率稳定的脉冲信号，通常这是一种高频的脉冲信号，每秒可达百万次\n  - 然后通过谐振效应发放这个信号，形成方波\n  - 再通过电子元件调整这种脉冲的频率，把脉冲信号转换为需要的频率，这就形成了驱动芯片工作的时钟信号\n  - 最后，时钟信号驱动着芯片工作，就像人体的脉搏一样，每一次脉冲到来，都让芯片的状态发生一次变化，最终存储器中的指令被一行行执行\n\n\n\n### 1.3 32 位 VS 64 位\n\n-  32、64 位可以表示操作系统、软件、 CPU等\n-  32位的容量：2^32 = 4 × 2^30 = 4𝐺𝐵 \n-  64位的容量：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB\n-  如果是 CPU，那么有 32 位 CPU，也有 64 位 CPU\n   - 如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU\n   - 如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU\n   - 这里的 32 和 64，称作 CPU 的位宽\n   - 64 位 CPU 可以执行更大数字的运算，这个优势在普通应用上不明显，但是对于数值计算较多的应用就非常明显。\n   - 64 位 CPU 可以寻址更大的内存空间\n-  如果 32 位/64 位说的是程序，那么说的是指令是 64 位还是 32 位的。\n   - 32 位指令在 64 位机器上执行，困难不大，可以兼容。 \n   - 如果是 64 位指令，在 32 位机器上执行就困难了，32 位的寄存器都存不下指令的参数。\n-  如果 32 位/64 位说的是操作系统\n   - 操作系统也是一种程序，如果是 64 位操作系统，也就是操作系统中程序的指令都是 64 位指令，因此不能安装在 32 位机器上。\n\n\n\n### 1.4 计算机的分类\n\n- 超级计算机\n  - 功能最强\n  - 运算速度的单位是TFlop/s（1TFlop/s=每秒一万亿次浮点计算）\n  - Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz： 44.87 GFlop/s（  0.04487TFlop/s）\n  - 世界排名：Summit IBM（美国) > 神威太湖之光(中国)  > Sierra IBM（美国） \n  - 中国排名：神威 太湖之光 > 天河二号>  天河一号\n- 大型机 (又称大型机、大型主机、主机等)\n  - IBM Z9 \n  - 大型机造价高昂\n  - 去“IOE”行动 (I(IBM) O(Oracle) E(EMC)) --阿里云\n- 迷你计算机（服务器）\n  - 普通服务器已经代替了传统的大型机，成为大规模企业计算的中枢\n- 工作站\n  - 高端的通用微型计算机，提供比个人计算机更强大的性能\n  - 类似于普通台式电脑，体积较大，但性能强劲\n- 微型计算机\n  - 麻雀虽小、五脏俱全\n  - 从构成的本质上来讲，个人计算机与前面的分类无异\n\n\n\n### 1.5 计算机的体系与结构\n\n- 阿兰.图灵\n  - 英国(1912-1954) 数学家成逻辑学家网密肯进分析家和理论生物学家，被誉为计算机科学和人工智能之父。\n  - 图灵机\n  - 图灵测试\n  - 图灵完备\n  - 可判定性\n\n- 图灵机\n  - 图灵机拥有一条无限长的纸带，纸带上是一个格子挨着一个格子，格子中可以写字符，你可以把纸带看作内存，而这些字符可以看作是内存中的数据或者程序。\n\n  - 图灵机有一个读写头，读写头可以读取任意格子上的字符，也可以改写任意格子的字符。\n\n  - 读写头上面的盒子里是一些精密的零件，包括图灵机的存储、控制单元和运算单元。\n  - 图灵通过数学证明了，一个问题如果可以拆解成图灵机的可执行步骤，那问题就是可计算的。\n  - 另一方面，图灵机定义了计算机的组成以及工作原理，但是没有给出具体的实现。\n\n- 冯诺依曼体系\n  - 将程序指令和数据一起存储的计算机设计概念结构,现代计算机都是冯诺依曼机\n  - 能够长期记忆程序、数据、中间结果及最终运算结果的能力\n\n  - 能够把需要的程序和数据送至计算机中\n  - 能够具备算术、逻辑运算和数据传送等数据加工处理的能力\n  - 能够按照要求将处理结果输出给用户\n\n  - 冯诺依曼瓶颈：CPU和存储器速率之间的问题无法调和导致CPU经常空转等待数据传输\n\n- 冯诺依曼机组成结构\n  - 输入设备\n    - 鼠标、键盘\n  - 输出设备\n    - 显示器\n  - 存储器\n    - CPU、内存、硬盘\n  - 控制器\n    - CPU\n  - 运算器\n    - CPU\n\n\n\n### 1.6 程序翻译与解释\n\n- 人类语言与计算机语言需要进行语言之间的转换\n\n- 程序翻译\n  - L1是描述程序逻辑的高级语言\n  - L0是计算机实际执行的低级语言\n  - 编译器：高级语言对应的编译器\n  - 程序翻译就是编译器将L1语言翻译并生成L0语言\n  - 翻译过程生成新的L0程序\n  - 通过编译器执行的相关语言\n\n    - C/C++\n    - Object-C\n    - Go\n\n- 程序解释\n  - L1是描述程序逻辑的高级语言\n  - L0是计算机实际执行的低级语言\n  - 解释器：使用L0语言实现的程序\n  - 程序解释的过程就是解释器将L1语言解释为L0语言\n  - 解释过程不生成新的L0程序\n  - 相关语言\n\n    - Python\n    - Php\n    - Javascript\n\n- 混合型语言 \n\n  - Java （java程序翻译成字节码， 字节码解释成机器码）\n  - C#\n\n\n\n\n### 1.7 计算机的层次\n\n- 硬件逻辑层\n  - 门、触发器等逻辑电路组成\n  - 属于电子工程的领域\n- 微程序机器层\n  - 编程语言是微指令集\n  - 微指令所组成的微程序直接交由硬件执行\n  - 一般是硬件厂商公司处理该层\n- 传统机器层\n  - 编程语言是CPU指令集（机器指令）\n  - 一条机器指令对应一个微程序，一个微程序对应一组微指令\n  - 编程语言和硬件是直接相关\n  - 不同架构的CPU使用不同的CPU指令集 （英特尔、AMD、x86/X86_64）\n- 操作系统层\n  - 向上提供了简易的操作界面\n  - 向下对接了指令系统，管理硬件资源\n  - 操作系统层是在软件和硬件之间的适配层\n- 汇编语言层\n  - 编程语言是汇编语言（PUSH DS/PUSH DS）\n  - 汇编语言可以翻译成可直接执行的机器语言\n  - 完成翻译的过程的程序就是汇编器\n- 高级语言层\n  - 高级语言的类别非常多，由几百种\n  - 常见的高级语言有： Python、 Java、 C/C++、 Golang等\n- 应用层\n  - 满足计算机针对某种用途而专门设计\n  - WPS、IDE\n\n\n\n### 1.8 计算机的计算单位\n\n- 容量单位\n  - 在物理层面，高低电平记录信息\n  - 理论上只认识0/1两种状态，0/1称为bit（比特位）\n  - 0/1能够表示的内容太少了，需要更大的容量表示方法\n  - 更大的容量单位：字节、千字节、兆字节、吉字节、太字节、拍字节、艾字节\n  - 为什么网上买的移动硬盘500G，格式化之后就只剩465G了？\n\n    - 硬盘商一般用10进位标记容量 𝟓𝟎𝟎 ∗ 𝟏𝟎𝟎𝟎^3/𝟏𝟎𝟐𝟒^3约等于𝟒𝟔𝟓\n    - 厂商采用十进制更好沟通\n\n| 容量单位 |  bit   | Byte  |         KB         |             MB              |             GB              |            TB             |              PB               |             EB             |\n| :------: | :----: | :---: | :----------------: | :-------------------------: | :-------------------------: | :-----------------------: | :---------------------------: | :------------------------: |\n|   名字   | 比特位 | 字节  | 千字节（kilobyte） | 兆字节=百万字节（megabyte） | 吉字节=十亿字节（GigaByte） | 太字节=万亿字节(terabyte) | 拍字节=千万亿字节（petabyte） | 艾字节=2^60字节（ExaByte） |\n|   换算   |   -    | 8bits |       1024B        |            1024K            |            1024M            |           1024G           |             1024T             |           1024P            |\n| 常见设备 | 门电路 |       |       寄存器       |          高速缓存           |          内存/硬盘          |           硬盘            |            云硬盘             |          数据仓库          |\n\n- 速度单位\n  - 网络速度\n    - 100M带宽=100M/s\n    - 为什么电信拉的100M光纤，测试峰值速度只有12M每秒？\n      - 网络常用单位为(Mbps) \n      - bps(bits per second):每秒传送位数 \n      - 100M/s = 100Mbps = 100Mbit/s\n      - 100Mbit/s=(100/8)MB/s=12.5MB/s\n  - 计算速度\n    - CPU的速度一般体现为CPU的时钟频率\n    - CPU的时钟频率的单位一般是赫兹Hz（hertz）\n    - 目前主流CPU的时钟频率都在2GHz以上\n    - Hz其实就是秒分之，并不只是描述计算机领域所专有的单位\n    - Hz它是每秒中的周期性变动重复次数的计量\n    - 在CPU中就表示高低电瓶在每秒中变化的次数，2GHz = 2*1000^3Hz = 每秒20亿次\n\n\n\n### 1.9 计算机的字符与编码集\n\n- 早期英美的ASCII码\n\n  - 美国信息交换标准码（American Standard Code for Information Interchange）\n\n  - 使用7个bits就可以完全表示ASCII码\n\n  - 包含95个可打印字符，33个不可打印字符（包括控制字符）\n\n  - 很多应用或者国家中的符号都无法表示\n\n  - 无法表示数学符号：“÷ ≠ ≥ ≈ π”\n\n  - 𝟑𝟑 + 𝟗𝟓 = 𝟏𝟐𝟖 = 𝟐^7\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143402.jpg)\n\n- Externed ASCII码\n\n  - 第一次对ASCII码进行扩充， 7bits => 8bits\n\n  - 常见数学运算符\n\n  - 带音标的欧洲字符\n\n  - 其他常用符、表格符等\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143429.jpg)\n\n- 国际化\n\n  - 欧洲、中亚、东亚、拉丁美洲国家的语言多样性\n  - 语言体系不一样，不以有限字符组合的语言\n  - 中国、韩国、日本等的语言最为复杂\n  - 中文编码集\n    - GB2312\n      - 《信息交换用汉字编码字符集——基本集》\n      - 一共收录了 7445 个字符\n      - 包括 6763 个汉字和 682 个其它符号\n      - 不兼容国际标准\n    - GBK\n      - 向下兼容GB2312，向上支持国际ISO标准\n      - 《汉字内码扩展规范》\n      - 收录了21003个汉字，支持全部中日韩汉字\n      - 国际电脑不安装GBK编码就会显示乱码\n      - 国内的Windows系统默认使用GBK编码\n  - Unicode\n    - Unicode：统一码、万国码、单一码，兼容全球的字符集\n    - Unicode定义了世界通用的符号集， UTF-*实现了编码\n    - UTF-8以字节为单位对Unicode进行编码\n\n## 2.组成篇\n\n### 2.1 计算机的总线\n\n- 总线的概述\n  - USB = Universal Serial Bus ，通用串行总线\n    - 提供了对外连接的接口\n    - 不同设备可以通过USB接口进行连接\n    - 连接的标准，促使外围设备接口的统一\n  - 总线的分类\n\n    - 片内总线\n      - 芯片内部的总线\n      - 寄存器与寄存器之间\n      - 寄存器与控制器、运算器之间\n    - 系统总线\n      - CPU、主内存、 IO设备、各组件之间的信息传输线\n      - 数据总线\n        - 双向传输各个部件的数据信息\n        - 一般与CPU位数相同（32位、 64位）\n        - 数据总线的位数（总线宽度）是数据总线的重要参数，64位总线一次可传输8个字节的数据\n      - 地址总线\n        - 指定源数据或目的数据在内存中的地址\n        - 地址总线位数=n，寻址范围： 0~𝟐^n\n        - 地址总线的位数与存储单元有关\n      - 控制总线\n        - 控制总线是用来发出各种控制信号的传输线\n        - 控制信号经由控制总线从一个组件发给另外一个组件\n        - 控制总线可以监视不同组件之间的状态（就绪/未就绪）\n\n- 总线的仲裁\n  - 为了解决总线使用权的冲突问题\n  - 总线的仲裁的方法\n    - 链式查询-串联\n      - 所有设备都可想仲裁器发出使用权申请，仲裁器在分配使用权时是按照链式顺序逐个询问，轮到谁就是谁\n      - 好处：电路复杂度低，仲裁方式简单\n      - 坏处：优先级低的设备难以获得总线使用权\n      - 坏处：优先级低的设备难以获得总线使用权\n    - 计时器定时查询-并联\n      - 仲裁控制器对设备编号并使用计数器累计计数\n      - 接收到仲裁信号后，往所有设备同时发出计数值\n      - 计数值与设备编号一致则获得总线使用权\n    - 独立请求-循环\n      -  每个设备均有总线独立连接仲裁器\n      -  设备可单独向仲裁器发送请求和接收请求\n      -  当同时收到多个请求信号，仲裁器有权按优先级分配使用权\n      -  好处：响应速度快，优先顺序可动态改变\n      -  好处：响应速度快，优先顺序可动态改变\n\n\n\n### 2.2 计算机的输入输出设备\n\n- 常见输入输出设备\n\n  - 输入设备\n\n    - 字符输入设备\n      - 键盘：\n        - 薄膜键盘\n        - 机械键盘（根据段落感、声音、压力、键程的不同分为：黑轴、红轴、青轴、茶轴）\n        - 电容键盘\n    - 图像输入设备\n      - 鼠标\n      - 数位板：常用于绘图设计创作，输入板和压感笔\n      - 扫描仪：将图形信息转换为数字信号\n  - 输出设备\n    - 显示器\n      - CRT显示器\n      - 液晶显示器\n    - 打印机\n    - 投影仪\n\n- 输入输出接口的通用设计\n\n  - 通用设计考虑的问题：读取数据、向设备发送数据、设备有没有被占用？、设备是否已经启动？、设备是否已经连接？\n  - 数据线\n    - 是I/O设备与主机之间进行数据交换的传送线\n    - 单向传输数据线\n    - 双向传输数据线\n  - 状态线\n    - IO设备状态向主机报告的信号线\n    - 查询设备是否已经正常连接并就绪\n    - 查询设备是否已经被占用\n  - 命令线\n    - CPU向设备发送命令的信号线\n    - 发送读写信号\n    - 发送启动停止信号\n  - 设备选择线\n    - 主机选择I/O设备进行操作的信号线\n    - 对连在总线上的设备进行选择\n\n- CPU与IO设备的通信\n\n  - CPU速度与IO设备速度不一致\n\n  - 程序中断\n\n    - 当外围IO设备就绪时，向CPU发出中断信号\n\n    - CPU有专门的电路响应中断信号\n\n    - 中断的意义\n\n      - 提供低速设备通知CPU的一种异步的方式\n      - CPU可以高速运转同时兼顾低速设备的响应\n      - 提高工作效率(polling的问题) \n      - 故障恢复(异常处理、紧急事件等)\n      - 简化编程模型(try/cache, 计时器等)\n\n  - 例如通过电脑打印资料的过程\n\n    - 中断相应过程\n\n      ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143825.jpg)\n\n    - 中断请求类型\n\n      - 硬件设备发给主板(打印机、键盘、鼠标等)\n      - 硬件中断: CPU异常(除以0), 时钟信号等\n      - 软件中断:发出(异常、切换到内核态等)\n\n    - 中断向量表\n\n      - (一般在内存中) 一块块区域，存储了中断类型和中断响应程序的对应关系。每一行叫做一个中断向量。\n\n        | 中断类型 | ISR地址 | 描述   |\n        | -------- | ------- | ------ |\n        | 00       | 0x0000  | 除以0  |\n        | 01       | 0x0004  | 单步   |\n        | 09       | 0x0024  | 键盘   |\n        | 18       | 0x0048  | 打印机 |\n        | 100      | 0x0190  | 自定义 |\n\n    - 中断QA\n\n      - 32位机器上的中断响应路径(ISR) 只有4个字节，怎么实现复杂的程序?\n      - 按键程序中断响应路径到操作系统再到应用， 但是到底哪些键被按了怎么知道?\n      - 中断响应后，如何恢复到中断执行前的状态?\n      - 既然出错了?为什么不出错了直接跳转到错误处理位置?\n\n  - DMA（direct memory access）直接存储器存取\n\n    - DMA直接连接主存与IO设备\n    - DMA直接连接主存与IO设备\n    - 当主存与IO设备交换信息时，不需要中断CPU\n    - 可以提高CPU的效率\n    - 硬盘和外置显卡中都有DMA设备\n\n  \n\n### 2.3 计算机存储器\n\n- 存储器的分类\n\n  - 按存储介质分类\n    - 半导体存储器 ：内存条、 U盘、 固态硬盘\n    - 磁存储器：磁带、磁盘\n  - 按存取方式分类\n    - 随机存储器(RAM)： 随机读取 与位置无关\n    - 串行存储器 ：与位置有关 按顺序查找\n    - 只读存储器(ROM）：只读不写\n\n- 存储器指标\n\n  - 读写速度：7200转\n  - 存储容量：2T\n  - 价格：容量+价格=>位价：每比特位价格\n\n- 层次结构\n\n  - 高速缓存：速度快，位格高\n  - 主存：速度适中，位格适中\n  - 辅存：速度慢，位格低\n  - 缓存-主存层次\n    - 原理：局部性原理\n    - 实现：在CPU与主存之间增加一层速度快（容量小）的Cache\n    - 目的：解决主存速度不足的问题\n  - 主存-辅存层次\n    - 原理：局部性原理\n    - 实现：主存之外增加辅助存储器（磁盘、 SD卡、 U盘等）\n    - 目的：解决主存容量不足的问题\n  - 局部性原理\n    - 局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。\n\n  \n\n### 2.4 主存储器与辅助存储器\n\n- 计算机断电，内存数据丢失\n\n- 计算机断电，磁盘数据不会丢失\n\n- 主存\n\n  - RAM（随机存取存储器： Random Access Memory）\n  - RAM 通过电容存储数据，必须隔一段时间刷新一次\n  - 如果掉电，那么一段时间后将丢失所有数据\n  - 内存与CPU如何交互的\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143858.jpg)\n\n  - 32位系统：2^32 = 4 × 2^30 = 4𝐺𝐵 \n  - 64位系统：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB\n  - 32位的系统最大支持4GB的内存寻址范围，每一个字节都对应一个内存地址。内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。\n  - 工作原理\n    - 字：是指存放在一个存储单元中的二进制代码组合\n    - 字块：存储在连续的存储单元中而被看作是一个单元的一组字\n    - 假设一个字有32位，一个字块共B个字，主存共M个字块\n      - B×M = 主存总字数；B×M×32 = 主存总容量(bits)\n    - 字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址\n      - 2^𝑚 = 𝑀 , 前m位能表示出的寻址范围是0--2^𝑚\n      - 2^𝒃 = 𝐵，后b位能表示出的寻址范围是0--2^b\n\n- 辅存：磁盘\n\n  - 表面是可磁化的硬磁特性材料\n  - 移动磁头径向运动读取磁道信息\n  - 磁道、扇区、磁头位置、磁头方向\n  - 寻道调度算法\n\n    - 先来先服务算法\n      - 按顺序访问进程的磁道读写需求\n    - 最短寻道时间优先\n      - 与磁头当前位置有关\n      - 优先访问离磁头最近的磁道\n    - 扫描算法（电梯算法）\n      - 每次只往一个方向移动\n      - 到达一个方向需要服务的尽头再反方向移动\n    - 循环扫描算法\n      - 每次只往一个方向移动\n      - 一个方向到头后再从头开始从同一个方向开始移动\n\n\n\n### 2.5 高速缓存\n\n- 为了解决CPU与主存的速度不匹配的问题\n\n- 缓存与主存的关系\n\n  - 存储的逻辑结构类似\n  - 缓存的容量较小\n  - 缓存的速度更快\n\n- 在主存缓存层次结构中的工作原理\n\n  - CPU需要的数据在缓存里：直接获取\n  - CPU需要的数据不在缓存里：需要去主存拿，替换策略\n    - 需要性能良好的缓存替换策略\n  - 命中率：从缓存取数据的命中率\n    - 命中率是衡量缓存的重要性能指标\n    - 理论上CPU每次都能从高速缓存取数据的时候，命中率为1\n    - 访问主存次数： N𝑚，访问Cache次数： N𝑐\n    - 命中率ℎ =𝑁𝑐/(𝑁𝑐＋𝑁𝑚)\n  - 访问效率： 𝑒\n    - 访问主存时间： 𝑡𝑚 ，访问缓存时间：𝑡𝑐\n    - 访问Cache-主存系统平均时间： 𝑡𝑎 = ℎ×𝑡𝑐 + (1 − ℎ)×𝑡𝑚\n    - 𝑒 =𝑡𝑐/𝑡𝑎\n\n- 高速缓存替换策略\n\n  - 随机算法\n  - 先进先出算法(FIFO)\n    - 把高速缓存看做是一个先进先出的队列\n    - 优先替换最先进入队列的字块\n  - 最不经常使用算法(LFU)\n    - 优先淘汰最不经常使用的字块\n    - 需要额外的空间记录字块的使用频率\n  - 最近最少使用算法(LRU)\n    - 优先淘汰一段时间内没有使用的字块\n    - 如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的\n    - 有多种实现方法，一般使用双向链表\n\n  \n\n### 2.6 计算机的指令系统\n\n- 计算机指令\n\n  - 计算机通过指令指挥计算机工作。\n  - CPU被时钟驱动，不断的读取PC指针指向的指令，并增加PC指针，从内存中读取指令并执行。(如此周而复始)\n  - 不同的CPU架构使用不同指令。目前使用最广泛的是RISC(Reduced instruction set computer,精简指令集)\n\n- 机器指令的形式\n\n  - 机器指令主要由两部分组成：操作码、地址码\n  - 操作码指明指令所要完成的操作\n  - 操作码的位数反映了机器的操作种类，如果操作码有8位就有2^8 = 256种操作\n  - 地址码直接给出操作数或者操作数的地址\n  - 分三地址指令、二地址指令和一地址指令与零地址指令\n    - 零地址指令\n      - 在机器指令中无地址码\n      - 空操作、停机操作、中断返回操作等\n    - 一地址指令\n      - (addr1)OP→ (addr1)：自己对自己的操作\n      - (addr1)OP(ACC) → (addr1)：自增操作\n    - 二地址指令\n      - (addr1)OP(addr2) → (addr1)或(addr2)： 结果放在addr1或addr2)\n    - 三地址指令\n      - 一个操作码和三个地址码\n      - (addr1)OP(addr2) → (addr3)：结果放在addr3， 例如： 1+2=3\n\n- 操作类型\n\n  - 数据传输\n    - 寄存器之间、寄存器与存储单元、存储单元之间传送\n    - 数据读写、交换地址数据、清零置一等操作\n\n- load/store指令用来从内存中读/写入内存。通常会有多个版本的实现，助记符是:\n      - load类: Iw,Ib,Ih\n      - store类: sw,sb,sh\n\n  - 算术逻辑\n    - 操作数之间的加减乘除运算\n      - 加减乘除等：addi, subi, divi, multi\n    - 操作数的与或非等逻辑位运算\n      - 位运算指令：and/or/xor\n\n- 移位操作\n\n  - 数据左移（乘2）、数据右移（除2）\n  - 完成数据在算术逻辑单元的必要操作\n  - 控制指令\n    - 等待指令、停机指令、空操作指令、中断指令等\n\n- 寻址方式\n\n  - 指令寻址\n\n    - 顺序寻址\n\n    - 跳跃寻址\n\n      | 地址 |   指令    |\n      | :--: | :-------: |\n      | 101  | MOV R0,R1 |\n      | 102  | ADD R1,R2 |\n      | 103  |  JMP 102  |\n\n  - 数据寻址\n\n    - 立即寻址\n      - 指令直接获得操作数\n      - 无需访问存储器\n      - 优点：速度快\n      - 缺点：地址码位数限制操作数表示范围\n    - 直接寻址\n      - 直接给出操作数在主存的地址\n      - 寻找操作数简单，无需计算数据地址\n      - 优点：寻找操作数简单\n      - 缺点：地址码位数限制操作数表示范围\n    - 间接寻址\n      - 指令地址码给出的是操作数地址的地址\n      - 需要访问一次或多次主存来获取操作数\n      - 优点：操作数寻址范围大\n      - 缺点：速度较慢\n\n  \n\n### 2.7 计算机的控制器\n\n- 控制器是协调和控制计算机运行的\n- 程序计数器\n  - 程序计数器用来存储下一条指令的地址\n  - 循环从程序计数器中拿出指令\n  - 当指令被拿出时，指向下一条指令\n- 时序发生器\n  - 电气工程领域，用于发送时序脉冲\n  - CPU依据不同的时序脉冲有节奏的进行工作\n- 指令译码器\n  - 指令译码器是控制器的主要部件之一\n  - 计算机指令由操作码和地址码组成\n  - 翻译操作码对应的操作以及控制传输地址码对应的数据\n- 指令寄存器\n  - 指令寄存器也是控制器的主要部件之一\n  - 从主存或高速缓存取计算机指令\n- 主存地址寄存器\n  - 保存当前CPU正要访问的内存单元的地址\n- 主存数据寄存器\n  - 保存当前CPU正要读或写的主存数据\n- 通用寄存器\n  - 用于暂时存放或传送数据或指令\n  - 可保存ALU的运算中间结果\n  - 容量比一般专用寄存器要大\n\n\n\n### 2.8 计算机的运算器\n\n- 运算器是用来进行数据运算加工的\n\n- 数据缓冲器\n  - 分为输入缓冲和输出缓冲\n  - 输入缓冲暂时存放外设送过来的数据\n  - 输出缓冲暂时存放送往外设的数据\n- ALU\n  - ALU：算术逻辑单元，是运算器的主要组成\n  - 常见的位运算（左右移、与或非等）\n  - 算术运算（加减乘除等）\n- 通用寄存器\n  - 用于暂时存放或传送数据或指令\n  - 可保存ALU的运算中间结果\n  - 容量比一般专用寄存器要大\n- 状态字寄存器\n  - 存放运算状态（条件码、进位、溢出、结果正负等）\n  - 存放运算控制信息（调试跟踪标记位、允许中断位等）\n- 总线\n\n\n\n### 2.9 计算机指令的执行过程\n\n- 指令执行过程\n\n  - 取指令 \n    - 从缓存取指令\n    - 送到指令寄存器\n  - 分析指令\n    - 指令译码器译码\n    - 发出控制信号\n    - 程序计数器+1\n  - 执行指令\n    - 装载数据到寄存器\n    - ALU处理数据\n    - 记录运算状态\n    - 送出运算结果\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144002.jpg)\n\n- CPU的流水线设计\n\n  - 提高CPU的综合利用率\n  - 类似工厂的装配线\n  - 工厂的装配线使得多个产品可以同时被加工\n  - 在同一个时刻，不同产品均位于不同的加工阶段\n  - 串行执行m条指令： 𝑇1 = 3t × 𝑚\n  - 流水线执行m条指令： 𝑇2 = 𝑡 × (𝑚 + 2)\n  - 流水线执行效率:H=𝑇2/𝑇1= 𝑡 × (𝑚 + 2)/3t × 𝑚=1/3+1/3m, m很大的情况下是串行执行的3倍效率\n\n  | 指令 | 时间片 | 时间片   | 时间片   | 时间片   | 时间片   |\n  | ---- | ------ | -------- | -------- | -------- | -------- |\n  | 1    | 取指令 | 分析指令 | 执行指令 |          |          |\n  | 2    |        | 取指令   | 分析指令 | 执行指令 |          |\n  | 3    |        |          | 取指令   | 分析指令 | 执行指令 |\n\n\n\n\n\n\n## 3.计算篇\n\n### 3.1 进制运算的基础\n\n- 什么是进制\n  - 进位制是一种记数方式，亦称进位计数法或位值计数法\n  - 有限种数字符号来表示无限的数值\n  - 使用的数字符号的数目称为这种进位制的基数或底数\n  - 计算机喜欢二进制，但是二进制表达太长了\n  - 使用大进制位可以解决这个问题\n  - 八进制、十六进制满足2的n次方的要求\n  - 二进制\n    - 1024=0b1000000000 \n  - 八进制\n    - 1024=0o2000\n  - 十进制： [0-9] \n  - 十六进制\n    - MAC地址：[0-9]和A、 B、 C、 D、 E、 F\n    - 1024=0x400\n  - 二十进制\n    - 玛雅文明的玛雅数字\n    - 因努伊特的因努伊特数字\n  - 六十进制\n    - 时间、坐标、角度等量化数据\n- 进制的表示法\n  - 正整数N，基数为r，位数为n\n  - N=𝑑𝑛−1×r𝑛−1 +𝑑𝑛−2× r𝑛−2 + ⋯ + 𝑑1×𝑟 + 𝑑0\n  - N= 1024  = 1 ×10^3 +0×10^3+ 2 × 10^1 + 4× 10^0\n  - 𝑁 = 10000000000  = 1 × 2^10\n- 二进制转十进制的方法\n  - 按权展开法\n  - 𝑁 = 01100101 = 1 × 2^6 + 1 × 2^5 + 1 ×2^2 + 1 = 101\n  - 小数的按权展开法\n  - 𝑁 = 0.11001 = 1×2^−1 + 1×2^−2 + 1× 2^−5 = 0.78125=25/32\n- 十进制转二进制的方法\n  - （整数）重复相除法\n  - 重复除以2 ，得商， 取余数，最后一个余数为最高位\n  - （小数）重复相乘法\n  - 重复乘以2， 得积 ，取1，第一个余数为最高位\n\n\n\n### 3.2 原码&反码&补码\n\n- 使用0表示正数，使用1表示负数，最高位表示符号位，其它都是数字位\n\n- +237=011101101， -237=111101101\n\n- 两个字节16位表示+237 【0】 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1\n\n- 原码表示法\n\n  - 使用0表示正数、 1表示负数\n  - 规定符号位位于数值第一位\n  - 表达简单明了，是人类最容易理解的表示法\n  - 0有两种表示方法： 00、 10\n  - 原码进行运算非常复杂，特别是两个操作数符号不同的时候\n    - 判断两个操作数绝对值大小\n    - 使用绝对值大的数减去绝对值小的数\n    - 对于符号值，以绝对值大的为准\n  - 希望找到不同符号操作数更加简单的运算方法\n  - 希望找到使用正数代替负数的方法\n  - 使用加法操作代替减法操作，从而消除减法\n\n- 补码表示法\n\n  - 整数的补码\n    - 如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数\n    - 如果 x∈[−2^𝑛, 0) X=2^(𝑛+1) + 𝑥\n      - 例如：n=4， x=13，计算x的二进制原码和补码\n        - 原码： x=0,1101\n        - 补码： x=0,1101\n      - 例如：n=4，x=-13，计算x的二进制原码和补码\n        - 原码： x=1,1101\n        - 补码： 2^(𝑛+1) + 𝑥= 2^(4+1() − 13 = 100000 − 1101 = 10011\n  - 小数的补码\n    - 如果 x∈[0, 1) X=x  \n    - 如果 x∈[−1, 0) X=2+x\n    - 规律：小数的反码等于原码除符号位外按位取反，补码等于反码+1\n  - 在计算补码的过程中，还是使用了减法\n  - 需要寻找使用正数代替负数的方法\n\n- 反码表示法\n\n  - 反码的目的是找出原码和补码之间的规律，消除转换过程中的减法\n  - 如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数\n  - 如果 x∈[−2^𝑛, 0) X=（2^(𝑛+1)-1） + 𝑥\n  - 规律：负数的反码等于原码除符号位外按位取反，负数的补码等于反码+1\n    - -13， 原码：1,1101 ，反码：1,0011 ，补码：1,0010\n    - -7， 原码： 1,0111，反码： 1,1001，补码： 1,1000\n    - -1， 原码： 1,0001 ，反码：1,1111，补码： 1,1110\n  - x=-13，计算x的二进制原码和反码\n    - 原码： x=1,1101\n    - 反码： (2𝑛+1−1) + 𝑥 = (2^4+1−1) − 13 = 011111 − 1101 = 1,0010\n    - 反码： x=1,0010\n\n  \n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144040.jpg)\n\n\n\n### 3.3 定点数与浮点数\n\n- 定点数的表示方法\n\n  - 小数点固定在某个位置的数称之为定点数\n  - 纯小数 ：符号位【小数点】数值位\n  - 纯整数：符号位 数值位 【小数点】\n  - 其它小数需要乘以比例因子以满足定点数保存格式，10.01 需要左移两位或者右移两位\n  - 计算机中的存储形式见下表，小数点不显示\n\n  | 数值    | 符号位 | 数值位 |\n  | :------ | :----: | :----: |\n  | 0.1011  |   0    |  1011  |\n  | -0.1011 |   1    |  1011  |\n  | 1011    |   0    |  1011  |\n  | -1011   |   1    |  1011  |\n\n- 浮点数的表示方法\n\n  - 计算机处理的很大程度上不是纯小数或纯整数\n\n  - 数据范围很大，定点数难以表达\n\n  - 浮点数的表示格式\n\n    - 类比科学计数法：123450000000 = 1.2345 × 10^11 ， 1.2345：尾数 ，10：基数 ，11：阶码\n    - 𝑁 = 𝑆 × 𝑟^𝑗 ，S：尾数， r：基数， j：阶码\n    - 阶码符号位|阶码数值位|尾数符号位|尾数数值位\n    - 尾数规定使用纯小数\n    - 11.0101 = 0.110101 × 2^10\n    - 11.0101 = 0.0110101 × 2^11\n    - 计算机中的存储形式见下表，小数点不显示\n\n    | 数字             | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n    | ---------------- | ---------- | ---------- | ---------- | ----------------- |\n    | 0.110101 × 2^10  | 0          | 10         | 0          | 1010100           |\n    | 0.0110101 × 2^11 | 0          | 11         | 0          | 01101010          |\n\n    \n\n  - 浮点数的表示范围\n\n    - 假设阶码数值取m位，尾数数值取n位\n    - 阶码表示范围： [−(𝟐^𝒎 − 𝟏),  𝟐^𝒎 − 𝟏]\n    - 尾数表示范围： [−(𝟏 − 𝟐^−𝒏), −(𝟐^−𝒏)] [𝟐^−𝒏,  𝟏 − 𝟐−^𝒏]\n    - 单精度浮点数：使用4字节、 32位来表达浮点数(float)\n    - 双精度浮点数：使用8字节、 64位来表达浮点数(double)\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144101.jpg)\n\n  - 浮点数的规格化\n\n    - 尾数规定使用纯小数\n    - 尾数最高位必须是1\n    - 例如：11.0101 = 0.110101 × 2^10\n\n- 两者的对比\n\n  -  当定点数与浮点数位数相同时， 浮点数表示的范围更大\n  -  当浮点数尾数为规格化数时， 浮点数的精度更高（尾数存8位，前面的0多了丢失的精度就更多）\n  -  浮点数运算包含阶码和尾数， 浮点数的运算更为复杂\n  -  浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数\n  -  浮点数在数的运算规则、运算速度、硬件成本方面不如定点数\n\n\n\n### 3.4 定点数的加减法运算\n\n- 整数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2^(𝑛+1))\n- 小数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2)\n- 数值位与符号位一同运算，并将符号位产生的进位自然丢掉\n- 整数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补  (𝑚𝑜𝑑2^(𝑛+1))\n- 小数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补 (𝑚𝑜𝑑2)\n- -B[补]等于B[补]连同符号位按位取反，末位加一，B 补 = 1,0010101， (−B) 补 = 0,1101011\n- 负数的反码等于原码按位取反，补码等于反码+1\n- 例如： A=-110010， B=001101，求A+B\n  - A[补] = 1,001110\n  - B 补 = B[原] = 0,001101\n  - A 补 + B 补 = (A + B) 补 =1,011011\n  - (A + B)原 = −100101\n- 例如：A=11001000， B=-00110100，求A-B\n  - A 补 = A[原] = 0,11001000\n  - B 补 = 1,11001100\n  - (−B) 补 = 0,00110100\n  - A 补 − B 补 = A + (−B) 补=0,11111100\n  - A − B（原） = 111111100\n\n- 双符号位判断溢出\n  - 双符号位判断法\n    - 单符号位表示变成双符号位： 0=>00,1=>11\n    - 双符号位产生的进位丢弃\n    - 结果的双符号位不同则表示溢出\n\n\n\n### 3.5 浮点数的加减法运算\n\n- 𝑥 = 𝑆𝑥 × 𝑟^𝑗𝑥，𝑥 = 0.1101 × 2^01\n\n- 𝑦 = 𝑆𝑦 × 𝑟^𝑗y，𝑦 = (−0.1010) × 2^11\n\n- 対阶\n\n  - 対阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算\n  - 浮点数尾数运算简单\n  - 浮点数位数实际小数位与阶码有关\n  - 阶码按小阶看齐大阶的原则\n\n  | 数字             | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n  | ---------------- | ---------- | ---------- | ---------- | ----------------- |\n  | 0.1101 × 2^01    | 00         | 0001       | 00         | 1101              |\n  | (−0.1010) × 2^11 | 00         | 0011       | 01         | 1010              |\n\n  - 対阶操作：将x的数值右移两位，𝑥 = 0.001101 × 2^11\n\n  | 数字             | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位）  |\n  | ---------------- | ---------- | ---------- | ---------- | ------------------ |\n  | 0.001101 × 2^11  | 00         | **0011**   | 00         | 0011(01)舍弃后两位 |\n  | (−0.1010) × 2^11 | 00         | 0011       | 01         | 1010               |\n\n- 尾数求和\n\n  - 使用补码进行运算\n  - 减法运算转化为加法运算： A - B = A + (-B)\n  - 𝑥[原] = 00.0011，𝑥[补] = 00.0011\n  - 𝑦[原] = 11.1010，𝑦[补] = 11.0110\n  - S = (𝑥 + 𝑦)[补] = 11.1001\n\n  | 数字    | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n  | ------- | ---------- | ---------- | ---------- | ----------------- |\n  | 11.1001 | 00         | **0011**   | 11         | 1001              |\n\n- 尾数规格化\n\n  - ◆ 对补码进行规格化需要判断两种情况： S>0和S<0\n  - S[补] = 00.1xxxxxx(𝑆 > 0)\n  - S[补] = 11.0xxxxxx(𝑆 < 0)\n  - 如果不满足此格式，需要进行左移， 同时阶码相应变化，以满足规格化\n  - S = (𝑥 + 𝑦)[补] = 11.1001，不满足约定格式\n  - S = (𝑥 + 𝑦)[补] = 11. (1)0010(左移舍弃，阶码数值位也要相应变化)\n\n  | 数字    | 阶码符号位 | 阶码数值位 | 尾数符号位 | 尾数数值位（8位） |\n  | ------- | ---------- | ---------- | ---------- | ----------------- |\n  | 11.0010 | 00         | 0010       | 11         | 0010              |\n\n  - S = 𝑥 + 𝑦 补 = 11.0010，𝑥 + 𝑦 原 = −0.1110\n  - 𝑥 + 𝑦 = −0.1110× 2^10\n  - 一般情况下都是左移，符号位不一致下需要右移(定点运算的溢出情况)\n  - 右移的话则需要进行舍入操作\n\n- 舍入\n\n  - 0舍1入” 法（二进制的四舍五入）\n  - S 补 = 10.10110111，符号位不一致，右移舍弃尾数再+1， S 补 = 11.01011011(1)+1=11.01011100\n  - 右移阶码要+1\n\n- 溢出判断\n\n  - 定点运算双符号位不一致为溢出\n  - 浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规\n  - 浮点运算主要通过阶码的双符号位判断是否溢出\n  - 如果规格化后，阶码双符号位不一致，则认为是溢出\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144134.jpg)\n\n\n\n### 3.6 浮点数的乘除法运算\n\n- 乘法：阶码相加，尾数求积\n- 𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) × 𝑟^(𝑗𝑥+𝑗y)\n- 除法：阶码相减，尾数求商\n- 𝑥/𝑦 = (𝑆𝑥/𝑆𝑦) × 𝑟^(𝑗𝑥−𝑗y)\n\n- 阶码运算\n- 尾数运算\n- 尾数规格化\n- 舍入\n- 溢出判断\n- 例如： 𝑥 = 0.11010011 × 2^1101， 𝑦 = 0.11101110 × 2^0001，假设阶码4位，尾数8位，计算x * y\n  - 𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) ×^𝑟(𝑗𝑥+𝑗y)\n  - = (0.11010011 × 0.11101110) × 𝑟^(1101+0001)\n  - = 0.11000100(保留八位) × 𝑟^1110\n\n\n\n## 4.关于我\n\n一个专注基础知识的十二线小码农，本着 **基础，体系，实践，分享** 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。\n\n[个人网站 basedev.cn](http://basedev.cn/)  \n\n[Github](https://github.com/jaydroid1024)\n\nBaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践。\n\n\n\n## 5.参考\n\n- [重学操作系统 | 拉钩教育](https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content)\n\n- [编程必备基础 | 慕课网](https://coding.imooc.com/class/package/355.html)\n\n\n\n","slug":"computer_composition","published":1,"updated":"2021-11-03T16:56:10.645Z","_id":"ckrswgm600000fexf3041f3xr","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-计算机基础知识小抄版\"><a href=\"#筑基系列-计算机基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-计算机基础知识小抄版\"></a>筑基系列-计算机基础知识小抄版</h1><blockquote>\n<p>计算机基础知识筑基三部曲：</p>\n<ul>\n<li><strong><a href=\"https://juejin.cn/post/6991367806772052004\" target=\"_blank\" rel=\"noopener\">第一部：筑基系列-计算机基础知识小抄版</a></strong><ul>\n<li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991385109509193764\" target=\"_blank\" rel=\"noopener\">第二部：筑基系列-操作系统基础知识小抄版</a></strong><ul>\n<li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991397445251334151\" target=\"_blank\" rel=\"noopener\">第三部：筑基系列-计算机网络基础知识小抄版</a></strong><ul>\n<li>包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1.背景篇\">1.背景篇</a><ul>\n<li><a href=\"#11-计算机发展史\">1.1 计算机发展史</a></li>\n<li><a href=\"#12-cpu发展史\">1.2 CPU发展史</a></li>\n<li><a href=\"#13-32-位-vs-64-位\">1.3 32 位 VS 64 位</a></li>\n<li><a href=\"#14-计算机的分类\">1.4 计算机的分类</a></li>\n<li><a href=\"#15-计算机的体系与结构\">1.5 计算机的体系与结构</a></li>\n<li><a href=\"#16-程序翻译与解释\">1.6 程序翻译与解释</a></li>\n<li><a href=\"#17-计算机的层次\">1.7 计算机的层次</a></li>\n<li><a href=\"#18-计算机的计算单位\">1.8 计算机的计算单位</a></li>\n<li><a href=\"#19-计算机的字符与编码集\">1.9 计算机的字符与编码集</a></li>\n</ul>\n</li>\n<li><a href=\"#2.组成篇\">2.组成篇</a><ul>\n<li><a href=\"#21-计算机的总线\">2.1 计算机的总线</a></li>\n<li><a href=\"#22-计算机的输入输出设备\">2.2 计算机的输入输出设备</a></li>\n<li><a href=\"#23-计算机存储器\">2.3 计算机存储器</a></li>\n<li><a href=\"#24-主存储器与辅助存储器\">2.4 主存储器与辅助存储器</a></li>\n<li><a href=\"#25-高速缓存\">2.5 高速缓存</a></li>\n<li><a href=\"#26-计算机的指令系统\">2.6 计算机的指令系统</a></li>\n<li><a href=\"#27-计算机的控制器\">2.7 计算机的控制器</a></li>\n<li><a href=\"#28-计算机的运算器\">2.8 计算机的运算器</a></li>\n<li><a href=\"#29-计算机指令的执行过程\">2.9 计算机指令的执行过程</a></li>\n</ul>\n</li>\n<li><a href=\"#3.计算篇\">3.计算篇</a><ul>\n<li><a href=\"#31-进制运算的基础\">3.1 进制运算的基础</a></li>\n<li><a href=\"#32-原码反码补码\">3.2 原码&amp;反码&amp;补码</a></li>\n<li><a href=\"#33-定点数与浮点数\">3.3 定点数与浮点数</a></li>\n<li><a href=\"#34-定点数的加减法运算\">3.4 定点数的加减法运算</a></li>\n<li><a href=\"#35-浮点数的加减法运算\">3.5 浮点数的加减法运算</a></li>\n<li><a href=\"#36-浮点数的乘除法运算\">3.6 浮点数的乘除法运算</a></li>\n</ul>\n</li>\n<li><a href=\"#4.关于我\">4.关于我</a></li>\n<li><a href=\"#5.参考\">5.参考</a></li>\n</ul>\n<h2 id=\"1-背景篇\"><a href=\"#1-背景篇\" class=\"headerlink\" title=\"1.背景篇\"></a>1.背景篇</h2><h3 id=\"1-1-计算机发展史\"><a href=\"#1-1-计算机发展史\" class=\"headerlink\" title=\"1.1 计算机发展史\"></a>1.1 计算机发展史</h3><ul>\n<li>电子管计算机 (1946-1957)<ul>\n<li>埃尼阿克(ENIAC)</li>\n</ul>\n</li>\n<li>晶体管计算机(1957-1964)<ul>\n<li>贝尔实验室、MIT林肯实验室的TX-0、PDP-1配备4k内存和显示器</li>\n</ul>\n</li>\n<li>集成电路计算机 (1964-1980)<ul>\n<li>德州仪器的工程师发明了集成电路(IC)、IBM(7094,1401) 、System/360 操作系统</li>\n</ul>\n</li>\n<li>超大规模集成电路计算机 (1980-现在)<ul>\n<li>乔布斯 Apple 和 Apple二代</li>\n</ul>\n</li>\n<li>未来的计算机 <ul>\n<li>生物计算机</li>\n<li>量子计算机</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-CPU发展史\"><a href=\"#1-2-CPU发展史\" class=\"headerlink\" title=\"1.2 CPU发展史\"></a>1.2 CPU发展史</h3><ul>\n<li>摩尔定律<ul>\n<li>定义：当价格不变时，集成电路中可容纳的晶体管数目约每隔 18～24 个月就会增加一倍，性能也将提升一倍。</li>\n<li>这一定律揭示了信息技术发展的速度，但到今天，摩尔定律失效了。因为随着芯片越来越小，在尺寸和散热等方面已经挑战了人类的极限，芯片中无法再放入更多的电子元件了。</li>\n<li>所以计算能力又开始以另一种方式发展，那就是多核心，比如一个普普通通的 NVIDA 显卡中就拥有了几百个核心，这样就可以进行大量的并发计算；另外，一个分布式的大数据集群，里面就可能有上千个核心。</li>\n</ul>\n</li>\n<li>单核CPU发展史<ul>\n<li>（1971～ 1973） 500KHz频率的微型计算机（字长8位）</li>\n<li>（1978～ 1985） 500MHz频率的微型计算机（字长16位）</li>\n<li>（1985～ 2000） 高于1GHz频率的微型计算机（字长32位）</li>\n<li>（1973～ 1978） 高于1MHz频率的微型计算机（字长8位）</li>\n<li>（2000～ 现在） 高于2GHz频率的微型计算机（字长为64位）</li>\n</ul>\n</li>\n<li>多核CPU发展史<ul>\n<li>（2005） Intel奔腾系列双核CPU、 AMD速龙系列</li>\n<li>（2006） Intel酷睿四核CPU</li>\n<li>Intel酷睿系列十六核CPU</li>\n<li>Intel至强系列五十六核CPU</li>\n</ul>\n</li>\n<li>CPU数字能量是如何产生的<ul>\n<li>时间是最重要的输入：晶振</li>\n<li>电能供给给芯片，芯片中的一种电子元件晶振（也就是石英晶体）通电后产生震荡</li>\n<li>震荡会产生频率稳定的脉冲信号，通常这是一种高频的脉冲信号，每秒可达百万次</li>\n<li>然后通过谐振效应发放这个信号，形成方波</li>\n<li>再通过电子元件调整这种脉冲的频率，把脉冲信号转换为需要的频率，这就形成了驱动芯片工作的时钟信号</li>\n<li>最后，时钟信号驱动着芯片工作，就像人体的脉搏一样，每一次脉冲到来，都让芯片的状态发生一次变化，最终存储器中的指令被一行行执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-32-位-VS-64-位\"><a href=\"#1-3-32-位-VS-64-位\" class=\"headerlink\" title=\"1.3 32 位 VS 64 位\"></a>1.3 32 位 VS 64 位</h3><ul>\n<li>32、64 位可以表示操作系统、软件、 CPU等</li>\n<li>32位的容量：2^32 = 4 × 2^30 = 4𝐺𝐵 </li>\n<li>64位的容量：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li>\n<li>如果是 CPU，那么有 32 位 CPU，也有 64 位 CPU<ul>\n<li>如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU</li>\n<li>如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU</li>\n<li>这里的 32 和 64，称作 CPU 的位宽</li>\n<li>64 位 CPU 可以执行更大数字的运算，这个优势在普通应用上不明显，但是对于数值计算较多的应用就非常明显。</li>\n<li>64 位 CPU 可以寻址更大的内存空间</li>\n</ul>\n</li>\n<li>如果 32 位/64 位说的是程序，那么说的是指令是 64 位还是 32 位的。<ul>\n<li>32 位指令在 64 位机器上执行，困难不大，可以兼容。 </li>\n<li>如果是 64 位指令，在 32 位机器上执行就困难了，32 位的寄存器都存不下指令的参数。</li>\n</ul>\n</li>\n<li>如果 32 位/64 位说的是操作系统<ul>\n<li>操作系统也是一种程序，如果是 64 位操作系统，也就是操作系统中程序的指令都是 64 位指令，因此不能安装在 32 位机器上。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-计算机的分类\"><a href=\"#1-4-计算机的分类\" class=\"headerlink\" title=\"1.4 计算机的分类\"></a>1.4 计算机的分类</h3><ul>\n<li>超级计算机<ul>\n<li>功能最强</li>\n<li>运算速度的单位是TFlop/s（1TFlop/s=每秒一万亿次浮点计算）</li>\n<li>Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz： 44.87 GFlop/s（  0.04487TFlop/s）</li>\n<li>世界排名：Summit IBM（美国) &gt; 神威太湖之光(中国)  &gt; Sierra IBM（美国） </li>\n<li>中国排名：神威 太湖之光 &gt; 天河二号&gt;  天河一号</li>\n</ul>\n</li>\n<li>大型机 (又称大型机、大型主机、主机等)<ul>\n<li>IBM Z9 </li>\n<li>大型机造价高昂</li>\n<li>去“IOE”行动 (I(IBM) O(Oracle) E(EMC)) –阿里云</li>\n</ul>\n</li>\n<li>迷你计算机（服务器）<ul>\n<li>普通服务器已经代替了传统的大型机，成为大规模企业计算的中枢</li>\n</ul>\n</li>\n<li>工作站<ul>\n<li>高端的通用微型计算机，提供比个人计算机更强大的性能</li>\n<li>类似于普通台式电脑，体积较大，但性能强劲</li>\n</ul>\n</li>\n<li>微型计算机<ul>\n<li>麻雀虽小、五脏俱全</li>\n<li>从构成的本质上来讲，个人计算机与前面的分类无异</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-5-计算机的体系与结构\"><a href=\"#1-5-计算机的体系与结构\" class=\"headerlink\" title=\"1.5 计算机的体系与结构\"></a>1.5 计算机的体系与结构</h3><ul>\n<li><p>阿兰.图灵</p>\n<ul>\n<li>英国(1912-1954) 数学家成逻辑学家网密肯进分析家和理论生物学家，被誉为计算机科学和人工智能之父。</li>\n<li>图灵机</li>\n<li>图灵测试</li>\n<li>图灵完备</li>\n<li>可判定性</li>\n</ul>\n</li>\n<li><p>图灵机</p>\n<ul>\n<li><p>图灵机拥有一条无限长的纸带，纸带上是一个格子挨着一个格子，格子中可以写字符，你可以把纸带看作内存，而这些字符可以看作是内存中的数据或者程序。</p>\n</li>\n<li><p>图灵机有一个读写头，读写头可以读取任意格子上的字符，也可以改写任意格子的字符。</p>\n</li>\n<li><p>读写头上面的盒子里是一些精密的零件，包括图灵机的存储、控制单元和运算单元。</p>\n</li>\n<li><p>图灵通过数学证明了，一个问题如果可以拆解成图灵机的可执行步骤，那问题就是可计算的。</p>\n</li>\n<li><p>另一方面，图灵机定义了计算机的组成以及工作原理，但是没有给出具体的实现。</p>\n</li>\n</ul>\n</li>\n<li><p>冯诺依曼体系</p>\n<ul>\n<li><p>将程序指令和数据一起存储的计算机设计概念结构,现代计算机都是冯诺依曼机</p>\n</li>\n<li><p>能够长期记忆程序、数据、中间结果及最终运算结果的能力</p>\n</li>\n<li><p>能够把需要的程序和数据送至计算机中</p>\n</li>\n<li><p>能够具备算术、逻辑运算和数据传送等数据加工处理的能力</p>\n</li>\n<li><p>能够按照要求将处理结果输出给用户</p>\n</li>\n<li><p>冯诺依曼瓶颈：CPU和存储器速率之间的问题无法调和导致CPU经常空转等待数据传输</p>\n</li>\n</ul>\n</li>\n<li><p>冯诺依曼机组成结构</p>\n<ul>\n<li>输入设备<ul>\n<li>鼠标、键盘</li>\n</ul>\n</li>\n<li>输出设备<ul>\n<li>显示器</li>\n</ul>\n</li>\n<li>存储器<ul>\n<li>CPU、内存、硬盘</li>\n</ul>\n</li>\n<li>控制器<ul>\n<li>CPU</li>\n</ul>\n</li>\n<li>运算器<ul>\n<li>CPU</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-6-程序翻译与解释\"><a href=\"#1-6-程序翻译与解释\" class=\"headerlink\" title=\"1.6 程序翻译与解释\"></a>1.6 程序翻译与解释</h3><ul>\n<li><p>人类语言与计算机语言需要进行语言之间的转换</p>\n</li>\n<li><p>程序翻译</p>\n<ul>\n<li><p>L1是描述程序逻辑的高级语言</p>\n</li>\n<li><p>L0是计算机实际执行的低级语言</p>\n</li>\n<li><p>编译器：高级语言对应的编译器</p>\n</li>\n<li><p>程序翻译就是编译器将L1语言翻译并生成L0语言</p>\n</li>\n<li><p>翻译过程生成新的L0程序</p>\n</li>\n<li><p>通过编译器执行的相关语言</p>\n<ul>\n<li>C/C++</li>\n<li>Object-C</li>\n<li>Go</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>程序解释</p>\n<ul>\n<li><p>L1是描述程序逻辑的高级语言</p>\n</li>\n<li><p>L0是计算机实际执行的低级语言</p>\n</li>\n<li><p>解释器：使用L0语言实现的程序</p>\n</li>\n<li><p>程序解释的过程就是解释器将L1语言解释为L0语言</p>\n</li>\n<li><p>解释过程不生成新的L0程序</p>\n</li>\n<li><p>相关语言</p>\n<ul>\n<li>Python</li>\n<li>Php</li>\n<li>Javascript</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>混合型语言 </p>\n<ul>\n<li>Java （java程序翻译成字节码， 字节码解释成机器码）</li>\n<li>C#</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-7-计算机的层次\"><a href=\"#1-7-计算机的层次\" class=\"headerlink\" title=\"1.7 计算机的层次\"></a>1.7 计算机的层次</h3><ul>\n<li>硬件逻辑层<ul>\n<li>门、触发器等逻辑电路组成</li>\n<li>属于电子工程的领域</li>\n</ul>\n</li>\n<li>微程序机器层<ul>\n<li>编程语言是微指令集</li>\n<li>微指令所组成的微程序直接交由硬件执行</li>\n<li>一般是硬件厂商公司处理该层</li>\n</ul>\n</li>\n<li>传统机器层<ul>\n<li>编程语言是CPU指令集（机器指令）</li>\n<li>一条机器指令对应一个微程序，一个微程序对应一组微指令</li>\n<li>编程语言和硬件是直接相关</li>\n<li>不同架构的CPU使用不同的CPU指令集 （英特尔、AMD、x86/X86_64）</li>\n</ul>\n</li>\n<li>操作系统层<ul>\n<li>向上提供了简易的操作界面</li>\n<li>向下对接了指令系统，管理硬件资源</li>\n<li>操作系统层是在软件和硬件之间的适配层</li>\n</ul>\n</li>\n<li>汇编语言层<ul>\n<li>编程语言是汇编语言（PUSH DS/PUSH DS）</li>\n<li>汇编语言可以翻译成可直接执行的机器语言</li>\n<li>完成翻译的过程的程序就是汇编器</li>\n</ul>\n</li>\n<li>高级语言层<ul>\n<li>高级语言的类别非常多，由几百种</li>\n<li>常见的高级语言有： Python、 Java、 C/C++、 Golang等</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>满足计算机针对某种用途而专门设计</li>\n<li>WPS、IDE</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-8-计算机的计算单位\"><a href=\"#1-8-计算机的计算单位\" class=\"headerlink\" title=\"1.8 计算机的计算单位\"></a>1.8 计算机的计算单位</h3><ul>\n<li><p>容量单位</p>\n<ul>\n<li><p>在物理层面，高低电平记录信息</p>\n</li>\n<li><p>理论上只认识0/1两种状态，0/1称为bit（比特位）</p>\n</li>\n<li><p>0/1能够表示的内容太少了，需要更大的容量表示方法</p>\n</li>\n<li><p>更大的容量单位：字节、千字节、兆字节、吉字节、太字节、拍字节、艾字节</p>\n</li>\n<li><p>为什么网上买的移动硬盘500G，格式化之后就只剩465G了？</p>\n<ul>\n<li>硬盘商一般用10进位标记容量 𝟓𝟎𝟎 ∗ 𝟏𝟎𝟎𝟎^3/𝟏𝟎𝟐𝟒^3约等于𝟒𝟔𝟓</li>\n<li>厂商采用十进制更好沟通</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">容量单位</th>\n<th align=\"center\">bit</th>\n<th align=\"center\">Byte</th>\n<th align=\"center\">KB</th>\n<th align=\"center\">MB</th>\n<th align=\"center\">GB</th>\n<th align=\"center\">TB</th>\n<th align=\"center\">PB</th>\n<th align=\"center\">EB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">名字</td>\n<td align=\"center\">比特位</td>\n<td align=\"center\">字节</td>\n<td align=\"center\">千字节（kilobyte）</td>\n<td align=\"center\">兆字节=百万字节（megabyte）</td>\n<td align=\"center\">吉字节=十亿字节（GigaByte）</td>\n<td align=\"center\">太字节=万亿字节(terabyte)</td>\n<td align=\"center\">拍字节=千万亿字节（petabyte）</td>\n<td align=\"center\">艾字节=2^60字节（ExaByte）</td>\n</tr>\n<tr>\n<td align=\"center\">换算</td>\n<td align=\"center\">-</td>\n<td align=\"center\">8bits</td>\n<td align=\"center\">1024B</td>\n<td align=\"center\">1024K</td>\n<td align=\"center\">1024M</td>\n<td align=\"center\">1024G</td>\n<td align=\"center\">1024T</td>\n<td align=\"center\">1024P</td>\n</tr>\n<tr>\n<td align=\"center\">常见设备</td>\n<td align=\"center\">门电路</td>\n<td align=\"center\"></td>\n<td align=\"center\">寄存器</td>\n<td align=\"center\">高速缓存</td>\n<td align=\"center\">内存/硬盘</td>\n<td align=\"center\">硬盘</td>\n<td align=\"center\">云硬盘</td>\n<td align=\"center\">数据仓库</td>\n</tr>\n</tbody></table>\n<ul>\n<li>速度单位<ul>\n<li>网络速度<ul>\n<li>100M带宽=100M/s</li>\n<li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul>\n<li>网络常用单位为(Mbps) </li>\n<li>bps(bits per second):每秒传送位数 </li>\n<li>100M/s = 100Mbps = 100Mbit/s</li>\n<li>100Mbit/s=(100/8)MB/s=12.5MB/s</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>计算速度<ul>\n<li>CPU的速度一般体现为CPU的时钟频率</li>\n<li>CPU的时钟频率的单位一般是赫兹Hz（hertz）</li>\n<li>目前主流CPU的时钟频率都在2GHz以上</li>\n<li>Hz其实就是秒分之，并不只是描述计算机领域所专有的单位</li>\n<li>Hz它是每秒中的周期性变动重复次数的计量</li>\n<li>在CPU中就表示高低电瓶在每秒中变化的次数，2GHz = 2*1000^3Hz = 每秒20亿次</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-9-计算机的字符与编码集\"><a href=\"#1-9-计算机的字符与编码集\" class=\"headerlink\" title=\"1.9 计算机的字符与编码集\"></a>1.9 计算机的字符与编码集</h3><ul>\n<li><p>早期英美的ASCII码</p>\n<ul>\n<li><p>美国信息交换标准码（American Standard Code for Information Interchange）</p>\n</li>\n<li><p>使用7个bits就可以完全表示ASCII码</p>\n</li>\n<li><p>包含95个可打印字符，33个不可打印字符（包括控制字符）</p>\n</li>\n<li><p>很多应用或者国家中的符号都无法表示</p>\n</li>\n<li><p>无法表示数学符号：“÷ ≠ ≥ ≈ π”</p>\n</li>\n<li><p>𝟑𝟑 + 𝟗𝟓 = 𝟏𝟐𝟖 = 𝟐^7</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143402.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>Externed ASCII码</p>\n<ul>\n<li><p>第一次对ASCII码进行扩充， 7bits =&gt; 8bits</p>\n</li>\n<li><p>常见数学运算符</p>\n</li>\n<li><p>带音标的欧洲字符</p>\n</li>\n<li><p>其他常用符、表格符等</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143429.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>国际化</p>\n<ul>\n<li>欧洲、中亚、东亚、拉丁美洲国家的语言多样性</li>\n<li>语言体系不一样，不以有限字符组合的语言</li>\n<li>中国、韩国、日本等的语言最为复杂</li>\n<li>中文编码集<ul>\n<li>GB2312<ul>\n<li>《信息交换用汉字编码字符集——基本集》</li>\n<li>一共收录了 7445 个字符</li>\n<li>包括 6763 个汉字和 682 个其它符号</li>\n<li>不兼容国际标准</li>\n</ul>\n</li>\n<li>GBK<ul>\n<li>向下兼容GB2312，向上支持国际ISO标准</li>\n<li>《汉字内码扩展规范》</li>\n<li>收录了21003个汉字，支持全部中日韩汉字</li>\n<li>国际电脑不安装GBK编码就会显示乱码</li>\n<li>国内的Windows系统默认使用GBK编码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unicode<ul>\n<li>Unicode：统一码、万国码、单一码，兼容全球的字符集</li>\n<li>Unicode定义了世界通用的符号集， UTF-*实现了编码</li>\n<li>UTF-8以字节为单位对Unicode进行编码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-组成篇\"><a href=\"#2-组成篇\" class=\"headerlink\" title=\"2.组成篇\"></a>2.组成篇</h2><h3 id=\"2-1-计算机的总线\"><a href=\"#2-1-计算机的总线\" class=\"headerlink\" title=\"2.1 计算机的总线\"></a>2.1 计算机的总线</h3><ul>\n<li><p>总线的概述</p>\n<ul>\n<li><p>USB = Universal Serial Bus ，通用串行总线</p>\n<ul>\n<li>提供了对外连接的接口</li>\n<li>不同设备可以通过USB接口进行连接</li>\n<li>连接的标准，促使外围设备接口的统一</li>\n</ul>\n</li>\n<li><p>总线的分类</p>\n<ul>\n<li>片内总线<ul>\n<li>芯片内部的总线</li>\n<li>寄存器与寄存器之间</li>\n<li>寄存器与控制器、运算器之间</li>\n</ul>\n</li>\n<li>系统总线<ul>\n<li>CPU、主内存、 IO设备、各组件之间的信息传输线</li>\n<li>数据总线<ul>\n<li>双向传输各个部件的数据信息</li>\n<li>一般与CPU位数相同（32位、 64位）</li>\n<li>数据总线的位数（总线宽度）是数据总线的重要参数，64位总线一次可传输8个字节的数据</li>\n</ul>\n</li>\n<li>地址总线<ul>\n<li>指定源数据或目的数据在内存中的地址</li>\n<li>地址总线位数=n，寻址范围： 0~𝟐^n</li>\n<li>地址总线的位数与存储单元有关</li>\n</ul>\n</li>\n<li>控制总线<ul>\n<li>控制总线是用来发出各种控制信号的传输线</li>\n<li>控制信号经由控制总线从一个组件发给另外一个组件</li>\n<li>控制总线可以监视不同组件之间的状态（就绪/未就绪）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>总线的仲裁</p>\n<ul>\n<li>为了解决总线使用权的冲突问题</li>\n<li>总线的仲裁的方法<ul>\n<li>链式查询-串联<ul>\n<li>所有设备都可想仲裁器发出使用权申请，仲裁器在分配使用权时是按照链式顺序逐个询问，轮到谁就是谁</li>\n<li>好处：电路复杂度低，仲裁方式简单</li>\n<li>坏处：优先级低的设备难以获得总线使用权</li>\n<li>坏处：优先级低的设备难以获得总线使用权</li>\n</ul>\n</li>\n<li>计时器定时查询-并联<ul>\n<li>仲裁控制器对设备编号并使用计数器累计计数</li>\n<li>接收到仲裁信号后，往所有设备同时发出计数值</li>\n<li>计数值与设备编号一致则获得总线使用权</li>\n</ul>\n</li>\n<li>独立请求-循环<ul>\n<li>每个设备均有总线独立连接仲裁器</li>\n<li>设备可单独向仲裁器发送请求和接收请求</li>\n<li>当同时收到多个请求信号，仲裁器有权按优先级分配使用权</li>\n<li>好处：响应速度快，优先顺序可动态改变</li>\n<li>好处：响应速度快，优先顺序可动态改变</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-计算机的输入输出设备\"><a href=\"#2-2-计算机的输入输出设备\" class=\"headerlink\" title=\"2.2 计算机的输入输出设备\"></a>2.2 计算机的输入输出设备</h3><ul>\n<li><p>常见输入输出设备</p>\n<ul>\n<li><p>输入设备</p>\n<ul>\n<li>字符输入设备<ul>\n<li>键盘：<ul>\n<li>薄膜键盘</li>\n<li>机械键盘（根据段落感、声音、压力、键程的不同分为：黑轴、红轴、青轴、茶轴）</li>\n<li>电容键盘</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>图像输入设备<ul>\n<li>鼠标</li>\n<li>数位板：常用于绘图设计创作，输入板和压感笔</li>\n<li>扫描仪：将图形信息转换为数字信号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>输出设备</p>\n<ul>\n<li>显示器<ul>\n<li>CRT显示器</li>\n<li>液晶显示器</li>\n</ul>\n</li>\n<li>打印机</li>\n<li>投影仪</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>输入输出接口的通用设计</p>\n<ul>\n<li>通用设计考虑的问题：读取数据、向设备发送数据、设备有没有被占用？、设备是否已经启动？、设备是否已经连接？</li>\n<li>数据线<ul>\n<li>是I/O设备与主机之间进行数据交换的传送线</li>\n<li>单向传输数据线</li>\n<li>双向传输数据线</li>\n</ul>\n</li>\n<li>状态线<ul>\n<li>IO设备状态向主机报告的信号线</li>\n<li>查询设备是否已经正常连接并就绪</li>\n<li>查询设备是否已经被占用</li>\n</ul>\n</li>\n<li>命令线<ul>\n<li>CPU向设备发送命令的信号线</li>\n<li>发送读写信号</li>\n<li>发送启动停止信号</li>\n</ul>\n</li>\n<li>设备选择线<ul>\n<li>主机选择I/O设备进行操作的信号线</li>\n<li>对连在总线上的设备进行选择</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>CPU与IO设备的通信</p>\n<ul>\n<li><p>CPU速度与IO设备速度不一致</p>\n</li>\n<li><p>程序中断</p>\n<ul>\n<li><p>当外围IO设备就绪时，向CPU发出中断信号</p>\n</li>\n<li><p>CPU有专门的电路响应中断信号</p>\n</li>\n<li><p>中断的意义</p>\n<ul>\n<li>提供低速设备通知CPU的一种异步的方式</li>\n<li>CPU可以高速运转同时兼顾低速设备的响应</li>\n<li>提高工作效率(polling的问题) </li>\n<li>故障恢复(异常处理、紧急事件等)</li>\n<li>简化编程模型(try/cache, 计时器等)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>例如通过电脑打印资料的过程</p>\n<ul>\n<li><p>中断相应过程</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143825.jpg\" alt=\"\"></p>\n</li>\n<li><p>中断请求类型</p>\n<ul>\n<li>硬件设备发给主板(打印机、键盘、鼠标等)</li>\n<li>硬件中断: CPU异常(除以0), 时钟信号等</li>\n<li>软件中断:发出(异常、切换到内核态等)</li>\n</ul>\n</li>\n<li><p>中断向量表</p>\n<ul>\n<li><p>(一般在内存中) 一块块区域，存储了中断类型和中断响应程序的对应关系。每一行叫做一个中断向量。</p>\n<table>\n<thead>\n<tr>\n<th>中断类型</th>\n<th>ISR地址</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>0x0000</td>\n<td>除以0</td>\n</tr>\n<tr>\n<td>01</td>\n<td>0x0004</td>\n<td>单步</td>\n</tr>\n<tr>\n<td>09</td>\n<td>0x0024</td>\n<td>键盘</td>\n</tr>\n<tr>\n<td>18</td>\n<td>0x0048</td>\n<td>打印机</td>\n</tr>\n<tr>\n<td>100</td>\n<td>0x0190</td>\n<td>自定义</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>中断QA</p>\n<ul>\n<li>32位机器上的中断响应路径(ISR) 只有4个字节，怎么实现复杂的程序?</li>\n<li>按键程序中断响应路径到操作系统再到应用， 但是到底哪些键被按了怎么知道?</li>\n<li>中断响应后，如何恢复到中断执行前的状态?</li>\n<li>既然出错了?为什么不出错了直接跳转到错误处理位置?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>DMA（direct memory access）直接存储器存取</p>\n<ul>\n<li>DMA直接连接主存与IO设备</li>\n<li>DMA直接连接主存与IO设备</li>\n<li>当主存与IO设备交换信息时，不需要中断CPU</li>\n<li>可以提高CPU的效率</li>\n<li>硬盘和外置显卡中都有DMA设备</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-计算机存储器\"><a href=\"#2-3-计算机存储器\" class=\"headerlink\" title=\"2.3 计算机存储器\"></a>2.3 计算机存储器</h3><ul>\n<li><p>存储器的分类</p>\n<ul>\n<li>按存储介质分类<ul>\n<li>半导体存储器 ：内存条、 U盘、 固态硬盘</li>\n<li>磁存储器：磁带、磁盘</li>\n</ul>\n</li>\n<li>按存取方式分类<ul>\n<li>随机存储器(RAM)： 随机读取 与位置无关</li>\n<li>串行存储器 ：与位置有关 按顺序查找</li>\n<li>只读存储器(ROM）：只读不写</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>存储器指标</p>\n<ul>\n<li>读写速度：7200转</li>\n<li>存储容量：2T</li>\n<li>价格：容量+价格=&gt;位价：每比特位价格</li>\n</ul>\n</li>\n<li><p>层次结构</p>\n<ul>\n<li>高速缓存：速度快，位格高</li>\n<li>主存：速度适中，位格适中</li>\n<li>辅存：速度慢，位格低</li>\n<li>缓存-主存层次<ul>\n<li>原理：局部性原理</li>\n<li>实现：在CPU与主存之间增加一层速度快（容量小）的Cache</li>\n<li>目的：解决主存速度不足的问题</li>\n</ul>\n</li>\n<li>主存-辅存层次<ul>\n<li>原理：局部性原理</li>\n<li>实现：主存之外增加辅助存储器（磁盘、 SD卡、 U盘等）</li>\n<li>目的：解决主存容量不足的问题</li>\n</ul>\n</li>\n<li>局部性原理<ul>\n<li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-主存储器与辅助存储器\"><a href=\"#2-4-主存储器与辅助存储器\" class=\"headerlink\" title=\"2.4 主存储器与辅助存储器\"></a>2.4 主存储器与辅助存储器</h3><ul>\n<li><p>计算机断电，内存数据丢失</p>\n</li>\n<li><p>计算机断电，磁盘数据不会丢失</p>\n</li>\n<li><p>主存</p>\n<ul>\n<li>RAM（随机存取存储器： Random Access Memory）</li>\n<li>RAM 通过电容存储数据，必须隔一段时间刷新一次</li>\n<li>如果掉电，那么一段时间后将丢失所有数据</li>\n<li>内存与CPU如何交互的</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143858.jpg\" alt=\"\"></p>\n<ul>\n<li>32位系统：2^32 = 4 × 2^30 = 4𝐺𝐵 </li>\n<li>64位系统：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li>\n<li>32位的系统最大支持4GB的内存寻址范围，每一个字节都对应一个内存地址。内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。</li>\n<li>工作原理<ul>\n<li>字：是指存放在一个存储单元中的二进制代码组合</li>\n<li>字块：存储在连续的存储单元中而被看作是一个单元的一组字</li>\n<li>假设一个字有32位，一个字块共B个字，主存共M个字块<ul>\n<li>B×M = 主存总字数；B×M×32 = 主存总容量(bits)</li>\n</ul>\n</li>\n<li>字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址<ul>\n<li>2^𝑚 = 𝑀 , 前m位能表示出的寻址范围是0–2^𝑚</li>\n<li>2^𝒃 = 𝐵，后b位能表示出的寻址范围是0–2^b</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>辅存：磁盘</p>\n<ul>\n<li><p>表面是可磁化的硬磁特性材料</p>\n</li>\n<li><p>移动磁头径向运动读取磁道信息</p>\n</li>\n<li><p>磁道、扇区、磁头位置、磁头方向</p>\n</li>\n<li><p>寻道调度算法</p>\n<ul>\n<li>先来先服务算法<ul>\n<li>按顺序访问进程的磁道读写需求</li>\n</ul>\n</li>\n<li>最短寻道时间优先<ul>\n<li>与磁头当前位置有关</li>\n<li>优先访问离磁头最近的磁道</li>\n</ul>\n</li>\n<li>扫描算法（电梯算法）<ul>\n<li>每次只往一个方向移动</li>\n<li>到达一个方向需要服务的尽头再反方向移动</li>\n</ul>\n</li>\n<li>循环扫描算法<ul>\n<li>每次只往一个方向移动</li>\n<li>一个方向到头后再从头开始从同一个方向开始移动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-5-高速缓存\"><a href=\"#2-5-高速缓存\" class=\"headerlink\" title=\"2.5 高速缓存\"></a>2.5 高速缓存</h3><ul>\n<li><p>为了解决CPU与主存的速度不匹配的问题</p>\n</li>\n<li><p>缓存与主存的关系</p>\n<ul>\n<li>存储的逻辑结构类似</li>\n<li>缓存的容量较小</li>\n<li>缓存的速度更快</li>\n</ul>\n</li>\n<li><p>在主存缓存层次结构中的工作原理</p>\n<ul>\n<li>CPU需要的数据在缓存里：直接获取</li>\n<li>CPU需要的数据不在缓存里：需要去主存拿，替换策略<ul>\n<li>需要性能良好的缓存替换策略</li>\n</ul>\n</li>\n<li>命中率：从缓存取数据的命中率<ul>\n<li>命中率是衡量缓存的重要性能指标</li>\n<li>理论上CPU每次都能从高速缓存取数据的时候，命中率为1</li>\n<li>访问主存次数： N𝑚，访问Cache次数： N𝑐</li>\n<li>命中率ℎ =𝑁𝑐/(𝑁𝑐＋𝑁𝑚)</li>\n</ul>\n</li>\n<li>访问效率： 𝑒<ul>\n<li>访问主存时间： 𝑡𝑚 ，访问缓存时间：𝑡𝑐</li>\n<li>访问Cache-主存系统平均时间： 𝑡𝑎 = ℎ×𝑡𝑐 + (1 − ℎ)×𝑡𝑚</li>\n<li>𝑒 =𝑡𝑐/𝑡𝑎</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高速缓存替换策略</p>\n<ul>\n<li>随机算法</li>\n<li>先进先出算法(FIFO)<ul>\n<li>把高速缓存看做是一个先进先出的队列</li>\n<li>优先替换最先进入队列的字块</li>\n</ul>\n</li>\n<li>最不经常使用算法(LFU)<ul>\n<li>优先淘汰最不经常使用的字块</li>\n<li>需要额外的空间记录字块的使用频率</li>\n</ul>\n</li>\n<li>最近最少使用算法(LRU)<ul>\n<li>优先淘汰一段时间内没有使用的字块</li>\n<li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li>\n<li>有多种实现方法，一般使用双向链表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-6-计算机的指令系统\"><a href=\"#2-6-计算机的指令系统\" class=\"headerlink\" title=\"2.6 计算机的指令系统\"></a>2.6 计算机的指令系统</h3><ul>\n<li><p>计算机指令</p>\n<ul>\n<li>计算机通过指令指挥计算机工作。</li>\n<li>CPU被时钟驱动，不断的读取PC指针指向的指令，并增加PC指针，从内存中读取指令并执行。(如此周而复始)</li>\n<li>不同的CPU架构使用不同指令。目前使用最广泛的是RISC(Reduced instruction set computer,精简指令集)</li>\n</ul>\n</li>\n<li><p>机器指令的形式</p>\n<ul>\n<li>机器指令主要由两部分组成：操作码、地址码</li>\n<li>操作码指明指令所要完成的操作</li>\n<li>操作码的位数反映了机器的操作种类，如果操作码有8位就有2^8 = 256种操作</li>\n<li>地址码直接给出操作数或者操作数的地址</li>\n<li>分三地址指令、二地址指令和一地址指令与零地址指令<ul>\n<li>零地址指令<ul>\n<li>在机器指令中无地址码</li>\n<li>空操作、停机操作、中断返回操作等</li>\n</ul>\n</li>\n<li>一地址指令<ul>\n<li>(addr1)OP→ (addr1)：自己对自己的操作</li>\n<li>(addr1)OP(ACC) → (addr1)：自增操作</li>\n</ul>\n</li>\n<li>二地址指令<ul>\n<li>(addr1)OP(addr2) → (addr1)或(addr2)： 结果放在addr1或addr2)</li>\n</ul>\n</li>\n<li>三地址指令<ul>\n<li>一个操作码和三个地址码</li>\n<li>(addr1)OP(addr2) → (addr3)：结果放在addr3， 例如： 1+2=3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作类型</p>\n<ul>\n<li>数据传输<ul>\n<li>寄存器之间、寄存器与存储单元、存储单元之间传送</li>\n<li>数据读写、交换地址数据、清零置一等操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>load/store指令用来从内存中读/写入内存。通常会有多个版本的实现，助记符是:</p>\n<pre><code>- load类: Iw,Ib,Ih\n- store类: sw,sb,sh</code></pre><ul>\n<li>算术逻辑<ul>\n<li>操作数之间的加减乘除运算<ul>\n<li>加减乘除等：addi, subi, divi, multi</li>\n</ul>\n</li>\n<li>操作数的与或非等逻辑位运算<ul>\n<li>位运算指令：and/or/xor</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>移位操作</p>\n<ul>\n<li>数据左移（乘2）、数据右移（除2）</li>\n<li>完成数据在算术逻辑单元的必要操作</li>\n<li>控制指令<ul>\n<li>等待指令、停机指令、空操作指令、中断指令等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>寻址方式</p>\n<ul>\n<li><p>指令寻址</p>\n<ul>\n<li><p>顺序寻址</p>\n</li>\n<li><p>跳跃寻址</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">地址</th>\n<th align=\"center\">指令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">101</td>\n<td align=\"center\">MOV R0,R1</td>\n</tr>\n<tr>\n<td align=\"center\">102</td>\n<td align=\"center\">ADD R1,R2</td>\n</tr>\n<tr>\n<td align=\"center\">103</td>\n<td align=\"center\">JMP 102</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>数据寻址</p>\n<ul>\n<li>立即寻址<ul>\n<li>指令直接获得操作数</li>\n<li>无需访问存储器</li>\n<li>优点：速度快</li>\n<li>缺点：地址码位数限制操作数表示范围</li>\n</ul>\n</li>\n<li>直接寻址<ul>\n<li>直接给出操作数在主存的地址</li>\n<li>寻找操作数简单，无需计算数据地址</li>\n<li>优点：寻找操作数简单</li>\n<li>缺点：地址码位数限制操作数表示范围</li>\n</ul>\n</li>\n<li>间接寻址<ul>\n<li>指令地址码给出的是操作数地址的地址</li>\n<li>需要访问一次或多次主存来获取操作数</li>\n<li>优点：操作数寻址范围大</li>\n<li>缺点：速度较慢</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-7-计算机的控制器\"><a href=\"#2-7-计算机的控制器\" class=\"headerlink\" title=\"2.7 计算机的控制器\"></a>2.7 计算机的控制器</h3><ul>\n<li>控制器是协调和控制计算机运行的</li>\n<li>程序计数器<ul>\n<li>程序计数器用来存储下一条指令的地址</li>\n<li>循环从程序计数器中拿出指令</li>\n<li>当指令被拿出时，指向下一条指令</li>\n</ul>\n</li>\n<li>时序发生器<ul>\n<li>电气工程领域，用于发送时序脉冲</li>\n<li>CPU依据不同的时序脉冲有节奏的进行工作</li>\n</ul>\n</li>\n<li>指令译码器<ul>\n<li>指令译码器是控制器的主要部件之一</li>\n<li>计算机指令由操作码和地址码组成</li>\n<li>翻译操作码对应的操作以及控制传输地址码对应的数据</li>\n</ul>\n</li>\n<li>指令寄存器<ul>\n<li>指令寄存器也是控制器的主要部件之一</li>\n<li>从主存或高速缓存取计算机指令</li>\n</ul>\n</li>\n<li>主存地址寄存器<ul>\n<li>保存当前CPU正要访问的内存单元的地址</li>\n</ul>\n</li>\n<li>主存数据寄存器<ul>\n<li>保存当前CPU正要读或写的主存数据</li>\n</ul>\n</li>\n<li>通用寄存器<ul>\n<li>用于暂时存放或传送数据或指令</li>\n<li>可保存ALU的运算中间结果</li>\n<li>容量比一般专用寄存器要大</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-8-计算机的运算器\"><a href=\"#2-8-计算机的运算器\" class=\"headerlink\" title=\"2.8 计算机的运算器\"></a>2.8 计算机的运算器</h3><ul>\n<li><p>运算器是用来进行数据运算加工的</p>\n</li>\n<li><p>数据缓冲器</p>\n<ul>\n<li>分为输入缓冲和输出缓冲</li>\n<li>输入缓冲暂时存放外设送过来的数据</li>\n<li>输出缓冲暂时存放送往外设的数据</li>\n</ul>\n</li>\n<li><p>ALU</p>\n<ul>\n<li>ALU：算术逻辑单元，是运算器的主要组成</li>\n<li>常见的位运算（左右移、与或非等）</li>\n<li>算术运算（加减乘除等）</li>\n</ul>\n</li>\n<li><p>通用寄存器</p>\n<ul>\n<li>用于暂时存放或传送数据或指令</li>\n<li>可保存ALU的运算中间结果</li>\n<li>容量比一般专用寄存器要大</li>\n</ul>\n</li>\n<li><p>状态字寄存器</p>\n<ul>\n<li>存放运算状态（条件码、进位、溢出、结果正负等）</li>\n<li>存放运算控制信息（调试跟踪标记位、允许中断位等）</li>\n</ul>\n</li>\n<li><p>总线</p>\n</li>\n</ul>\n<h3 id=\"2-9-计算机指令的执行过程\"><a href=\"#2-9-计算机指令的执行过程\" class=\"headerlink\" title=\"2.9 计算机指令的执行过程\"></a>2.9 计算机指令的执行过程</h3><ul>\n<li><p>指令执行过程</p>\n<ul>\n<li>取指令 <ul>\n<li>从缓存取指令</li>\n<li>送到指令寄存器</li>\n</ul>\n</li>\n<li>分析指令<ul>\n<li>指令译码器译码</li>\n<li>发出控制信号</li>\n<li>程序计数器+1</li>\n</ul>\n</li>\n<li>执行指令<ul>\n<li>装载数据到寄存器</li>\n<li>ALU处理数据</li>\n<li>记录运算状态</li>\n<li>送出运算结果</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144002.jpg\" alt=\"\"></p>\n</li>\n<li><p>CPU的流水线设计</p>\n<ul>\n<li>提高CPU的综合利用率</li>\n<li>类似工厂的装配线</li>\n<li>工厂的装配线使得多个产品可以同时被加工</li>\n<li>在同一个时刻，不同产品均位于不同的加工阶段</li>\n<li>串行执行m条指令： 𝑇1 = 3t × 𝑚</li>\n<li>流水线执行m条指令： 𝑇2 = 𝑡 × (𝑚 + 2)</li>\n<li>流水线执行效率:H=𝑇2/𝑇1= 𝑡 × (𝑚 + 2)/3t × 𝑚=1/3+1/3m, m很大的情况下是串行执行的3倍效率</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>时间片</th>\n<th>时间片</th>\n<th>时间片</th>\n<th>时间片</th>\n<th>时间片</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>取指令</td>\n<td>分析指令</td>\n<td>执行指令</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>取指令</td>\n<td>分析指令</td>\n<td>执行指令</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td></td>\n<td>取指令</td>\n<td>分析指令</td>\n<td>执行指令</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"3-计算篇\"><a href=\"#3-计算篇\" class=\"headerlink\" title=\"3.计算篇\"></a>3.计算篇</h2><h3 id=\"3-1-进制运算的基础\"><a href=\"#3-1-进制运算的基础\" class=\"headerlink\" title=\"3.1 进制运算的基础\"></a>3.1 进制运算的基础</h3><ul>\n<li>什么是进制<ul>\n<li>进位制是一种记数方式，亦称进位计数法或位值计数法</li>\n<li>有限种数字符号来表示无限的数值</li>\n<li>使用的数字符号的数目称为这种进位制的基数或底数</li>\n<li>计算机喜欢二进制，但是二进制表达太长了</li>\n<li>使用大进制位可以解决这个问题</li>\n<li>八进制、十六进制满足2的n次方的要求</li>\n<li>二进制<ul>\n<li>1024=0b1000000000 </li>\n</ul>\n</li>\n<li>八进制<ul>\n<li>1024=0o2000</li>\n</ul>\n</li>\n<li>十进制： [0-9] </li>\n<li>十六进制<ul>\n<li>MAC地址：[0-9]和A、 B、 C、 D、 E、 F</li>\n<li>1024=0x400</li>\n</ul>\n</li>\n<li>二十进制<ul>\n<li>玛雅文明的玛雅数字</li>\n<li>因努伊特的因努伊特数字</li>\n</ul>\n</li>\n<li>六十进制<ul>\n<li>时间、坐标、角度等量化数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进制的表示法<ul>\n<li>正整数N，基数为r，位数为n</li>\n<li>N=𝑑𝑛−1×r𝑛−1 +𝑑𝑛−2× r𝑛−2 + ⋯ + 𝑑1×𝑟 + 𝑑0</li>\n<li>N= 1024  = 1 ×10^3 +0×10^3+ 2 × 10^1 + 4× 10^0</li>\n<li>𝑁 = 10000000000  = 1 × 2^10</li>\n</ul>\n</li>\n<li>二进制转十进制的方法<ul>\n<li>按权展开法</li>\n<li>𝑁 = 01100101 = 1 × 2^6 + 1 × 2^5 + 1 ×2^2 + 1 = 101</li>\n<li>小数的按权展开法</li>\n<li>𝑁 = 0.11001 = 1×2^−1 + 1×2^−2 + 1× 2^−5 = 0.78125=25/32</li>\n</ul>\n</li>\n<li>十进制转二进制的方法<ul>\n<li>（整数）重复相除法</li>\n<li>重复除以2 ，得商， 取余数，最后一个余数为最高位</li>\n<li>（小数）重复相乘法</li>\n<li>重复乘以2， 得积 ，取1，第一个余数为最高位</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-原码-amp-反码-amp-补码\"><a href=\"#3-2-原码-amp-反码-amp-补码\" class=\"headerlink\" title=\"3.2 原码&amp;反码&amp;补码\"></a>3.2 原码&amp;反码&amp;补码</h3><ul>\n<li><p>使用0表示正数，使用1表示负数，最高位表示符号位，其它都是数字位</p>\n</li>\n<li><p>+237=011101101， -237=111101101</p>\n</li>\n<li><p>两个字节16位表示+237 【0】 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1</p>\n</li>\n<li><p>原码表示法</p>\n<ul>\n<li>使用0表示正数、 1表示负数</li>\n<li>规定符号位位于数值第一位</li>\n<li>表达简单明了，是人类最容易理解的表示法</li>\n<li>0有两种表示方法： 00、 10</li>\n<li>原码进行运算非常复杂，特别是两个操作数符号不同的时候<ul>\n<li>判断两个操作数绝对值大小</li>\n<li>使用绝对值大的数减去绝对值小的数</li>\n<li>对于符号值，以绝对值大的为准</li>\n</ul>\n</li>\n<li>希望找到不同符号操作数更加简单的运算方法</li>\n<li>希望找到使用正数代替负数的方法</li>\n<li>使用加法操作代替减法操作，从而消除减法</li>\n</ul>\n</li>\n<li><p>补码表示法</p>\n<ul>\n<li>整数的补码<ul>\n<li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li>\n<li>如果 x∈[−2^𝑛, 0) X=2^(𝑛+1) + 𝑥<ul>\n<li>例如：n=4， x=13，计算x的二进制原码和补码<ul>\n<li>原码： x=0,1101</li>\n<li>补码： x=0,1101</li>\n</ul>\n</li>\n<li>例如：n=4，x=-13，计算x的二进制原码和补码<ul>\n<li>原码： x=1,1101</li>\n<li>补码： 2^(𝑛+1) + 𝑥= 2^(4+1() − 13 = 100000 − 1101 = 10011</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>小数的补码<ul>\n<li>如果 x∈[0, 1) X=x  </li>\n<li>如果 x∈[−1, 0) X=2+x</li>\n<li>规律：小数的反码等于原码除符号位外按位取反，补码等于反码+1</li>\n</ul>\n</li>\n<li>在计算补码的过程中，还是使用了减法</li>\n<li>需要寻找使用正数代替负数的方法</li>\n</ul>\n</li>\n<li><p>反码表示法</p>\n<ul>\n<li>反码的目的是找出原码和补码之间的规律，消除转换过程中的减法</li>\n<li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li>\n<li>如果 x∈[−2^𝑛, 0) X=（2^(𝑛+1)-1） + 𝑥</li>\n<li>规律：负数的反码等于原码除符号位外按位取反，负数的补码等于反码+1<ul>\n<li>-13， 原码：1,1101 ，反码：1,0011 ，补码：1,0010</li>\n<li>-7， 原码： 1,0111，反码： 1,1001，补码： 1,1000</li>\n<li>-1， 原码： 1,0001 ，反码：1,1111，补码： 1,1110</li>\n</ul>\n</li>\n<li>x=-13，计算x的二进制原码和反码<ul>\n<li>原码： x=1,1101</li>\n<li>反码： (2𝑛+1−1) + 𝑥 = (2^4+1−1) − 13 = 011111 − 1101 = 1,0010</li>\n<li>反码： x=1,0010</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>  <img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144040.jpg\" alt=\"\"></p>\n<h3 id=\"3-3-定点数与浮点数\"><a href=\"#3-3-定点数与浮点数\" class=\"headerlink\" title=\"3.3 定点数与浮点数\"></a>3.3 定点数与浮点数</h3><ul>\n<li><p>定点数的表示方法</p>\n<ul>\n<li>小数点固定在某个位置的数称之为定点数</li>\n<li>纯小数 ：符号位【小数点】数值位</li>\n<li>纯整数：符号位 数值位 【小数点】</li>\n<li>其它小数需要乘以比例因子以满足定点数保存格式，10.01 需要左移两位或者右移两位</li>\n<li>计算机中的存储形式见下表，小数点不显示</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数值</th>\n<th align=\"center\">符号位</th>\n<th align=\"center\">数值位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0.1011</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1011</td>\n</tr>\n<tr>\n<td align=\"left\">-0.1011</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1011</td>\n</tr>\n<tr>\n<td align=\"left\">1011</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1011</td>\n</tr>\n<tr>\n<td align=\"left\">-1011</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1011</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>浮点数的表示方法</p>\n<ul>\n<li><p>计算机处理的很大程度上不是纯小数或纯整数</p>\n</li>\n<li><p>数据范围很大，定点数难以表达</p>\n</li>\n<li><p>浮点数的表示格式</p>\n<ul>\n<li>类比科学计数法：123450000000 = 1.2345 × 10^11 ， 1.2345：尾数 ，10：基数 ，11：阶码</li>\n<li>𝑁 = 𝑆 × 𝑟^𝑗 ，S：尾数， r：基数， j：阶码</li>\n<li>阶码符号位|阶码数值位|尾数符号位|尾数数值位</li>\n<li>尾数规定使用纯小数</li>\n<li>11.0101 = 0.110101 × 2^10</li>\n<li>11.0101 = 0.0110101 × 2^11</li>\n<li>计算机中的存储形式见下表，小数点不显示</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.110101 × 2^10</td>\n<td>0</td>\n<td>10</td>\n<td>0</td>\n<td>1010100</td>\n</tr>\n<tr>\n<td>0.0110101 × 2^11</td>\n<td>0</td>\n<td>11</td>\n<td>0</td>\n<td>01101010</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>浮点数的表示范围</p>\n<ul>\n<li>假设阶码数值取m位，尾数数值取n位</li>\n<li>阶码表示范围： [−(𝟐^𝒎 − 𝟏),  𝟐^𝒎 − 𝟏]</li>\n<li>尾数表示范围： [−(𝟏 − 𝟐^−𝒏), −(𝟐^−𝒏)] [𝟐^−𝒏,  𝟏 − 𝟐−^𝒏]</li>\n<li>单精度浮点数：使用4字节、 32位来表达浮点数(float)</li>\n<li>双精度浮点数：使用8字节、 64位来表达浮点数(double)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144101.jpg\" alt=\"\"></p>\n</li>\n<li><p>浮点数的规格化</p>\n<ul>\n<li>尾数规定使用纯小数</li>\n<li>尾数最高位必须是1</li>\n<li>例如：11.0101 = 0.110101 × 2^10</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>两者的对比</p>\n<ul>\n<li>当定点数与浮点数位数相同时， 浮点数表示的范围更大</li>\n<li>当浮点数尾数为规格化数时， 浮点数的精度更高（尾数存8位，前面的0多了丢失的精度就更多）</li>\n<li>浮点数运算包含阶码和尾数， 浮点数的运算更为复杂</li>\n<li>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</li>\n<li>浮点数在数的运算规则、运算速度、硬件成本方面不如定点数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-定点数的加减法运算\"><a href=\"#3-4-定点数的加减法运算\" class=\"headerlink\" title=\"3.4 定点数的加减法运算\"></a>3.4 定点数的加减法运算</h3><ul>\n<li><p>整数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2^(𝑛+1))</p>\n</li>\n<li><p>小数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2)</p>\n</li>\n<li><p>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</p>\n</li>\n<li><p>整数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补  (𝑚𝑜𝑑2^(𝑛+1))</p>\n</li>\n<li><p>小数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补 (𝑚𝑜𝑑2)</p>\n</li>\n<li><p>-B[补]等于B[补]连同符号位按位取反，末位加一，B 补 = 1,0010101， (−B) 补 = 0,1101011</p>\n</li>\n<li><p>负数的反码等于原码按位取反，补码等于反码+1</p>\n</li>\n<li><p>例如： A=-110010， B=001101，求A+B</p>\n<ul>\n<li>A[补] = 1,001110</li>\n<li>B 补 = B[原] = 0,001101</li>\n<li>A 补 + B 补 = (A + B) 补 =1,011011</li>\n<li>(A + B)原 = −100101</li>\n</ul>\n</li>\n<li><p>例如：A=11001000， B=-00110100，求A-B</p>\n<ul>\n<li>A 补 = A[原] = 0,11001000</li>\n<li>B 补 = 1,11001100</li>\n<li>(−B) 补 = 0,00110100</li>\n<li>A 补 − B 补 = A + (−B) 补=0,11111100</li>\n<li>A − B（原） = 111111100</li>\n</ul>\n</li>\n<li><p>双符号位判断溢出</p>\n<ul>\n<li>双符号位判断法<ul>\n<li>单符号位表示变成双符号位： 0=&gt;00,1=&gt;11</li>\n<li>双符号位产生的进位丢弃</li>\n<li>结果的双符号位不同则表示溢出</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-5-浮点数的加减法运算\"><a href=\"#3-5-浮点数的加减法运算\" class=\"headerlink\" title=\"3.5 浮点数的加减法运算\"></a>3.5 浮点数的加减法运算</h3><ul>\n<li><p>𝑥 = 𝑆𝑥 × 𝑟^𝑗𝑥，𝑥 = 0.1101 × 2^01</p>\n</li>\n<li><p>𝑦 = 𝑆𝑦 × 𝑟^𝑗y，𝑦 = (−0.1010) × 2^11</p>\n</li>\n<li><p>対阶</p>\n<ul>\n<li>対阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算</li>\n<li>浮点数尾数运算简单</li>\n<li>浮点数位数实际小数位与阶码有关</li>\n<li>阶码按小阶看齐大阶的原则</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.1101 × 2^01</td>\n<td>00</td>\n<td>0001</td>\n<td>00</td>\n<td>1101</td>\n</tr>\n<tr>\n<td>(−0.1010) × 2^11</td>\n<td>00</td>\n<td>0011</td>\n<td>01</td>\n<td>1010</td>\n</tr>\n</tbody></table>\n<ul>\n<li>対阶操作：将x的数值右移两位，𝑥 = 0.001101 × 2^11</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.001101 × 2^11</td>\n<td>00</td>\n<td><strong>0011</strong></td>\n<td>00</td>\n<td>0011(01)舍弃后两位</td>\n</tr>\n<tr>\n<td>(−0.1010) × 2^11</td>\n<td>00</td>\n<td>0011</td>\n<td>01</td>\n<td>1010</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>尾数求和</p>\n<ul>\n<li>使用补码进行运算</li>\n<li>减法运算转化为加法运算： A - B = A + (-B)</li>\n<li>𝑥[原] = 00.0011，𝑥[补] = 00.0011</li>\n<li>𝑦[原] = 11.1010，𝑦[补] = 11.0110</li>\n<li>S = (𝑥 + 𝑦)[补] = 11.1001</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>11.1001</td>\n<td>00</td>\n<td><strong>0011</strong></td>\n<td>11</td>\n<td>1001</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>尾数规格化</p>\n<ul>\n<li>◆ 对补码进行规格化需要判断两种情况： S&gt;0和S&lt;0</li>\n<li>S[补] = 00.1xxxxxx(𝑆 &gt; 0)</li>\n<li>S[补] = 11.0xxxxxx(𝑆 &lt; 0)</li>\n<li>如果不满足此格式，需要进行左移， 同时阶码相应变化，以满足规格化</li>\n<li>S = (𝑥 + 𝑦)[补] = 11.1001，不满足约定格式</li>\n<li>S = (𝑥 + 𝑦)[补] = 11. (1)0010(左移舍弃，阶码数值位也要相应变化)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>11.0010</td>\n<td>00</td>\n<td>0010</td>\n<td>11</td>\n<td>0010</td>\n</tr>\n</tbody></table>\n<ul>\n<li>S = 𝑥 + 𝑦 补 = 11.0010，𝑥 + 𝑦 原 = −0.1110</li>\n<li>𝑥 + 𝑦 = −0.1110× 2^10</li>\n<li>一般情况下都是左移，符号位不一致下需要右移(定点运算的溢出情况)</li>\n<li>右移的话则需要进行舍入操作</li>\n</ul>\n</li>\n<li><p>舍入</p>\n<ul>\n<li>0舍1入” 法（二进制的四舍五入）</li>\n<li>S 补 = 10.10110111，符号位不一致，右移舍弃尾数再+1， S 补 = 11.01011011(1)+1=11.01011100</li>\n<li>右移阶码要+1</li>\n</ul>\n</li>\n<li><p>溢出判断</p>\n<ul>\n<li>定点运算双符号位不一致为溢出</li>\n<li>浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规</li>\n<li>浮点运算主要通过阶码的双符号位判断是否溢出</li>\n<li>如果规格化后，阶码双符号位不一致，则认为是溢出</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144134.jpg\" alt=\"\"></p>\n<h3 id=\"3-6-浮点数的乘除法运算\"><a href=\"#3-6-浮点数的乘除法运算\" class=\"headerlink\" title=\"3.6 浮点数的乘除法运算\"></a>3.6 浮点数的乘除法运算</h3><ul>\n<li><p>乘法：阶码相加，尾数求积</p>\n</li>\n<li><p>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) × 𝑟^(𝑗𝑥+𝑗y)</p>\n</li>\n<li><p>除法：阶码相减，尾数求商</p>\n</li>\n<li><p>𝑥/𝑦 = (𝑆𝑥/𝑆𝑦) × 𝑟^(𝑗𝑥−𝑗y)</p>\n</li>\n<li><p>阶码运算</p>\n</li>\n<li><p>尾数运算</p>\n</li>\n<li><p>尾数规格化</p>\n</li>\n<li><p>舍入</p>\n</li>\n<li><p>溢出判断</p>\n</li>\n<li><p>例如： 𝑥 = 0.11010011 × 2^1101， 𝑦 = 0.11101110 × 2^0001，假设阶码4位，尾数8位，计算x * y</p>\n<ul>\n<li>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) ×^𝑟(𝑗𝑥+𝑗y)</li>\n<li>= (0.11010011 × 0.11101110) × 𝑟^(1101+0001)</li>\n<li>= 0.11000100(保留八位) × 𝑟^1110</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-关于我\"><a href=\"#4-关于我\" class=\"headerlink\" title=\"4.关于我\"></a>4.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p>\n<p><a href=\"http://basedev.cn/\" target=\"_blank\" rel=\"noopener\">个人网站 basedev.cn</a>  </p>\n<p><a href=\"https://github.com/jaydroid1024\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5.参考\"></a>5.参考</h2><ul>\n<li><p><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content\" target=\"_blank\" rel=\"noopener\">重学操作系统 | 拉钩教育</a></p>\n</li>\n<li><p><a href=\"https://coding.imooc.com/class/package/355.html\" target=\"_blank\" rel=\"noopener\">编程必备基础 | 慕课网</a></p>\n</li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-计算机基础知识小抄版\"><a href=\"#筑基系列-计算机基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-计算机基础知识小抄版\"></a>筑基系列-计算机基础知识小抄版</h1><blockquote>\n<p>计算机基础知识筑基三部曲：</p>\n<ul>\n<li><strong><a href=\"https://juejin.cn/post/6991367806772052004\" target=\"_blank\" rel=\"noopener\">第一部：筑基系列-计算机基础知识小抄版</a></strong><ul>\n<li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991385109509193764\" target=\"_blank\" rel=\"noopener\">第二部：筑基系列-操作系统基础知识小抄版</a></strong><ul>\n<li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991397445251334151\" target=\"_blank\" rel=\"noopener\">第三部：筑基系列-计算机网络基础知识小抄版</a></strong><ul>\n<li>包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1.背景篇\">1.背景篇</a><ul>\n<li><a href=\"#11-计算机发展史\">1.1 计算机发展史</a></li>\n<li><a href=\"#12-cpu发展史\">1.2 CPU发展史</a></li>\n<li><a href=\"#13-32-位-vs-64-位\">1.3 32 位 VS 64 位</a></li>\n<li><a href=\"#14-计算机的分类\">1.4 计算机的分类</a></li>\n<li><a href=\"#15-计算机的体系与结构\">1.5 计算机的体系与结构</a></li>\n<li><a href=\"#16-程序翻译与解释\">1.6 程序翻译与解释</a></li>\n<li><a href=\"#17-计算机的层次\">1.7 计算机的层次</a></li>\n<li><a href=\"#18-计算机的计算单位\">1.8 计算机的计算单位</a></li>\n<li><a href=\"#19-计算机的字符与编码集\">1.9 计算机的字符与编码集</a></li>\n</ul>\n</li>\n<li><a href=\"#2.组成篇\">2.组成篇</a><ul>\n<li><a href=\"#21-计算机的总线\">2.1 计算机的总线</a></li>\n<li><a href=\"#22-计算机的输入输出设备\">2.2 计算机的输入输出设备</a></li>\n<li><a href=\"#23-计算机存储器\">2.3 计算机存储器</a></li>\n<li><a href=\"#24-主存储器与辅助存储器\">2.4 主存储器与辅助存储器</a></li>\n<li><a href=\"#25-高速缓存\">2.5 高速缓存</a></li>\n<li><a href=\"#26-计算机的指令系统\">2.6 计算机的指令系统</a></li>\n<li><a href=\"#27-计算机的控制器\">2.7 计算机的控制器</a></li>\n<li><a href=\"#28-计算机的运算器\">2.8 计算机的运算器</a></li>\n<li><a href=\"#29-计算机指令的执行过程\">2.9 计算机指令的执行过程</a></li>\n</ul>\n</li>\n<li><a href=\"#3.计算篇\">3.计算篇</a><ul>\n<li><a href=\"#31-进制运算的基础\">3.1 进制运算的基础</a></li>\n<li><a href=\"#32-原码反码补码\">3.2 原码&amp;反码&amp;补码</a></li>\n<li><a href=\"#33-定点数与浮点数\">3.3 定点数与浮点数</a></li>\n<li><a href=\"#34-定点数的加减法运算\">3.4 定点数的加减法运算</a></li>\n<li><a href=\"#35-浮点数的加减法运算\">3.5 浮点数的加减法运算</a></li>\n<li><a href=\"#36-浮点数的乘除法运算\">3.6 浮点数的乘除法运算</a></li>\n</ul>\n</li>\n<li><a href=\"#4.关于我\">4.关于我</a></li>\n<li><a href=\"#5.参考\">5.参考</a></li>\n</ul>\n<h2 id=\"1-背景篇\"><a href=\"#1-背景篇\" class=\"headerlink\" title=\"1.背景篇\"></a>1.背景篇</h2><h3 id=\"1-1-计算机发展史\"><a href=\"#1-1-计算机发展史\" class=\"headerlink\" title=\"1.1 计算机发展史\"></a>1.1 计算机发展史</h3><ul>\n<li>电子管计算机 (1946-1957)<ul>\n<li>埃尼阿克(ENIAC)</li>\n</ul>\n</li>\n<li>晶体管计算机(1957-1964)<ul>\n<li>贝尔实验室、MIT林肯实验室的TX-0、PDP-1配备4k内存和显示器</li>\n</ul>\n</li>\n<li>集成电路计算机 (1964-1980)<ul>\n<li>德州仪器的工程师发明了集成电路(IC)、IBM(7094,1401) 、System/360 操作系统</li>\n</ul>\n</li>\n<li>超大规模集成电路计算机 (1980-现在)<ul>\n<li>乔布斯 Apple 和 Apple二代</li>\n</ul>\n</li>\n<li>未来的计算机 <ul>\n<li>生物计算机</li>\n<li>量子计算机</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-2-CPU发展史\"><a href=\"#1-2-CPU发展史\" class=\"headerlink\" title=\"1.2 CPU发展史\"></a>1.2 CPU发展史</h3><ul>\n<li>摩尔定律<ul>\n<li>定义：当价格不变时，集成电路中可容纳的晶体管数目约每隔 18～24 个月就会增加一倍，性能也将提升一倍。</li>\n<li>这一定律揭示了信息技术发展的速度，但到今天，摩尔定律失效了。因为随着芯片越来越小，在尺寸和散热等方面已经挑战了人类的极限，芯片中无法再放入更多的电子元件了。</li>\n<li>所以计算能力又开始以另一种方式发展，那就是多核心，比如一个普普通通的 NVIDA 显卡中就拥有了几百个核心，这样就可以进行大量的并发计算；另外，一个分布式的大数据集群，里面就可能有上千个核心。</li>\n</ul>\n</li>\n<li>单核CPU发展史<ul>\n<li>（1971～ 1973） 500KHz频率的微型计算机（字长8位）</li>\n<li>（1978～ 1985） 500MHz频率的微型计算机（字长16位）</li>\n<li>（1985～ 2000） 高于1GHz频率的微型计算机（字长32位）</li>\n<li>（1973～ 1978） 高于1MHz频率的微型计算机（字长8位）</li>\n<li>（2000～ 现在） 高于2GHz频率的微型计算机（字长为64位）</li>\n</ul>\n</li>\n<li>多核CPU发展史<ul>\n<li>（2005） Intel奔腾系列双核CPU、 AMD速龙系列</li>\n<li>（2006） Intel酷睿四核CPU</li>\n<li>Intel酷睿系列十六核CPU</li>\n<li>Intel至强系列五十六核CPU</li>\n</ul>\n</li>\n<li>CPU数字能量是如何产生的<ul>\n<li>时间是最重要的输入：晶振</li>\n<li>电能供给给芯片，芯片中的一种电子元件晶振（也就是石英晶体）通电后产生震荡</li>\n<li>震荡会产生频率稳定的脉冲信号，通常这是一种高频的脉冲信号，每秒可达百万次</li>\n<li>然后通过谐振效应发放这个信号，形成方波</li>\n<li>再通过电子元件调整这种脉冲的频率，把脉冲信号转换为需要的频率，这就形成了驱动芯片工作的时钟信号</li>\n<li>最后，时钟信号驱动着芯片工作，就像人体的脉搏一样，每一次脉冲到来，都让芯片的状态发生一次变化，最终存储器中的指令被一行行执行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-32-位-VS-64-位\"><a href=\"#1-3-32-位-VS-64-位\" class=\"headerlink\" title=\"1.3 32 位 VS 64 位\"></a>1.3 32 位 VS 64 位</h3><ul>\n<li>32、64 位可以表示操作系统、软件、 CPU等</li>\n<li>32位的容量：2^32 = 4 × 2^30 = 4𝐺𝐵 </li>\n<li>64位的容量：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li>\n<li>如果是 CPU，那么有 32 位 CPU，也有 64 位 CPU<ul>\n<li>如果 CPU 每次可以计算 4 个 byte，那么我们称作 32 位 CPU</li>\n<li>如果 CPU 每次可以计算 8 个 byte，那么我们称作 64 位 CPU</li>\n<li>这里的 32 和 64，称作 CPU 的位宽</li>\n<li>64 位 CPU 可以执行更大数字的运算，这个优势在普通应用上不明显，但是对于数值计算较多的应用就非常明显。</li>\n<li>64 位 CPU 可以寻址更大的内存空间</li>\n</ul>\n</li>\n<li>如果 32 位/64 位说的是程序，那么说的是指令是 64 位还是 32 位的。<ul>\n<li>32 位指令在 64 位机器上执行，困难不大，可以兼容。 </li>\n<li>如果是 64 位指令，在 32 位机器上执行就困难了，32 位的寄存器都存不下指令的参数。</li>\n</ul>\n</li>\n<li>如果 32 位/64 位说的是操作系统<ul>\n<li>操作系统也是一种程序，如果是 64 位操作系统，也就是操作系统中程序的指令都是 64 位指令，因此不能安装在 32 位机器上。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-计算机的分类\"><a href=\"#1-4-计算机的分类\" class=\"headerlink\" title=\"1.4 计算机的分类\"></a>1.4 计算机的分类</h3><ul>\n<li>超级计算机<ul>\n<li>功能最强</li>\n<li>运算速度的单位是TFlop/s（1TFlop/s=每秒一万亿次浮点计算）</li>\n<li>Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz： 44.87 GFlop/s（  0.04487TFlop/s）</li>\n<li>世界排名：Summit IBM（美国) &gt; 神威太湖之光(中国)  &gt; Sierra IBM（美国） </li>\n<li>中国排名：神威 太湖之光 &gt; 天河二号&gt;  天河一号</li>\n</ul>\n</li>\n<li>大型机 (又称大型机、大型主机、主机等)<ul>\n<li>IBM Z9 </li>\n<li>大型机造价高昂</li>\n<li>去“IOE”行动 (I(IBM) O(Oracle) E(EMC)) –阿里云</li>\n</ul>\n</li>\n<li>迷你计算机（服务器）<ul>\n<li>普通服务器已经代替了传统的大型机，成为大规模企业计算的中枢</li>\n</ul>\n</li>\n<li>工作站<ul>\n<li>高端的通用微型计算机，提供比个人计算机更强大的性能</li>\n<li>类似于普通台式电脑，体积较大，但性能强劲</li>\n</ul>\n</li>\n<li>微型计算机<ul>\n<li>麻雀虽小、五脏俱全</li>\n<li>从构成的本质上来讲，个人计算机与前面的分类无异</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-5-计算机的体系与结构\"><a href=\"#1-5-计算机的体系与结构\" class=\"headerlink\" title=\"1.5 计算机的体系与结构\"></a>1.5 计算机的体系与结构</h3><ul>\n<li><p>阿兰.图灵</p>\n<ul>\n<li>英国(1912-1954) 数学家成逻辑学家网密肯进分析家和理论生物学家，被誉为计算机科学和人工智能之父。</li>\n<li>图灵机</li>\n<li>图灵测试</li>\n<li>图灵完备</li>\n<li>可判定性</li>\n</ul>\n</li>\n<li><p>图灵机</p>\n<ul>\n<li><p>图灵机拥有一条无限长的纸带，纸带上是一个格子挨着一个格子，格子中可以写字符，你可以把纸带看作内存，而这些字符可以看作是内存中的数据或者程序。</p>\n</li>\n<li><p>图灵机有一个读写头，读写头可以读取任意格子上的字符，也可以改写任意格子的字符。</p>\n</li>\n<li><p>读写头上面的盒子里是一些精密的零件，包括图灵机的存储、控制单元和运算单元。</p>\n</li>\n<li><p>图灵通过数学证明了，一个问题如果可以拆解成图灵机的可执行步骤，那问题就是可计算的。</p>\n</li>\n<li><p>另一方面，图灵机定义了计算机的组成以及工作原理，但是没有给出具体的实现。</p>\n</li>\n</ul>\n</li>\n<li><p>冯诺依曼体系</p>\n<ul>\n<li><p>将程序指令和数据一起存储的计算机设计概念结构,现代计算机都是冯诺依曼机</p>\n</li>\n<li><p>能够长期记忆程序、数据、中间结果及最终运算结果的能力</p>\n</li>\n<li><p>能够把需要的程序和数据送至计算机中</p>\n</li>\n<li><p>能够具备算术、逻辑运算和数据传送等数据加工处理的能力</p>\n</li>\n<li><p>能够按照要求将处理结果输出给用户</p>\n</li>\n<li><p>冯诺依曼瓶颈：CPU和存储器速率之间的问题无法调和导致CPU经常空转等待数据传输</p>\n</li>\n</ul>\n</li>\n<li><p>冯诺依曼机组成结构</p>\n<ul>\n<li>输入设备<ul>\n<li>鼠标、键盘</li>\n</ul>\n</li>\n<li>输出设备<ul>\n<li>显示器</li>\n</ul>\n</li>\n<li>存储器<ul>\n<li>CPU、内存、硬盘</li>\n</ul>\n</li>\n<li>控制器<ul>\n<li>CPU</li>\n</ul>\n</li>\n<li>运算器<ul>\n<li>CPU</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-6-程序翻译与解释\"><a href=\"#1-6-程序翻译与解释\" class=\"headerlink\" title=\"1.6 程序翻译与解释\"></a>1.6 程序翻译与解释</h3><ul>\n<li><p>人类语言与计算机语言需要进行语言之间的转换</p>\n</li>\n<li><p>程序翻译</p>\n<ul>\n<li><p>L1是描述程序逻辑的高级语言</p>\n</li>\n<li><p>L0是计算机实际执行的低级语言</p>\n</li>\n<li><p>编译器：高级语言对应的编译器</p>\n</li>\n<li><p>程序翻译就是编译器将L1语言翻译并生成L0语言</p>\n</li>\n<li><p>翻译过程生成新的L0程序</p>\n</li>\n<li><p>通过编译器执行的相关语言</p>\n<ul>\n<li>C/C++</li>\n<li>Object-C</li>\n<li>Go</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>程序解释</p>\n<ul>\n<li><p>L1是描述程序逻辑的高级语言</p>\n</li>\n<li><p>L0是计算机实际执行的低级语言</p>\n</li>\n<li><p>解释器：使用L0语言实现的程序</p>\n</li>\n<li><p>程序解释的过程就是解释器将L1语言解释为L0语言</p>\n</li>\n<li><p>解释过程不生成新的L0程序</p>\n</li>\n<li><p>相关语言</p>\n<ul>\n<li>Python</li>\n<li>Php</li>\n<li>Javascript</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>混合型语言 </p>\n<ul>\n<li>Java （java程序翻译成字节码， 字节码解释成机器码）</li>\n<li>C#</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-7-计算机的层次\"><a href=\"#1-7-计算机的层次\" class=\"headerlink\" title=\"1.7 计算机的层次\"></a>1.7 计算机的层次</h3><ul>\n<li>硬件逻辑层<ul>\n<li>门、触发器等逻辑电路组成</li>\n<li>属于电子工程的领域</li>\n</ul>\n</li>\n<li>微程序机器层<ul>\n<li>编程语言是微指令集</li>\n<li>微指令所组成的微程序直接交由硬件执行</li>\n<li>一般是硬件厂商公司处理该层</li>\n</ul>\n</li>\n<li>传统机器层<ul>\n<li>编程语言是CPU指令集（机器指令）</li>\n<li>一条机器指令对应一个微程序，一个微程序对应一组微指令</li>\n<li>编程语言和硬件是直接相关</li>\n<li>不同架构的CPU使用不同的CPU指令集 （英特尔、AMD、x86/X86_64）</li>\n</ul>\n</li>\n<li>操作系统层<ul>\n<li>向上提供了简易的操作界面</li>\n<li>向下对接了指令系统，管理硬件资源</li>\n<li>操作系统层是在软件和硬件之间的适配层</li>\n</ul>\n</li>\n<li>汇编语言层<ul>\n<li>编程语言是汇编语言（PUSH DS/PUSH DS）</li>\n<li>汇编语言可以翻译成可直接执行的机器语言</li>\n<li>完成翻译的过程的程序就是汇编器</li>\n</ul>\n</li>\n<li>高级语言层<ul>\n<li>高级语言的类别非常多，由几百种</li>\n<li>常见的高级语言有： Python、 Java、 C/C++、 Golang等</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>满足计算机针对某种用途而专门设计</li>\n<li>WPS、IDE</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-8-计算机的计算单位\"><a href=\"#1-8-计算机的计算单位\" class=\"headerlink\" title=\"1.8 计算机的计算单位\"></a>1.8 计算机的计算单位</h3><ul>\n<li><p>容量单位</p>\n<ul>\n<li><p>在物理层面，高低电平记录信息</p>\n</li>\n<li><p>理论上只认识0/1两种状态，0/1称为bit（比特位）</p>\n</li>\n<li><p>0/1能够表示的内容太少了，需要更大的容量表示方法</p>\n</li>\n<li><p>更大的容量单位：字节、千字节、兆字节、吉字节、太字节、拍字节、艾字节</p>\n</li>\n<li><p>为什么网上买的移动硬盘500G，格式化之后就只剩465G了？</p>\n<ul>\n<li>硬盘商一般用10进位标记容量 𝟓𝟎𝟎 ∗ 𝟏𝟎𝟎𝟎^3/𝟏𝟎𝟐𝟒^3约等于𝟒𝟔𝟓</li>\n<li>厂商采用十进制更好沟通</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">容量单位</th>\n<th align=\"center\">bit</th>\n<th align=\"center\">Byte</th>\n<th align=\"center\">KB</th>\n<th align=\"center\">MB</th>\n<th align=\"center\">GB</th>\n<th align=\"center\">TB</th>\n<th align=\"center\">PB</th>\n<th align=\"center\">EB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">名字</td>\n<td align=\"center\">比特位</td>\n<td align=\"center\">字节</td>\n<td align=\"center\">千字节（kilobyte）</td>\n<td align=\"center\">兆字节=百万字节（megabyte）</td>\n<td align=\"center\">吉字节=十亿字节（GigaByte）</td>\n<td align=\"center\">太字节=万亿字节(terabyte)</td>\n<td align=\"center\">拍字节=千万亿字节（petabyte）</td>\n<td align=\"center\">艾字节=2^60字节（ExaByte）</td>\n</tr>\n<tr>\n<td align=\"center\">换算</td>\n<td align=\"center\">-</td>\n<td align=\"center\">8bits</td>\n<td align=\"center\">1024B</td>\n<td align=\"center\">1024K</td>\n<td align=\"center\">1024M</td>\n<td align=\"center\">1024G</td>\n<td align=\"center\">1024T</td>\n<td align=\"center\">1024P</td>\n</tr>\n<tr>\n<td align=\"center\">常见设备</td>\n<td align=\"center\">门电路</td>\n<td align=\"center\"></td>\n<td align=\"center\">寄存器</td>\n<td align=\"center\">高速缓存</td>\n<td align=\"center\">内存/硬盘</td>\n<td align=\"center\">硬盘</td>\n<td align=\"center\">云硬盘</td>\n<td align=\"center\">数据仓库</td>\n</tr>\n</tbody></table>\n<ul>\n<li>速度单位<ul>\n<li>网络速度<ul>\n<li>100M带宽=100M/s</li>\n<li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul>\n<li>网络常用单位为(Mbps) </li>\n<li>bps(bits per second):每秒传送位数 </li>\n<li>100M/s = 100Mbps = 100Mbit/s</li>\n<li>100Mbit/s=(100/8)MB/s=12.5MB/s</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>计算速度<ul>\n<li>CPU的速度一般体现为CPU的时钟频率</li>\n<li>CPU的时钟频率的单位一般是赫兹Hz（hertz）</li>\n<li>目前主流CPU的时钟频率都在2GHz以上</li>\n<li>Hz其实就是秒分之，并不只是描述计算机领域所专有的单位</li>\n<li>Hz它是每秒中的周期性变动重复次数的计量</li>\n<li>在CPU中就表示高低电瓶在每秒中变化的次数，2GHz = 2*1000^3Hz = 每秒20亿次</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-9-计算机的字符与编码集\"><a href=\"#1-9-计算机的字符与编码集\" class=\"headerlink\" title=\"1.9 计算机的字符与编码集\"></a>1.9 计算机的字符与编码集</h3><ul>\n<li><p>早期英美的ASCII码</p>\n<ul>\n<li><p>美国信息交换标准码（American Standard Code for Information Interchange）</p>\n</li>\n<li><p>使用7个bits就可以完全表示ASCII码</p>\n</li>\n<li><p>包含95个可打印字符，33个不可打印字符（包括控制字符）</p>\n</li>\n<li><p>很多应用或者国家中的符号都无法表示</p>\n</li>\n<li><p>无法表示数学符号：“÷ ≠ ≥ ≈ π”</p>\n</li>\n<li><p>𝟑𝟑 + 𝟗𝟓 = 𝟏𝟐𝟖 = 𝟐^7</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143402.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>Externed ASCII码</p>\n<ul>\n<li><p>第一次对ASCII码进行扩充， 7bits =&gt; 8bits</p>\n</li>\n<li><p>常见数学运算符</p>\n</li>\n<li><p>带音标的欧洲字符</p>\n</li>\n<li><p>其他常用符、表格符等</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143429.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>国际化</p>\n<ul>\n<li>欧洲、中亚、东亚、拉丁美洲国家的语言多样性</li>\n<li>语言体系不一样，不以有限字符组合的语言</li>\n<li>中国、韩国、日本等的语言最为复杂</li>\n<li>中文编码集<ul>\n<li>GB2312<ul>\n<li>《信息交换用汉字编码字符集——基本集》</li>\n<li>一共收录了 7445 个字符</li>\n<li>包括 6763 个汉字和 682 个其它符号</li>\n<li>不兼容国际标准</li>\n</ul>\n</li>\n<li>GBK<ul>\n<li>向下兼容GB2312，向上支持国际ISO标准</li>\n<li>《汉字内码扩展规范》</li>\n<li>收录了21003个汉字，支持全部中日韩汉字</li>\n<li>国际电脑不安装GBK编码就会显示乱码</li>\n<li>国内的Windows系统默认使用GBK编码</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Unicode<ul>\n<li>Unicode：统一码、万国码、单一码，兼容全球的字符集</li>\n<li>Unicode定义了世界通用的符号集， UTF-*实现了编码</li>\n<li>UTF-8以字节为单位对Unicode进行编码</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-组成篇\"><a href=\"#2-组成篇\" class=\"headerlink\" title=\"2.组成篇\"></a>2.组成篇</h2><h3 id=\"2-1-计算机的总线\"><a href=\"#2-1-计算机的总线\" class=\"headerlink\" title=\"2.1 计算机的总线\"></a>2.1 计算机的总线</h3><ul>\n<li><p>总线的概述</p>\n<ul>\n<li><p>USB = Universal Serial Bus ，通用串行总线</p>\n<ul>\n<li>提供了对外连接的接口</li>\n<li>不同设备可以通过USB接口进行连接</li>\n<li>连接的标准，促使外围设备接口的统一</li>\n</ul>\n</li>\n<li><p>总线的分类</p>\n<ul>\n<li>片内总线<ul>\n<li>芯片内部的总线</li>\n<li>寄存器与寄存器之间</li>\n<li>寄存器与控制器、运算器之间</li>\n</ul>\n</li>\n<li>系统总线<ul>\n<li>CPU、主内存、 IO设备、各组件之间的信息传输线</li>\n<li>数据总线<ul>\n<li>双向传输各个部件的数据信息</li>\n<li>一般与CPU位数相同（32位、 64位）</li>\n<li>数据总线的位数（总线宽度）是数据总线的重要参数，64位总线一次可传输8个字节的数据</li>\n</ul>\n</li>\n<li>地址总线<ul>\n<li>指定源数据或目的数据在内存中的地址</li>\n<li>地址总线位数=n，寻址范围： 0~𝟐^n</li>\n<li>地址总线的位数与存储单元有关</li>\n</ul>\n</li>\n<li>控制总线<ul>\n<li>控制总线是用来发出各种控制信号的传输线</li>\n<li>控制信号经由控制总线从一个组件发给另外一个组件</li>\n<li>控制总线可以监视不同组件之间的状态（就绪/未就绪）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>总线的仲裁</p>\n<ul>\n<li>为了解决总线使用权的冲突问题</li>\n<li>总线的仲裁的方法<ul>\n<li>链式查询-串联<ul>\n<li>所有设备都可想仲裁器发出使用权申请，仲裁器在分配使用权时是按照链式顺序逐个询问，轮到谁就是谁</li>\n<li>好处：电路复杂度低，仲裁方式简单</li>\n<li>坏处：优先级低的设备难以获得总线使用权</li>\n<li>坏处：优先级低的设备难以获得总线使用权</li>\n</ul>\n</li>\n<li>计时器定时查询-并联<ul>\n<li>仲裁控制器对设备编号并使用计数器累计计数</li>\n<li>接收到仲裁信号后，往所有设备同时发出计数值</li>\n<li>计数值与设备编号一致则获得总线使用权</li>\n</ul>\n</li>\n<li>独立请求-循环<ul>\n<li>每个设备均有总线独立连接仲裁器</li>\n<li>设备可单独向仲裁器发送请求和接收请求</li>\n<li>当同时收到多个请求信号，仲裁器有权按优先级分配使用权</li>\n<li>好处：响应速度快，优先顺序可动态改变</li>\n<li>好处：响应速度快，优先顺序可动态改变</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-计算机的输入输出设备\"><a href=\"#2-2-计算机的输入输出设备\" class=\"headerlink\" title=\"2.2 计算机的输入输出设备\"></a>2.2 计算机的输入输出设备</h3><ul>\n<li><p>常见输入输出设备</p>\n<ul>\n<li><p>输入设备</p>\n<ul>\n<li>字符输入设备<ul>\n<li>键盘：<ul>\n<li>薄膜键盘</li>\n<li>机械键盘（根据段落感、声音、压力、键程的不同分为：黑轴、红轴、青轴、茶轴）</li>\n<li>电容键盘</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>图像输入设备<ul>\n<li>鼠标</li>\n<li>数位板：常用于绘图设计创作，输入板和压感笔</li>\n<li>扫描仪：将图形信息转换为数字信号</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>输出设备</p>\n<ul>\n<li>显示器<ul>\n<li>CRT显示器</li>\n<li>液晶显示器</li>\n</ul>\n</li>\n<li>打印机</li>\n<li>投影仪</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>输入输出接口的通用设计</p>\n<ul>\n<li>通用设计考虑的问题：读取数据、向设备发送数据、设备有没有被占用？、设备是否已经启动？、设备是否已经连接？</li>\n<li>数据线<ul>\n<li>是I/O设备与主机之间进行数据交换的传送线</li>\n<li>单向传输数据线</li>\n<li>双向传输数据线</li>\n</ul>\n</li>\n<li>状态线<ul>\n<li>IO设备状态向主机报告的信号线</li>\n<li>查询设备是否已经正常连接并就绪</li>\n<li>查询设备是否已经被占用</li>\n</ul>\n</li>\n<li>命令线<ul>\n<li>CPU向设备发送命令的信号线</li>\n<li>发送读写信号</li>\n<li>发送启动停止信号</li>\n</ul>\n</li>\n<li>设备选择线<ul>\n<li>主机选择I/O设备进行操作的信号线</li>\n<li>对连在总线上的设备进行选择</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>CPU与IO设备的通信</p>\n<ul>\n<li><p>CPU速度与IO设备速度不一致</p>\n</li>\n<li><p>程序中断</p>\n<ul>\n<li><p>当外围IO设备就绪时，向CPU发出中断信号</p>\n</li>\n<li><p>CPU有专门的电路响应中断信号</p>\n</li>\n<li><p>中断的意义</p>\n<ul>\n<li>提供低速设备通知CPU的一种异步的方式</li>\n<li>CPU可以高速运转同时兼顾低速设备的响应</li>\n<li>提高工作效率(polling的问题) </li>\n<li>故障恢复(异常处理、紧急事件等)</li>\n<li>简化编程模型(try/cache, 计时器等)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>例如通过电脑打印资料的过程</p>\n<ul>\n<li><p>中断相应过程</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143825.jpg\" alt=\"\"></p>\n</li>\n<li><p>中断请求类型</p>\n<ul>\n<li>硬件设备发给主板(打印机、键盘、鼠标等)</li>\n<li>硬件中断: CPU异常(除以0), 时钟信号等</li>\n<li>软件中断:发出(异常、切换到内核态等)</li>\n</ul>\n</li>\n<li><p>中断向量表</p>\n<ul>\n<li><p>(一般在内存中) 一块块区域，存储了中断类型和中断响应程序的对应关系。每一行叫做一个中断向量。</p>\n<table>\n<thead>\n<tr>\n<th>中断类型</th>\n<th>ISR地址</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td>0x0000</td>\n<td>除以0</td>\n</tr>\n<tr>\n<td>01</td>\n<td>0x0004</td>\n<td>单步</td>\n</tr>\n<tr>\n<td>09</td>\n<td>0x0024</td>\n<td>键盘</td>\n</tr>\n<tr>\n<td>18</td>\n<td>0x0048</td>\n<td>打印机</td>\n</tr>\n<tr>\n<td>100</td>\n<td>0x0190</td>\n<td>自定义</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>中断QA</p>\n<ul>\n<li>32位机器上的中断响应路径(ISR) 只有4个字节，怎么实现复杂的程序?</li>\n<li>按键程序中断响应路径到操作系统再到应用， 但是到底哪些键被按了怎么知道?</li>\n<li>中断响应后，如何恢复到中断执行前的状态?</li>\n<li>既然出错了?为什么不出错了直接跳转到错误处理位置?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>DMA（direct memory access）直接存储器存取</p>\n<ul>\n<li>DMA直接连接主存与IO设备</li>\n<li>DMA直接连接主存与IO设备</li>\n<li>当主存与IO设备交换信息时，不需要中断CPU</li>\n<li>可以提高CPU的效率</li>\n<li>硬盘和外置显卡中都有DMA设备</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-3-计算机存储器\"><a href=\"#2-3-计算机存储器\" class=\"headerlink\" title=\"2.3 计算机存储器\"></a>2.3 计算机存储器</h3><ul>\n<li><p>存储器的分类</p>\n<ul>\n<li>按存储介质分类<ul>\n<li>半导体存储器 ：内存条、 U盘、 固态硬盘</li>\n<li>磁存储器：磁带、磁盘</li>\n</ul>\n</li>\n<li>按存取方式分类<ul>\n<li>随机存储器(RAM)： 随机读取 与位置无关</li>\n<li>串行存储器 ：与位置有关 按顺序查找</li>\n<li>只读存储器(ROM）：只读不写</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>存储器指标</p>\n<ul>\n<li>读写速度：7200转</li>\n<li>存储容量：2T</li>\n<li>价格：容量+价格=&gt;位价：每比特位价格</li>\n</ul>\n</li>\n<li><p>层次结构</p>\n<ul>\n<li>高速缓存：速度快，位格高</li>\n<li>主存：速度适中，位格适中</li>\n<li>辅存：速度慢，位格低</li>\n<li>缓存-主存层次<ul>\n<li>原理：局部性原理</li>\n<li>实现：在CPU与主存之间增加一层速度快（容量小）的Cache</li>\n<li>目的：解决主存速度不足的问题</li>\n</ul>\n</li>\n<li>主存-辅存层次<ul>\n<li>原理：局部性原理</li>\n<li>实现：主存之外增加辅助存储器（磁盘、 SD卡、 U盘等）</li>\n<li>目的：解决主存容量不足的问题</li>\n</ul>\n</li>\n<li>局部性原理<ul>\n<li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-主存储器与辅助存储器\"><a href=\"#2-4-主存储器与辅助存储器\" class=\"headerlink\" title=\"2.4 主存储器与辅助存储器\"></a>2.4 主存储器与辅助存储器</h3><ul>\n<li><p>计算机断电，内存数据丢失</p>\n</li>\n<li><p>计算机断电，磁盘数据不会丢失</p>\n</li>\n<li><p>主存</p>\n<ul>\n<li>RAM（随机存取存储器： Random Access Memory）</li>\n<li>RAM 通过电容存储数据，必须隔一段时间刷新一次</li>\n<li>如果掉电，那么一段时间后将丢失所有数据</li>\n<li>内存与CPU如何交互的</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801143858.jpg\" alt=\"\"></p>\n<ul>\n<li>32位系统：2^32 = 4 × 2^30 = 4𝐺𝐵 </li>\n<li>64位系统：2^64 = 2^34 × 2^30 = 2^34𝐺𝐵=2^24T𝐵=2^14EB=2^4EB</li>\n<li>32位的系统最大支持4GB的内存寻址范围，每一个字节都对应一个内存地址。内存地址由 0 开始编号，比如第 1 个地址是 0，第 2 个地址是 1， 然后自增排列，最后一个地址是内存中的字节数减 1。</li>\n<li>工作原理<ul>\n<li>字：是指存放在一个存储单元中的二进制代码组合</li>\n<li>字块：存储在连续的存储单元中而被看作是一个单元的一组字</li>\n<li>假设一个字有32位，一个字块共B个字，主存共M个字块<ul>\n<li>B×M = 主存总字数；B×M×32 = 主存总容量(bits)</li>\n</ul>\n</li>\n<li>字的地址包含两个部分，前m位指定字块的地址，后b位指定字在字块中的地址<ul>\n<li>2^𝑚 = 𝑀 , 前m位能表示出的寻址范围是0–2^𝑚</li>\n<li>2^𝒃 = 𝐵，后b位能表示出的寻址范围是0–2^b</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>辅存：磁盘</p>\n<ul>\n<li><p>表面是可磁化的硬磁特性材料</p>\n</li>\n<li><p>移动磁头径向运动读取磁道信息</p>\n</li>\n<li><p>磁道、扇区、磁头位置、磁头方向</p>\n</li>\n<li><p>寻道调度算法</p>\n<ul>\n<li>先来先服务算法<ul>\n<li>按顺序访问进程的磁道读写需求</li>\n</ul>\n</li>\n<li>最短寻道时间优先<ul>\n<li>与磁头当前位置有关</li>\n<li>优先访问离磁头最近的磁道</li>\n</ul>\n</li>\n<li>扫描算法（电梯算法）<ul>\n<li>每次只往一个方向移动</li>\n<li>到达一个方向需要服务的尽头再反方向移动</li>\n</ul>\n</li>\n<li>循环扫描算法<ul>\n<li>每次只往一个方向移动</li>\n<li>一个方向到头后再从头开始从同一个方向开始移动</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-5-高速缓存\"><a href=\"#2-5-高速缓存\" class=\"headerlink\" title=\"2.5 高速缓存\"></a>2.5 高速缓存</h3><ul>\n<li><p>为了解决CPU与主存的速度不匹配的问题</p>\n</li>\n<li><p>缓存与主存的关系</p>\n<ul>\n<li>存储的逻辑结构类似</li>\n<li>缓存的容量较小</li>\n<li>缓存的速度更快</li>\n</ul>\n</li>\n<li><p>在主存缓存层次结构中的工作原理</p>\n<ul>\n<li>CPU需要的数据在缓存里：直接获取</li>\n<li>CPU需要的数据不在缓存里：需要去主存拿，替换策略<ul>\n<li>需要性能良好的缓存替换策略</li>\n</ul>\n</li>\n<li>命中率：从缓存取数据的命中率<ul>\n<li>命中率是衡量缓存的重要性能指标</li>\n<li>理论上CPU每次都能从高速缓存取数据的时候，命中率为1</li>\n<li>访问主存次数： N𝑚，访问Cache次数： N𝑐</li>\n<li>命中率ℎ =𝑁𝑐/(𝑁𝑐＋𝑁𝑚)</li>\n</ul>\n</li>\n<li>访问效率： 𝑒<ul>\n<li>访问主存时间： 𝑡𝑚 ，访问缓存时间：𝑡𝑐</li>\n<li>访问Cache-主存系统平均时间： 𝑡𝑎 = ℎ×𝑡𝑐 + (1 − ℎ)×𝑡𝑚</li>\n<li>𝑒 =𝑡𝑐/𝑡𝑎</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高速缓存替换策略</p>\n<ul>\n<li>随机算法</li>\n<li>先进先出算法(FIFO)<ul>\n<li>把高速缓存看做是一个先进先出的队列</li>\n<li>优先替换最先进入队列的字块</li>\n</ul>\n</li>\n<li>最不经常使用算法(LFU)<ul>\n<li>优先淘汰最不经常使用的字块</li>\n<li>需要额外的空间记录字块的使用频率</li>\n</ul>\n</li>\n<li>最近最少使用算法(LRU)<ul>\n<li>优先淘汰一段时间内没有使用的字块</li>\n<li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li>\n<li>有多种实现方法，一般使用双向链表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-6-计算机的指令系统\"><a href=\"#2-6-计算机的指令系统\" class=\"headerlink\" title=\"2.6 计算机的指令系统\"></a>2.6 计算机的指令系统</h3><ul>\n<li><p>计算机指令</p>\n<ul>\n<li>计算机通过指令指挥计算机工作。</li>\n<li>CPU被时钟驱动，不断的读取PC指针指向的指令，并增加PC指针，从内存中读取指令并执行。(如此周而复始)</li>\n<li>不同的CPU架构使用不同指令。目前使用最广泛的是RISC(Reduced instruction set computer,精简指令集)</li>\n</ul>\n</li>\n<li><p>机器指令的形式</p>\n<ul>\n<li>机器指令主要由两部分组成：操作码、地址码</li>\n<li>操作码指明指令所要完成的操作</li>\n<li>操作码的位数反映了机器的操作种类，如果操作码有8位就有2^8 = 256种操作</li>\n<li>地址码直接给出操作数或者操作数的地址</li>\n<li>分三地址指令、二地址指令和一地址指令与零地址指令<ul>\n<li>零地址指令<ul>\n<li>在机器指令中无地址码</li>\n<li>空操作、停机操作、中断返回操作等</li>\n</ul>\n</li>\n<li>一地址指令<ul>\n<li>(addr1)OP→ (addr1)：自己对自己的操作</li>\n<li>(addr1)OP(ACC) → (addr1)：自增操作</li>\n</ul>\n</li>\n<li>二地址指令<ul>\n<li>(addr1)OP(addr2) → (addr1)或(addr2)： 结果放在addr1或addr2)</li>\n</ul>\n</li>\n<li>三地址指令<ul>\n<li>一个操作码和三个地址码</li>\n<li>(addr1)OP(addr2) → (addr3)：结果放在addr3， 例如： 1+2=3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作类型</p>\n<ul>\n<li>数据传输<ul>\n<li>寄存器之间、寄存器与存储单元、存储单元之间传送</li>\n<li>数据读写、交换地址数据、清零置一等操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>load/store指令用来从内存中读/写入内存。通常会有多个版本的实现，助记符是:</p>\n<pre><code>- load类: Iw,Ib,Ih\n- store类: sw,sb,sh</code></pre><ul>\n<li>算术逻辑<ul>\n<li>操作数之间的加减乘除运算<ul>\n<li>加减乘除等：addi, subi, divi, multi</li>\n</ul>\n</li>\n<li>操作数的与或非等逻辑位运算<ul>\n<li>位运算指令：and/or/xor</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>移位操作</p>\n<ul>\n<li>数据左移（乘2）、数据右移（除2）</li>\n<li>完成数据在算术逻辑单元的必要操作</li>\n<li>控制指令<ul>\n<li>等待指令、停机指令、空操作指令、中断指令等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>寻址方式</p>\n<ul>\n<li><p>指令寻址</p>\n<ul>\n<li><p>顺序寻址</p>\n</li>\n<li><p>跳跃寻址</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">地址</th>\n<th align=\"center\">指令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">101</td>\n<td align=\"center\">MOV R0,R1</td>\n</tr>\n<tr>\n<td align=\"center\">102</td>\n<td align=\"center\">ADD R1,R2</td>\n</tr>\n<tr>\n<td align=\"center\">103</td>\n<td align=\"center\">JMP 102</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>数据寻址</p>\n<ul>\n<li>立即寻址<ul>\n<li>指令直接获得操作数</li>\n<li>无需访问存储器</li>\n<li>优点：速度快</li>\n<li>缺点：地址码位数限制操作数表示范围</li>\n</ul>\n</li>\n<li>直接寻址<ul>\n<li>直接给出操作数在主存的地址</li>\n<li>寻找操作数简单，无需计算数据地址</li>\n<li>优点：寻找操作数简单</li>\n<li>缺点：地址码位数限制操作数表示范围</li>\n</ul>\n</li>\n<li>间接寻址<ul>\n<li>指令地址码给出的是操作数地址的地址</li>\n<li>需要访问一次或多次主存来获取操作数</li>\n<li>优点：操作数寻址范围大</li>\n<li>缺点：速度较慢</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-7-计算机的控制器\"><a href=\"#2-7-计算机的控制器\" class=\"headerlink\" title=\"2.7 计算机的控制器\"></a>2.7 计算机的控制器</h3><ul>\n<li>控制器是协调和控制计算机运行的</li>\n<li>程序计数器<ul>\n<li>程序计数器用来存储下一条指令的地址</li>\n<li>循环从程序计数器中拿出指令</li>\n<li>当指令被拿出时，指向下一条指令</li>\n</ul>\n</li>\n<li>时序发生器<ul>\n<li>电气工程领域，用于发送时序脉冲</li>\n<li>CPU依据不同的时序脉冲有节奏的进行工作</li>\n</ul>\n</li>\n<li>指令译码器<ul>\n<li>指令译码器是控制器的主要部件之一</li>\n<li>计算机指令由操作码和地址码组成</li>\n<li>翻译操作码对应的操作以及控制传输地址码对应的数据</li>\n</ul>\n</li>\n<li>指令寄存器<ul>\n<li>指令寄存器也是控制器的主要部件之一</li>\n<li>从主存或高速缓存取计算机指令</li>\n</ul>\n</li>\n<li>主存地址寄存器<ul>\n<li>保存当前CPU正要访问的内存单元的地址</li>\n</ul>\n</li>\n<li>主存数据寄存器<ul>\n<li>保存当前CPU正要读或写的主存数据</li>\n</ul>\n</li>\n<li>通用寄存器<ul>\n<li>用于暂时存放或传送数据或指令</li>\n<li>可保存ALU的运算中间结果</li>\n<li>容量比一般专用寄存器要大</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-8-计算机的运算器\"><a href=\"#2-8-计算机的运算器\" class=\"headerlink\" title=\"2.8 计算机的运算器\"></a>2.8 计算机的运算器</h3><ul>\n<li><p>运算器是用来进行数据运算加工的</p>\n</li>\n<li><p>数据缓冲器</p>\n<ul>\n<li>分为输入缓冲和输出缓冲</li>\n<li>输入缓冲暂时存放外设送过来的数据</li>\n<li>输出缓冲暂时存放送往外设的数据</li>\n</ul>\n</li>\n<li><p>ALU</p>\n<ul>\n<li>ALU：算术逻辑单元，是运算器的主要组成</li>\n<li>常见的位运算（左右移、与或非等）</li>\n<li>算术运算（加减乘除等）</li>\n</ul>\n</li>\n<li><p>通用寄存器</p>\n<ul>\n<li>用于暂时存放或传送数据或指令</li>\n<li>可保存ALU的运算中间结果</li>\n<li>容量比一般专用寄存器要大</li>\n</ul>\n</li>\n<li><p>状态字寄存器</p>\n<ul>\n<li>存放运算状态（条件码、进位、溢出、结果正负等）</li>\n<li>存放运算控制信息（调试跟踪标记位、允许中断位等）</li>\n</ul>\n</li>\n<li><p>总线</p>\n</li>\n</ul>\n<h3 id=\"2-9-计算机指令的执行过程\"><a href=\"#2-9-计算机指令的执行过程\" class=\"headerlink\" title=\"2.9 计算机指令的执行过程\"></a>2.9 计算机指令的执行过程</h3><ul>\n<li><p>指令执行过程</p>\n<ul>\n<li>取指令 <ul>\n<li>从缓存取指令</li>\n<li>送到指令寄存器</li>\n</ul>\n</li>\n<li>分析指令<ul>\n<li>指令译码器译码</li>\n<li>发出控制信号</li>\n<li>程序计数器+1</li>\n</ul>\n</li>\n<li>执行指令<ul>\n<li>装载数据到寄存器</li>\n<li>ALU处理数据</li>\n<li>记录运算状态</li>\n<li>送出运算结果</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144002.jpg\" alt=\"\"></p>\n</li>\n<li><p>CPU的流水线设计</p>\n<ul>\n<li>提高CPU的综合利用率</li>\n<li>类似工厂的装配线</li>\n<li>工厂的装配线使得多个产品可以同时被加工</li>\n<li>在同一个时刻，不同产品均位于不同的加工阶段</li>\n<li>串行执行m条指令： 𝑇1 = 3t × 𝑚</li>\n<li>流水线执行m条指令： 𝑇2 = 𝑡 × (𝑚 + 2)</li>\n<li>流水线执行效率:H=𝑇2/𝑇1= 𝑡 × (𝑚 + 2)/3t × 𝑚=1/3+1/3m, m很大的情况下是串行执行的3倍效率</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>时间片</th>\n<th>时间片</th>\n<th>时间片</th>\n<th>时间片</th>\n<th>时间片</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>取指令</td>\n<td>分析指令</td>\n<td>执行指令</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>2</td>\n<td></td>\n<td>取指令</td>\n<td>分析指令</td>\n<td>执行指令</td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td></td>\n<td></td>\n<td>取指令</td>\n<td>分析指令</td>\n<td>执行指令</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"3-计算篇\"><a href=\"#3-计算篇\" class=\"headerlink\" title=\"3.计算篇\"></a>3.计算篇</h2><h3 id=\"3-1-进制运算的基础\"><a href=\"#3-1-进制运算的基础\" class=\"headerlink\" title=\"3.1 进制运算的基础\"></a>3.1 进制运算的基础</h3><ul>\n<li>什么是进制<ul>\n<li>进位制是一种记数方式，亦称进位计数法或位值计数法</li>\n<li>有限种数字符号来表示无限的数值</li>\n<li>使用的数字符号的数目称为这种进位制的基数或底数</li>\n<li>计算机喜欢二进制，但是二进制表达太长了</li>\n<li>使用大进制位可以解决这个问题</li>\n<li>八进制、十六进制满足2的n次方的要求</li>\n<li>二进制<ul>\n<li>1024=0b1000000000 </li>\n</ul>\n</li>\n<li>八进制<ul>\n<li>1024=0o2000</li>\n</ul>\n</li>\n<li>十进制： [0-9] </li>\n<li>十六进制<ul>\n<li>MAC地址：[0-9]和A、 B、 C、 D、 E、 F</li>\n<li>1024=0x400</li>\n</ul>\n</li>\n<li>二十进制<ul>\n<li>玛雅文明的玛雅数字</li>\n<li>因努伊特的因努伊特数字</li>\n</ul>\n</li>\n<li>六十进制<ul>\n<li>时间、坐标、角度等量化数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>进制的表示法<ul>\n<li>正整数N，基数为r，位数为n</li>\n<li>N=𝑑𝑛−1×r𝑛−1 +𝑑𝑛−2× r𝑛−2 + ⋯ + 𝑑1×𝑟 + 𝑑0</li>\n<li>N= 1024  = 1 ×10^3 +0×10^3+ 2 × 10^1 + 4× 10^0</li>\n<li>𝑁 = 10000000000  = 1 × 2^10</li>\n</ul>\n</li>\n<li>二进制转十进制的方法<ul>\n<li>按权展开法</li>\n<li>𝑁 = 01100101 = 1 × 2^6 + 1 × 2^5 + 1 ×2^2 + 1 = 101</li>\n<li>小数的按权展开法</li>\n<li>𝑁 = 0.11001 = 1×2^−1 + 1×2^−2 + 1× 2^−5 = 0.78125=25/32</li>\n</ul>\n</li>\n<li>十进制转二进制的方法<ul>\n<li>（整数）重复相除法</li>\n<li>重复除以2 ，得商， 取余数，最后一个余数为最高位</li>\n<li>（小数）重复相乘法</li>\n<li>重复乘以2， 得积 ，取1，第一个余数为最高位</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-原码-amp-反码-amp-补码\"><a href=\"#3-2-原码-amp-反码-amp-补码\" class=\"headerlink\" title=\"3.2 原码&amp;反码&amp;补码\"></a>3.2 原码&amp;反码&amp;补码</h3><ul>\n<li><p>使用0表示正数，使用1表示负数，最高位表示符号位，其它都是数字位</p>\n</li>\n<li><p>+237=011101101， -237=111101101</p>\n</li>\n<li><p>两个字节16位表示+237 【0】 0 0 0 0 0 0 0 1 1 1 0 1 1 0 1</p>\n</li>\n<li><p>原码表示法</p>\n<ul>\n<li>使用0表示正数、 1表示负数</li>\n<li>规定符号位位于数值第一位</li>\n<li>表达简单明了，是人类最容易理解的表示法</li>\n<li>0有两种表示方法： 00、 10</li>\n<li>原码进行运算非常复杂，特别是两个操作数符号不同的时候<ul>\n<li>判断两个操作数绝对值大小</li>\n<li>使用绝对值大的数减去绝对值小的数</li>\n<li>对于符号值，以绝对值大的为准</li>\n</ul>\n</li>\n<li>希望找到不同符号操作数更加简单的运算方法</li>\n<li>希望找到使用正数代替负数的方法</li>\n<li>使用加法操作代替减法操作，从而消除减法</li>\n</ul>\n</li>\n<li><p>补码表示法</p>\n<ul>\n<li>整数的补码<ul>\n<li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li>\n<li>如果 x∈[−2^𝑛, 0) X=2^(𝑛+1) + 𝑥<ul>\n<li>例如：n=4， x=13，计算x的二进制原码和补码<ul>\n<li>原码： x=0,1101</li>\n<li>补码： x=0,1101</li>\n</ul>\n</li>\n<li>例如：n=4，x=-13，计算x的二进制原码和补码<ul>\n<li>原码： x=1,1101</li>\n<li>补码： 2^(𝑛+1) + 𝑥= 2^(4+1() − 13 = 100000 − 1101 = 10011</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>小数的补码<ul>\n<li>如果 x∈[0, 1) X=x  </li>\n<li>如果 x∈[−1, 0) X=2+x</li>\n<li>规律：小数的反码等于原码除符号位外按位取反，补码等于反码+1</li>\n</ul>\n</li>\n<li>在计算补码的过程中，还是使用了减法</li>\n<li>需要寻找使用正数代替负数的方法</li>\n</ul>\n</li>\n<li><p>反码表示法</p>\n<ul>\n<li>反码的目的是找出原码和补码之间的规律，消除转换过程中的减法</li>\n<li>如果 x∈[0, 2^𝑛) X=x  ，n是数字位的个数</li>\n<li>如果 x∈[−2^𝑛, 0) X=（2^(𝑛+1)-1） + 𝑥</li>\n<li>规律：负数的反码等于原码除符号位外按位取反，负数的补码等于反码+1<ul>\n<li>-13， 原码：1,1101 ，反码：1,0011 ，补码：1,0010</li>\n<li>-7， 原码： 1,0111，反码： 1,1001，补码： 1,1000</li>\n<li>-1， 原码： 1,0001 ，反码：1,1111，补码： 1,1110</li>\n</ul>\n</li>\n<li>x=-13，计算x的二进制原码和反码<ul>\n<li>原码： x=1,1101</li>\n<li>反码： (2𝑛+1−1) + 𝑥 = (2^4+1−1) − 13 = 011111 − 1101 = 1,0010</li>\n<li>反码： x=1,0010</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>  <img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144040.jpg\" alt=\"\"></p>\n<h3 id=\"3-3-定点数与浮点数\"><a href=\"#3-3-定点数与浮点数\" class=\"headerlink\" title=\"3.3 定点数与浮点数\"></a>3.3 定点数与浮点数</h3><ul>\n<li><p>定点数的表示方法</p>\n<ul>\n<li>小数点固定在某个位置的数称之为定点数</li>\n<li>纯小数 ：符号位【小数点】数值位</li>\n<li>纯整数：符号位 数值位 【小数点】</li>\n<li>其它小数需要乘以比例因子以满足定点数保存格式，10.01 需要左移两位或者右移两位</li>\n<li>计算机中的存储形式见下表，小数点不显示</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数值</th>\n<th align=\"center\">符号位</th>\n<th align=\"center\">数值位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">0.1011</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1011</td>\n</tr>\n<tr>\n<td align=\"left\">-0.1011</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1011</td>\n</tr>\n<tr>\n<td align=\"left\">1011</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1011</td>\n</tr>\n<tr>\n<td align=\"left\">-1011</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1011</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>浮点数的表示方法</p>\n<ul>\n<li><p>计算机处理的很大程度上不是纯小数或纯整数</p>\n</li>\n<li><p>数据范围很大，定点数难以表达</p>\n</li>\n<li><p>浮点数的表示格式</p>\n<ul>\n<li>类比科学计数法：123450000000 = 1.2345 × 10^11 ， 1.2345：尾数 ，10：基数 ，11：阶码</li>\n<li>𝑁 = 𝑆 × 𝑟^𝑗 ，S：尾数， r：基数， j：阶码</li>\n<li>阶码符号位|阶码数值位|尾数符号位|尾数数值位</li>\n<li>尾数规定使用纯小数</li>\n<li>11.0101 = 0.110101 × 2^10</li>\n<li>11.0101 = 0.0110101 × 2^11</li>\n<li>计算机中的存储形式见下表，小数点不显示</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.110101 × 2^10</td>\n<td>0</td>\n<td>10</td>\n<td>0</td>\n<td>1010100</td>\n</tr>\n<tr>\n<td>0.0110101 × 2^11</td>\n<td>0</td>\n<td>11</td>\n<td>0</td>\n<td>01101010</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>浮点数的表示范围</p>\n<ul>\n<li>假设阶码数值取m位，尾数数值取n位</li>\n<li>阶码表示范围： [−(𝟐^𝒎 − 𝟏),  𝟐^𝒎 − 𝟏]</li>\n<li>尾数表示范围： [−(𝟏 − 𝟐^−𝒏), −(𝟐^−𝒏)] [𝟐^−𝒏,  𝟏 − 𝟐−^𝒏]</li>\n<li>单精度浮点数：使用4字节、 32位来表达浮点数(float)</li>\n<li>双精度浮点数：使用8字节、 64位来表达浮点数(double)</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144101.jpg\" alt=\"\"></p>\n</li>\n<li><p>浮点数的规格化</p>\n<ul>\n<li>尾数规定使用纯小数</li>\n<li>尾数最高位必须是1</li>\n<li>例如：11.0101 = 0.110101 × 2^10</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p>两者的对比</p>\n<ul>\n<li>当定点数与浮点数位数相同时， 浮点数表示的范围更大</li>\n<li>当浮点数尾数为规格化数时， 浮点数的精度更高（尾数存8位，前面的0多了丢失的精度就更多）</li>\n<li>浮点数运算包含阶码和尾数， 浮点数的运算更为复杂</li>\n<li>浮点数在数的表示范围、精度、溢出处理、编程等方面均优于定点数</li>\n<li>浮点数在数的运算规则、运算速度、硬件成本方面不如定点数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-4-定点数的加减法运算\"><a href=\"#3-4-定点数的加减法运算\" class=\"headerlink\" title=\"3.4 定点数的加减法运算\"></a>3.4 定点数的加减法运算</h3><ul>\n<li><p>整数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2^(𝑛+1))</p>\n</li>\n<li><p>小数加法：A 补 + B 补 = 𝐴 + 𝐵 补 (𝑚𝑜𝑑2)</p>\n</li>\n<li><p>数值位与符号位一同运算，并将符号位产生的进位自然丢掉</p>\n</li>\n<li><p>整数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补  (𝑚𝑜𝑑2^(𝑛+1))</p>\n</li>\n<li><p>小数减法：A 补 − B 补 = 𝐴 + (−𝐵) 补 (𝑚𝑜𝑑2)</p>\n</li>\n<li><p>-B[补]等于B[补]连同符号位按位取反，末位加一，B 补 = 1,0010101， (−B) 补 = 0,1101011</p>\n</li>\n<li><p>负数的反码等于原码按位取反，补码等于反码+1</p>\n</li>\n<li><p>例如： A=-110010， B=001101，求A+B</p>\n<ul>\n<li>A[补] = 1,001110</li>\n<li>B 补 = B[原] = 0,001101</li>\n<li>A 补 + B 补 = (A + B) 补 =1,011011</li>\n<li>(A + B)原 = −100101</li>\n</ul>\n</li>\n<li><p>例如：A=11001000， B=-00110100，求A-B</p>\n<ul>\n<li>A 补 = A[原] = 0,11001000</li>\n<li>B 补 = 1,11001100</li>\n<li>(−B) 补 = 0,00110100</li>\n<li>A 补 − B 补 = A + (−B) 补=0,11111100</li>\n<li>A − B（原） = 111111100</li>\n</ul>\n</li>\n<li><p>双符号位判断溢出</p>\n<ul>\n<li>双符号位判断法<ul>\n<li>单符号位表示变成双符号位： 0=&gt;00,1=&gt;11</li>\n<li>双符号位产生的进位丢弃</li>\n<li>结果的双符号位不同则表示溢出</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-5-浮点数的加减法运算\"><a href=\"#3-5-浮点数的加减法运算\" class=\"headerlink\" title=\"3.5 浮点数的加减法运算\"></a>3.5 浮点数的加减法运算</h3><ul>\n<li><p>𝑥 = 𝑆𝑥 × 𝑟^𝑗𝑥，𝑥 = 0.1101 × 2^01</p>\n</li>\n<li><p>𝑦 = 𝑆𝑦 × 𝑟^𝑗y，𝑦 = (−0.1010) × 2^11</p>\n</li>\n<li><p>対阶</p>\n<ul>\n<li>対阶的目的是使得两个浮点数阶码一致，使得尾数可以进行运算</li>\n<li>浮点数尾数运算简单</li>\n<li>浮点数位数实际小数位与阶码有关</li>\n<li>阶码按小阶看齐大阶的原则</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.1101 × 2^01</td>\n<td>00</td>\n<td>0001</td>\n<td>00</td>\n<td>1101</td>\n</tr>\n<tr>\n<td>(−0.1010) × 2^11</td>\n<td>00</td>\n<td>0011</td>\n<td>01</td>\n<td>1010</td>\n</tr>\n</tbody></table>\n<ul>\n<li>対阶操作：将x的数值右移两位，𝑥 = 0.001101 × 2^11</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0.001101 × 2^11</td>\n<td>00</td>\n<td><strong>0011</strong></td>\n<td>00</td>\n<td>0011(01)舍弃后两位</td>\n</tr>\n<tr>\n<td>(−0.1010) × 2^11</td>\n<td>00</td>\n<td>0011</td>\n<td>01</td>\n<td>1010</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>尾数求和</p>\n<ul>\n<li>使用补码进行运算</li>\n<li>减法运算转化为加法运算： A - B = A + (-B)</li>\n<li>𝑥[原] = 00.0011，𝑥[补] = 00.0011</li>\n<li>𝑦[原] = 11.1010，𝑦[补] = 11.0110</li>\n<li>S = (𝑥 + 𝑦)[补] = 11.1001</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>11.1001</td>\n<td>00</td>\n<td><strong>0011</strong></td>\n<td>11</td>\n<td>1001</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>尾数规格化</p>\n<ul>\n<li>◆ 对补码进行规格化需要判断两种情况： S&gt;0和S&lt;0</li>\n<li>S[补] = 00.1xxxxxx(𝑆 &gt; 0)</li>\n<li>S[补] = 11.0xxxxxx(𝑆 &lt; 0)</li>\n<li>如果不满足此格式，需要进行左移， 同时阶码相应变化，以满足规格化</li>\n<li>S = (𝑥 + 𝑦)[补] = 11.1001，不满足约定格式</li>\n<li>S = (𝑥 + 𝑦)[补] = 11. (1)0010(左移舍弃，阶码数值位也要相应变化)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数字</th>\n<th>阶码符号位</th>\n<th>阶码数值位</th>\n<th>尾数符号位</th>\n<th>尾数数值位（8位）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>11.0010</td>\n<td>00</td>\n<td>0010</td>\n<td>11</td>\n<td>0010</td>\n</tr>\n</tbody></table>\n<ul>\n<li>S = 𝑥 + 𝑦 补 = 11.0010，𝑥 + 𝑦 原 = −0.1110</li>\n<li>𝑥 + 𝑦 = −0.1110× 2^10</li>\n<li>一般情况下都是左移，符号位不一致下需要右移(定点运算的溢出情况)</li>\n<li>右移的话则需要进行舍入操作</li>\n</ul>\n</li>\n<li><p>舍入</p>\n<ul>\n<li>0舍1入” 法（二进制的四舍五入）</li>\n<li>S 补 = 10.10110111，符号位不一致，右移舍弃尾数再+1， S 补 = 11.01011011(1)+1=11.01011100</li>\n<li>右移阶码要+1</li>\n</ul>\n</li>\n<li><p>溢出判断</p>\n<ul>\n<li>定点运算双符号位不一致为溢出</li>\n<li>浮点运算尾数双符号位不一致不算溢出，因为尾数双符号位可以进行右规</li>\n<li>浮点运算主要通过阶码的双符号位判断是否溢出</li>\n<li>如果规格化后，阶码双符号位不一致，则认为是溢出</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801144134.jpg\" alt=\"\"></p>\n<h3 id=\"3-6-浮点数的乘除法运算\"><a href=\"#3-6-浮点数的乘除法运算\" class=\"headerlink\" title=\"3.6 浮点数的乘除法运算\"></a>3.6 浮点数的乘除法运算</h3><ul>\n<li><p>乘法：阶码相加，尾数求积</p>\n</li>\n<li><p>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) × 𝑟^(𝑗𝑥+𝑗y)</p>\n</li>\n<li><p>除法：阶码相减，尾数求商</p>\n</li>\n<li><p>𝑥/𝑦 = (𝑆𝑥/𝑆𝑦) × 𝑟^(𝑗𝑥−𝑗y)</p>\n</li>\n<li><p>阶码运算</p>\n</li>\n<li><p>尾数运算</p>\n</li>\n<li><p>尾数规格化</p>\n</li>\n<li><p>舍入</p>\n</li>\n<li><p>溢出判断</p>\n</li>\n<li><p>例如： 𝑥 = 0.11010011 × 2^1101， 𝑦 = 0.11101110 × 2^0001，假设阶码4位，尾数8位，计算x * y</p>\n<ul>\n<li>𝑥 × 𝑦 = (𝑆𝑥 × 𝑆𝑦) ×^𝑟(𝑗𝑥+𝑗y)</li>\n<li>= (0.11010011 × 0.11101110) × 𝑟^(1101+0001)</li>\n<li>= 0.11000100(保留八位) × 𝑟^1110</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-关于我\"><a href=\"#4-关于我\" class=\"headerlink\" title=\"4.关于我\"></a>4.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p>\n<p><a href=\"http://basedev.cn/\" target=\"_blank\" rel=\"noopener\">个人网站 basedev.cn</a>  </p>\n<p><a href=\"https://github.com/jaydroid1024\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践。</p>\n<h2 id=\"5-参考\"><a href=\"#5-参考\" class=\"headerlink\" title=\"5.参考\"></a>5.参考</h2><ul>\n<li><p><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content\" target=\"_blank\" rel=\"noopener\">重学操作系统 | 拉钩教育</a></p>\n</li>\n<li><p><a href=\"https://coding.imooc.com/class/package/355.html\" target=\"_blank\" rel=\"noopener\">编程必备基础 | 慕课网</a></p>\n</li>\n</ul>\n"},{"title":"筑基系列-操作系统基础知识小抄版","date":"2021-07-01T06:16:55.000Z","cover":true,"summary":"操作系统基础理论提纲挈领，包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# 筑基系列-操作系统基础知识小抄版\n\n\n\n> 计算机基础知识筑基三部曲：\n>\n> - **[第一部：筑基系列-计算机基础知识小抄版](https://juejin.cn/post/6991367806772052004)**\n>   - 包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n>\n> - **[第二部：筑基系列-操作系统基础知识小抄版](https://juejin.cn/post/6991385109509193764)**\n>   - 包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n> - **[第三部：筑基系列-计算机网络基础知识小抄版](https://juejin.cn/post/6991397445251334151)**\n>   - 包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n## 目录\n\n- [1.操作系统概览](#1.操作系统概览)\n  - [1.1 什么是操作系统](#11-什么是操作系统)\n  - [1.2 为什么需要操作系统](#12-为什么需要操作系统)\n  - [1.3 操作系统的基本功能](#13-操作系统的基本功能)\n  - [1.4 操作系统相关概念](#14-操作系统相关概念)\n- [2.进程管理](#2.进程管理)\n  - [2.1 进程概述](#21-进程概述)\n  - [2.2 进程管理五状态模型](#22-进程管理五状态模型)\n  - [2.3 进程同步](#23-进程同步)\n  - [2.4 Linux的进程管理](#24-linux的进程管理)\n- [3.作业管理](#3.作业管理)\n  - [3.1 进程调度](#31-进程调度)\n  - [3.2 死锁](#32-死锁)\n- [4.存储管理](#4.存储管理)\n  - [4.1 计算机进行存储管理的必要性](#41-计算机进行存储管理的必要性)\n  - [4.2 内存的分配过程](#42-内存的分配过程)\n  - [4.3 内存的回收过程](#43-内存的回收过程)\n  - [4.4 进程的存储管理](#44-进程的存储管理)\n  - [4.5 虚拟内存](#45-虚拟内存)\n  - [4.6 Linux的存储管理](#46-linux的存储管理)\n- [5.文件管理](#5.文件管理)\n  - [5.1 操作系统的文件管理](#51-操作系统的文件管理)\n  - [5.2 Linux文件的基本操作](#52-linux文件的基本操作)\n- [6.设备管理](#6设备管理)\n- [7.实践](#7.实践)\n  - [7.1 线程同步实践](#71-线程同步实践)\n  - [7.2 进程同步实践](#72-进程同步实践)\n- [8.关于我](#8关于我)\n- [9.参考](#9参考)\n\n\n\n## 1 操作系统概览\n\n### 1.1 什么是操作系统\n\n- 管理配置内存、决定资源供需顺序、控制输入输出设备等\n- 操作系统是管理计算机硬件和软件资源的计算机程序\n- 操作系统提供让用户和系统交互的操作界面\n- 从手机到超级计算机，操作系统可简单也可复杂\n- 操作系统的种类是多种多样的，不局限于计算机\n- 在不同的设备上，操作系统可向用户呈现多种操作手段\n- Android，IOS，HarmonyOS\n- Windows ，Linux ，MacOS\n- 总结：管理硬件、提供用户交互的软件系统\n\n### 1.2 为什么需要操作系统\n\n- 我们不可能直接操作计算机硬件\n- 设备种类繁多复杂，需要统一界面\n- 设备种类繁多复杂，需要统一界面\n\n### 1.3 操作系统的基本功能\n\n- 操作系统统一管理着计算机资源\n  - 处理器资源\n  - IO设备资源\n  - 存储器资源\n  - 文件资源\n- 操作系统实现了对计算机资源的抽象\n  - IO设备管理软件，提供读写接口\n  - 用户无需面向硬件接口编程\n  - 文件管理软件，提供操作文件接口\n- 操作系统提供了用户与计算机之间的接口\n  - 命令形式\n  - 图像窗口形式\n  - 系统调用形式\n\n### 1.4 操作系统相关概念\n\n- 并发性/并行性\n  - 多道程序设计\n    - 多道程序设计是指在计算机内存中同时存放多个程序\n    - 多道程序在计算机的管理程序之下相互穿插运行\n  - 并行是指两个或多个事件可以在同一个时刻发生\n  -  并发是指两个或多个事件可以在同一个时间间隔发生\n- 共享性\n  - 共享性表现为操作系统中的资源可供多个并发的程序共同使用\n  - 这种共同使用的形式称之为资源共享\n  - 多个程序可以同时使用主存资源\n  - 资源共享根据属性可分为两种方式\n    - 互斥共享形式 \n      - 当资源被程序A占用时，其他想使用的话只能等待\n      - 只有进程A使用完以后，其他进程才可以使用该资源\n      - 打印机\n    - 同时访问形式\n      - 某种资源在一段时间内并发地被多个程序访问\n      - 这种“同时”是宏观的，从宏观去看该资源可以被同时访问\n      - 向磁盘写数据\n- 虚拟性\n  - 虚拟性表现为把一个物理实体转变为若干个逻辑实体\n  - 物理实体是真实存在的，逻辑实体是虚拟的\n  - 虚拟的技术主要有时分复用技术和空分复用技术\n  - 时分复用技术\n    - 资源在时间上进行复用，不同程序并发使用\n    - 多道程序分时使用计算机的硬件资源\n    - 提高资源的利用率\n    - 虚拟处理器技术 \n      - 借助多道程序设计技术\n      - 为每个程序建立进程\n      - 多个程序分时复用处理器\n    - 虚拟设备技术\n      - 物理设备虚拟为多个逻辑设备\n      - 每个程序占用一个逻辑设备\n      - 多个程序通过逻辑设备并发访问\n  - 空分复用技术\n    - 空分复用技术用来实现虚拟磁盘、虚拟内存等\n    - 提高资源的利用率，提升编程效率\n    - 虚拟磁盘技术 \n      - 物理磁盘虚拟为逻辑磁盘\n      -  C、 D、 E等逻辑盘\n      - 使用起来更加安全、方便\n    - 虚拟内存技术\n      - 在逻辑上扩大程序的存储容量\n      - 使用比实际内存更大的容量\n      - 大大提升编程效率\n- 异步性\n  -  在多道程序环境下，允许多个进程并发执行\n  - 进程在使用资源时可能需要等待或放弃\n  - 进程的执行并不是一气呵成的，而是以走走停停的形式推进\n  - 进程以不可预知的速度向前推进\n\n## 2.进程管理\n\n### 2.1 进程概述\n\n- 为什么需要进程\n  - 没有配置OS之前，资源属于当前运行的程序\n  - 配置OS之后，引入多道程序设计的概念\n  - 合理的隔离资源、运行环境，提升资源利用率\n  - 进程是系统进行资源分配和调度的基本单位\n  - 进程作为程序独立运行的载体保障程序正常执行\n  - 进程的存在使得操作系统资源的利用率大幅提升\n\n- 主存中的进程形态-进程控制块（PCB）\n\n  - 用于描述和控制进程运行的通用数据结构\n  -  记录进程当前状态和控制进程运行的全部信息\n  - PCB的使得进程是能够独立运行的基本单位\n  - PCB是操作系统进行调度经常会被读取的信息\n  - PCB是常驻内存的，存放在系统专门开辟的PCB区域内\n  - 标识符\n    - 标识符唯一标记一个进程，用于区别其他进程\n  - 状态\n    - 标记进程的进程状态，如：运行态\n  - 优先级\n  - 程序计数器\n    - 进程即将被执行的下一条指令的地址\n  - 内存指针\n    - 程序代码、进程数据相关指针\n  - 上下文数据\n    - 进程执行时处理器存储的数据\n  - IO状态信息\n    - 被进程IO操作所占用的文件列表\n  - 记账信息\n    - 使用处理器时间、时钟数总和等\n\n- 进程与线程\n\n  - 关系\n    - 一个进程可以有一个或多个线程\n    - 进程是系统进行资源分配和调度的基本单位\n    - 线程是操作系统进行运行调度的最小单位\n    - 包含在进程之中，是进程中实际运行工作的单位\n    - 一个进程可以并发多个线程，每个线程执行不同的任务\n    - 进程的线程共享进程资源\n  - 区别\n\n  |          | 进程               | 线程                 |\n  | -------- | ------------------ | -------------------- |\n  | 资源     | 资源分配的基本单位 | 不拥有资源           |\n  | 调度     | 独立调度的基本单位 | 独立调度的最小单位   |\n  | 系统开销 | 进程系统开销大     | 线程系统开销小       |\n  | 通信     | 进程IPC            | 读写同一进程数据通信 |\n\n  \n\n### 2.2 进程管理五状态模型\n\n- 就绪状态\n  - 当进程被分配到除CPU以外所有必要的资源后\n  - 只要再获得CPU的使用权，就可以立即运行\n  - 其他资源都准备好、只差CPU资源的状态为就绪状态\n  - 就绪队列：在一个系统中多个处于就绪状态的进程通常排成一个队列\n- 阻塞状态\n  - 进程因某种原因如：其他设备未就绪而无法继续执行\n  - 从而放弃CPU的状态称为阻塞状态\n  - 阻塞队列\n- 执行状态\n  - 进程获得CPU，其程序正在执行称为执行状态\n  - 在单处理机中，在某个时刻只能有一个进程是处于执行状态\n- 创建状态\n  - 分配PCB---> 插入就绪队列\n  - 创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态\n  - 操作系统提供fork函数接口创建进程\n- 终止状态\n  - 系统清理 --->PCB归还\n  - 进程结束由系统清理或者归还PCB的状态称为终止状态\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163657.jpg)\n\n### 2.3 进程同步\n\n- 为什么需要进程间同步\n\n  - 生产者-消费者问题\n\n    - 生产者进程将生产的产品提供给消费者进程进行消费\n    - 生产者进程和消费者进程可以并发执行\n    - 在两者之间设置了一个具有n个缓冲区的缓冲池\n    - 生产者将产品缓冲区中，消费者进程从缓冲区取走产品消费\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163907.jpg)\n\n    - 单从生产者程序或消费者程序去看是没问题的\n    - 单两者并发执行时就可能出差错\n    - 临界资源：缓存区\n\n  - 哲学家进餐问题\n\n    - 有五个哲学家，他们的生活方式是交替地进行思考和进餐\n    - 哲学家们共同使用一张圆桌，分别坐在周围的五张椅子上\n    - 在圆桌上有五个碗和五支筷子。平时哲学家们只进行思考，饥饿时则试图取靠近他们的左、右两支筷子\n    - 只有两支筷子都被他拿到的时候才能进餐\n    - 进餐完毕之后，放下左右筷子继续思考\n    - 五个哲学家同时拿起左边筷子\n    - 五个哲学家都等待右边筷子释放\n    - 五个哲学家饿死\n    - 临界资源：筷子\n\n  - 问题的根源\n\n    - 根源问题是：彼此相互之间没有通信\n    - 如果生产者通知消费者我已经完成一件生产\n    - 哲学家向旁边哲学家说我要进餐了\n\n  - 进程同步的目的\n\n    - 对竞争资源在多进程间进行使用次序的协调\n    - 使得并发执行的多个进程之间可以有效使用资源和相互合作\n\n  - 临界资源\n\n    - 临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。\n    - 当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使\n      用共享资源。\n\n- 进程间同步的原则\n\n  - 空闲让进：资源无占用，允许使用\n  - 忙则等待：资源有占用，请求进程等待\n  - 有限等待：保证有限等待时间能够使用资源\n  - 让权等待：等待时，进程需要让出CPU\n\n- 进程间同步的方法\n\n  - 消息队列\n  - 共享存储\n  - 信号量\n\n- 线程同步\n\n  - 进程的线程共享进程资源\n  - 当多个线程并发使用进程资源时，也需要同步\n  - 线程间同步的方法\n    - 互斥量\n    - 读写锁\n    - 自旋锁\n    - 条件变量\n\n### 2.4 Linux的进程管理\n\n- 进程的类型\n\n  - 前台进程\n    - 前台进程就是具有终端，可以和用户交互的进程\n  - 后台进程\n    - 与前台进程相对，没有占用终端的就是后台进程\n    - 后台程序基本上不和用户交互，优先级比前台进程低\n    - 将需要执行的命令以“&”符号结束\n  - 守护进程\n    - 守护(daemon)进程是特殊的后台进程\n    - 很多守护进程在系统引导的时候启动，一直运行直到系统关闭\n    - Linux有很多典型的守护进程\n    - 进程名字以“d”结尾的一般都是守护进程\n      - crond\n      - httpd\n      - sshd\n      - mysqld\n\n- 进程的标记\n\n  - 进程ID\n\n    - 进程ID是进程的唯一标记，每个进程拥有不同的ID\n    - 进程ID表现为一个非负整数，最大值由操作系统限定\n    - top命令查看系统中的所有进程信息\n    - ID为0的进程为idle进程，是系统创建的第一个进程\n    - ID为1的进程为init进程，是0号进程的子进程，完成系统初始化\n    - Init进程是所有用户进程的祖先进程\n\n  - 进程的状态标记\n\n    - man ps 命令查看用户命令帮助文档\n\n    | 状态符号 | 状态说明                                                   |\n    | -------- | ---------------------------------------------------------- |\n    | R        | (TASK_RUNNING)，进程正处于运行状态                         |\n    | S        | (TASK_INTERRUPTIBLE)，进程正处于睡眠状态                   |\n    | D        | (TASK_UNINTERRUPTIBLE)，进程正在处于IO等待的睡眠状态       |\n    | T        | (TASK_STOPPED)，进程正处于暂停状态                         |\n    | Z        | (TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程 |\n\n  - 父子进程\n\n    - 操作系统提供fork函数接口创建进程\n    - 父子进程关系:进程A调用fork函数创建进程B,进程A就是进程B的父进程\n    - 父子进程关系可以通过pstree命令查看\n\n- 操作进程的相关命令\n\n  - ps命令\n    - ps命令常用于显示当前进程的状态\n    - ps命令常配合aux参数或ef参数和grep命令检索特定进程\n  - jobs\n    - 只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略\n  - nohup\n    - 不挂断地运行命令\n  - fg/bg命令\n    - fg命令将一个后台命令调换至前台终端继续执行\n    - bg命令将一个后台暂停的命令变成继续执行\n    - ctrl+z将前台工作暂停\n  - kill\n    - kill命令发送指定信号给进程\n    - kill –l 可以查看操作系统支持的信号\n    - 只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略\n\n\n\n## 3.作业管理\n\n### 3.1 进程调度\n\n- 进程调度是指计算机通过决策决定哪个就绪进程可以获得CPU使用权\n\n- 保留旧进程的运行信息，请出旧进程（收拾包袱）\n\n- 选择新进程，准备运行环境并分配CPU（新进驻）\n\n- 调度机制\n\n  - 就绪队列的委派机制\n    - 将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程\n  - 选择运行进程的委派机制\n    - 调度程序以一定的策略选择就绪进程，将CPU资源分配给它\n  - 新老进程的上下文切换机制\n    - 保存当前进程的上下文信息，装入被委派执行进程的运行上下文\n    - 老进程的上下文存入主存\n    - 新进程的上下文装载到高速缓存中\n\n- 调度方式\n\n  - 非抢占式的调度\n    - 处理器一旦分配给某个进程，就让该进程一直使用下去\n    - 调度程序不以任何原因抢占正在被使用的处理器\n    - 直到进程完成工作或因为IO阻塞才会让出处理器\n  - 抢占式的调度\n    - 允许调度程序以一定的策略暂停当前运行的进程\n    - 保存好旧进程的上下文信息，分配处理器给新进程\n\n  |          | 抢占式调度       | 抢占式调度         |\n  | -------- | ---------------- | ------------------ |\n  | 系统开销 | 频繁切换，开销大 | 切换次数少，开销小 |\n  | 公平性   | 相对公平         | 不公平             |\n  | 应用     | 通用系统         | 专用系统           |\n\n- 调度算法\n\n  - 先来先服务调度算法\n    - 从就绪队列按照顺序从队列头开始调度\n  - 短进程优先调度算法\n    - 调度程序优先选择就绪队列中估计运行时间最短的进程\n    - 短进程优先调度算法不利于长作业进程的执行\n  - 高优先权优先调度算法\n    - 进程附带优先权，调度程序优先选择权重高的进程\n    - 高优先权优先调度算法使得紧迫的任务可以优先处理\n    - 前台进程优先级高于后台进程\n  - 时间片轮转算法\n    - 按先来先服务的原则排列就绪进程\n    - 每次从队列头部取出待执行进程，分配一个时间片执行\n    - 是相对公平的调度算法，但不能保证及时响应用户\n\n\n\n### 3.2 死锁\n\n- 死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n\n- 死锁的产生\n\n  - 基本原因\n\n    - 竞争资源\n      - 共享资源数量不满足各个进程需求\n      - 各个进程之间发生资源竞争导致死锁\n    - 进程调度顺序不当\n      - 调度顺序导致共享资源被多个进程互相持有无法释放，可以优先满足进程A的调度再调度B\n\n  - 必要条件\n\n  \t- 互斥条件\n  \t  - 进程对资源的使用是排他性的使用\n  \t  - 某资源只能由一个进程使用，其他进程需要使用只能等待\n  \t- 请求保持条件\n  \t  - 进程至少保持一个资源，又提出新的资源请求\n  \t  - 新资源被占用，请求被阻塞\n  \t  - 被阻塞的进程不释放自己保持的资源\n  \t- 不可剥夺条件\n  \t  - 进程获得的资源在未完成使用前不能被剥夺\n  \t  - 获得的资源只能由进程自身释放\n  \t- 环路等待条件\n  \t  - 发生死锁时，必然存在进程-资源环形链\n  \t  - P1(R1)-> P2(R2)->P3(R3->)P4(R4) ->P1(R1)\n\n- 死锁的处理\n\n  - 预防死锁的方法-破坏必要条件\n\n    - 摒弃请求保持条件\n      - 系统规定进程运行之前，一次性申请所有需要的资源\n      - 进程在运行期间不会提出资源请求，从而摒弃请求保持条件\n    - 摒弃不可剥夺条件\n      - 当一个进程请求新的资源得不到满足时，必须释放占有的资源\n      - 进程运行时占有的资源可以被释放，意味着可以被剥夺\n    - 摒弃环路等待条件\n      - 可用资源线性排序，申请必须按照需要递增申请\n      - 线性申请不再形成环路，从而摒弃了环路等待条件，A B C D E\n\n  - 银行家算法\n\n    - 是一个可操作的著名的避免死锁的算法\n    - 以银行借贷系统分配策略为基础的算法\n    - 客户申请的贷款是有限的，每次申请需声明最大资金量\n    - 银行家在能够满足贷款时，都应该给用户贷款\n    - 客户在使用贷款后，能够及时归还贷款用来满足其它客户\n    - 已分配资源表 \n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  P1  |  0   |  0   |  1   |  4   |\n    |  P2  |  1   |  4   |  3   |  2   |\n    |  P3  |  1   |  3   |  5   |  4   |\n    |  P4  |  1   |  0   |  0   |  0   |\n\n    - 所需资源表\n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  P1  |  0   |  6   |  5   |  6   |\n    |  P2  |  1   |  9   |  4   |  2   |\n    |  P3  |  1   |  3   |  5   |  6   |\n    |  P4  |  1   |  7   |  5   |  0   |\n\n    - 可分配资源表\n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  -   |  1   |  5   |  2   |  0   |\n\n    - 还需分配资源表\n    - 通过可分配资源表看它能够满足哪一个进程所需就把可分配资源给谁，不满足的就不执行知道有资源能够满足任何一个为止\n    - 所以P2会先获得资源\n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  P1  |  0   |  6   |  4   |  2   |\n    |  P2  |  0   |  5   |  1   |  0   |\n    |  P3  |  0   |  0   |  0   |  2   |\n    |  P4  |  0   |  7   |  5   |  0   |\n\n\n\n## 4.存储管理\n\n### 4.1 计算机进行存储管理的必要性\n\n- 早期计算机编程并不需要过多的存储管理\n- 随着计算机和程序越来越复杂，存储管理成为必要\n-  确保计算机有足够的内存处理数据\n- 确保程序可以从可用内存中获取一部分内存使用\n- 确保程序可以归还使用后的内存以供其他程序使用\n\n### 4.2 内存的分配过程\n\n- 分配方法\n\n- 单一连续分配\n\n  - 单一连续分配是最简单的内存分配方式\n  - 只能在单用户、单进程的操作系统中使用\n  - 分为系统区，用户区\n\n- 固定分区分配\n\n  - 固定分区分配是支持多道程序的最简单存储分配方式\n  - 内存空间被划分为若干固定大小的区域\n  - 每个分区只提供给一个程序使用，互不干扰\n\n- 动态分区分配（常用）\n\n  - 根据进程实际需要，动态分配内存空间\n  - 相关数据结构、分配算法\n  - 动态分区空闲表数据结构，1：已使用，0：未使用\n\n  | 分区 | 1    | 2    | 3    | 4    |\n  | ---- | ---- | ---- | ---- | ---- |\n  | 标记 | 0    | 1    | 1    | 0    |\n\n  - 动态分区空闲链数据结构\n    - 采用双向链表将内存块链接起来，连续的空闲区可以合并在一个链表节点里\n    - 节点需记录可存储的容量\n  - 动态分区分配算法\n    - 首次适应算法(FF算法)\n      - 分配内存时从开始顺序查找适合内存区\n      - 若没有合适的空闲区，则该次分配失败\n      - 每次从头部开始，使得头部地址空间不断被划分\n      - 循环适应算法，每次分配不从头开始，从上一次结束的地方开始分配\n    - 最佳适应算法(BF算法)\n      - 最佳适应算法要求空闲区链表按照容量大小排序\n      - 遍历空闲区链表找到最佳合适空闲区\n    - 快速适应算法(QF算法)\n      - 快速适应算法要求有多个空闲区链表\n      - 每个空闲区链表存储一种容量的空闲区\n\n### 4.3 内存的回收过程\n\n- 存在回收内存的四种情况\n  - 回收区与空闲区链接在一起并且链接在后面\n    - 不需要新建空闲链表节点\n    - 只需要把空闲区1的容量增大为空闲区即可\n  - 回收区与空闲区链接在一起并且链接在前面\n    - 将回收区与空闲区合并\n    - 新的空闲区使用回收区的地址\n  - 回收区与空闲区链接在一起并且链接在中间\n    - 将空闲区1、空闲区2和回收区合并\n    - 新的空闲区使用空闲区1的地址\n  - 未链接空闲区，单一的回收区\n    - 为回收区创建新的空闲节点\n    - 插入到相应的空闲区链表中去\n\n### 4.4 进程的存储管理\n\n- 页式存储管理\n\n  - 字块是相对物理设备的定义，页面则是相对逻辑空间的定义\n  - 将进程逻辑空间等分成若干大小的页面\n  - 相应的把物理内存空间分成与页面大小的物理块\n  - 以页面为单位把进程空间装进物理内存中分散的物理块\n  - 页面大小应该适中，过大难以分配，过小内存碎片过多\n  - 页面大小通常是512B~8K\n  - **页表**：记录进程逻辑空间与物理空间的映射，表示为 [页面编号，字块编号]\n  - **页地址**：[地址，页内偏移]\n  - **问题**：现代计算机系统中，可以支持非常大的逻辑地址空间（2^32~2^64），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M(2^20)个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间\n    - 2^32/2^12=2^20=1M个页表项\n  - **多级页表**：根页表的字块存的是子页表的地址，在运行时可以按需加载子页表\n  - **不足**：有一段连续的逻辑分布在多个页面中，将大大降低执行效率\n\n- 段式存储管理\n\n  - 将进程逻辑空间划分成若干段（非等分）\n  - 段的长度由连续逻辑的长度决定\n  - 主函数MAIN、子程序段X、子函数Y等\n  - **段表**：[段号 ,基址. 段长]\n  - **段地址**：[段号, 段内偏移]\n\n- 页式存储管理与段式存储管理的对比\n\n  - 段式存储和页式存储都离散地管理了进程的逻辑空间\n  - 页是物理单位，段是逻辑单位\n  - 分页是为了合理利用空间，分段是满足用户要求\n  - 页大小由硬件固定，段长度可动态变化\n  - 页表信息是一维的，段表信息是二维的\n\n- 段页式存储管理\n\n  - 分页可以有效提高内存利用率（虽然说存在页内碎片）\n  - 分段可以更好满足用户需求，因为逻辑可以通过用户来写\n  - 两者结合，形成段页式存储管理\n  - 先将逻辑空间按段式管理分成若干段\n  - 再把段内空间按页式管理等分成若干页\n  - **段页地址**：[段号, 段内页号. 页内地址]\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801164213.jpg)\n\n### 4.5 虚拟内存\n\n- 虚拟内存概述\n  - 有些进程实际需要的内存很大，超过物理内存的容量\n  - 多道程序设计，使得每个进程可用物理内存更加稀缺\n  - 不可能无限增加物理内存，物理内存总有不够的时候\n  - 虚拟内存是操作系统内存管理的关键技术\n  - 使得多道程序运行和大程序运行成为现实\n  - 把程序使用内存划分，将部分暂时不使用的内存放置在辅存\n  - 虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存\n- 程序的局部性原理\n  - 局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。\n  - 程序运行时，无需全部装入内存，装载部分即可\n  - 如果访问页不在内存，则发出缺页中断，发起页面置换\n  - 从用户层面看，程序拥有很大的空间，即是虚拟内存\n- 虚拟内存的置换\n- 替换策略发生在Cache-主存层次、主存-辅存层次\n\t- Cache-主存层次的替换策略主要是为了解决速度问题\n\t- 主存-辅存层次主要是为了解决容量问题\n\t- 置换时机\n\t  - 高速缓存的替换时机\n\t    - 缓存没有数据，需要从主存载入所需数据\n\t  - 主存页面的替换时机\n\t    - 主存缺页，需要从辅存载入页面数据\n\t- 置换算法\n\t  - 先进先出算法(FIFO)\n\t    - 把主存看做是一个先进先出的队列\n\t    - 优先替换最先进入队列的字块\n\t  - 最不经常使用算法(LFU)\n\t    - 优先淘汰最不经常使用的字块\n\t    - 需要额外的空间记录字块的使用频率\n\t  - 最近最少使用算法(LRU)\n\t    - 优先淘汰一段时间内没有使用的字块\n\t    - 如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的\n\t    - 有多种实现方法，一般使用双向链表\n\n### 4.6 Linux的存储管理\n\n- 页内碎片 \n  - 内部碎片是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。\n- 页外碎片\n  - 外部碎片是指还没有分配出去（不属于任何进程），但是由于大小而无法分配给申请内存空间的新进程的内存空闲块。\n- Buddy内存管理算法\n\n  - Buddy算法是经典的内存管理算法\n  - 算法基于计算机处理二进制的优势具有极高的效率\n  - 算法主要是为了解决内存外碎片的问题\n  - 实际是将内存外碎片问题 转移成内存内碎片问题\n  - 努力让内存分配与相邻内存合并能快速进行\n  - 内存分配原则\n    - 向上取整为2的幂大小\n    - 70k→128k\n    - 129k→256k\n    - 666k→1024k\n  - 伙伴系统\n    - “伙伴”指的是内存的“伙伴”\n    -  一片连续内存的“伙伴”是相邻的另一片大小一样的连续内存\n  - 分配过程\n    - 创建一系列空闲块链表，每一种都是2的幂\n    - 假设存储空间有1M大小，分配100k内存\n    - 100k向上取2的幂=128k\n    - 查询是否有128k空闲内存块？\n    - 没有！查询是否有256k空闲内存块？\n    - 没有！查询是否有512k空闲内存块？\n    - 没有！查询是否有1M空闲内存块？\n    - 有，摘下1M空闲内存块，分配出去\n    - 拆下512k放在512k的空闲链表，其余的分配出去\n    - 拆下256k放在256k的空闲链表，其余的分配出去\n    - 拆下128k放在128k的空闲链表，其余的分配出去\n    - 分配完毕\n  - 回收过程\n    - 判断刚才分配的内存伙伴在空闲链表上吗？\n    - 在！移除伙伴，合并为256k空闲内存，判断\n    - 在！移除伙伴，合并为512k空闲内存，判断\n    - 在！移除伙伴，合并为1M空闲内存\n    - 插入1M空闲链表，回收完成\n- Linux交换空间\n\n  - 交换空间(Swap)是磁盘的一个分区\n  - Linux物理内存满时，会把一些内存交换至Swap空间\n  - Swap空间是初始化系统时配置的\n  - top命令可以查看交换空间的分配情况\n  - 主要用途：\n    - 冷启动内存依赖\n    - 系统睡眠依赖\n    - 大进程空间依赖\n  - 交换空间VS虚拟内存\n    - Swap空间是操作系统概念\n    - Swap空间解决系统物理内存不足问题\n    - Swap空间存在于磁盘\n    - Swap空间与主存发生置换\n    - 虚拟内存是进程概念\n    - 虚拟内存解决进程物理内存不足问题\n    - 虚拟内存存在于磁盘\n    - 虚拟内存与主存发生置换\n\n## 5.文件管理\n\n### 5.1 操作系统的文件管理\n\n- 文件的逻辑结构\n\n  - 逻辑结构的文件类型\n    - 有结构文件\n      - 文本文件、 文档 、媒体文件\n      - 文件内容由定长记录和可变长记录组成\n      - 定长记录存储文件格式、文件描述等结构化数据项\n      - 可变长记录存储文件具体内容\n      - 例如：PNG文件标记--PNG数据块--文件结束标记\n    - 无结构文件\n      - exe文件、 dll链接库文件、 so文件\n      -  二进制文件 、链接库\n      - 也称为流式文件\n      - 文件内容长度以字节为单位\n  - 顺序文件\n    - 顺序文件是指按顺序存放在存储介质中的文件\n    - 磁带的存储特性使得磁带文件只能存储顺序文件\n    - 顺序文件是所有逻辑文件当中存储效率最高的\n    - 顺序文件的增删改效率低\n  - 索引文件\n    - 可变长文件不适合使用顺序文件格式存储\n    - 索引文件是为了解决可变长文件存储而发明的一种文件格式\n    - 索引文件需要配合索引表完成存储的操作\n    - 索引表：[键 ,逻辑地址]\n\n- 辅存的存储空间分配\n\n  - 辅存的分配方式\n    - 连续分配\n      - 顺序读取文件内容非常容易，速度很快\n      - 对存储要求高，要求满足容量的连续存储空间\n    - 链接分配\n      - 链接分配可以将文件存储在离散的盘块中\n        需要额外的存储空间存储文件的盘块链接顺序\n      - 隐式链接 \n        - 隐式分配的下一个链接指向存储在当前盘块内\n        - 隐式分配适合顺序访问，随机访问效率很低\n        - 可靠性差，任何一个链接出问题都影响整个文件\n      - 显式链接\n        - FAT( File Allocation Table)  [物理块 ,下一盘块]\n        - 不支持高效的直接存储（FAT记录项多）\n        - 检索时FAT表占用较大的存储空间（需要将整个FAT加载到内存）\n    - 索引分配\n      - 把文件的所有盘块集中存储（索引）\n      - 读取某个文件时，将文件索引读取进内存即可\n      - 每个文件拥有一个索引块，记录所有盘块信息\n      - 索引分配方式支持直接访问盘块\n      - 文件较大时，索引分配方式具有明显优势\n\n- 辅存的存储空间管理\n\n\t- 空闲表\n\t\n\t  - [序号, 第一个空闲盘块号, 空闲盘块数]\n\t  - 空闲盘区的分配与内存分配类似\n\t  - 首次适应算法、循环适应算法等\n\t  - 回收过程也与内存回收类似\n\t\n\t- 空闲链表 \n\t\n\t  - 空闲链表法把所有空闲盘区组成一个空闲链表\n\t  - 每个链表节点存储空闲盘块和空闲的数目\n\t\n\t- 位示图\n\t\n\t  - 位示图维护成本很低\n\t  - 位示图可以非常容易找到空闲盘块\n\t  - 位示图使用0/1比特位，占用空间很小\n\t  - 0：未使用，1：已使用\n\t\n\t  | 盘块/磁道 |  1   |  2   |  3   |\n\t  | :-------: | :--: | :--: | :--: |\n\t  |     1     |  0   |  0   |  0   |\n\t  |     2     |  0   |  1   |  0   |\n\t  |     3     |  1   |  0   |  1   |\n\t\n- 目录管理\n\n  - 目录树：\n    - 任何文件或目录都只有唯一路径\n  - 文件描述信息\n    - 文件标识符 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针\n\n\n\n### 5.2 Linux文件的基本操作\n\n- Linux目录\n\n  - Linux一切皆文件\n  - 常用目录：/bin /etc /home /usr /opt /proc /dev /mnt /lib /var ...\n\n  | 目录  | 描述                                                         |\n  | ----- | ------------------------------------------------------------ |\n  | /bin  | 存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里   |\n  | /etc  | 存放系统管理和配置文件                                       |\n  | /home | 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user |\n  | /usr  | 用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录 |\n  | /opt  | 额外安装的可选应用程序包所放置的位置                         |\n  | /proc | 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 |\n  | /root | 超级用户（系统管理员）的主目录                               |\n  | /sbin | 存放二进制可执行文件，只有root才能访问                       |\n  | /dev  | 用于存放设备文件                                             |\n  | /mnt  | 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。 |\n  | /boot | 存放用于系统引导时使用的各种文件                             |\n  | /lib  | 存放跟文件系统中的程序运行所需要的共享库及内核模块           |\n  | /var  | 用于存放运行时需要改变数据的文件                             |\n\n  - 相对路径：相对当前目录开始的目录\n  - 绝对路径：相对根目录开始的目录\n\n- Linux文件常用操作\n\n  - 创建：\n    - touch file \n    - vim file2 创建并编辑file2\n    - mkdir dir1 创建文件夹dir1\n  - 删除\n    - rm file \n    - rm -r dir1/ 递归删除文件夹dir1\n  - 读取\n    - cat file2\n  - 写入\n    - vim file2 创建并编辑file2\n\n- 文件类型\n\n\t- 普通文件(-)\n\t- 目录文件(d) \n\t- 符号链接(l) \n\t- 设备文件(b、 c)\n\t- 套接字(s) \n\t- FIFO(p)\n\n- Linux的文件系统\n\n\t- 文件系统概览\n\n\t  - FAT\n\t    - FAT(File Allocation Table)\n\t    - FAT16、 FAT32等，微软Dos/Windows使用的文件系统\n    - 使用一张表保存盘块的信息\n\t  - NTFS\n    - NTFS (New Technology File System)\n\t    - WindowsNT环境的文件系统\n\t    - NTFS对FAT进行了改进，取代了旧的文件系统\n  - EXT2/3/4\n\t    - EXT(Extended file system)：扩展文件系统\n\t    - Linux的文件系统\n\t    - EXT2/3/4 数字表示第几代\n\t\n\t- Ext文件系统\n\t\n\t\t- Boot Sector：启动扇区，安装开机管理程序\n\t\t\n\t- Block Group：块组，存储数据的实际位置\n\t\t\n\t\t- Boot Sector\n\t\t\n\t\t- Block Group\n\t\t\n\t\t  - SuperBlock\n\t\t    - 记录整个文件系统相关信息的地方\n\t\t    - Block和Inode的使用情况\n\t\t    - 时间信息、控制信息等\n\t\t  - Inode Bitmap\n\t\t    - Inode的位示图\n\t\t    - 记录已分配的Inode和未分配的Inode\n\t\t  - Block Bitmap\n\t\t    - 功能与Inode bitmap类似\n\t\t    - 记录Data block的使用情况\n\t\t  - Inode Table\n\t\t    - 存放文件Inode的地方\n\t\t    - 每一个文件（目录）都有一个Inode\n\t\t    - 是每一个文件（目录）的索引节点\n\t\t    - Inode：\n\t\t      - 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针 …\n\t\t      - 文件名不是存放在Inode节点上的，而是存放在目录的Inode节点\n\t\t      - 列出目录文件的时候无需加载文件的Inode\n\t\t  - Data Block\n\t\t    - Data block是存放文件内容的地方\n\t\t    - 每个block都有唯一的编号\n\t\t    - 文件的block记录在文件的Inode上\n\t\t\n\t\t  ![](https://tva1.sinaimg.cn/large/008eGmZEly1gnhudx17c4j30ku0b9dhl.jpg)\n\n## 6.设备管理\n\n- 广义的IO设备\n  - 对CPU而言，凡是对CPU进行数据输入的都\n  - 对CPU而言，凡是CPU进行数据输出的都是输出设备是输入设备\n\n- 广义的IIO设备分类\n\n  - 使用特性分类\n    - 存储设备： U盘 内存 磁盘 \n    - 交互IO设备：键盘 显示器 鼠标\n  - 信息交换的单位\n    - 块设备 ：磁盘 SD卡 \n    - 字符设备：打印机 Shell终端\n  - 设备共享属性\n    - 独占设备 \n    - 共享设备 \n    - 虚拟设备\n  - 传输速率\n    - 低速设备 \n    - 中速设备 \n    - 高速设备\n- IO设备的缓冲区\n  - 背景：CPU与IO设备的速率不匹配\n  - 减少CPU处理IO请求的频率\n  - 提高CPU与IO设备之间的并行性\n  - 专用缓冲区只适用于特定的IO进程\n  - 当这样的IO进程比较多时，对内存的消耗也很大\n  - 操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池\n- SPOOLing技术\n  - 虚拟设备技术\n  - 是关于慢速字符设备如何与计算机主机交换信息的一种技术\n  - 利用高速共享设备将低速的独享设备模拟为高速的共享设备\n  - 逻辑上，系统为每一个用户都分配了一台独立的高速独享设备\n  - SPOOLing技术把同步调用低速设备改为异步调用\n  - 在输入、输出之间增加了排队转储环节（输入井、输出井）\n  - SPOOLing负责输入（出）井与低速设备之间的调度\n  - 逻辑上，进程直接与高速设备交互，减少了进程的等待时间\n\n\n\n## 7.实践\n\n### 7.1 线程同步实践\n\n- 互斥量\n  - 两个线程的指令交叉执行导致了同步问题\n  - 互斥量可以保证先后执行\n  - 原子性\n    - 这一系列操作要么全部执行完成，要么全部没有执行\n    - 原子性是指一系列操作不可被中断的特性\n    - 不存在部分执行部分未执行的情况 \n  - 互斥量（互斥锁），处于两态之一的变量：解锁和加锁\n  - 互斥量是最简单的线程同步的方法\n  - 两个状态可以保证资源访问的串行\n  - 开发者可以直接使用API完成资源的加锁、解锁操作\n  - 操作系统直接提供了互斥量的API\n    - C 语言\n      - pthread_mutex_lock\n      - pthread_mutex_t\n      - pthread_mutex_unlock\n    - Java\n      - synchronized\n- 自旋锁\n  - 和互斥锁有什么不一样的？\n  - 使用自旋锁的线程会反复检查锁变量是否可用\n  - 自旋锁也是一种多线程同步的变量\n  - 自旋锁不会让出CPU，是一种忙等待状态\n  - 死循环等待锁被释放\n  - 操作系统内部很多地方使用的是自旋锁\n  - 自旋锁避免了进程或线程上下文切换的开销\n  - 自旋锁不适合在单核CPU使用，因为自旋锁不会让出CPU\n  - api\n    - pthread_spinlock_t\n    - pthread_ spinlock _lock_\n    - pthread_ spinlock _unlock\n- 读写锁\n  - 读取的时候并不会改变临界资源的值\n  - 临界资源多读少写\n  - 是否存在效率更高的同步方法？\n  - 允许多个读者同时访问资源以提高读性能\n  - 读写锁是一种特殊的自旋锁\n  - 对于写操作则是互斥的\n  - API\n    - pthread_rwlock_t\n    - pthread_rwlock_rdlock（读锁）\n    - pthread_rwlock_wrlock（写锁）\n  - 互斥量、自旋锁、读写锁 同步过程：等待解锁--加锁--【临界资源】--解锁\n- 条件变量\n  - 条件变量允许线程睡眠，直到满足某种条件\n  - 条件变量是一种相对复杂的线程同步方法\n  - 当满足条件时，可以向该线程信号，通知唤醒\n  - 生产者消费者问题\n    - 缓冲区满时，不允许生产者往缓冲区生产，生产者必须等待\n    - 缓冲区小于等于0时，不允许消费者消费，消费者必须等待\n    - 当生产者生产一个产品时，唤醒可能等待的消费者\n    - 当消费者消费一个产品时，唤醒可能等待的生产者\n  - API\n    - pthread_cond_t,配合互斥量使用\n    - pthread_cond_wait(等待条件满足)\n    - pthread_cond_signal(等待被唤醒)\n  - 条件变量同步流程：等待解锁--加锁保护条件变量--等待条件满足被唤醒--【临界资源】--解锁\n\n| 同步方法 | 描述                                                    |\n| -------- | ------------------------------------------------------- |\n| 互斥锁   | 最简单的一种线程同步方法，会阻塞线程                    |\n| 自旋锁   | 避免切换的一种线程同步方法，属于“忙等待”，不让出CPU     |\n| 读写锁   | 为“读多写少” 的资源设计的线程同步方法，可以显著提高性能 |\n| 条件变量 | 相对复杂的一种线程同步方法，有更灵活的使用场景          |\n\n\n\n### 7.2 进程同步实践\n\n- 使用fork系统调用创建进程\n  - fork创建的进程初始化状态与父进程一样\n  - fork系统调用是用于创建进程的\n  - 系统会为fork的进程分配新的资源\n  - fork会返回两次，分别返回子进程id和0\n  - fork系统调用无参数\n  - 返回子进程id的是父进程，返回0的是子进程\n\n- 共享内存\n  - 进程的线程共享进程资源\n  - 进程共享计算机资源\n  - 在某种程度上，多进程是共同使用物理内存的\n  - 由于操作系统的进程管理，进程间的内存空间是独立的\n  - 进程默认是不能访问进程空间之外的内存空间的\n  - 共享存储允许不相关的进程访问同一片物理内存\n  - 共享内存是两个进程之间共享和传递数据最快的方式\n  - 共享内存未提供同步机制，需要借助其他机制管理访问，比如通过一个Boolean的变量来控制是否可读可写\n  - 共享内存是高性能后台开发中最常用的进程同步方式\n  - 共享内存 使用流程\n    - 申请共享内存 \n    - 连接到进程空间\n    - 脱离进程空间 \n    - 使用共享内存&删除\n  - 代码实现\n- Unix域套接字\n  - 域套接字是一种高级的进程间通信的方法\n  - Unix域套接字可以用于同一机器进程间通信\n  - 套接字(socket)原是网络通信中使用的术语\n  - Unix系统提供的域套接字提供了网络套接字类似的功能\n  - Nginx、uWSGI\n  - 服务端\n    - 创建套接字\n    - 绑定(bind)套接字\n    - 监听(listen)套接字\n    - 接收&处理信息\n  - 客户端\n    - 创建套接字\n    - 连接套接字\n    - 发送信息\n  - 代码实现\n  - 提供了单机简单可靠的进程通信同步服务\n  - 只能在单机使用，不能跨机器使用\n\n\n\n## 8.关于我\n\n一个专注基础知识的十二线小码农，本着 **基础，体系，实践，分享** 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。\n\n[个人网站 basedev.cn](http://basedev.cn/)  \n\n[Github](https://github.com/jaydroid1024)\n\nBaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践\n\n\n\n## 9.参考\n\n[重学操作系统 | 拉钩教育](https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content)\n\n[编程必备基础 | 慕课网](https://coding.imooc.com/class/package/355.html)\n\n ","source":"_posts/computer_os.md","raw":"---\ntitle: 筑基系列-操作系统基础知识小抄版\ndate: 2021-06-31 14:16:55\ncover: true\ntags: \n    - 计算机基础\n    - 操作系统\n    - Linux\n    - 进程\n    - 线程\n    - 作业管理\n    - 文件管理\ncategory: \n\t- 计算机\nsummary: 操作系统基础理论提纲挈领，包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# 筑基系列-操作系统基础知识小抄版\n\n\n\n> 计算机基础知识筑基三部曲：\n>\n> - **[第一部：筑基系列-计算机基础知识小抄版](https://juejin.cn/post/6991367806772052004)**\n>   - 包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n>\n> - **[第二部：筑基系列-操作系统基础知识小抄版](https://juejin.cn/post/6991385109509193764)**\n>   - 包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n> - **[第三部：筑基系列-计算机网络基础知识小抄版](https://juejin.cn/post/6991397445251334151)**\n>   - 包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n## 目录\n\n- [1.操作系统概览](#1.操作系统概览)\n  - [1.1 什么是操作系统](#11-什么是操作系统)\n  - [1.2 为什么需要操作系统](#12-为什么需要操作系统)\n  - [1.3 操作系统的基本功能](#13-操作系统的基本功能)\n  - [1.4 操作系统相关概念](#14-操作系统相关概念)\n- [2.进程管理](#2.进程管理)\n  - [2.1 进程概述](#21-进程概述)\n  - [2.2 进程管理五状态模型](#22-进程管理五状态模型)\n  - [2.3 进程同步](#23-进程同步)\n  - [2.4 Linux的进程管理](#24-linux的进程管理)\n- [3.作业管理](#3.作业管理)\n  - [3.1 进程调度](#31-进程调度)\n  - [3.2 死锁](#32-死锁)\n- [4.存储管理](#4.存储管理)\n  - [4.1 计算机进行存储管理的必要性](#41-计算机进行存储管理的必要性)\n  - [4.2 内存的分配过程](#42-内存的分配过程)\n  - [4.3 内存的回收过程](#43-内存的回收过程)\n  - [4.4 进程的存储管理](#44-进程的存储管理)\n  - [4.5 虚拟内存](#45-虚拟内存)\n  - [4.6 Linux的存储管理](#46-linux的存储管理)\n- [5.文件管理](#5.文件管理)\n  - [5.1 操作系统的文件管理](#51-操作系统的文件管理)\n  - [5.2 Linux文件的基本操作](#52-linux文件的基本操作)\n- [6.设备管理](#6设备管理)\n- [7.实践](#7.实践)\n  - [7.1 线程同步实践](#71-线程同步实践)\n  - [7.2 进程同步实践](#72-进程同步实践)\n- [8.关于我](#8关于我)\n- [9.参考](#9参考)\n\n\n\n## 1 操作系统概览\n\n### 1.1 什么是操作系统\n\n- 管理配置内存、决定资源供需顺序、控制输入输出设备等\n- 操作系统是管理计算机硬件和软件资源的计算机程序\n- 操作系统提供让用户和系统交互的操作界面\n- 从手机到超级计算机，操作系统可简单也可复杂\n- 操作系统的种类是多种多样的，不局限于计算机\n- 在不同的设备上，操作系统可向用户呈现多种操作手段\n- Android，IOS，HarmonyOS\n- Windows ，Linux ，MacOS\n- 总结：管理硬件、提供用户交互的软件系统\n\n### 1.2 为什么需要操作系统\n\n- 我们不可能直接操作计算机硬件\n- 设备种类繁多复杂，需要统一界面\n- 设备种类繁多复杂，需要统一界面\n\n### 1.3 操作系统的基本功能\n\n- 操作系统统一管理着计算机资源\n  - 处理器资源\n  - IO设备资源\n  - 存储器资源\n  - 文件资源\n- 操作系统实现了对计算机资源的抽象\n  - IO设备管理软件，提供读写接口\n  - 用户无需面向硬件接口编程\n  - 文件管理软件，提供操作文件接口\n- 操作系统提供了用户与计算机之间的接口\n  - 命令形式\n  - 图像窗口形式\n  - 系统调用形式\n\n### 1.4 操作系统相关概念\n\n- 并发性/并行性\n  - 多道程序设计\n    - 多道程序设计是指在计算机内存中同时存放多个程序\n    - 多道程序在计算机的管理程序之下相互穿插运行\n  - 并行是指两个或多个事件可以在同一个时刻发生\n  -  并发是指两个或多个事件可以在同一个时间间隔发生\n- 共享性\n  - 共享性表现为操作系统中的资源可供多个并发的程序共同使用\n  - 这种共同使用的形式称之为资源共享\n  - 多个程序可以同时使用主存资源\n  - 资源共享根据属性可分为两种方式\n    - 互斥共享形式 \n      - 当资源被程序A占用时，其他想使用的话只能等待\n      - 只有进程A使用完以后，其他进程才可以使用该资源\n      - 打印机\n    - 同时访问形式\n      - 某种资源在一段时间内并发地被多个程序访问\n      - 这种“同时”是宏观的，从宏观去看该资源可以被同时访问\n      - 向磁盘写数据\n- 虚拟性\n  - 虚拟性表现为把一个物理实体转变为若干个逻辑实体\n  - 物理实体是真实存在的，逻辑实体是虚拟的\n  - 虚拟的技术主要有时分复用技术和空分复用技术\n  - 时分复用技术\n    - 资源在时间上进行复用，不同程序并发使用\n    - 多道程序分时使用计算机的硬件资源\n    - 提高资源的利用率\n    - 虚拟处理器技术 \n      - 借助多道程序设计技术\n      - 为每个程序建立进程\n      - 多个程序分时复用处理器\n    - 虚拟设备技术\n      - 物理设备虚拟为多个逻辑设备\n      - 每个程序占用一个逻辑设备\n      - 多个程序通过逻辑设备并发访问\n  - 空分复用技术\n    - 空分复用技术用来实现虚拟磁盘、虚拟内存等\n    - 提高资源的利用率，提升编程效率\n    - 虚拟磁盘技术 \n      - 物理磁盘虚拟为逻辑磁盘\n      -  C、 D、 E等逻辑盘\n      - 使用起来更加安全、方便\n    - 虚拟内存技术\n      - 在逻辑上扩大程序的存储容量\n      - 使用比实际内存更大的容量\n      - 大大提升编程效率\n- 异步性\n  -  在多道程序环境下，允许多个进程并发执行\n  - 进程在使用资源时可能需要等待或放弃\n  - 进程的执行并不是一气呵成的，而是以走走停停的形式推进\n  - 进程以不可预知的速度向前推进\n\n## 2.进程管理\n\n### 2.1 进程概述\n\n- 为什么需要进程\n  - 没有配置OS之前，资源属于当前运行的程序\n  - 配置OS之后，引入多道程序设计的概念\n  - 合理的隔离资源、运行环境，提升资源利用率\n  - 进程是系统进行资源分配和调度的基本单位\n  - 进程作为程序独立运行的载体保障程序正常执行\n  - 进程的存在使得操作系统资源的利用率大幅提升\n\n- 主存中的进程形态-进程控制块（PCB）\n\n  - 用于描述和控制进程运行的通用数据结构\n  -  记录进程当前状态和控制进程运行的全部信息\n  - PCB的使得进程是能够独立运行的基本单位\n  - PCB是操作系统进行调度经常会被读取的信息\n  - PCB是常驻内存的，存放在系统专门开辟的PCB区域内\n  - 标识符\n    - 标识符唯一标记一个进程，用于区别其他进程\n  - 状态\n    - 标记进程的进程状态，如：运行态\n  - 优先级\n  - 程序计数器\n    - 进程即将被执行的下一条指令的地址\n  - 内存指针\n    - 程序代码、进程数据相关指针\n  - 上下文数据\n    - 进程执行时处理器存储的数据\n  - IO状态信息\n    - 被进程IO操作所占用的文件列表\n  - 记账信息\n    - 使用处理器时间、时钟数总和等\n\n- 进程与线程\n\n  - 关系\n    - 一个进程可以有一个或多个线程\n    - 进程是系统进行资源分配和调度的基本单位\n    - 线程是操作系统进行运行调度的最小单位\n    - 包含在进程之中，是进程中实际运行工作的单位\n    - 一个进程可以并发多个线程，每个线程执行不同的任务\n    - 进程的线程共享进程资源\n  - 区别\n\n  |          | 进程               | 线程                 |\n  | -------- | ------------------ | -------------------- |\n  | 资源     | 资源分配的基本单位 | 不拥有资源           |\n  | 调度     | 独立调度的基本单位 | 独立调度的最小单位   |\n  | 系统开销 | 进程系统开销大     | 线程系统开销小       |\n  | 通信     | 进程IPC            | 读写同一进程数据通信 |\n\n  \n\n### 2.2 进程管理五状态模型\n\n- 就绪状态\n  - 当进程被分配到除CPU以外所有必要的资源后\n  - 只要再获得CPU的使用权，就可以立即运行\n  - 其他资源都准备好、只差CPU资源的状态为就绪状态\n  - 就绪队列：在一个系统中多个处于就绪状态的进程通常排成一个队列\n- 阻塞状态\n  - 进程因某种原因如：其他设备未就绪而无法继续执行\n  - 从而放弃CPU的状态称为阻塞状态\n  - 阻塞队列\n- 执行状态\n  - 进程获得CPU，其程序正在执行称为执行状态\n  - 在单处理机中，在某个时刻只能有一个进程是处于执行状态\n- 创建状态\n  - 分配PCB---> 插入就绪队列\n  - 创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态\n  - 操作系统提供fork函数接口创建进程\n- 终止状态\n  - 系统清理 --->PCB归还\n  - 进程结束由系统清理或者归还PCB的状态称为终止状态\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163657.jpg)\n\n### 2.3 进程同步\n\n- 为什么需要进程间同步\n\n  - 生产者-消费者问题\n\n    - 生产者进程将生产的产品提供给消费者进程进行消费\n    - 生产者进程和消费者进程可以并发执行\n    - 在两者之间设置了一个具有n个缓冲区的缓冲池\n    - 生产者将产品缓冲区中，消费者进程从缓冲区取走产品消费\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163907.jpg)\n\n    - 单从生产者程序或消费者程序去看是没问题的\n    - 单两者并发执行时就可能出差错\n    - 临界资源：缓存区\n\n  - 哲学家进餐问题\n\n    - 有五个哲学家，他们的生活方式是交替地进行思考和进餐\n    - 哲学家们共同使用一张圆桌，分别坐在周围的五张椅子上\n    - 在圆桌上有五个碗和五支筷子。平时哲学家们只进行思考，饥饿时则试图取靠近他们的左、右两支筷子\n    - 只有两支筷子都被他拿到的时候才能进餐\n    - 进餐完毕之后，放下左右筷子继续思考\n    - 五个哲学家同时拿起左边筷子\n    - 五个哲学家都等待右边筷子释放\n    - 五个哲学家饿死\n    - 临界资源：筷子\n\n  - 问题的根源\n\n    - 根源问题是：彼此相互之间没有通信\n    - 如果生产者通知消费者我已经完成一件生产\n    - 哲学家向旁边哲学家说我要进餐了\n\n  - 进程同步的目的\n\n    - 对竞争资源在多进程间进行使用次序的协调\n    - 使得并发执行的多个进程之间可以有效使用资源和相互合作\n\n  - 临界资源\n\n    - 临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。\n    - 当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使\n      用共享资源。\n\n- 进程间同步的原则\n\n  - 空闲让进：资源无占用，允许使用\n  - 忙则等待：资源有占用，请求进程等待\n  - 有限等待：保证有限等待时间能够使用资源\n  - 让权等待：等待时，进程需要让出CPU\n\n- 进程间同步的方法\n\n  - 消息队列\n  - 共享存储\n  - 信号量\n\n- 线程同步\n\n  - 进程的线程共享进程资源\n  - 当多个线程并发使用进程资源时，也需要同步\n  - 线程间同步的方法\n    - 互斥量\n    - 读写锁\n    - 自旋锁\n    - 条件变量\n\n### 2.4 Linux的进程管理\n\n- 进程的类型\n\n  - 前台进程\n    - 前台进程就是具有终端，可以和用户交互的进程\n  - 后台进程\n    - 与前台进程相对，没有占用终端的就是后台进程\n    - 后台程序基本上不和用户交互，优先级比前台进程低\n    - 将需要执行的命令以“&”符号结束\n  - 守护进程\n    - 守护(daemon)进程是特殊的后台进程\n    - 很多守护进程在系统引导的时候启动，一直运行直到系统关闭\n    - Linux有很多典型的守护进程\n    - 进程名字以“d”结尾的一般都是守护进程\n      - crond\n      - httpd\n      - sshd\n      - mysqld\n\n- 进程的标记\n\n  - 进程ID\n\n    - 进程ID是进程的唯一标记，每个进程拥有不同的ID\n    - 进程ID表现为一个非负整数，最大值由操作系统限定\n    - top命令查看系统中的所有进程信息\n    - ID为0的进程为idle进程，是系统创建的第一个进程\n    - ID为1的进程为init进程，是0号进程的子进程，完成系统初始化\n    - Init进程是所有用户进程的祖先进程\n\n  - 进程的状态标记\n\n    - man ps 命令查看用户命令帮助文档\n\n    | 状态符号 | 状态说明                                                   |\n    | -------- | ---------------------------------------------------------- |\n    | R        | (TASK_RUNNING)，进程正处于运行状态                         |\n    | S        | (TASK_INTERRUPTIBLE)，进程正处于睡眠状态                   |\n    | D        | (TASK_UNINTERRUPTIBLE)，进程正在处于IO等待的睡眠状态       |\n    | T        | (TASK_STOPPED)，进程正处于暂停状态                         |\n    | Z        | (TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程 |\n\n  - 父子进程\n\n    - 操作系统提供fork函数接口创建进程\n    - 父子进程关系:进程A调用fork函数创建进程B,进程A就是进程B的父进程\n    - 父子进程关系可以通过pstree命令查看\n\n- 操作进程的相关命令\n\n  - ps命令\n    - ps命令常用于显示当前进程的状态\n    - ps命令常配合aux参数或ef参数和grep命令检索特定进程\n  - jobs\n    - 只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略\n  - nohup\n    - 不挂断地运行命令\n  - fg/bg命令\n    - fg命令将一个后台命令调换至前台终端继续执行\n    - bg命令将一个后台暂停的命令变成继续执行\n    - ctrl+z将前台工作暂停\n  - kill\n    - kill命令发送指定信号给进程\n    - kill –l 可以查看操作系统支持的信号\n    - 只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略\n\n\n\n## 3.作业管理\n\n### 3.1 进程调度\n\n- 进程调度是指计算机通过决策决定哪个就绪进程可以获得CPU使用权\n\n- 保留旧进程的运行信息，请出旧进程（收拾包袱）\n\n- 选择新进程，准备运行环境并分配CPU（新进驻）\n\n- 调度机制\n\n  - 就绪队列的委派机制\n    - 将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程\n  - 选择运行进程的委派机制\n    - 调度程序以一定的策略选择就绪进程，将CPU资源分配给它\n  - 新老进程的上下文切换机制\n    - 保存当前进程的上下文信息，装入被委派执行进程的运行上下文\n    - 老进程的上下文存入主存\n    - 新进程的上下文装载到高速缓存中\n\n- 调度方式\n\n  - 非抢占式的调度\n    - 处理器一旦分配给某个进程，就让该进程一直使用下去\n    - 调度程序不以任何原因抢占正在被使用的处理器\n    - 直到进程完成工作或因为IO阻塞才会让出处理器\n  - 抢占式的调度\n    - 允许调度程序以一定的策略暂停当前运行的进程\n    - 保存好旧进程的上下文信息，分配处理器给新进程\n\n  |          | 抢占式调度       | 抢占式调度         |\n  | -------- | ---------------- | ------------------ |\n  | 系统开销 | 频繁切换，开销大 | 切换次数少，开销小 |\n  | 公平性   | 相对公平         | 不公平             |\n  | 应用     | 通用系统         | 专用系统           |\n\n- 调度算法\n\n  - 先来先服务调度算法\n    - 从就绪队列按照顺序从队列头开始调度\n  - 短进程优先调度算法\n    - 调度程序优先选择就绪队列中估计运行时间最短的进程\n    - 短进程优先调度算法不利于长作业进程的执行\n  - 高优先权优先调度算法\n    - 进程附带优先权，调度程序优先选择权重高的进程\n    - 高优先权优先调度算法使得紧迫的任务可以优先处理\n    - 前台进程优先级高于后台进程\n  - 时间片轮转算法\n    - 按先来先服务的原则排列就绪进程\n    - 每次从队列头部取出待执行进程，分配一个时间片执行\n    - 是相对公平的调度算法，但不能保证及时响应用户\n\n\n\n### 3.2 死锁\n\n- 死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。\n\n- 死锁的产生\n\n  - 基本原因\n\n    - 竞争资源\n      - 共享资源数量不满足各个进程需求\n      - 各个进程之间发生资源竞争导致死锁\n    - 进程调度顺序不当\n      - 调度顺序导致共享资源被多个进程互相持有无法释放，可以优先满足进程A的调度再调度B\n\n  - 必要条件\n\n  \t- 互斥条件\n  \t  - 进程对资源的使用是排他性的使用\n  \t  - 某资源只能由一个进程使用，其他进程需要使用只能等待\n  \t- 请求保持条件\n  \t  - 进程至少保持一个资源，又提出新的资源请求\n  \t  - 新资源被占用，请求被阻塞\n  \t  - 被阻塞的进程不释放自己保持的资源\n  \t- 不可剥夺条件\n  \t  - 进程获得的资源在未完成使用前不能被剥夺\n  \t  - 获得的资源只能由进程自身释放\n  \t- 环路等待条件\n  \t  - 发生死锁时，必然存在进程-资源环形链\n  \t  - P1(R1)-> P2(R2)->P3(R3->)P4(R4) ->P1(R1)\n\n- 死锁的处理\n\n  - 预防死锁的方法-破坏必要条件\n\n    - 摒弃请求保持条件\n      - 系统规定进程运行之前，一次性申请所有需要的资源\n      - 进程在运行期间不会提出资源请求，从而摒弃请求保持条件\n    - 摒弃不可剥夺条件\n      - 当一个进程请求新的资源得不到满足时，必须释放占有的资源\n      - 进程运行时占有的资源可以被释放，意味着可以被剥夺\n    - 摒弃环路等待条件\n      - 可用资源线性排序，申请必须按照需要递增申请\n      - 线性申请不再形成环路，从而摒弃了环路等待条件，A B C D E\n\n  - 银行家算法\n\n    - 是一个可操作的著名的避免死锁的算法\n    - 以银行借贷系统分配策略为基础的算法\n    - 客户申请的贷款是有限的，每次申请需声明最大资金量\n    - 银行家在能够满足贷款时，都应该给用户贷款\n    - 客户在使用贷款后，能够及时归还贷款用来满足其它客户\n    - 已分配资源表 \n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  P1  |  0   |  0   |  1   |  4   |\n    |  P2  |  1   |  4   |  3   |  2   |\n    |  P3  |  1   |  3   |  5   |  4   |\n    |  P4  |  1   |  0   |  0   |  0   |\n\n    - 所需资源表\n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  P1  |  0   |  6   |  5   |  6   |\n    |  P2  |  1   |  9   |  4   |  2   |\n    |  P3  |  1   |  3   |  5   |  6   |\n    |  P4  |  1   |  7   |  5   |  0   |\n\n    - 可分配资源表\n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  -   |  1   |  5   |  2   |  0   |\n\n    - 还需分配资源表\n    - 通过可分配资源表看它能够满足哪一个进程所需就把可分配资源给谁，不满足的就不执行知道有资源能够满足任何一个为止\n    - 所以P2会先获得资源\n\n    |      |  A   |  B   |  C   |  D   |\n    | :--: | :--: | :--: | :--: | :--: |\n    |  P1  |  0   |  6   |  4   |  2   |\n    |  P2  |  0   |  5   |  1   |  0   |\n    |  P3  |  0   |  0   |  0   |  2   |\n    |  P4  |  0   |  7   |  5   |  0   |\n\n\n\n## 4.存储管理\n\n### 4.1 计算机进行存储管理的必要性\n\n- 早期计算机编程并不需要过多的存储管理\n- 随着计算机和程序越来越复杂，存储管理成为必要\n-  确保计算机有足够的内存处理数据\n- 确保程序可以从可用内存中获取一部分内存使用\n- 确保程序可以归还使用后的内存以供其他程序使用\n\n### 4.2 内存的分配过程\n\n- 分配方法\n\n- 单一连续分配\n\n  - 单一连续分配是最简单的内存分配方式\n  - 只能在单用户、单进程的操作系统中使用\n  - 分为系统区，用户区\n\n- 固定分区分配\n\n  - 固定分区分配是支持多道程序的最简单存储分配方式\n  - 内存空间被划分为若干固定大小的区域\n  - 每个分区只提供给一个程序使用，互不干扰\n\n- 动态分区分配（常用）\n\n  - 根据进程实际需要，动态分配内存空间\n  - 相关数据结构、分配算法\n  - 动态分区空闲表数据结构，1：已使用，0：未使用\n\n  | 分区 | 1    | 2    | 3    | 4    |\n  | ---- | ---- | ---- | ---- | ---- |\n  | 标记 | 0    | 1    | 1    | 0    |\n\n  - 动态分区空闲链数据结构\n    - 采用双向链表将内存块链接起来，连续的空闲区可以合并在一个链表节点里\n    - 节点需记录可存储的容量\n  - 动态分区分配算法\n    - 首次适应算法(FF算法)\n      - 分配内存时从开始顺序查找适合内存区\n      - 若没有合适的空闲区，则该次分配失败\n      - 每次从头部开始，使得头部地址空间不断被划分\n      - 循环适应算法，每次分配不从头开始，从上一次结束的地方开始分配\n    - 最佳适应算法(BF算法)\n      - 最佳适应算法要求空闲区链表按照容量大小排序\n      - 遍历空闲区链表找到最佳合适空闲区\n    - 快速适应算法(QF算法)\n      - 快速适应算法要求有多个空闲区链表\n      - 每个空闲区链表存储一种容量的空闲区\n\n### 4.3 内存的回收过程\n\n- 存在回收内存的四种情况\n  - 回收区与空闲区链接在一起并且链接在后面\n    - 不需要新建空闲链表节点\n    - 只需要把空闲区1的容量增大为空闲区即可\n  - 回收区与空闲区链接在一起并且链接在前面\n    - 将回收区与空闲区合并\n    - 新的空闲区使用回收区的地址\n  - 回收区与空闲区链接在一起并且链接在中间\n    - 将空闲区1、空闲区2和回收区合并\n    - 新的空闲区使用空闲区1的地址\n  - 未链接空闲区，单一的回收区\n    - 为回收区创建新的空闲节点\n    - 插入到相应的空闲区链表中去\n\n### 4.4 进程的存储管理\n\n- 页式存储管理\n\n  - 字块是相对物理设备的定义，页面则是相对逻辑空间的定义\n  - 将进程逻辑空间等分成若干大小的页面\n  - 相应的把物理内存空间分成与页面大小的物理块\n  - 以页面为单位把进程空间装进物理内存中分散的物理块\n  - 页面大小应该适中，过大难以分配，过小内存碎片过多\n  - 页面大小通常是512B~8K\n  - **页表**：记录进程逻辑空间与物理空间的映射，表示为 [页面编号，字块编号]\n  - **页地址**：[地址，页内偏移]\n  - **问题**：现代计算机系统中，可以支持非常大的逻辑地址空间（2^32~2^64），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M(2^20)个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间\n    - 2^32/2^12=2^20=1M个页表项\n  - **多级页表**：根页表的字块存的是子页表的地址，在运行时可以按需加载子页表\n  - **不足**：有一段连续的逻辑分布在多个页面中，将大大降低执行效率\n\n- 段式存储管理\n\n  - 将进程逻辑空间划分成若干段（非等分）\n  - 段的长度由连续逻辑的长度决定\n  - 主函数MAIN、子程序段X、子函数Y等\n  - **段表**：[段号 ,基址. 段长]\n  - **段地址**：[段号, 段内偏移]\n\n- 页式存储管理与段式存储管理的对比\n\n  - 段式存储和页式存储都离散地管理了进程的逻辑空间\n  - 页是物理单位，段是逻辑单位\n  - 分页是为了合理利用空间，分段是满足用户要求\n  - 页大小由硬件固定，段长度可动态变化\n  - 页表信息是一维的，段表信息是二维的\n\n- 段页式存储管理\n\n  - 分页可以有效提高内存利用率（虽然说存在页内碎片）\n  - 分段可以更好满足用户需求，因为逻辑可以通过用户来写\n  - 两者结合，形成段页式存储管理\n  - 先将逻辑空间按段式管理分成若干段\n  - 再把段内空间按页式管理等分成若干页\n  - **段页地址**：[段号, 段内页号. 页内地址]\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801164213.jpg)\n\n### 4.5 虚拟内存\n\n- 虚拟内存概述\n  - 有些进程实际需要的内存很大，超过物理内存的容量\n  - 多道程序设计，使得每个进程可用物理内存更加稀缺\n  - 不可能无限增加物理内存，物理内存总有不够的时候\n  - 虚拟内存是操作系统内存管理的关键技术\n  - 使得多道程序运行和大程序运行成为现实\n  - 把程序使用内存划分，将部分暂时不使用的内存放置在辅存\n  - 虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存\n- 程序的局部性原理\n  - 局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。\n  - 程序运行时，无需全部装入内存，装载部分即可\n  - 如果访问页不在内存，则发出缺页中断，发起页面置换\n  - 从用户层面看，程序拥有很大的空间，即是虚拟内存\n- 虚拟内存的置换\n- 替换策略发生在Cache-主存层次、主存-辅存层次\n\t- Cache-主存层次的替换策略主要是为了解决速度问题\n\t- 主存-辅存层次主要是为了解决容量问题\n\t- 置换时机\n\t  - 高速缓存的替换时机\n\t    - 缓存没有数据，需要从主存载入所需数据\n\t  - 主存页面的替换时机\n\t    - 主存缺页，需要从辅存载入页面数据\n\t- 置换算法\n\t  - 先进先出算法(FIFO)\n\t    - 把主存看做是一个先进先出的队列\n\t    - 优先替换最先进入队列的字块\n\t  - 最不经常使用算法(LFU)\n\t    - 优先淘汰最不经常使用的字块\n\t    - 需要额外的空间记录字块的使用频率\n\t  - 最近最少使用算法(LRU)\n\t    - 优先淘汰一段时间内没有使用的字块\n\t    - 如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的\n\t    - 有多种实现方法，一般使用双向链表\n\n### 4.6 Linux的存储管理\n\n- 页内碎片 \n  - 内部碎片是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。\n- 页外碎片\n  - 外部碎片是指还没有分配出去（不属于任何进程），但是由于大小而无法分配给申请内存空间的新进程的内存空闲块。\n- Buddy内存管理算法\n\n  - Buddy算法是经典的内存管理算法\n  - 算法基于计算机处理二进制的优势具有极高的效率\n  - 算法主要是为了解决内存外碎片的问题\n  - 实际是将内存外碎片问题 转移成内存内碎片问题\n  - 努力让内存分配与相邻内存合并能快速进行\n  - 内存分配原则\n    - 向上取整为2的幂大小\n    - 70k→128k\n    - 129k→256k\n    - 666k→1024k\n  - 伙伴系统\n    - “伙伴”指的是内存的“伙伴”\n    -  一片连续内存的“伙伴”是相邻的另一片大小一样的连续内存\n  - 分配过程\n    - 创建一系列空闲块链表，每一种都是2的幂\n    - 假设存储空间有1M大小，分配100k内存\n    - 100k向上取2的幂=128k\n    - 查询是否有128k空闲内存块？\n    - 没有！查询是否有256k空闲内存块？\n    - 没有！查询是否有512k空闲内存块？\n    - 没有！查询是否有1M空闲内存块？\n    - 有，摘下1M空闲内存块，分配出去\n    - 拆下512k放在512k的空闲链表，其余的分配出去\n    - 拆下256k放在256k的空闲链表，其余的分配出去\n    - 拆下128k放在128k的空闲链表，其余的分配出去\n    - 分配完毕\n  - 回收过程\n    - 判断刚才分配的内存伙伴在空闲链表上吗？\n    - 在！移除伙伴，合并为256k空闲内存，判断\n    - 在！移除伙伴，合并为512k空闲内存，判断\n    - 在！移除伙伴，合并为1M空闲内存\n    - 插入1M空闲链表，回收完成\n- Linux交换空间\n\n  - 交换空间(Swap)是磁盘的一个分区\n  - Linux物理内存满时，会把一些内存交换至Swap空间\n  - Swap空间是初始化系统时配置的\n  - top命令可以查看交换空间的分配情况\n  - 主要用途：\n    - 冷启动内存依赖\n    - 系统睡眠依赖\n    - 大进程空间依赖\n  - 交换空间VS虚拟内存\n    - Swap空间是操作系统概念\n    - Swap空间解决系统物理内存不足问题\n    - Swap空间存在于磁盘\n    - Swap空间与主存发生置换\n    - 虚拟内存是进程概念\n    - 虚拟内存解决进程物理内存不足问题\n    - 虚拟内存存在于磁盘\n    - 虚拟内存与主存发生置换\n\n## 5.文件管理\n\n### 5.1 操作系统的文件管理\n\n- 文件的逻辑结构\n\n  - 逻辑结构的文件类型\n    - 有结构文件\n      - 文本文件、 文档 、媒体文件\n      - 文件内容由定长记录和可变长记录组成\n      - 定长记录存储文件格式、文件描述等结构化数据项\n      - 可变长记录存储文件具体内容\n      - 例如：PNG文件标记--PNG数据块--文件结束标记\n    - 无结构文件\n      - exe文件、 dll链接库文件、 so文件\n      -  二进制文件 、链接库\n      - 也称为流式文件\n      - 文件内容长度以字节为单位\n  - 顺序文件\n    - 顺序文件是指按顺序存放在存储介质中的文件\n    - 磁带的存储特性使得磁带文件只能存储顺序文件\n    - 顺序文件是所有逻辑文件当中存储效率最高的\n    - 顺序文件的增删改效率低\n  - 索引文件\n    - 可变长文件不适合使用顺序文件格式存储\n    - 索引文件是为了解决可变长文件存储而发明的一种文件格式\n    - 索引文件需要配合索引表完成存储的操作\n    - 索引表：[键 ,逻辑地址]\n\n- 辅存的存储空间分配\n\n  - 辅存的分配方式\n    - 连续分配\n      - 顺序读取文件内容非常容易，速度很快\n      - 对存储要求高，要求满足容量的连续存储空间\n    - 链接分配\n      - 链接分配可以将文件存储在离散的盘块中\n        需要额外的存储空间存储文件的盘块链接顺序\n      - 隐式链接 \n        - 隐式分配的下一个链接指向存储在当前盘块内\n        - 隐式分配适合顺序访问，随机访问效率很低\n        - 可靠性差，任何一个链接出问题都影响整个文件\n      - 显式链接\n        - FAT( File Allocation Table)  [物理块 ,下一盘块]\n        - 不支持高效的直接存储（FAT记录项多）\n        - 检索时FAT表占用较大的存储空间（需要将整个FAT加载到内存）\n    - 索引分配\n      - 把文件的所有盘块集中存储（索引）\n      - 读取某个文件时，将文件索引读取进内存即可\n      - 每个文件拥有一个索引块，记录所有盘块信息\n      - 索引分配方式支持直接访问盘块\n      - 文件较大时，索引分配方式具有明显优势\n\n- 辅存的存储空间管理\n\n\t- 空闲表\n\t\n\t  - [序号, 第一个空闲盘块号, 空闲盘块数]\n\t  - 空闲盘区的分配与内存分配类似\n\t  - 首次适应算法、循环适应算法等\n\t  - 回收过程也与内存回收类似\n\t\n\t- 空闲链表 \n\t\n\t  - 空闲链表法把所有空闲盘区组成一个空闲链表\n\t  - 每个链表节点存储空闲盘块和空闲的数目\n\t\n\t- 位示图\n\t\n\t  - 位示图维护成本很低\n\t  - 位示图可以非常容易找到空闲盘块\n\t  - 位示图使用0/1比特位，占用空间很小\n\t  - 0：未使用，1：已使用\n\t\n\t  | 盘块/磁道 |  1   |  2   |  3   |\n\t  | :-------: | :--: | :--: | :--: |\n\t  |     1     |  0   |  0   |  0   |\n\t  |     2     |  0   |  1   |  0   |\n\t  |     3     |  1   |  0   |  1   |\n\t\n- 目录管理\n\n  - 目录树：\n    - 任何文件或目录都只有唯一路径\n  - 文件描述信息\n    - 文件标识符 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针\n\n\n\n### 5.2 Linux文件的基本操作\n\n- Linux目录\n\n  - Linux一切皆文件\n  - 常用目录：/bin /etc /home /usr /opt /proc /dev /mnt /lib /var ...\n\n  | 目录  | 描述                                                         |\n  | ----- | ------------------------------------------------------------ |\n  | /bin  | 存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里   |\n  | /etc  | 存放系统管理和配置文件                                       |\n  | /home | 存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user |\n  | /usr  | 用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录 |\n  | /opt  | 额外安装的可选应用程序包所放置的位置                         |\n  | /proc | 虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 |\n  | /root | 超级用户（系统管理员）的主目录                               |\n  | /sbin | 存放二进制可执行文件，只有root才能访问                       |\n  | /dev  | 用于存放设备文件                                             |\n  | /mnt  | 系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。 |\n  | /boot | 存放用于系统引导时使用的各种文件                             |\n  | /lib  | 存放跟文件系统中的程序运行所需要的共享库及内核模块           |\n  | /var  | 用于存放运行时需要改变数据的文件                             |\n\n  - 相对路径：相对当前目录开始的目录\n  - 绝对路径：相对根目录开始的目录\n\n- Linux文件常用操作\n\n  - 创建：\n    - touch file \n    - vim file2 创建并编辑file2\n    - mkdir dir1 创建文件夹dir1\n  - 删除\n    - rm file \n    - rm -r dir1/ 递归删除文件夹dir1\n  - 读取\n    - cat file2\n  - 写入\n    - vim file2 创建并编辑file2\n\n- 文件类型\n\n\t- 普通文件(-)\n\t- 目录文件(d) \n\t- 符号链接(l) \n\t- 设备文件(b、 c)\n\t- 套接字(s) \n\t- FIFO(p)\n\n- Linux的文件系统\n\n\t- 文件系统概览\n\n\t  - FAT\n\t    - FAT(File Allocation Table)\n\t    - FAT16、 FAT32等，微软Dos/Windows使用的文件系统\n    - 使用一张表保存盘块的信息\n\t  - NTFS\n    - NTFS (New Technology File System)\n\t    - WindowsNT环境的文件系统\n\t    - NTFS对FAT进行了改进，取代了旧的文件系统\n  - EXT2/3/4\n\t    - EXT(Extended file system)：扩展文件系统\n\t    - Linux的文件系统\n\t    - EXT2/3/4 数字表示第几代\n\t\n\t- Ext文件系统\n\t\n\t\t- Boot Sector：启动扇区，安装开机管理程序\n\t\t\n\t- Block Group：块组，存储数据的实际位置\n\t\t\n\t\t- Boot Sector\n\t\t\n\t\t- Block Group\n\t\t\n\t\t  - SuperBlock\n\t\t    - 记录整个文件系统相关信息的地方\n\t\t    - Block和Inode的使用情况\n\t\t    - 时间信息、控制信息等\n\t\t  - Inode Bitmap\n\t\t    - Inode的位示图\n\t\t    - 记录已分配的Inode和未分配的Inode\n\t\t  - Block Bitmap\n\t\t    - 功能与Inode bitmap类似\n\t\t    - 记录Data block的使用情况\n\t\t  - Inode Table\n\t\t    - 存放文件Inode的地方\n\t\t    - 每一个文件（目录）都有一个Inode\n\t\t    - 是每一个文件（目录）的索引节点\n\t\t    - Inode：\n\t\t      - 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针 …\n\t\t      - 文件名不是存放在Inode节点上的，而是存放在目录的Inode节点\n\t\t      - 列出目录文件的时候无需加载文件的Inode\n\t\t  - Data Block\n\t\t    - Data block是存放文件内容的地方\n\t\t    - 每个block都有唯一的编号\n\t\t    - 文件的block记录在文件的Inode上\n\t\t\n\t\t  ![](https://tva1.sinaimg.cn/large/008eGmZEly1gnhudx17c4j30ku0b9dhl.jpg)\n\n## 6.设备管理\n\n- 广义的IO设备\n  - 对CPU而言，凡是对CPU进行数据输入的都\n  - 对CPU而言，凡是CPU进行数据输出的都是输出设备是输入设备\n\n- 广义的IIO设备分类\n\n  - 使用特性分类\n    - 存储设备： U盘 内存 磁盘 \n    - 交互IO设备：键盘 显示器 鼠标\n  - 信息交换的单位\n    - 块设备 ：磁盘 SD卡 \n    - 字符设备：打印机 Shell终端\n  - 设备共享属性\n    - 独占设备 \n    - 共享设备 \n    - 虚拟设备\n  - 传输速率\n    - 低速设备 \n    - 中速设备 \n    - 高速设备\n- IO设备的缓冲区\n  - 背景：CPU与IO设备的速率不匹配\n  - 减少CPU处理IO请求的频率\n  - 提高CPU与IO设备之间的并行性\n  - 专用缓冲区只适用于特定的IO进程\n  - 当这样的IO进程比较多时，对内存的消耗也很大\n  - 操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池\n- SPOOLing技术\n  - 虚拟设备技术\n  - 是关于慢速字符设备如何与计算机主机交换信息的一种技术\n  - 利用高速共享设备将低速的独享设备模拟为高速的共享设备\n  - 逻辑上，系统为每一个用户都分配了一台独立的高速独享设备\n  - SPOOLing技术把同步调用低速设备改为异步调用\n  - 在输入、输出之间增加了排队转储环节（输入井、输出井）\n  - SPOOLing负责输入（出）井与低速设备之间的调度\n  - 逻辑上，进程直接与高速设备交互，减少了进程的等待时间\n\n\n\n## 7.实践\n\n### 7.1 线程同步实践\n\n- 互斥量\n  - 两个线程的指令交叉执行导致了同步问题\n  - 互斥量可以保证先后执行\n  - 原子性\n    - 这一系列操作要么全部执行完成，要么全部没有执行\n    - 原子性是指一系列操作不可被中断的特性\n    - 不存在部分执行部分未执行的情况 \n  - 互斥量（互斥锁），处于两态之一的变量：解锁和加锁\n  - 互斥量是最简单的线程同步的方法\n  - 两个状态可以保证资源访问的串行\n  - 开发者可以直接使用API完成资源的加锁、解锁操作\n  - 操作系统直接提供了互斥量的API\n    - C 语言\n      - pthread_mutex_lock\n      - pthread_mutex_t\n      - pthread_mutex_unlock\n    - Java\n      - synchronized\n- 自旋锁\n  - 和互斥锁有什么不一样的？\n  - 使用自旋锁的线程会反复检查锁变量是否可用\n  - 自旋锁也是一种多线程同步的变量\n  - 自旋锁不会让出CPU，是一种忙等待状态\n  - 死循环等待锁被释放\n  - 操作系统内部很多地方使用的是自旋锁\n  - 自旋锁避免了进程或线程上下文切换的开销\n  - 自旋锁不适合在单核CPU使用，因为自旋锁不会让出CPU\n  - api\n    - pthread_spinlock_t\n    - pthread_ spinlock _lock_\n    - pthread_ spinlock _unlock\n- 读写锁\n  - 读取的时候并不会改变临界资源的值\n  - 临界资源多读少写\n  - 是否存在效率更高的同步方法？\n  - 允许多个读者同时访问资源以提高读性能\n  - 读写锁是一种特殊的自旋锁\n  - 对于写操作则是互斥的\n  - API\n    - pthread_rwlock_t\n    - pthread_rwlock_rdlock（读锁）\n    - pthread_rwlock_wrlock（写锁）\n  - 互斥量、自旋锁、读写锁 同步过程：等待解锁--加锁--【临界资源】--解锁\n- 条件变量\n  - 条件变量允许线程睡眠，直到满足某种条件\n  - 条件变量是一种相对复杂的线程同步方法\n  - 当满足条件时，可以向该线程信号，通知唤醒\n  - 生产者消费者问题\n    - 缓冲区满时，不允许生产者往缓冲区生产，生产者必须等待\n    - 缓冲区小于等于0时，不允许消费者消费，消费者必须等待\n    - 当生产者生产一个产品时，唤醒可能等待的消费者\n    - 当消费者消费一个产品时，唤醒可能等待的生产者\n  - API\n    - pthread_cond_t,配合互斥量使用\n    - pthread_cond_wait(等待条件满足)\n    - pthread_cond_signal(等待被唤醒)\n  - 条件变量同步流程：等待解锁--加锁保护条件变量--等待条件满足被唤醒--【临界资源】--解锁\n\n| 同步方法 | 描述                                                    |\n| -------- | ------------------------------------------------------- |\n| 互斥锁   | 最简单的一种线程同步方法，会阻塞线程                    |\n| 自旋锁   | 避免切换的一种线程同步方法，属于“忙等待”，不让出CPU     |\n| 读写锁   | 为“读多写少” 的资源设计的线程同步方法，可以显著提高性能 |\n| 条件变量 | 相对复杂的一种线程同步方法，有更灵活的使用场景          |\n\n\n\n### 7.2 进程同步实践\n\n- 使用fork系统调用创建进程\n  - fork创建的进程初始化状态与父进程一样\n  - fork系统调用是用于创建进程的\n  - 系统会为fork的进程分配新的资源\n  - fork会返回两次，分别返回子进程id和0\n  - fork系统调用无参数\n  - 返回子进程id的是父进程，返回0的是子进程\n\n- 共享内存\n  - 进程的线程共享进程资源\n  - 进程共享计算机资源\n  - 在某种程度上，多进程是共同使用物理内存的\n  - 由于操作系统的进程管理，进程间的内存空间是独立的\n  - 进程默认是不能访问进程空间之外的内存空间的\n  - 共享存储允许不相关的进程访问同一片物理内存\n  - 共享内存是两个进程之间共享和传递数据最快的方式\n  - 共享内存未提供同步机制，需要借助其他机制管理访问，比如通过一个Boolean的变量来控制是否可读可写\n  - 共享内存是高性能后台开发中最常用的进程同步方式\n  - 共享内存 使用流程\n    - 申请共享内存 \n    - 连接到进程空间\n    - 脱离进程空间 \n    - 使用共享内存&删除\n  - 代码实现\n- Unix域套接字\n  - 域套接字是一种高级的进程间通信的方法\n  - Unix域套接字可以用于同一机器进程间通信\n  - 套接字(socket)原是网络通信中使用的术语\n  - Unix系统提供的域套接字提供了网络套接字类似的功能\n  - Nginx、uWSGI\n  - 服务端\n    - 创建套接字\n    - 绑定(bind)套接字\n    - 监听(listen)套接字\n    - 接收&处理信息\n  - 客户端\n    - 创建套接字\n    - 连接套接字\n    - 发送信息\n  - 代码实现\n  - 提供了单机简单可靠的进程通信同步服务\n  - 只能在单机使用，不能跨机器使用\n\n\n\n## 8.关于我\n\n一个专注基础知识的十二线小码农，本着 **基础，体系，实践，分享** 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。\n\n[个人网站 basedev.cn](http://basedev.cn/)  \n\n[Github](https://github.com/jaydroid1024)\n\nBaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践\n\n\n\n## 9.参考\n\n[重学操作系统 | 拉钩教育](https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content)\n\n[编程必备基础 | 慕课网](https://coding.imooc.com/class/package/355.html)\n\n ","slug":"computer_os","published":1,"updated":"2021-08-01T10:03:21.291Z","_id":"ckrsz27oz0000moxf3qz9c79j","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-操作系统基础知识小抄版\"><a href=\"#筑基系列-操作系统基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-操作系统基础知识小抄版\"></a>筑基系列-操作系统基础知识小抄版</h1><blockquote>\n<p>计算机基础知识筑基三部曲：</p>\n<ul>\n<li><p><strong><a href=\"https://juejin.cn/post/6991367806772052004\" target=\"_blank\" rel=\"noopener\">第一部：筑基系列-计算机基础知识小抄版</a></strong></p>\n<ul>\n<li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li>\n</ul>\n</li>\n<li><p><strong><a href=\"https://juejin.cn/post/6991385109509193764\" target=\"_blank\" rel=\"noopener\">第二部：筑基系列-操作系统基础知识小抄版</a></strong></p>\n<ul>\n<li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li>\n</ul>\n</li>\n<li><p><strong><a href=\"https://juejin.cn/post/6991397445251334151\" target=\"_blank\" rel=\"noopener\">第三部：筑基系列-计算机网络基础知识小抄版</a></strong></p>\n<ul>\n<li>包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1.操作系统概览\">1.操作系统概览</a><ul>\n<li><a href=\"#11-什么是操作系统\">1.1 什么是操作系统</a></li>\n<li><a href=\"#12-为什么需要操作系统\">1.2 为什么需要操作系统</a></li>\n<li><a href=\"#13-操作系统的基本功能\">1.3 操作系统的基本功能</a></li>\n<li><a href=\"#14-操作系统相关概念\">1.4 操作系统相关概念</a></li>\n</ul>\n</li>\n<li><a href=\"#2.进程管理\">2.进程管理</a><ul>\n<li><a href=\"#21-进程概述\">2.1 进程概述</a></li>\n<li><a href=\"#22-进程管理五状态模型\">2.2 进程管理五状态模型</a></li>\n<li><a href=\"#23-进程同步\">2.3 进程同步</a></li>\n<li><a href=\"#24-linux的进程管理\">2.4 Linux的进程管理</a></li>\n</ul>\n</li>\n<li><a href=\"#3.作业管理\">3.作业管理</a><ul>\n<li><a href=\"#31-进程调度\">3.1 进程调度</a></li>\n<li><a href=\"#32-死锁\">3.2 死锁</a></li>\n</ul>\n</li>\n<li><a href=\"#4.存储管理\">4.存储管理</a><ul>\n<li><a href=\"#41-计算机进行存储管理的必要性\">4.1 计算机进行存储管理的必要性</a></li>\n<li><a href=\"#42-内存的分配过程\">4.2 内存的分配过程</a></li>\n<li><a href=\"#43-内存的回收过程\">4.3 内存的回收过程</a></li>\n<li><a href=\"#44-进程的存储管理\">4.4 进程的存储管理</a></li>\n<li><a href=\"#45-虚拟内存\">4.5 虚拟内存</a></li>\n<li><a href=\"#46-linux的存储管理\">4.6 Linux的存储管理</a></li>\n</ul>\n</li>\n<li><a href=\"#5.文件管理\">5.文件管理</a><ul>\n<li><a href=\"#51-操作系统的文件管理\">5.1 操作系统的文件管理</a></li>\n<li><a href=\"#52-linux文件的基本操作\">5.2 Linux文件的基本操作</a></li>\n</ul>\n</li>\n<li><a href=\"#6设备管理\">6.设备管理</a></li>\n<li><a href=\"#7.实践\">7.实践</a><ul>\n<li><a href=\"#71-线程同步实践\">7.1 线程同步实践</a></li>\n<li><a href=\"#72-进程同步实践\">7.2 进程同步实践</a></li>\n</ul>\n</li>\n<li><a href=\"#8关于我\">8.关于我</a></li>\n<li><a href=\"#9参考\">9.参考</a></li>\n</ul>\n<h2 id=\"1-操作系统概览\"><a href=\"#1-操作系统概览\" class=\"headerlink\" title=\"1 操作系统概览\"></a>1 操作系统概览</h2><h3 id=\"1-1-什么是操作系统\"><a href=\"#1-1-什么是操作系统\" class=\"headerlink\" title=\"1.1 什么是操作系统\"></a>1.1 什么是操作系统</h3><ul>\n<li>管理配置内存、决定资源供需顺序、控制输入输出设备等</li>\n<li>操作系统是管理计算机硬件和软件资源的计算机程序</li>\n<li>操作系统提供让用户和系统交互的操作界面</li>\n<li>从手机到超级计算机，操作系统可简单也可复杂</li>\n<li>操作系统的种类是多种多样的，不局限于计算机</li>\n<li>在不同的设备上，操作系统可向用户呈现多种操作手段</li>\n<li>Android，IOS，HarmonyOS</li>\n<li>Windows ，Linux ，MacOS</li>\n<li>总结：管理硬件、提供用户交互的软件系统</li>\n</ul>\n<h3 id=\"1-2-为什么需要操作系统\"><a href=\"#1-2-为什么需要操作系统\" class=\"headerlink\" title=\"1.2 为什么需要操作系统\"></a>1.2 为什么需要操作系统</h3><ul>\n<li>我们不可能直接操作计算机硬件</li>\n<li>设备种类繁多复杂，需要统一界面</li>\n<li>设备种类繁多复杂，需要统一界面</li>\n</ul>\n<h3 id=\"1-3-操作系统的基本功能\"><a href=\"#1-3-操作系统的基本功能\" class=\"headerlink\" title=\"1.3 操作系统的基本功能\"></a>1.3 操作系统的基本功能</h3><ul>\n<li>操作系统统一管理着计算机资源<ul>\n<li>处理器资源</li>\n<li>IO设备资源</li>\n<li>存储器资源</li>\n<li>文件资源</li>\n</ul>\n</li>\n<li>操作系统实现了对计算机资源的抽象<ul>\n<li>IO设备管理软件，提供读写接口</li>\n<li>用户无需面向硬件接口编程</li>\n<li>文件管理软件，提供操作文件接口</li>\n</ul>\n</li>\n<li>操作系统提供了用户与计算机之间的接口<ul>\n<li>命令形式</li>\n<li>图像窗口形式</li>\n<li>系统调用形式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-操作系统相关概念\"><a href=\"#1-4-操作系统相关概念\" class=\"headerlink\" title=\"1.4 操作系统相关概念\"></a>1.4 操作系统相关概念</h3><ul>\n<li>并发性/并行性<ul>\n<li>多道程序设计<ul>\n<li>多道程序设计是指在计算机内存中同时存放多个程序</li>\n<li>多道程序在计算机的管理程序之下相互穿插运行</li>\n</ul>\n</li>\n<li>并行是指两个或多个事件可以在同一个时刻发生</li>\n<li>并发是指两个或多个事件可以在同一个时间间隔发生</li>\n</ul>\n</li>\n<li>共享性<ul>\n<li>共享性表现为操作系统中的资源可供多个并发的程序共同使用</li>\n<li>这种共同使用的形式称之为资源共享</li>\n<li>多个程序可以同时使用主存资源</li>\n<li>资源共享根据属性可分为两种方式<ul>\n<li>互斥共享形式 <ul>\n<li>当资源被程序A占用时，其他想使用的话只能等待</li>\n<li>只有进程A使用完以后，其他进程才可以使用该资源</li>\n<li>打印机</li>\n</ul>\n</li>\n<li>同时访问形式<ul>\n<li>某种资源在一段时间内并发地被多个程序访问</li>\n<li>这种“同时”是宏观的，从宏观去看该资源可以被同时访问</li>\n<li>向磁盘写数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>虚拟性<ul>\n<li>虚拟性表现为把一个物理实体转变为若干个逻辑实体</li>\n<li>物理实体是真实存在的，逻辑实体是虚拟的</li>\n<li>虚拟的技术主要有时分复用技术和空分复用技术</li>\n<li>时分复用技术<ul>\n<li>资源在时间上进行复用，不同程序并发使用</li>\n<li>多道程序分时使用计算机的硬件资源</li>\n<li>提高资源的利用率</li>\n<li>虚拟处理器技术 <ul>\n<li>借助多道程序设计技术</li>\n<li>为每个程序建立进程</li>\n<li>多个程序分时复用处理器</li>\n</ul>\n</li>\n<li>虚拟设备技术<ul>\n<li>物理设备虚拟为多个逻辑设备</li>\n<li>每个程序占用一个逻辑设备</li>\n<li>多个程序通过逻辑设备并发访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>空分复用技术<ul>\n<li>空分复用技术用来实现虚拟磁盘、虚拟内存等</li>\n<li>提高资源的利用率，提升编程效率</li>\n<li>虚拟磁盘技术 <ul>\n<li>物理磁盘虚拟为逻辑磁盘</li>\n<li>C、 D、 E等逻辑盘</li>\n<li>使用起来更加安全、方便</li>\n</ul>\n</li>\n<li>虚拟内存技术<ul>\n<li>在逻辑上扩大程序的存储容量</li>\n<li>使用比实际内存更大的容量</li>\n<li>大大提升编程效率</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>异步性<ul>\n<li>在多道程序环境下，允许多个进程并发执行</li>\n<li>进程在使用资源时可能需要等待或放弃</li>\n<li>进程的执行并不是一气呵成的，而是以走走停停的形式推进</li>\n<li>进程以不可预知的速度向前推进</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-进程管理\"><a href=\"#2-进程管理\" class=\"headerlink\" title=\"2.进程管理\"></a>2.进程管理</h2><h3 id=\"2-1-进程概述\"><a href=\"#2-1-进程概述\" class=\"headerlink\" title=\"2.1 进程概述\"></a>2.1 进程概述</h3><ul>\n<li><p>为什么需要进程</p>\n<ul>\n<li>没有配置OS之前，资源属于当前运行的程序</li>\n<li>配置OS之后，引入多道程序设计的概念</li>\n<li>合理的隔离资源、运行环境，提升资源利用率</li>\n<li>进程是系统进行资源分配和调度的基本单位</li>\n<li>进程作为程序独立运行的载体保障程序正常执行</li>\n<li>进程的存在使得操作系统资源的利用率大幅提升</li>\n</ul>\n</li>\n<li><p>主存中的进程形态-进程控制块（PCB）</p>\n<ul>\n<li>用于描述和控制进程运行的通用数据结构</li>\n<li>记录进程当前状态和控制进程运行的全部信息</li>\n<li>PCB的使得进程是能够独立运行的基本单位</li>\n<li>PCB是操作系统进行调度经常会被读取的信息</li>\n<li>PCB是常驻内存的，存放在系统专门开辟的PCB区域内</li>\n<li>标识符<ul>\n<li>标识符唯一标记一个进程，用于区别其他进程</li>\n</ul>\n</li>\n<li>状态<ul>\n<li>标记进程的进程状态，如：运行态</li>\n</ul>\n</li>\n<li>优先级</li>\n<li>程序计数器<ul>\n<li>进程即将被执行的下一条指令的地址</li>\n</ul>\n</li>\n<li>内存指针<ul>\n<li>程序代码、进程数据相关指针</li>\n</ul>\n</li>\n<li>上下文数据<ul>\n<li>进程执行时处理器存储的数据</li>\n</ul>\n</li>\n<li>IO状态信息<ul>\n<li>被进程IO操作所占用的文件列表</li>\n</ul>\n</li>\n<li>记账信息<ul>\n<li>使用处理器时间、时钟数总和等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程与线程</p>\n<ul>\n<li>关系<ul>\n<li>一个进程可以有一个或多个线程</li>\n<li>进程是系统进行资源分配和调度的基本单位</li>\n<li>线程是操作系统进行运行调度的最小单位</li>\n<li>包含在进程之中，是进程中实际运行工作的单位</li>\n<li>一个进程可以并发多个线程，每个线程执行不同的任务</li>\n<li>进程的线程共享进程资源</li>\n</ul>\n</li>\n<li>区别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>进程</th>\n<th>线程</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>资源</td>\n<td>资源分配的基本单位</td>\n<td>不拥有资源</td>\n</tr>\n<tr>\n<td>调度</td>\n<td>独立调度的基本单位</td>\n<td>独立调度的最小单位</td>\n</tr>\n<tr>\n<td>系统开销</td>\n<td>进程系统开销大</td>\n<td>线程系统开销小</td>\n</tr>\n<tr>\n<td>通信</td>\n<td>进程IPC</td>\n<td>读写同一进程数据通信</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"2-2-进程管理五状态模型\"><a href=\"#2-2-进程管理五状态模型\" class=\"headerlink\" title=\"2.2 进程管理五状态模型\"></a>2.2 进程管理五状态模型</h3><ul>\n<li>就绪状态<ul>\n<li>当进程被分配到除CPU以外所有必要的资源后</li>\n<li>只要再获得CPU的使用权，就可以立即运行</li>\n<li>其他资源都准备好、只差CPU资源的状态为就绪状态</li>\n<li>就绪队列：在一个系统中多个处于就绪状态的进程通常排成一个队列</li>\n</ul>\n</li>\n<li>阻塞状态<ul>\n<li>进程因某种原因如：其他设备未就绪而无法继续执行</li>\n<li>从而放弃CPU的状态称为阻塞状态</li>\n<li>阻塞队列</li>\n</ul>\n</li>\n<li>执行状态<ul>\n<li>进程获得CPU，其程序正在执行称为执行状态</li>\n<li>在单处理机中，在某个时刻只能有一个进程是处于执行状态</li>\n</ul>\n</li>\n<li>创建状态<ul>\n<li>分配PCB—&gt; 插入就绪队列</li>\n<li>创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态</li>\n<li>操作系统提供fork函数接口创建进程</li>\n</ul>\n</li>\n<li>终止状态<ul>\n<li>系统清理 —&gt;PCB归还</li>\n<li>进程结束由系统清理或者归还PCB的状态称为终止状态</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163657.jpg\" alt=\"\"></p>\n<h3 id=\"2-3-进程同步\"><a href=\"#2-3-进程同步\" class=\"headerlink\" title=\"2.3 进程同步\"></a>2.3 进程同步</h3><ul>\n<li><p>为什么需要进程间同步</p>\n<ul>\n<li><p>生产者-消费者问题</p>\n<ul>\n<li>生产者进程将生产的产品提供给消费者进程进行消费</li>\n<li>生产者进程和消费者进程可以并发执行</li>\n<li>在两者之间设置了一个具有n个缓冲区的缓冲池</li>\n<li>生产者将产品缓冲区中，消费者进程从缓冲区取走产品消费</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163907.jpg\" alt=\"\"></p>\n<ul>\n<li>单从生产者程序或消费者程序去看是没问题的</li>\n<li>单两者并发执行时就可能出差错</li>\n<li>临界资源：缓存区</li>\n</ul>\n</li>\n<li><p>哲学家进餐问题</p>\n<ul>\n<li>有五个哲学家，他们的生活方式是交替地进行思考和进餐</li>\n<li>哲学家们共同使用一张圆桌，分别坐在周围的五张椅子上</li>\n<li>在圆桌上有五个碗和五支筷子。平时哲学家们只进行思考，饥饿时则试图取靠近他们的左、右两支筷子</li>\n<li>只有两支筷子都被他拿到的时候才能进餐</li>\n<li>进餐完毕之后，放下左右筷子继续思考</li>\n<li>五个哲学家同时拿起左边筷子</li>\n<li>五个哲学家都等待右边筷子释放</li>\n<li>五个哲学家饿死</li>\n<li>临界资源：筷子</li>\n</ul>\n</li>\n<li><p>问题的根源</p>\n<ul>\n<li>根源问题是：彼此相互之间没有通信</li>\n<li>如果生产者通知消费者我已经完成一件生产</li>\n<li>哲学家向旁边哲学家说我要进餐了</li>\n</ul>\n</li>\n<li><p>进程同步的目的</p>\n<ul>\n<li>对竞争资源在多进程间进行使用次序的协调</li>\n<li>使得并发执行的多个进程之间可以有效使用资源和相互合作</li>\n</ul>\n</li>\n<li><p>临界资源</p>\n<ul>\n<li>临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。</li>\n<li>当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使<br>用共享资源。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程间同步的原则</p>\n<ul>\n<li>空闲让进：资源无占用，允许使用</li>\n<li>忙则等待：资源有占用，请求进程等待</li>\n<li>有限等待：保证有限等待时间能够使用资源</li>\n<li>让权等待：等待时，进程需要让出CPU</li>\n</ul>\n</li>\n<li><p>进程间同步的方法</p>\n<ul>\n<li>消息队列</li>\n<li>共享存储</li>\n<li>信号量</li>\n</ul>\n</li>\n<li><p>线程同步</p>\n<ul>\n<li>进程的线程共享进程资源</li>\n<li>当多个线程并发使用进程资源时，也需要同步</li>\n<li>线程间同步的方法<ul>\n<li>互斥量</li>\n<li>读写锁</li>\n<li>自旋锁</li>\n<li>条件变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-Linux的进程管理\"><a href=\"#2-4-Linux的进程管理\" class=\"headerlink\" title=\"2.4 Linux的进程管理\"></a>2.4 Linux的进程管理</h3><ul>\n<li><p>进程的类型</p>\n<ul>\n<li>前台进程<ul>\n<li>前台进程就是具有终端，可以和用户交互的进程</li>\n</ul>\n</li>\n<li>后台进程<ul>\n<li>与前台进程相对，没有占用终端的就是后台进程</li>\n<li>后台程序基本上不和用户交互，优先级比前台进程低</li>\n<li>将需要执行的命令以“&amp;”符号结束</li>\n</ul>\n</li>\n<li>守护进程<ul>\n<li>守护(daemon)进程是特殊的后台进程</li>\n<li>很多守护进程在系统引导的时候启动，一直运行直到系统关闭</li>\n<li>Linux有很多典型的守护进程</li>\n<li>进程名字以“d”结尾的一般都是守护进程<ul>\n<li>crond</li>\n<li>httpd</li>\n<li>sshd</li>\n<li>mysqld</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程的标记</p>\n<ul>\n<li><p>进程ID</p>\n<ul>\n<li>进程ID是进程的唯一标记，每个进程拥有不同的ID</li>\n<li>进程ID表现为一个非负整数，最大值由操作系统限定</li>\n<li>top命令查看系统中的所有进程信息</li>\n<li>ID为0的进程为idle进程，是系统创建的第一个进程</li>\n<li>ID为1的进程为init进程，是0号进程的子进程，完成系统初始化</li>\n<li>Init进程是所有用户进程的祖先进程</li>\n</ul>\n</li>\n<li><p>进程的状态标记</p>\n<ul>\n<li>man ps 命令查看用户命令帮助文档</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态符号</th>\n<th>状态说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R</td>\n<td>(TASK_RUNNING)，进程正处于运行状态</td>\n</tr>\n<tr>\n<td>S</td>\n<td>(TASK_INTERRUPTIBLE)，进程正处于睡眠状态</td>\n</tr>\n<tr>\n<td>D</td>\n<td>(TASK_UNINTERRUPTIBLE)，进程正在处于IO等待的睡眠状态</td>\n</tr>\n<tr>\n<td>T</td>\n<td>(TASK_STOPPED)，进程正处于暂停状态</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>(TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>父子进程</p>\n<ul>\n<li>操作系统提供fork函数接口创建进程</li>\n<li>父子进程关系:进程A调用fork函数创建进程B,进程A就是进程B的父进程</li>\n<li>父子进程关系可以通过pstree命令查看</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作进程的相关命令</p>\n<ul>\n<li>ps命令<ul>\n<li>ps命令常用于显示当前进程的状态</li>\n<li>ps命令常配合aux参数或ef参数和grep命令检索特定进程</li>\n</ul>\n</li>\n<li>jobs<ul>\n<li>只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略</li>\n</ul>\n</li>\n<li>nohup<ul>\n<li>不挂断地运行命令</li>\n</ul>\n</li>\n<li>fg/bg命令<ul>\n<li>fg命令将一个后台命令调换至前台终端继续执行</li>\n<li>bg命令将一个后台暂停的命令变成继续执行</li>\n<li>ctrl+z将前台工作暂停</li>\n</ul>\n</li>\n<li>kill<ul>\n<li>kill命令发送指定信号给进程</li>\n<li>kill –l 可以查看操作系统支持的信号</li>\n<li>只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-作业管理\"><a href=\"#3-作业管理\" class=\"headerlink\" title=\"3.作业管理\"></a>3.作业管理</h2><h3 id=\"3-1-进程调度\"><a href=\"#3-1-进程调度\" class=\"headerlink\" title=\"3.1 进程调度\"></a>3.1 进程调度</h3><ul>\n<li><p>进程调度是指计算机通过决策决定哪个就绪进程可以获得CPU使用权</p>\n</li>\n<li><p>保留旧进程的运行信息，请出旧进程（收拾包袱）</p>\n</li>\n<li><p>选择新进程，准备运行环境并分配CPU（新进驻）</p>\n</li>\n<li><p>调度机制</p>\n<ul>\n<li>就绪队列的委派机制<ul>\n<li>将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程</li>\n</ul>\n</li>\n<li>选择运行进程的委派机制<ul>\n<li>调度程序以一定的策略选择就绪进程，将CPU资源分配给它</li>\n</ul>\n</li>\n<li>新老进程的上下文切换机制<ul>\n<li>保存当前进程的上下文信息，装入被委派执行进程的运行上下文</li>\n<li>老进程的上下文存入主存</li>\n<li>新进程的上下文装载到高速缓存中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>调度方式</p>\n<ul>\n<li>非抢占式的调度<ul>\n<li>处理器一旦分配给某个进程，就让该进程一直使用下去</li>\n<li>调度程序不以任何原因抢占正在被使用的处理器</li>\n<li>直到进程完成工作或因为IO阻塞才会让出处理器</li>\n</ul>\n</li>\n<li>抢占式的调度<ul>\n<li>允许调度程序以一定的策略暂停当前运行的进程</li>\n<li>保存好旧进程的上下文信息，分配处理器给新进程</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>抢占式调度</th>\n<th>抢占式调度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>系统开销</td>\n<td>频繁切换，开销大</td>\n<td>切换次数少，开销小</td>\n</tr>\n<tr>\n<td>公平性</td>\n<td>相对公平</td>\n<td>不公平</td>\n</tr>\n<tr>\n<td>应用</td>\n<td>通用系统</td>\n<td>专用系统</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>调度算法</p>\n<ul>\n<li>先来先服务调度算法<ul>\n<li>从就绪队列按照顺序从队列头开始调度</li>\n</ul>\n</li>\n<li>短进程优先调度算法<ul>\n<li>调度程序优先选择就绪队列中估计运行时间最短的进程</li>\n<li>短进程优先调度算法不利于长作业进程的执行</li>\n</ul>\n</li>\n<li>高优先权优先调度算法<ul>\n<li>进程附带优先权，调度程序优先选择权重高的进程</li>\n<li>高优先权优先调度算法使得紧迫的任务可以优先处理</li>\n<li>前台进程优先级高于后台进程</li>\n</ul>\n</li>\n<li>时间片轮转算法<ul>\n<li>按先来先服务的原则排列就绪进程</li>\n<li>每次从队列头部取出待执行进程，分配一个时间片执行</li>\n<li>是相对公平的调度算法，但不能保证及时响应用户</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-死锁\"><a href=\"#3-2-死锁\" class=\"headerlink\" title=\"3.2 死锁\"></a>3.2 死锁</h3><ul>\n<li><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>\n</li>\n<li><p>死锁的产生</p>\n<ul>\n<li><p>基本原因</p>\n<ul>\n<li>竞争资源<ul>\n<li>共享资源数量不满足各个进程需求</li>\n<li>各个进程之间发生资源竞争导致死锁</li>\n</ul>\n</li>\n<li>进程调度顺序不当<ul>\n<li>调度顺序导致共享资源被多个进程互相持有无法释放，可以优先满足进程A的调度再调度B</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>必要条件</p>\n<ul>\n<li>互斥条件<ul>\n<li>进程对资源的使用是排他性的使用</li>\n<li>某资源只能由一个进程使用，其他进程需要使用只能等待</li>\n</ul>\n</li>\n<li>请求保持条件<ul>\n<li>进程至少保持一个资源，又提出新的资源请求</li>\n<li>新资源被占用，请求被阻塞</li>\n<li>被阻塞的进程不释放自己保持的资源</li>\n</ul>\n</li>\n<li>不可剥夺条件<ul>\n<li>进程获得的资源在未完成使用前不能被剥夺</li>\n<li>获得的资源只能由进程自身释放</li>\n</ul>\n</li>\n<li>环路等待条件<ul>\n<li>发生死锁时，必然存在进程-资源环形链</li>\n<li>P1(R1)-&gt; P2(R2)-&gt;P3(R3-&gt;)P4(R4) -&gt;P1(R1)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>死锁的处理</p>\n<ul>\n<li><p>预防死锁的方法-破坏必要条件</p>\n<ul>\n<li>摒弃请求保持条件<ul>\n<li>系统规定进程运行之前，一次性申请所有需要的资源</li>\n<li>进程在运行期间不会提出资源请求，从而摒弃请求保持条件</li>\n</ul>\n</li>\n<li>摒弃不可剥夺条件<ul>\n<li>当一个进程请求新的资源得不到满足时，必须释放占有的资源</li>\n<li>进程运行时占有的资源可以被释放，意味着可以被剥夺</li>\n</ul>\n</li>\n<li>摒弃环路等待条件<ul>\n<li>可用资源线性排序，申请必须按照需要递增申请</li>\n<li>线性申请不再形成环路，从而摒弃了环路等待条件，A B C D E</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>银行家算法</p>\n<ul>\n<li>是一个可操作的著名的避免死锁的算法</li>\n<li>以银行借贷系统分配策略为基础的算法</li>\n<li>客户申请的贷款是有限的，每次申请需声明最大资金量</li>\n<li>银行家在能够满足贷款时，都应该给用户贷款</li>\n<li>客户在使用贷款后，能够及时归还贷款用来满足其它客户</li>\n<li>已分配资源表 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">P1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">P2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">P4</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>所需资源表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">P1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">P2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">9</td>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">P4</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">5</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>可分配资源表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-</td>\n<td align=\"center\">1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>还需分配资源表</li>\n<li>通过可分配资源表看它能够满足哪一个进程所需就把可分配资源给谁，不满足的就不执行知道有资源能够满足任何一个为止</li>\n<li>所以P2会先获得资源</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">P1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">6</td>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P2</td>\n<td align=\"center\">0</td>\n<td align=\"center\">5</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">P3</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P4</td>\n<td align=\"center\">0</td>\n<td align=\"center\">7</td>\n<td align=\"center\">5</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-存储管理\"><a href=\"#4-存储管理\" class=\"headerlink\" title=\"4.存储管理\"></a>4.存储管理</h2><h3 id=\"4-1-计算机进行存储管理的必要性\"><a href=\"#4-1-计算机进行存储管理的必要性\" class=\"headerlink\" title=\"4.1 计算机进行存储管理的必要性\"></a>4.1 计算机进行存储管理的必要性</h3><ul>\n<li>早期计算机编程并不需要过多的存储管理</li>\n<li>随着计算机和程序越来越复杂，存储管理成为必要</li>\n<li>确保计算机有足够的内存处理数据</li>\n<li>确保程序可以从可用内存中获取一部分内存使用</li>\n<li>确保程序可以归还使用后的内存以供其他程序使用</li>\n</ul>\n<h3 id=\"4-2-内存的分配过程\"><a href=\"#4-2-内存的分配过程\" class=\"headerlink\" title=\"4.2 内存的分配过程\"></a>4.2 内存的分配过程</h3><ul>\n<li><p>分配方法</p>\n</li>\n<li><p>单一连续分配</p>\n<ul>\n<li>单一连续分配是最简单的内存分配方式</li>\n<li>只能在单用户、单进程的操作系统中使用</li>\n<li>分为系统区，用户区</li>\n</ul>\n</li>\n<li><p>固定分区分配</p>\n<ul>\n<li>固定分区分配是支持多道程序的最简单存储分配方式</li>\n<li>内存空间被划分为若干固定大小的区域</li>\n<li>每个分区只提供给一个程序使用，互不干扰</li>\n</ul>\n</li>\n<li><p>动态分区分配（常用）</p>\n<ul>\n<li>根据进程实际需要，动态分配内存空间</li>\n<li>相关数据结构、分配算法</li>\n<li>动态分区空闲表数据结构，1：已使用，0：未使用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分区</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标记</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>动态分区空闲链数据结构<ul>\n<li>采用双向链表将内存块链接起来，连续的空闲区可以合并在一个链表节点里</li>\n<li>节点需记录可存储的容量</li>\n</ul>\n</li>\n<li>动态分区分配算法<ul>\n<li>首次适应算法(FF算法)<ul>\n<li>分配内存时从开始顺序查找适合内存区</li>\n<li>若没有合适的空闲区，则该次分配失败</li>\n<li>每次从头部开始，使得头部地址空间不断被划分</li>\n<li>循环适应算法，每次分配不从头开始，从上一次结束的地方开始分配</li>\n</ul>\n</li>\n<li>最佳适应算法(BF算法)<ul>\n<li>最佳适应算法要求空闲区链表按照容量大小排序</li>\n<li>遍历空闲区链表找到最佳合适空闲区</li>\n</ul>\n</li>\n<li>快速适应算法(QF算法)<ul>\n<li>快速适应算法要求有多个空闲区链表</li>\n<li>每个空闲区链表存储一种容量的空闲区</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-内存的回收过程\"><a href=\"#4-3-内存的回收过程\" class=\"headerlink\" title=\"4.3 内存的回收过程\"></a>4.3 内存的回收过程</h3><ul>\n<li>存在回收内存的四种情况<ul>\n<li>回收区与空闲区链接在一起并且链接在后面<ul>\n<li>不需要新建空闲链表节点</li>\n<li>只需要把空闲区1的容量增大为空闲区即可</li>\n</ul>\n</li>\n<li>回收区与空闲区链接在一起并且链接在前面<ul>\n<li>将回收区与空闲区合并</li>\n<li>新的空闲区使用回收区的地址</li>\n</ul>\n</li>\n<li>回收区与空闲区链接在一起并且链接在中间<ul>\n<li>将空闲区1、空闲区2和回收区合并</li>\n<li>新的空闲区使用空闲区1的地址</li>\n</ul>\n</li>\n<li>未链接空闲区，单一的回收区<ul>\n<li>为回收区创建新的空闲节点</li>\n<li>插入到相应的空闲区链表中去</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-4-进程的存储管理\"><a href=\"#4-4-进程的存储管理\" class=\"headerlink\" title=\"4.4 进程的存储管理\"></a>4.4 进程的存储管理</h3><ul>\n<li><p>页式存储管理</p>\n<ul>\n<li>字块是相对物理设备的定义，页面则是相对逻辑空间的定义</li>\n<li>将进程逻辑空间等分成若干大小的页面</li>\n<li>相应的把物理内存空间分成与页面大小的物理块</li>\n<li>以页面为单位把进程空间装进物理内存中分散的物理块</li>\n<li>页面大小应该适中，过大难以分配，过小内存碎片过多</li>\n<li>页面大小通常是512B~8K</li>\n<li><strong>页表</strong>：记录进程逻辑空间与物理空间的映射，表示为 [页面编号，字块编号]</li>\n<li><strong>页地址</strong>：[地址，页内偏移]</li>\n<li><strong>问题</strong>：现代计算机系统中，可以支持非常大的逻辑地址空间（2^32~2^64），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M(2^20)个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间<ul>\n<li>2^32/2^12=2^20=1M个页表项</li>\n</ul>\n</li>\n<li><strong>多级页表</strong>：根页表的字块存的是子页表的地址，在运行时可以按需加载子页表</li>\n<li><strong>不足</strong>：有一段连续的逻辑分布在多个页面中，将大大降低执行效率</li>\n</ul>\n</li>\n<li><p>段式存储管理</p>\n<ul>\n<li>将进程逻辑空间划分成若干段（非等分）</li>\n<li>段的长度由连续逻辑的长度决定</li>\n<li>主函数MAIN、子程序段X、子函数Y等</li>\n<li><strong>段表</strong>：[段号 ,基址. 段长]</li>\n<li><strong>段地址</strong>：[段号, 段内偏移]</li>\n</ul>\n</li>\n<li><p>页式存储管理与段式存储管理的对比</p>\n<ul>\n<li>段式存储和页式存储都离散地管理了进程的逻辑空间</li>\n<li>页是物理单位，段是逻辑单位</li>\n<li>分页是为了合理利用空间，分段是满足用户要求</li>\n<li>页大小由硬件固定，段长度可动态变化</li>\n<li>页表信息是一维的，段表信息是二维的</li>\n</ul>\n</li>\n<li><p>段页式存储管理</p>\n<ul>\n<li>分页可以有效提高内存利用率（虽然说存在页内碎片）</li>\n<li>分段可以更好满足用户需求，因为逻辑可以通过用户来写</li>\n<li>两者结合，形成段页式存储管理</li>\n<li>先将逻辑空间按段式管理分成若干段</li>\n<li>再把段内空间按页式管理等分成若干页</li>\n<li><strong>段页地址</strong>：[段号, 段内页号. 页内地址]</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801164213.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"4-5-虚拟内存\"><a href=\"#4-5-虚拟内存\" class=\"headerlink\" title=\"4.5 虚拟内存\"></a>4.5 虚拟内存</h3><ul>\n<li>虚拟内存概述<ul>\n<li>有些进程实际需要的内存很大，超过物理内存的容量</li>\n<li>多道程序设计，使得每个进程可用物理内存更加稀缺</li>\n<li>不可能无限增加物理内存，物理内存总有不够的时候</li>\n<li>虚拟内存是操作系统内存管理的关键技术</li>\n<li>使得多道程序运行和大程序运行成为现实</li>\n<li>把程序使用内存划分，将部分暂时不使用的内存放置在辅存</li>\n<li>虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存</li>\n</ul>\n</li>\n<li>程序的局部性原理<ul>\n<li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li>\n<li>程序运行时，无需全部装入内存，装载部分即可</li>\n<li>如果访问页不在内存，则发出缺页中断，发起页面置换</li>\n<li>从用户层面看，程序拥有很大的空间，即是虚拟内存</li>\n</ul>\n</li>\n<li>虚拟内存的置换</li>\n<li>替换策略发生在Cache-主存层次、主存-辅存层次<ul>\n<li>Cache-主存层次的替换策略主要是为了解决速度问题</li>\n<li>主存-辅存层次主要是为了解决容量问题</li>\n<li>置换时机<ul>\n<li>高速缓存的替换时机<ul>\n<li>缓存没有数据，需要从主存载入所需数据</li>\n</ul>\n</li>\n<li>主存页面的替换时机<ul>\n<li>主存缺页，需要从辅存载入页面数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>置换算法<ul>\n<li>先进先出算法(FIFO)<ul>\n<li>把主存看做是一个先进先出的队列</li>\n<li>优先替换最先进入队列的字块</li>\n</ul>\n</li>\n<li>最不经常使用算法(LFU)<ul>\n<li>优先淘汰最不经常使用的字块</li>\n<li>需要额外的空间记录字块的使用频率</li>\n</ul>\n</li>\n<li>最近最少使用算法(LRU)<ul>\n<li>优先淘汰一段时间内没有使用的字块</li>\n<li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li>\n<li>有多种实现方法，一般使用双向链表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-6-Linux的存储管理\"><a href=\"#4-6-Linux的存储管理\" class=\"headerlink\" title=\"4.6 Linux的存储管理\"></a>4.6 Linux的存储管理</h3><ul>\n<li><p>页内碎片 </p>\n<ul>\n<li>内部碎片是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。</li>\n</ul>\n</li>\n<li><p>页外碎片</p>\n<ul>\n<li>外部碎片是指还没有分配出去（不属于任何进程），但是由于大小而无法分配给申请内存空间的新进程的内存空闲块。</li>\n</ul>\n</li>\n<li><p>Buddy内存管理算法</p>\n<ul>\n<li>Buddy算法是经典的内存管理算法</li>\n<li>算法基于计算机处理二进制的优势具有极高的效率</li>\n<li>算法主要是为了解决内存外碎片的问题</li>\n<li>实际是将内存外碎片问题 转移成内存内碎片问题</li>\n<li>努力让内存分配与相邻内存合并能快速进行</li>\n<li>内存分配原则<ul>\n<li>向上取整为2的幂大小</li>\n<li>70k→128k</li>\n<li>129k→256k</li>\n<li>666k→1024k</li>\n</ul>\n</li>\n<li>伙伴系统<ul>\n<li>“伙伴”指的是内存的“伙伴”</li>\n<li>一片连续内存的“伙伴”是相邻的另一片大小一样的连续内存</li>\n</ul>\n</li>\n<li>分配过程<ul>\n<li>创建一系列空闲块链表，每一种都是2的幂</li>\n<li>假设存储空间有1M大小，分配100k内存</li>\n<li>100k向上取2的幂=128k</li>\n<li>查询是否有128k空闲内存块？</li>\n<li>没有！查询是否有256k空闲内存块？</li>\n<li>没有！查询是否有512k空闲内存块？</li>\n<li>没有！查询是否有1M空闲内存块？</li>\n<li>有，摘下1M空闲内存块，分配出去</li>\n<li>拆下512k放在512k的空闲链表，其余的分配出去</li>\n<li>拆下256k放在256k的空闲链表，其余的分配出去</li>\n<li>拆下128k放在128k的空闲链表，其余的分配出去</li>\n<li>分配完毕</li>\n</ul>\n</li>\n<li>回收过程<ul>\n<li>判断刚才分配的内存伙伴在空闲链表上吗？</li>\n<li>在！移除伙伴，合并为256k空闲内存，判断</li>\n<li>在！移除伙伴，合并为512k空闲内存，判断</li>\n<li>在！移除伙伴，合并为1M空闲内存</li>\n<li>插入1M空闲链表，回收完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Linux交换空间</p>\n<ul>\n<li>交换空间(Swap)是磁盘的一个分区</li>\n<li>Linux物理内存满时，会把一些内存交换至Swap空间</li>\n<li>Swap空间是初始化系统时配置的</li>\n<li>top命令可以查看交换空间的分配情况</li>\n<li>主要用途：<ul>\n<li>冷启动内存依赖</li>\n<li>系统睡眠依赖</li>\n<li>大进程空间依赖</li>\n</ul>\n</li>\n<li>交换空间VS虚拟内存<ul>\n<li>Swap空间是操作系统概念</li>\n<li>Swap空间解决系统物理内存不足问题</li>\n<li>Swap空间存在于磁盘</li>\n<li>Swap空间与主存发生置换</li>\n<li>虚拟内存是进程概念</li>\n<li>虚拟内存解决进程物理内存不足问题</li>\n<li>虚拟内存存在于磁盘</li>\n<li>虚拟内存与主存发生置换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-文件管理\"><a href=\"#5-文件管理\" class=\"headerlink\" title=\"5.文件管理\"></a>5.文件管理</h2><h3 id=\"5-1-操作系统的文件管理\"><a href=\"#5-1-操作系统的文件管理\" class=\"headerlink\" title=\"5.1 操作系统的文件管理\"></a>5.1 操作系统的文件管理</h3><ul>\n<li><p>文件的逻辑结构</p>\n<ul>\n<li>逻辑结构的文件类型<ul>\n<li>有结构文件<ul>\n<li>文本文件、 文档 、媒体文件</li>\n<li>文件内容由定长记录和可变长记录组成</li>\n<li>定长记录存储文件格式、文件描述等结构化数据项</li>\n<li>可变长记录存储文件具体内容</li>\n<li>例如：PNG文件标记–PNG数据块–文件结束标记</li>\n</ul>\n</li>\n<li>无结构文件<ul>\n<li>exe文件、 dll链接库文件、 so文件</li>\n<li>二进制文件 、链接库</li>\n<li>也称为流式文件</li>\n<li>文件内容长度以字节为单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>顺序文件<ul>\n<li>顺序文件是指按顺序存放在存储介质中的文件</li>\n<li>磁带的存储特性使得磁带文件只能存储顺序文件</li>\n<li>顺序文件是所有逻辑文件当中存储效率最高的</li>\n<li>顺序文件的增删改效率低</li>\n</ul>\n</li>\n<li>索引文件<ul>\n<li>可变长文件不适合使用顺序文件格式存储</li>\n<li>索引文件是为了解决可变长文件存储而发明的一种文件格式</li>\n<li>索引文件需要配合索引表完成存储的操作</li>\n<li>索引表：[键 ,逻辑地址]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>辅存的存储空间分配</p>\n<ul>\n<li>辅存的分配方式<ul>\n<li>连续分配<ul>\n<li>顺序读取文件内容非常容易，速度很快</li>\n<li>对存储要求高，要求满足容量的连续存储空间</li>\n</ul>\n</li>\n<li>链接分配<ul>\n<li>链接分配可以将文件存储在离散的盘块中<br>需要额外的存储空间存储文件的盘块链接顺序</li>\n<li>隐式链接 <ul>\n<li>隐式分配的下一个链接指向存储在当前盘块内</li>\n<li>隐式分配适合顺序访问，随机访问效率很低</li>\n<li>可靠性差，任何一个链接出问题都影响整个文件</li>\n</ul>\n</li>\n<li>显式链接<ul>\n<li>FAT( File Allocation Table)  [物理块 ,下一盘块]</li>\n<li>不支持高效的直接存储（FAT记录项多）</li>\n<li>检索时FAT表占用较大的存储空间（需要将整个FAT加载到内存）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>索引分配<ul>\n<li>把文件的所有盘块集中存储（索引）</li>\n<li>读取某个文件时，将文件索引读取进内存即可</li>\n<li>每个文件拥有一个索引块，记录所有盘块信息</li>\n<li>索引分配方式支持直接访问盘块</li>\n<li>文件较大时，索引分配方式具有明显优势</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>辅存的存储空间管理</p>\n<ul>\n<li><p>空闲表</p>\n<ul>\n<li>[序号, 第一个空闲盘块号, 空闲盘块数]</li>\n<li>空闲盘区的分配与内存分配类似</li>\n<li>首次适应算法、循环适应算法等</li>\n<li>回收过程也与内存回收类似</li>\n</ul>\n</li>\n<li><p>空闲链表 </p>\n<ul>\n<li>空闲链表法把所有空闲盘区组成一个空闲链表</li>\n<li>每个链表节点存储空闲盘块和空闲的数目</li>\n</ul>\n</li>\n<li><p>位示图</p>\n<ul>\n<li>位示图维护成本很低</li>\n<li>位示图可以非常容易找到空闲盘块</li>\n<li>位示图使用0/1比特位，占用空间很小</li>\n<li>0：未使用，1：已使用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">盘块/磁道</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>目录管理</p>\n<ul>\n<li>目录树：<ul>\n<li>任何文件或目录都只有唯一路径</li>\n</ul>\n</li>\n<li>文件描述信息<ul>\n<li>文件标识符 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-Linux文件的基本操作\"><a href=\"#5-2-Linux文件的基本操作\" class=\"headerlink\" title=\"5.2 Linux文件的基本操作\"></a>5.2 Linux文件的基本操作</h3><ul>\n<li><p>Linux目录</p>\n<ul>\n<li>Linux一切皆文件</li>\n<li>常用目录：/bin /etc /home /usr /opt /proc /dev /mnt /lib /var …</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/bin</td>\n<td>存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>存放系统管理和配置文件</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>额外安装的可选应用程序包所放置的位置</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>超级用户（系统管理员）的主目录</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>存放二进制可执行文件，只有root才能访问</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>用于存放设备文件</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>存放用于系统引导时使用的各种文件</td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>存放跟文件系统中的程序运行所需要的共享库及内核模块</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>用于存放运行时需要改变数据的文件</td>\n</tr>\n</tbody></table>\n<ul>\n<li>相对路径：相对当前目录开始的目录</li>\n<li>绝对路径：相对根目录开始的目录</li>\n</ul>\n</li>\n<li><p>Linux文件常用操作</p>\n<ul>\n<li>创建：<ul>\n<li>touch file </li>\n<li>vim file2 创建并编辑file2</li>\n<li>mkdir dir1 创建文件夹dir1</li>\n</ul>\n</li>\n<li>删除<ul>\n<li>rm file </li>\n<li>rm -r dir1/ 递归删除文件夹dir1</li>\n</ul>\n</li>\n<li>读取<ul>\n<li>cat file2</li>\n</ul>\n</li>\n<li>写入<ul>\n<li>vim file2 创建并编辑file2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>文件类型</p>\n<ul>\n<li>普通文件(-)</li>\n<li>目录文件(d) </li>\n<li>符号链接(l) </li>\n<li>设备文件(b、 c)</li>\n<li>套接字(s) </li>\n<li>FIFO(p)</li>\n</ul>\n</li>\n<li><p>Linux的文件系统</p>\n<ul>\n<li><p>文件系统概览</p>\n<ul>\n<li>FAT<ul>\n<li>FAT(File Allocation Table)</li>\n<li>FAT16、 FAT32等，微软Dos/Windows使用的文件系统</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>使用一张表保存盘块的信息</p>\n<ul>\n<li>NTFS</li>\n</ul>\n</li>\n<li><p>NTFS (New Technology File System)</p>\n<ul>\n<li>WindowsNT环境的文件系统</li>\n<li>NTFS对FAT进行了改进，取代了旧的文件系统<ul>\n<li>EXT2/3/4</li>\n</ul>\n</li>\n<li>EXT(Extended file system)：扩展文件系统</li>\n<li>Linux的文件系统</li>\n<li>EXT2/3/4 数字表示第几代</li>\n</ul>\n</li>\n<li><p>Ext文件系统</p>\n<ul>\n<li>Boot Sector：启动扇区，安装开机管理程序</li>\n</ul>\n</li>\n<li><p>Block Group：块组，存储数据的实际位置</p>\n<ul>\n<li><p>Boot Sector</p>\n</li>\n<li><p>Block Group</p>\n<ul>\n<li>SuperBlock<ul>\n<li>记录整个文件系统相关信息的地方</li>\n<li>Block和Inode的使用情况</li>\n<li>时间信息、控制信息等</li>\n</ul>\n</li>\n<li>Inode Bitmap<ul>\n<li>Inode的位示图</li>\n<li>记录已分配的Inode和未分配的Inode</li>\n</ul>\n</li>\n<li>Block Bitmap<ul>\n<li>功能与Inode bitmap类似</li>\n<li>记录Data block的使用情况</li>\n</ul>\n</li>\n<li>Inode Table<ul>\n<li>存放文件Inode的地方</li>\n<li>每一个文件（目录）都有一个Inode</li>\n<li>是每一个文件（目录）的索引节点</li>\n<li>Inode：<ul>\n<li>文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针 …</li>\n<li>文件名不是存放在Inode节点上的，而是存放在目录的Inode节点</li>\n<li>列出目录文件的时候无需加载文件的Inode</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Data Block<ul>\n<li>Data block是存放文件内容的地方</li>\n<li>每个block都有唯一的编号</li>\n<li>文件的block记录在文件的Inode上</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gnhudx17c4j30ku0b9dhl.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-设备管理\"><a href=\"#6-设备管理\" class=\"headerlink\" title=\"6.设备管理\"></a>6.设备管理</h2><ul>\n<li><p>广义的IO设备</p>\n<ul>\n<li>对CPU而言，凡是对CPU进行数据输入的都</li>\n<li>对CPU而言，凡是CPU进行数据输出的都是输出设备是输入设备</li>\n</ul>\n</li>\n<li><p>广义的IIO设备分类</p>\n<ul>\n<li>使用特性分类<ul>\n<li>存储设备： U盘 内存 磁盘 </li>\n<li>交互IO设备：键盘 显示器 鼠标</li>\n</ul>\n</li>\n<li>信息交换的单位<ul>\n<li>块设备 ：磁盘 SD卡 </li>\n<li>字符设备：打印机 Shell终端</li>\n</ul>\n</li>\n<li>设备共享属性<ul>\n<li>独占设备 </li>\n<li>共享设备 </li>\n<li>虚拟设备</li>\n</ul>\n</li>\n<li>传输速率<ul>\n<li>低速设备 </li>\n<li>中速设备 </li>\n<li>高速设备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>IO设备的缓冲区</p>\n<ul>\n<li>背景：CPU与IO设备的速率不匹配</li>\n<li>减少CPU处理IO请求的频率</li>\n<li>提高CPU与IO设备之间的并行性</li>\n<li>专用缓冲区只适用于特定的IO进程</li>\n<li>当这样的IO进程比较多时，对内存的消耗也很大</li>\n<li>操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池</li>\n</ul>\n</li>\n<li><p>SPOOLing技术</p>\n<ul>\n<li>虚拟设备技术</li>\n<li>是关于慢速字符设备如何与计算机主机交换信息的一种技术</li>\n<li>利用高速共享设备将低速的独享设备模拟为高速的共享设备</li>\n<li>逻辑上，系统为每一个用户都分配了一台独立的高速独享设备</li>\n<li>SPOOLing技术把同步调用低速设备改为异步调用</li>\n<li>在输入、输出之间增加了排队转储环节（输入井、输出井）</li>\n<li>SPOOLing负责输入（出）井与低速设备之间的调度</li>\n<li>逻辑上，进程直接与高速设备交互，减少了进程的等待时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-实践\"><a href=\"#7-实践\" class=\"headerlink\" title=\"7.实践\"></a>7.实践</h2><h3 id=\"7-1-线程同步实践\"><a href=\"#7-1-线程同步实践\" class=\"headerlink\" title=\"7.1 线程同步实践\"></a>7.1 线程同步实践</h3><ul>\n<li>互斥量<ul>\n<li>两个线程的指令交叉执行导致了同步问题</li>\n<li>互斥量可以保证先后执行</li>\n<li>原子性<ul>\n<li>这一系列操作要么全部执行完成，要么全部没有执行</li>\n<li>原子性是指一系列操作不可被中断的特性</li>\n<li>不存在部分执行部分未执行的情况 </li>\n</ul>\n</li>\n<li>互斥量（互斥锁），处于两态之一的变量：解锁和加锁</li>\n<li>互斥量是最简单的线程同步的方法</li>\n<li>两个状态可以保证资源访问的串行</li>\n<li>开发者可以直接使用API完成资源的加锁、解锁操作</li>\n<li>操作系统直接提供了互斥量的API<ul>\n<li>C 语言<ul>\n<li>pthread_mutex_lock</li>\n<li>pthread_mutex_t</li>\n<li>pthread_mutex_unlock</li>\n</ul>\n</li>\n<li>Java<ul>\n<li>synchronized</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>自旋锁<ul>\n<li>和互斥锁有什么不一样的？</li>\n<li>使用自旋锁的线程会反复检查锁变量是否可用</li>\n<li>自旋锁也是一种多线程同步的变量</li>\n<li>自旋锁不会让出CPU，是一种忙等待状态</li>\n<li>死循环等待锁被释放</li>\n<li>操作系统内部很多地方使用的是自旋锁</li>\n<li>自旋锁避免了进程或线程上下文切换的开销</li>\n<li>自旋锁不适合在单核CPU使用，因为自旋锁不会让出CPU</li>\n<li>api<ul>\n<li>pthread_spinlock_t</li>\n<li>pthread_ spinlock <em>lock</em></li>\n<li>pthread_ spinlock _unlock</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>读写锁<ul>\n<li>读取的时候并不会改变临界资源的值</li>\n<li>临界资源多读少写</li>\n<li>是否存在效率更高的同步方法？</li>\n<li>允许多个读者同时访问资源以提高读性能</li>\n<li>读写锁是一种特殊的自旋锁</li>\n<li>对于写操作则是互斥的</li>\n<li>API<ul>\n<li>pthread_rwlock_t</li>\n<li>pthread_rwlock_rdlock（读锁）</li>\n<li>pthread_rwlock_wrlock（写锁）</li>\n</ul>\n</li>\n<li>互斥量、自旋锁、读写锁 同步过程：等待解锁–加锁–【临界资源】–解锁</li>\n</ul>\n</li>\n<li>条件变量<ul>\n<li>条件变量允许线程睡眠，直到满足某种条件</li>\n<li>条件变量是一种相对复杂的线程同步方法</li>\n<li>当满足条件时，可以向该线程信号，通知唤醒</li>\n<li>生产者消费者问题<ul>\n<li>缓冲区满时，不允许生产者往缓冲区生产，生产者必须等待</li>\n<li>缓冲区小于等于0时，不允许消费者消费，消费者必须等待</li>\n<li>当生产者生产一个产品时，唤醒可能等待的消费者</li>\n<li>当消费者消费一个产品时，唤醒可能等待的生产者</li>\n</ul>\n</li>\n<li>API<ul>\n<li>pthread_cond_t,配合互斥量使用</li>\n<li>pthread_cond_wait(等待条件满足)</li>\n<li>pthread_cond_signal(等待被唤醒)</li>\n</ul>\n</li>\n<li>条件变量同步流程：等待解锁–加锁保护条件变量–等待条件满足被唤醒–【临界资源】–解锁</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>同步方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>互斥锁</td>\n<td>最简单的一种线程同步方法，会阻塞线程</td>\n</tr>\n<tr>\n<td>自旋锁</td>\n<td>避免切换的一种线程同步方法，属于“忙等待”，不让出CPU</td>\n</tr>\n<tr>\n<td>读写锁</td>\n<td>为“读多写少” 的资源设计的线程同步方法，可以显著提高性能</td>\n</tr>\n<tr>\n<td>条件变量</td>\n<td>相对复杂的一种线程同步方法，有更灵活的使用场景</td>\n</tr>\n</tbody></table>\n<h3 id=\"7-2-进程同步实践\"><a href=\"#7-2-进程同步实践\" class=\"headerlink\" title=\"7.2 进程同步实践\"></a>7.2 进程同步实践</h3><ul>\n<li><p>使用fork系统调用创建进程</p>\n<ul>\n<li>fork创建的进程初始化状态与父进程一样</li>\n<li>fork系统调用是用于创建进程的</li>\n<li>系统会为fork的进程分配新的资源</li>\n<li>fork会返回两次，分别返回子进程id和0</li>\n<li>fork系统调用无参数</li>\n<li>返回子进程id的是父进程，返回0的是子进程</li>\n</ul>\n</li>\n<li><p>共享内存</p>\n<ul>\n<li>进程的线程共享进程资源</li>\n<li>进程共享计算机资源</li>\n<li>在某种程度上，多进程是共同使用物理内存的</li>\n<li>由于操作系统的进程管理，进程间的内存空间是独立的</li>\n<li>进程默认是不能访问进程空间之外的内存空间的</li>\n<li>共享存储允许不相关的进程访问同一片物理内存</li>\n<li>共享内存是两个进程之间共享和传递数据最快的方式</li>\n<li>共享内存未提供同步机制，需要借助其他机制管理访问，比如通过一个Boolean的变量来控制是否可读可写</li>\n<li>共享内存是高性能后台开发中最常用的进程同步方式</li>\n<li>共享内存 使用流程<ul>\n<li>申请共享内存 </li>\n<li>连接到进程空间</li>\n<li>脱离进程空间 </li>\n<li>使用共享内存&amp;删除</li>\n</ul>\n</li>\n<li>代码实现</li>\n</ul>\n</li>\n<li><p>Unix域套接字</p>\n<ul>\n<li>域套接字是一种高级的进程间通信的方法</li>\n<li>Unix域套接字可以用于同一机器进程间通信</li>\n<li>套接字(socket)原是网络通信中使用的术语</li>\n<li>Unix系统提供的域套接字提供了网络套接字类似的功能</li>\n<li>Nginx、uWSGI</li>\n<li>服务端<ul>\n<li>创建套接字</li>\n<li>绑定(bind)套接字</li>\n<li>监听(listen)套接字</li>\n<li>接收&amp;处理信息</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>创建套接字</li>\n<li>连接套接字</li>\n<li>发送信息</li>\n</ul>\n</li>\n<li>代码实现</li>\n<li>提供了单机简单可靠的进程通信同步服务</li>\n<li>只能在单机使用，不能跨机器使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-关于我\"><a href=\"#8-关于我\" class=\"headerlink\" title=\"8.关于我\"></a>8.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p>\n<p><a href=\"http://basedev.cn/\" target=\"_blank\" rel=\"noopener\">个人网站 basedev.cn</a>  </p>\n<p><a href=\"https://github.com/jaydroid1024\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p>\n<h2 id=\"9-参考\"><a href=\"#9-参考\" class=\"headerlink\" title=\"9.参考\"></a>9.参考</h2><p><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content\" target=\"_blank\" rel=\"noopener\">重学操作系统 | 拉钩教育</a></p>\n<p><a href=\"https://coding.imooc.com/class/package/355.html\" target=\"_blank\" rel=\"noopener\">编程必备基础 | 慕课网</a></p>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-操作系统基础知识小抄版\"><a href=\"#筑基系列-操作系统基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-操作系统基础知识小抄版\"></a>筑基系列-操作系统基础知识小抄版</h1><blockquote>\n<p>计算机基础知识筑基三部曲：</p>\n<ul>\n<li><p><strong><a href=\"https://juejin.cn/post/6991367806772052004\" target=\"_blank\" rel=\"noopener\">第一部：筑基系列-计算机基础知识小抄版</a></strong></p>\n<ul>\n<li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li>\n</ul>\n</li>\n<li><p><strong><a href=\"https://juejin.cn/post/6991385109509193764\" target=\"_blank\" rel=\"noopener\">第二部：筑基系列-操作系统基础知识小抄版</a></strong></p>\n<ul>\n<li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li>\n</ul>\n</li>\n<li><p><strong><a href=\"https://juejin.cn/post/6991397445251334151\" target=\"_blank\" rel=\"noopener\">第三部：筑基系列-计算机网络基础知识小抄版</a></strong></p>\n<ul>\n<li>包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"#1.操作系统概览\">1.操作系统概览</a><ul>\n<li><a href=\"#11-什么是操作系统\">1.1 什么是操作系统</a></li>\n<li><a href=\"#12-为什么需要操作系统\">1.2 为什么需要操作系统</a></li>\n<li><a href=\"#13-操作系统的基本功能\">1.3 操作系统的基本功能</a></li>\n<li><a href=\"#14-操作系统相关概念\">1.4 操作系统相关概念</a></li>\n</ul>\n</li>\n<li><a href=\"#2.进程管理\">2.进程管理</a><ul>\n<li><a href=\"#21-进程概述\">2.1 进程概述</a></li>\n<li><a href=\"#22-进程管理五状态模型\">2.2 进程管理五状态模型</a></li>\n<li><a href=\"#23-进程同步\">2.3 进程同步</a></li>\n<li><a href=\"#24-linux的进程管理\">2.4 Linux的进程管理</a></li>\n</ul>\n</li>\n<li><a href=\"#3.作业管理\">3.作业管理</a><ul>\n<li><a href=\"#31-进程调度\">3.1 进程调度</a></li>\n<li><a href=\"#32-死锁\">3.2 死锁</a></li>\n</ul>\n</li>\n<li><a href=\"#4.存储管理\">4.存储管理</a><ul>\n<li><a href=\"#41-计算机进行存储管理的必要性\">4.1 计算机进行存储管理的必要性</a></li>\n<li><a href=\"#42-内存的分配过程\">4.2 内存的分配过程</a></li>\n<li><a href=\"#43-内存的回收过程\">4.3 内存的回收过程</a></li>\n<li><a href=\"#44-进程的存储管理\">4.4 进程的存储管理</a></li>\n<li><a href=\"#45-虚拟内存\">4.5 虚拟内存</a></li>\n<li><a href=\"#46-linux的存储管理\">4.6 Linux的存储管理</a></li>\n</ul>\n</li>\n<li><a href=\"#5.文件管理\">5.文件管理</a><ul>\n<li><a href=\"#51-操作系统的文件管理\">5.1 操作系统的文件管理</a></li>\n<li><a href=\"#52-linux文件的基本操作\">5.2 Linux文件的基本操作</a></li>\n</ul>\n</li>\n<li><a href=\"#6设备管理\">6.设备管理</a></li>\n<li><a href=\"#7.实践\">7.实践</a><ul>\n<li><a href=\"#71-线程同步实践\">7.1 线程同步实践</a></li>\n<li><a href=\"#72-进程同步实践\">7.2 进程同步实践</a></li>\n</ul>\n</li>\n<li><a href=\"#8关于我\">8.关于我</a></li>\n<li><a href=\"#9参考\">9.参考</a></li>\n</ul>\n<h2 id=\"1-操作系统概览\"><a href=\"#1-操作系统概览\" class=\"headerlink\" title=\"1 操作系统概览\"></a>1 操作系统概览</h2><h3 id=\"1-1-什么是操作系统\"><a href=\"#1-1-什么是操作系统\" class=\"headerlink\" title=\"1.1 什么是操作系统\"></a>1.1 什么是操作系统</h3><ul>\n<li>管理配置内存、决定资源供需顺序、控制输入输出设备等</li>\n<li>操作系统是管理计算机硬件和软件资源的计算机程序</li>\n<li>操作系统提供让用户和系统交互的操作界面</li>\n<li>从手机到超级计算机，操作系统可简单也可复杂</li>\n<li>操作系统的种类是多种多样的，不局限于计算机</li>\n<li>在不同的设备上，操作系统可向用户呈现多种操作手段</li>\n<li>Android，IOS，HarmonyOS</li>\n<li>Windows ，Linux ，MacOS</li>\n<li>总结：管理硬件、提供用户交互的软件系统</li>\n</ul>\n<h3 id=\"1-2-为什么需要操作系统\"><a href=\"#1-2-为什么需要操作系统\" class=\"headerlink\" title=\"1.2 为什么需要操作系统\"></a>1.2 为什么需要操作系统</h3><ul>\n<li>我们不可能直接操作计算机硬件</li>\n<li>设备种类繁多复杂，需要统一界面</li>\n<li>设备种类繁多复杂，需要统一界面</li>\n</ul>\n<h3 id=\"1-3-操作系统的基本功能\"><a href=\"#1-3-操作系统的基本功能\" class=\"headerlink\" title=\"1.3 操作系统的基本功能\"></a>1.3 操作系统的基本功能</h3><ul>\n<li>操作系统统一管理着计算机资源<ul>\n<li>处理器资源</li>\n<li>IO设备资源</li>\n<li>存储器资源</li>\n<li>文件资源</li>\n</ul>\n</li>\n<li>操作系统实现了对计算机资源的抽象<ul>\n<li>IO设备管理软件，提供读写接口</li>\n<li>用户无需面向硬件接口编程</li>\n<li>文件管理软件，提供操作文件接口</li>\n</ul>\n</li>\n<li>操作系统提供了用户与计算机之间的接口<ul>\n<li>命令形式</li>\n<li>图像窗口形式</li>\n<li>系统调用形式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-操作系统相关概念\"><a href=\"#1-4-操作系统相关概念\" class=\"headerlink\" title=\"1.4 操作系统相关概念\"></a>1.4 操作系统相关概念</h3><ul>\n<li>并发性/并行性<ul>\n<li>多道程序设计<ul>\n<li>多道程序设计是指在计算机内存中同时存放多个程序</li>\n<li>多道程序在计算机的管理程序之下相互穿插运行</li>\n</ul>\n</li>\n<li>并行是指两个或多个事件可以在同一个时刻发生</li>\n<li>并发是指两个或多个事件可以在同一个时间间隔发生</li>\n</ul>\n</li>\n<li>共享性<ul>\n<li>共享性表现为操作系统中的资源可供多个并发的程序共同使用</li>\n<li>这种共同使用的形式称之为资源共享</li>\n<li>多个程序可以同时使用主存资源</li>\n<li>资源共享根据属性可分为两种方式<ul>\n<li>互斥共享形式 <ul>\n<li>当资源被程序A占用时，其他想使用的话只能等待</li>\n<li>只有进程A使用完以后，其他进程才可以使用该资源</li>\n<li>打印机</li>\n</ul>\n</li>\n<li>同时访问形式<ul>\n<li>某种资源在一段时间内并发地被多个程序访问</li>\n<li>这种“同时”是宏观的，从宏观去看该资源可以被同时访问</li>\n<li>向磁盘写数据</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>虚拟性<ul>\n<li>虚拟性表现为把一个物理实体转变为若干个逻辑实体</li>\n<li>物理实体是真实存在的，逻辑实体是虚拟的</li>\n<li>虚拟的技术主要有时分复用技术和空分复用技术</li>\n<li>时分复用技术<ul>\n<li>资源在时间上进行复用，不同程序并发使用</li>\n<li>多道程序分时使用计算机的硬件资源</li>\n<li>提高资源的利用率</li>\n<li>虚拟处理器技术 <ul>\n<li>借助多道程序设计技术</li>\n<li>为每个程序建立进程</li>\n<li>多个程序分时复用处理器</li>\n</ul>\n</li>\n<li>虚拟设备技术<ul>\n<li>物理设备虚拟为多个逻辑设备</li>\n<li>每个程序占用一个逻辑设备</li>\n<li>多个程序通过逻辑设备并发访问</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>空分复用技术<ul>\n<li>空分复用技术用来实现虚拟磁盘、虚拟内存等</li>\n<li>提高资源的利用率，提升编程效率</li>\n<li>虚拟磁盘技术 <ul>\n<li>物理磁盘虚拟为逻辑磁盘</li>\n<li>C、 D、 E等逻辑盘</li>\n<li>使用起来更加安全、方便</li>\n</ul>\n</li>\n<li>虚拟内存技术<ul>\n<li>在逻辑上扩大程序的存储容量</li>\n<li>使用比实际内存更大的容量</li>\n<li>大大提升编程效率</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>异步性<ul>\n<li>在多道程序环境下，允许多个进程并发执行</li>\n<li>进程在使用资源时可能需要等待或放弃</li>\n<li>进程的执行并不是一气呵成的，而是以走走停停的形式推进</li>\n<li>进程以不可预知的速度向前推进</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-进程管理\"><a href=\"#2-进程管理\" class=\"headerlink\" title=\"2.进程管理\"></a>2.进程管理</h2><h3 id=\"2-1-进程概述\"><a href=\"#2-1-进程概述\" class=\"headerlink\" title=\"2.1 进程概述\"></a>2.1 进程概述</h3><ul>\n<li><p>为什么需要进程</p>\n<ul>\n<li>没有配置OS之前，资源属于当前运行的程序</li>\n<li>配置OS之后，引入多道程序设计的概念</li>\n<li>合理的隔离资源、运行环境，提升资源利用率</li>\n<li>进程是系统进行资源分配和调度的基本单位</li>\n<li>进程作为程序独立运行的载体保障程序正常执行</li>\n<li>进程的存在使得操作系统资源的利用率大幅提升</li>\n</ul>\n</li>\n<li><p>主存中的进程形态-进程控制块（PCB）</p>\n<ul>\n<li>用于描述和控制进程运行的通用数据结构</li>\n<li>记录进程当前状态和控制进程运行的全部信息</li>\n<li>PCB的使得进程是能够独立运行的基本单位</li>\n<li>PCB是操作系统进行调度经常会被读取的信息</li>\n<li>PCB是常驻内存的，存放在系统专门开辟的PCB区域内</li>\n<li>标识符<ul>\n<li>标识符唯一标记一个进程，用于区别其他进程</li>\n</ul>\n</li>\n<li>状态<ul>\n<li>标记进程的进程状态，如：运行态</li>\n</ul>\n</li>\n<li>优先级</li>\n<li>程序计数器<ul>\n<li>进程即将被执行的下一条指令的地址</li>\n</ul>\n</li>\n<li>内存指针<ul>\n<li>程序代码、进程数据相关指针</li>\n</ul>\n</li>\n<li>上下文数据<ul>\n<li>进程执行时处理器存储的数据</li>\n</ul>\n</li>\n<li>IO状态信息<ul>\n<li>被进程IO操作所占用的文件列表</li>\n</ul>\n</li>\n<li>记账信息<ul>\n<li>使用处理器时间、时钟数总和等</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程与线程</p>\n<ul>\n<li>关系<ul>\n<li>一个进程可以有一个或多个线程</li>\n<li>进程是系统进行资源分配和调度的基本单位</li>\n<li>线程是操作系统进行运行调度的最小单位</li>\n<li>包含在进程之中，是进程中实际运行工作的单位</li>\n<li>一个进程可以并发多个线程，每个线程执行不同的任务</li>\n<li>进程的线程共享进程资源</li>\n</ul>\n</li>\n<li>区别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>进程</th>\n<th>线程</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>资源</td>\n<td>资源分配的基本单位</td>\n<td>不拥有资源</td>\n</tr>\n<tr>\n<td>调度</td>\n<td>独立调度的基本单位</td>\n<td>独立调度的最小单位</td>\n</tr>\n<tr>\n<td>系统开销</td>\n<td>进程系统开销大</td>\n<td>线程系统开销小</td>\n</tr>\n<tr>\n<td>通信</td>\n<td>进程IPC</td>\n<td>读写同一进程数据通信</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"2-2-进程管理五状态模型\"><a href=\"#2-2-进程管理五状态模型\" class=\"headerlink\" title=\"2.2 进程管理五状态模型\"></a>2.2 进程管理五状态模型</h3><ul>\n<li>就绪状态<ul>\n<li>当进程被分配到除CPU以外所有必要的资源后</li>\n<li>只要再获得CPU的使用权，就可以立即运行</li>\n<li>其他资源都准备好、只差CPU资源的状态为就绪状态</li>\n<li>就绪队列：在一个系统中多个处于就绪状态的进程通常排成一个队列</li>\n</ul>\n</li>\n<li>阻塞状态<ul>\n<li>进程因某种原因如：其他设备未就绪而无法继续执行</li>\n<li>从而放弃CPU的状态称为阻塞状态</li>\n<li>阻塞队列</li>\n</ul>\n</li>\n<li>执行状态<ul>\n<li>进程获得CPU，其程序正在执行称为执行状态</li>\n<li>在单处理机中，在某个时刻只能有一个进程是处于执行状态</li>\n</ul>\n</li>\n<li>创建状态<ul>\n<li>分配PCB—&gt; 插入就绪队列</li>\n<li>创建进程时拥有PCB但其他资源尚未就绪的状态称为创建状态</li>\n<li>操作系统提供fork函数接口创建进程</li>\n</ul>\n</li>\n<li>终止状态<ul>\n<li>系统清理 —&gt;PCB归还</li>\n<li>进程结束由系统清理或者归还PCB的状态称为终止状态</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163657.jpg\" alt=\"\"></p>\n<h3 id=\"2-3-进程同步\"><a href=\"#2-3-进程同步\" class=\"headerlink\" title=\"2.3 进程同步\"></a>2.3 进程同步</h3><ul>\n<li><p>为什么需要进程间同步</p>\n<ul>\n<li><p>生产者-消费者问题</p>\n<ul>\n<li>生产者进程将生产的产品提供给消费者进程进行消费</li>\n<li>生产者进程和消费者进程可以并发执行</li>\n<li>在两者之间设置了一个具有n个缓冲区的缓冲池</li>\n<li>生产者将产品缓冲区中，消费者进程从缓冲区取走产品消费</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801163907.jpg\" alt=\"\"></p>\n<ul>\n<li>单从生产者程序或消费者程序去看是没问题的</li>\n<li>单两者并发执行时就可能出差错</li>\n<li>临界资源：缓存区</li>\n</ul>\n</li>\n<li><p>哲学家进餐问题</p>\n<ul>\n<li>有五个哲学家，他们的生活方式是交替地进行思考和进餐</li>\n<li>哲学家们共同使用一张圆桌，分别坐在周围的五张椅子上</li>\n<li>在圆桌上有五个碗和五支筷子。平时哲学家们只进行思考，饥饿时则试图取靠近他们的左、右两支筷子</li>\n<li>只有两支筷子都被他拿到的时候才能进餐</li>\n<li>进餐完毕之后，放下左右筷子继续思考</li>\n<li>五个哲学家同时拿起左边筷子</li>\n<li>五个哲学家都等待右边筷子释放</li>\n<li>五个哲学家饿死</li>\n<li>临界资源：筷子</li>\n</ul>\n</li>\n<li><p>问题的根源</p>\n<ul>\n<li>根源问题是：彼此相互之间没有通信</li>\n<li>如果生产者通知消费者我已经完成一件生产</li>\n<li>哲学家向旁边哲学家说我要进餐了</li>\n</ul>\n</li>\n<li><p>进程同步的目的</p>\n<ul>\n<li>对竞争资源在多进程间进行使用次序的协调</li>\n<li>使得并发执行的多个进程之间可以有效使用资源和相互合作</li>\n</ul>\n</li>\n<li><p>临界资源</p>\n<ul>\n<li>临界资源指的是一些虽作为共享资源却又无法同时被多个线程共同访问的共享资源。</li>\n<li>当有进程在使用临界资源时，其他进程必须依据操作系统的同步机制等待占用进程释放该共享资源才可重新竞争使<br>用共享资源。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程间同步的原则</p>\n<ul>\n<li>空闲让进：资源无占用，允许使用</li>\n<li>忙则等待：资源有占用，请求进程等待</li>\n<li>有限等待：保证有限等待时间能够使用资源</li>\n<li>让权等待：等待时，进程需要让出CPU</li>\n</ul>\n</li>\n<li><p>进程间同步的方法</p>\n<ul>\n<li>消息队列</li>\n<li>共享存储</li>\n<li>信号量</li>\n</ul>\n</li>\n<li><p>线程同步</p>\n<ul>\n<li>进程的线程共享进程资源</li>\n<li>当多个线程并发使用进程资源时，也需要同步</li>\n<li>线程间同步的方法<ul>\n<li>互斥量</li>\n<li>读写锁</li>\n<li>自旋锁</li>\n<li>条件变量</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-4-Linux的进程管理\"><a href=\"#2-4-Linux的进程管理\" class=\"headerlink\" title=\"2.4 Linux的进程管理\"></a>2.4 Linux的进程管理</h3><ul>\n<li><p>进程的类型</p>\n<ul>\n<li>前台进程<ul>\n<li>前台进程就是具有终端，可以和用户交互的进程</li>\n</ul>\n</li>\n<li>后台进程<ul>\n<li>与前台进程相对，没有占用终端的就是后台进程</li>\n<li>后台程序基本上不和用户交互，优先级比前台进程低</li>\n<li>将需要执行的命令以“&amp;”符号结束</li>\n</ul>\n</li>\n<li>守护进程<ul>\n<li>守护(daemon)进程是特殊的后台进程</li>\n<li>很多守护进程在系统引导的时候启动，一直运行直到系统关闭</li>\n<li>Linux有很多典型的守护进程</li>\n<li>进程名字以“d”结尾的一般都是守护进程<ul>\n<li>crond</li>\n<li>httpd</li>\n<li>sshd</li>\n<li>mysqld</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程的标记</p>\n<ul>\n<li><p>进程ID</p>\n<ul>\n<li>进程ID是进程的唯一标记，每个进程拥有不同的ID</li>\n<li>进程ID表现为一个非负整数，最大值由操作系统限定</li>\n<li>top命令查看系统中的所有进程信息</li>\n<li>ID为0的进程为idle进程，是系统创建的第一个进程</li>\n<li>ID为1的进程为init进程，是0号进程的子进程，完成系统初始化</li>\n<li>Init进程是所有用户进程的祖先进程</li>\n</ul>\n</li>\n<li><p>进程的状态标记</p>\n<ul>\n<li>man ps 命令查看用户命令帮助文档</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态符号</th>\n<th>状态说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>R</td>\n<td>(TASK_RUNNING)，进程正处于运行状态</td>\n</tr>\n<tr>\n<td>S</td>\n<td>(TASK_INTERRUPTIBLE)，进程正处于睡眠状态</td>\n</tr>\n<tr>\n<td>D</td>\n<td>(TASK_UNINTERRUPTIBLE)，进程正在处于IO等待的睡眠状态</td>\n</tr>\n<tr>\n<td>T</td>\n<td>(TASK_STOPPED)，进程正处于暂停状态</td>\n</tr>\n<tr>\n<td>Z</td>\n<td>(TASK_DEAD or EXIT_ZOMBIE)，进程正处于退出状态，或僵尸进程</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>父子进程</p>\n<ul>\n<li>操作系统提供fork函数接口创建进程</li>\n<li>父子进程关系:进程A调用fork函数创建进程B,进程A就是进程B的父进程</li>\n<li>父子进程关系可以通过pstree命令查看</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>操作进程的相关命令</p>\n<ul>\n<li>ps命令<ul>\n<li>ps命令常用于显示当前进程的状态</li>\n<li>ps命令常配合aux参数或ef参数和grep命令检索特定进程</li>\n</ul>\n</li>\n<li>jobs<ul>\n<li>只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略</li>\n</ul>\n</li>\n<li>nohup<ul>\n<li>不挂断地运行命令</li>\n</ul>\n</li>\n<li>fg/bg命令<ul>\n<li>fg命令将一个后台命令调换至前台终端继续执行</li>\n<li>bg命令将一个后台暂停的命令变成继续执行</li>\n<li>ctrl+z将前台工作暂停</li>\n</ul>\n</li>\n<li>kill<ul>\n<li>kill命令发送指定信号给进程</li>\n<li>kill –l 可以查看操作系统支持的信号</li>\n<li>只有(SIGKILL 9)信号可以无条件终止进程，其他信号进程有权忽略</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-作业管理\"><a href=\"#3-作业管理\" class=\"headerlink\" title=\"3.作业管理\"></a>3.作业管理</h2><h3 id=\"3-1-进程调度\"><a href=\"#3-1-进程调度\" class=\"headerlink\" title=\"3.1 进程调度\"></a>3.1 进程调度</h3><ul>\n<li><p>进程调度是指计算机通过决策决定哪个就绪进程可以获得CPU使用权</p>\n</li>\n<li><p>保留旧进程的运行信息，请出旧进程（收拾包袱）</p>\n</li>\n<li><p>选择新进程，准备运行环境并分配CPU（新进驻）</p>\n</li>\n<li><p>调度机制</p>\n<ul>\n<li>就绪队列的委派机制<ul>\n<li>将就绪进程按照一定的方式排成队列，以便调度程序可以最快找到就绪进程</li>\n</ul>\n</li>\n<li>选择运行进程的委派机制<ul>\n<li>调度程序以一定的策略选择就绪进程，将CPU资源分配给它</li>\n</ul>\n</li>\n<li>新老进程的上下文切换机制<ul>\n<li>保存当前进程的上下文信息，装入被委派执行进程的运行上下文</li>\n<li>老进程的上下文存入主存</li>\n<li>新进程的上下文装载到高速缓存中</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>调度方式</p>\n<ul>\n<li>非抢占式的调度<ul>\n<li>处理器一旦分配给某个进程，就让该进程一直使用下去</li>\n<li>调度程序不以任何原因抢占正在被使用的处理器</li>\n<li>直到进程完成工作或因为IO阻塞才会让出处理器</li>\n</ul>\n</li>\n<li>抢占式的调度<ul>\n<li>允许调度程序以一定的策略暂停当前运行的进程</li>\n<li>保存好旧进程的上下文信息，分配处理器给新进程</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>抢占式调度</th>\n<th>抢占式调度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>系统开销</td>\n<td>频繁切换，开销大</td>\n<td>切换次数少，开销小</td>\n</tr>\n<tr>\n<td>公平性</td>\n<td>相对公平</td>\n<td>不公平</td>\n</tr>\n<tr>\n<td>应用</td>\n<td>通用系统</td>\n<td>专用系统</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>调度算法</p>\n<ul>\n<li>先来先服务调度算法<ul>\n<li>从就绪队列按照顺序从队列头开始调度</li>\n</ul>\n</li>\n<li>短进程优先调度算法<ul>\n<li>调度程序优先选择就绪队列中估计运行时间最短的进程</li>\n<li>短进程优先调度算法不利于长作业进程的执行</li>\n</ul>\n</li>\n<li>高优先权优先调度算法<ul>\n<li>进程附带优先权，调度程序优先选择权重高的进程</li>\n<li>高优先权优先调度算法使得紧迫的任务可以优先处理</li>\n<li>前台进程优先级高于后台进程</li>\n</ul>\n</li>\n<li>时间片轮转算法<ul>\n<li>按先来先服务的原则排列就绪进程</li>\n<li>每次从队列头部取出待执行进程，分配一个时间片执行</li>\n<li>是相对公平的调度算法，但不能保证及时响应用户</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-死锁\"><a href=\"#3-2-死锁\" class=\"headerlink\" title=\"3.2 死锁\"></a>3.2 死锁</h3><ul>\n<li><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>\n</li>\n<li><p>死锁的产生</p>\n<ul>\n<li><p>基本原因</p>\n<ul>\n<li>竞争资源<ul>\n<li>共享资源数量不满足各个进程需求</li>\n<li>各个进程之间发生资源竞争导致死锁</li>\n</ul>\n</li>\n<li>进程调度顺序不当<ul>\n<li>调度顺序导致共享资源被多个进程互相持有无法释放，可以优先满足进程A的调度再调度B</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>必要条件</p>\n<ul>\n<li>互斥条件<ul>\n<li>进程对资源的使用是排他性的使用</li>\n<li>某资源只能由一个进程使用，其他进程需要使用只能等待</li>\n</ul>\n</li>\n<li>请求保持条件<ul>\n<li>进程至少保持一个资源，又提出新的资源请求</li>\n<li>新资源被占用，请求被阻塞</li>\n<li>被阻塞的进程不释放自己保持的资源</li>\n</ul>\n</li>\n<li>不可剥夺条件<ul>\n<li>进程获得的资源在未完成使用前不能被剥夺</li>\n<li>获得的资源只能由进程自身释放</li>\n</ul>\n</li>\n<li>环路等待条件<ul>\n<li>发生死锁时，必然存在进程-资源环形链</li>\n<li>P1(R1)-&gt; P2(R2)-&gt;P3(R3-&gt;)P4(R4) -&gt;P1(R1)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>死锁的处理</p>\n<ul>\n<li><p>预防死锁的方法-破坏必要条件</p>\n<ul>\n<li>摒弃请求保持条件<ul>\n<li>系统规定进程运行之前，一次性申请所有需要的资源</li>\n<li>进程在运行期间不会提出资源请求，从而摒弃请求保持条件</li>\n</ul>\n</li>\n<li>摒弃不可剥夺条件<ul>\n<li>当一个进程请求新的资源得不到满足时，必须释放占有的资源</li>\n<li>进程运行时占有的资源可以被释放，意味着可以被剥夺</li>\n</ul>\n</li>\n<li>摒弃环路等待条件<ul>\n<li>可用资源线性排序，申请必须按照需要递增申请</li>\n<li>线性申请不再形成环路，从而摒弃了环路等待条件，A B C D E</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>银行家算法</p>\n<ul>\n<li>是一个可操作的著名的避免死锁的算法</li>\n<li>以银行借贷系统分配策略为基础的算法</li>\n<li>客户申请的贷款是有限的，每次申请需声明最大资金量</li>\n<li>银行家在能够满足贷款时，都应该给用户贷款</li>\n<li>客户在使用贷款后，能够及时归还贷款用来满足其它客户</li>\n<li>已分配资源表 </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">P1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">P2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n</tr>\n<tr>\n<td align=\"center\">P4</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>所需资源表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">P1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">P2</td>\n<td align=\"center\">1</td>\n<td align=\"center\">9</td>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">3</td>\n<td align=\"center\">5</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"center\">P4</td>\n<td align=\"center\">1</td>\n<td align=\"center\">7</td>\n<td align=\"center\">5</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>可分配资源表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-</td>\n<td align=\"center\">1</td>\n<td align=\"center\">5</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>还需分配资源表</li>\n<li>通过可分配资源表看它能够满足哪一个进程所需就把可分配资源给谁，不满足的就不执行知道有资源能够满足任何一个为止</li>\n<li>所以P2会先获得资源</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">A</th>\n<th align=\"center\">B</th>\n<th align=\"center\">C</th>\n<th align=\"center\">D</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">P1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">6</td>\n<td align=\"center\">4</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P2</td>\n<td align=\"center\">0</td>\n<td align=\"center\">5</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">P3</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"center\">P4</td>\n<td align=\"center\">0</td>\n<td align=\"center\">7</td>\n<td align=\"center\">5</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-存储管理\"><a href=\"#4-存储管理\" class=\"headerlink\" title=\"4.存储管理\"></a>4.存储管理</h2><h3 id=\"4-1-计算机进行存储管理的必要性\"><a href=\"#4-1-计算机进行存储管理的必要性\" class=\"headerlink\" title=\"4.1 计算机进行存储管理的必要性\"></a>4.1 计算机进行存储管理的必要性</h3><ul>\n<li>早期计算机编程并不需要过多的存储管理</li>\n<li>随着计算机和程序越来越复杂，存储管理成为必要</li>\n<li>确保计算机有足够的内存处理数据</li>\n<li>确保程序可以从可用内存中获取一部分内存使用</li>\n<li>确保程序可以归还使用后的内存以供其他程序使用</li>\n</ul>\n<h3 id=\"4-2-内存的分配过程\"><a href=\"#4-2-内存的分配过程\" class=\"headerlink\" title=\"4.2 内存的分配过程\"></a>4.2 内存的分配过程</h3><ul>\n<li><p>分配方法</p>\n</li>\n<li><p>单一连续分配</p>\n<ul>\n<li>单一连续分配是最简单的内存分配方式</li>\n<li>只能在单用户、单进程的操作系统中使用</li>\n<li>分为系统区，用户区</li>\n</ul>\n</li>\n<li><p>固定分区分配</p>\n<ul>\n<li>固定分区分配是支持多道程序的最简单存储分配方式</li>\n<li>内存空间被划分为若干固定大小的区域</li>\n<li>每个分区只提供给一个程序使用，互不干扰</li>\n</ul>\n</li>\n<li><p>动态分区分配（常用）</p>\n<ul>\n<li>根据进程实际需要，动态分配内存空间</li>\n<li>相关数据结构、分配算法</li>\n<li>动态分区空闲表数据结构，1：已使用，0：未使用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分区</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>标记</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>动态分区空闲链数据结构<ul>\n<li>采用双向链表将内存块链接起来，连续的空闲区可以合并在一个链表节点里</li>\n<li>节点需记录可存储的容量</li>\n</ul>\n</li>\n<li>动态分区分配算法<ul>\n<li>首次适应算法(FF算法)<ul>\n<li>分配内存时从开始顺序查找适合内存区</li>\n<li>若没有合适的空闲区，则该次分配失败</li>\n<li>每次从头部开始，使得头部地址空间不断被划分</li>\n<li>循环适应算法，每次分配不从头开始，从上一次结束的地方开始分配</li>\n</ul>\n</li>\n<li>最佳适应算法(BF算法)<ul>\n<li>最佳适应算法要求空闲区链表按照容量大小排序</li>\n<li>遍历空闲区链表找到最佳合适空闲区</li>\n</ul>\n</li>\n<li>快速适应算法(QF算法)<ul>\n<li>快速适应算法要求有多个空闲区链表</li>\n<li>每个空闲区链表存储一种容量的空闲区</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-内存的回收过程\"><a href=\"#4-3-内存的回收过程\" class=\"headerlink\" title=\"4.3 内存的回收过程\"></a>4.3 内存的回收过程</h3><ul>\n<li>存在回收内存的四种情况<ul>\n<li>回收区与空闲区链接在一起并且链接在后面<ul>\n<li>不需要新建空闲链表节点</li>\n<li>只需要把空闲区1的容量增大为空闲区即可</li>\n</ul>\n</li>\n<li>回收区与空闲区链接在一起并且链接在前面<ul>\n<li>将回收区与空闲区合并</li>\n<li>新的空闲区使用回收区的地址</li>\n</ul>\n</li>\n<li>回收区与空闲区链接在一起并且链接在中间<ul>\n<li>将空闲区1、空闲区2和回收区合并</li>\n<li>新的空闲区使用空闲区1的地址</li>\n</ul>\n</li>\n<li>未链接空闲区，单一的回收区<ul>\n<li>为回收区创建新的空闲节点</li>\n<li>插入到相应的空闲区链表中去</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-4-进程的存储管理\"><a href=\"#4-4-进程的存储管理\" class=\"headerlink\" title=\"4.4 进程的存储管理\"></a>4.4 进程的存储管理</h3><ul>\n<li><p>页式存储管理</p>\n<ul>\n<li>字块是相对物理设备的定义，页面则是相对逻辑空间的定义</li>\n<li>将进程逻辑空间等分成若干大小的页面</li>\n<li>相应的把物理内存空间分成与页面大小的物理块</li>\n<li>以页面为单位把进程空间装进物理内存中分散的物理块</li>\n<li>页面大小应该适中，过大难以分配，过小内存碎片过多</li>\n<li>页面大小通常是512B~8K</li>\n<li><strong>页表</strong>：记录进程逻辑空间与物理空间的映射，表示为 [页面编号，字块编号]</li>\n<li><strong>页地址</strong>：[地址，页内偏移]</li>\n<li><strong>问题</strong>：现代计算机系统中，可以支持非常大的逻辑地址空间（2^32~2^64），这样，页表就变得非常大，要占用非常大的内存空间，如，具有32位逻辑地址空间的分页系统，规定页面大小为4KB，则在每个进程页表中的页表项可达1M(2^20)个，如果每个页表项占用1Byte，故每个进程仅仅页表就要占用1MB的内存空间<ul>\n<li>2^32/2^12=2^20=1M个页表项</li>\n</ul>\n</li>\n<li><strong>多级页表</strong>：根页表的字块存的是子页表的地址，在运行时可以按需加载子页表</li>\n<li><strong>不足</strong>：有一段连续的逻辑分布在多个页面中，将大大降低执行效率</li>\n</ul>\n</li>\n<li><p>段式存储管理</p>\n<ul>\n<li>将进程逻辑空间划分成若干段（非等分）</li>\n<li>段的长度由连续逻辑的长度决定</li>\n<li>主函数MAIN、子程序段X、子函数Y等</li>\n<li><strong>段表</strong>：[段号 ,基址. 段长]</li>\n<li><strong>段地址</strong>：[段号, 段内偏移]</li>\n</ul>\n</li>\n<li><p>页式存储管理与段式存储管理的对比</p>\n<ul>\n<li>段式存储和页式存储都离散地管理了进程的逻辑空间</li>\n<li>页是物理单位，段是逻辑单位</li>\n<li>分页是为了合理利用空间，分段是满足用户要求</li>\n<li>页大小由硬件固定，段长度可动态变化</li>\n<li>页表信息是一维的，段表信息是二维的</li>\n</ul>\n</li>\n<li><p>段页式存储管理</p>\n<ul>\n<li>分页可以有效提高内存利用率（虽然说存在页内碎片）</li>\n<li>分段可以更好满足用户需求，因为逻辑可以通过用户来写</li>\n<li>两者结合，形成段页式存储管理</li>\n<li>先将逻辑空间按段式管理分成若干段</li>\n<li>再把段内空间按页式管理等分成若干页</li>\n<li><strong>段页地址</strong>：[段号, 段内页号. 页内地址]</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801164213.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"4-5-虚拟内存\"><a href=\"#4-5-虚拟内存\" class=\"headerlink\" title=\"4.5 虚拟内存\"></a>4.5 虚拟内存</h3><ul>\n<li>虚拟内存概述<ul>\n<li>有些进程实际需要的内存很大，超过物理内存的容量</li>\n<li>多道程序设计，使得每个进程可用物理内存更加稀缺</li>\n<li>不可能无限增加物理内存，物理内存总有不够的时候</li>\n<li>虚拟内存是操作系统内存管理的关键技术</li>\n<li>使得多道程序运行和大程序运行成为现实</li>\n<li>把程序使用内存划分，将部分暂时不使用的内存放置在辅存</li>\n<li>虚拟内存实际是对物理内存的补充，速度接近于内存，成本接近于辅存</li>\n</ul>\n</li>\n<li>程序的局部性原理<ul>\n<li>局部性原理是指CPU访问存储器时，无论是存取指令还是存取数据，所访问的存储单元都趋于聚集在一个较小的连续区域中。</li>\n<li>程序运行时，无需全部装入内存，装载部分即可</li>\n<li>如果访问页不在内存，则发出缺页中断，发起页面置换</li>\n<li>从用户层面看，程序拥有很大的空间，即是虚拟内存</li>\n</ul>\n</li>\n<li>虚拟内存的置换</li>\n<li>替换策略发生在Cache-主存层次、主存-辅存层次<ul>\n<li>Cache-主存层次的替换策略主要是为了解决速度问题</li>\n<li>主存-辅存层次主要是为了解决容量问题</li>\n<li>置换时机<ul>\n<li>高速缓存的替换时机<ul>\n<li>缓存没有数据，需要从主存载入所需数据</li>\n</ul>\n</li>\n<li>主存页面的替换时机<ul>\n<li>主存缺页，需要从辅存载入页面数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>置换算法<ul>\n<li>先进先出算法(FIFO)<ul>\n<li>把主存看做是一个先进先出的队列</li>\n<li>优先替换最先进入队列的字块</li>\n</ul>\n</li>\n<li>最不经常使用算法(LFU)<ul>\n<li>优先淘汰最不经常使用的字块</li>\n<li>需要额外的空间记录字块的使用频率</li>\n</ul>\n</li>\n<li>最近最少使用算法(LRU)<ul>\n<li>优先淘汰一段时间内没有使用的字块</li>\n<li>如果正在使用的字块在缓存就将其移到表头，保证链表头部节点是最近使用的</li>\n<li>有多种实现方法，一般使用双向链表</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-6-Linux的存储管理\"><a href=\"#4-6-Linux的存储管理\" class=\"headerlink\" title=\"4.6 Linux的存储管理\"></a>4.6 Linux的存储管理</h3><ul>\n<li><p>页内碎片 </p>\n<ul>\n<li>内部碎片是已经被分配出去（能明确指出属于哪个进程）的内存空间大于请求所需的内存空间，不能被利用的内存空间就是内部碎片。</li>\n</ul>\n</li>\n<li><p>页外碎片</p>\n<ul>\n<li>外部碎片是指还没有分配出去（不属于任何进程），但是由于大小而无法分配给申请内存空间的新进程的内存空闲块。</li>\n</ul>\n</li>\n<li><p>Buddy内存管理算法</p>\n<ul>\n<li>Buddy算法是经典的内存管理算法</li>\n<li>算法基于计算机处理二进制的优势具有极高的效率</li>\n<li>算法主要是为了解决内存外碎片的问题</li>\n<li>实际是将内存外碎片问题 转移成内存内碎片问题</li>\n<li>努力让内存分配与相邻内存合并能快速进行</li>\n<li>内存分配原则<ul>\n<li>向上取整为2的幂大小</li>\n<li>70k→128k</li>\n<li>129k→256k</li>\n<li>666k→1024k</li>\n</ul>\n</li>\n<li>伙伴系统<ul>\n<li>“伙伴”指的是内存的“伙伴”</li>\n<li>一片连续内存的“伙伴”是相邻的另一片大小一样的连续内存</li>\n</ul>\n</li>\n<li>分配过程<ul>\n<li>创建一系列空闲块链表，每一种都是2的幂</li>\n<li>假设存储空间有1M大小，分配100k内存</li>\n<li>100k向上取2的幂=128k</li>\n<li>查询是否有128k空闲内存块？</li>\n<li>没有！查询是否有256k空闲内存块？</li>\n<li>没有！查询是否有512k空闲内存块？</li>\n<li>没有！查询是否有1M空闲内存块？</li>\n<li>有，摘下1M空闲内存块，分配出去</li>\n<li>拆下512k放在512k的空闲链表，其余的分配出去</li>\n<li>拆下256k放在256k的空闲链表，其余的分配出去</li>\n<li>拆下128k放在128k的空闲链表，其余的分配出去</li>\n<li>分配完毕</li>\n</ul>\n</li>\n<li>回收过程<ul>\n<li>判断刚才分配的内存伙伴在空闲链表上吗？</li>\n<li>在！移除伙伴，合并为256k空闲内存，判断</li>\n<li>在！移除伙伴，合并为512k空闲内存，判断</li>\n<li>在！移除伙伴，合并为1M空闲内存</li>\n<li>插入1M空闲链表，回收完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Linux交换空间</p>\n<ul>\n<li>交换空间(Swap)是磁盘的一个分区</li>\n<li>Linux物理内存满时，会把一些内存交换至Swap空间</li>\n<li>Swap空间是初始化系统时配置的</li>\n<li>top命令可以查看交换空间的分配情况</li>\n<li>主要用途：<ul>\n<li>冷启动内存依赖</li>\n<li>系统睡眠依赖</li>\n<li>大进程空间依赖</li>\n</ul>\n</li>\n<li>交换空间VS虚拟内存<ul>\n<li>Swap空间是操作系统概念</li>\n<li>Swap空间解决系统物理内存不足问题</li>\n<li>Swap空间存在于磁盘</li>\n<li>Swap空间与主存发生置换</li>\n<li>虚拟内存是进程概念</li>\n<li>虚拟内存解决进程物理内存不足问题</li>\n<li>虚拟内存存在于磁盘</li>\n<li>虚拟内存与主存发生置换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-文件管理\"><a href=\"#5-文件管理\" class=\"headerlink\" title=\"5.文件管理\"></a>5.文件管理</h2><h3 id=\"5-1-操作系统的文件管理\"><a href=\"#5-1-操作系统的文件管理\" class=\"headerlink\" title=\"5.1 操作系统的文件管理\"></a>5.1 操作系统的文件管理</h3><ul>\n<li><p>文件的逻辑结构</p>\n<ul>\n<li>逻辑结构的文件类型<ul>\n<li>有结构文件<ul>\n<li>文本文件、 文档 、媒体文件</li>\n<li>文件内容由定长记录和可变长记录组成</li>\n<li>定长记录存储文件格式、文件描述等结构化数据项</li>\n<li>可变长记录存储文件具体内容</li>\n<li>例如：PNG文件标记–PNG数据块–文件结束标记</li>\n</ul>\n</li>\n<li>无结构文件<ul>\n<li>exe文件、 dll链接库文件、 so文件</li>\n<li>二进制文件 、链接库</li>\n<li>也称为流式文件</li>\n<li>文件内容长度以字节为单位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>顺序文件<ul>\n<li>顺序文件是指按顺序存放在存储介质中的文件</li>\n<li>磁带的存储特性使得磁带文件只能存储顺序文件</li>\n<li>顺序文件是所有逻辑文件当中存储效率最高的</li>\n<li>顺序文件的增删改效率低</li>\n</ul>\n</li>\n<li>索引文件<ul>\n<li>可变长文件不适合使用顺序文件格式存储</li>\n<li>索引文件是为了解决可变长文件存储而发明的一种文件格式</li>\n<li>索引文件需要配合索引表完成存储的操作</li>\n<li>索引表：[键 ,逻辑地址]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>辅存的存储空间分配</p>\n<ul>\n<li>辅存的分配方式<ul>\n<li>连续分配<ul>\n<li>顺序读取文件内容非常容易，速度很快</li>\n<li>对存储要求高，要求满足容量的连续存储空间</li>\n</ul>\n</li>\n<li>链接分配<ul>\n<li>链接分配可以将文件存储在离散的盘块中<br>需要额外的存储空间存储文件的盘块链接顺序</li>\n<li>隐式链接 <ul>\n<li>隐式分配的下一个链接指向存储在当前盘块内</li>\n<li>隐式分配适合顺序访问，随机访问效率很低</li>\n<li>可靠性差，任何一个链接出问题都影响整个文件</li>\n</ul>\n</li>\n<li>显式链接<ul>\n<li>FAT( File Allocation Table)  [物理块 ,下一盘块]</li>\n<li>不支持高效的直接存储（FAT记录项多）</li>\n<li>检索时FAT表占用较大的存储空间（需要将整个FAT加载到内存）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>索引分配<ul>\n<li>把文件的所有盘块集中存储（索引）</li>\n<li>读取某个文件时，将文件索引读取进内存即可</li>\n<li>每个文件拥有一个索引块，记录所有盘块信息</li>\n<li>索引分配方式支持直接访问盘块</li>\n<li>文件较大时，索引分配方式具有明显优势</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>辅存的存储空间管理</p>\n<ul>\n<li><p>空闲表</p>\n<ul>\n<li>[序号, 第一个空闲盘块号, 空闲盘块数]</li>\n<li>空闲盘区的分配与内存分配类似</li>\n<li>首次适应算法、循环适应算法等</li>\n<li>回收过程也与内存回收类似</li>\n</ul>\n</li>\n<li><p>空闲链表 </p>\n<ul>\n<li>空闲链表法把所有空闲盘区组成一个空闲链表</li>\n<li>每个链表节点存储空闲盘块和空闲的数目</li>\n</ul>\n</li>\n<li><p>位示图</p>\n<ul>\n<li>位示图维护成本很低</li>\n<li>位示图可以非常容易找到空闲盘块</li>\n<li>位示图使用0/1比特位，占用空间很小</li>\n<li>0：未使用，1：已使用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">盘块/磁道</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\">1</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>目录管理</p>\n<ul>\n<li>目录树：<ul>\n<li>任何文件或目录都只有唯一路径</li>\n</ul>\n</li>\n<li>文件描述信息<ul>\n<li>文件标识符 文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-2-Linux文件的基本操作\"><a href=\"#5-2-Linux文件的基本操作\" class=\"headerlink\" title=\"5.2 Linux文件的基本操作\"></a>5.2 Linux文件的基本操作</h3><ul>\n<li><p>Linux目录</p>\n<ul>\n<li>Linux一切皆文件</li>\n<li>常用目录：/bin /etc /home /usr /opt /proc /dev /mnt /lib /var …</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目录</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/bin</td>\n<td>存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里</td>\n</tr>\n<tr>\n<td>/etc</td>\n<td>存放系统管理和配置文件</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是/home/user</td>\n</tr>\n<tr>\n<td>/usr</td>\n<td>用于存放系统应用程序，比较重要的目录/usr/local 本地系统管理员软件安装目录</td>\n</tr>\n<tr>\n<td>/opt</td>\n<td>额外安装的可选应用程序包所放置的位置</td>\n</tr>\n<tr>\n<td>/proc</td>\n<td>虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</td>\n</tr>\n<tr>\n<td>/root</td>\n<td>超级用户（系统管理员）的主目录</td>\n</tr>\n<tr>\n<td>/sbin</td>\n<td>存放二进制可执行文件，只有root才能访问</td>\n</tr>\n<tr>\n<td>/dev</td>\n<td>用于存放设备文件</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>存放用于系统引导时使用的各种文件</td>\n</tr>\n<tr>\n<td>/lib</td>\n<td>存放跟文件系统中的程序运行所需要的共享库及内核模块</td>\n</tr>\n<tr>\n<td>/var</td>\n<td>用于存放运行时需要改变数据的文件</td>\n</tr>\n</tbody></table>\n<ul>\n<li>相对路径：相对当前目录开始的目录</li>\n<li>绝对路径：相对根目录开始的目录</li>\n</ul>\n</li>\n<li><p>Linux文件常用操作</p>\n<ul>\n<li>创建：<ul>\n<li>touch file </li>\n<li>vim file2 创建并编辑file2</li>\n<li>mkdir dir1 创建文件夹dir1</li>\n</ul>\n</li>\n<li>删除<ul>\n<li>rm file </li>\n<li>rm -r dir1/ 递归删除文件夹dir1</li>\n</ul>\n</li>\n<li>读取<ul>\n<li>cat file2</li>\n</ul>\n</li>\n<li>写入<ul>\n<li>vim file2 创建并编辑file2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>文件类型</p>\n<ul>\n<li>普通文件(-)</li>\n<li>目录文件(d) </li>\n<li>符号链接(l) </li>\n<li>设备文件(b、 c)</li>\n<li>套接字(s) </li>\n<li>FIFO(p)</li>\n</ul>\n</li>\n<li><p>Linux的文件系统</p>\n<ul>\n<li><p>文件系统概览</p>\n<ul>\n<li>FAT<ul>\n<li>FAT(File Allocation Table)</li>\n<li>FAT16、 FAT32等，微软Dos/Windows使用的文件系统</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>使用一张表保存盘块的信息</p>\n<ul>\n<li>NTFS</li>\n</ul>\n</li>\n<li><p>NTFS (New Technology File System)</p>\n<ul>\n<li>WindowsNT环境的文件系统</li>\n<li>NTFS对FAT进行了改进，取代了旧的文件系统<ul>\n<li>EXT2/3/4</li>\n</ul>\n</li>\n<li>EXT(Extended file system)：扩展文件系统</li>\n<li>Linux的文件系统</li>\n<li>EXT2/3/4 数字表示第几代</li>\n</ul>\n</li>\n<li><p>Ext文件系统</p>\n<ul>\n<li>Boot Sector：启动扇区，安装开机管理程序</li>\n</ul>\n</li>\n<li><p>Block Group：块组，存储数据的实际位置</p>\n<ul>\n<li><p>Boot Sector</p>\n</li>\n<li><p>Block Group</p>\n<ul>\n<li>SuperBlock<ul>\n<li>记录整个文件系统相关信息的地方</li>\n<li>Block和Inode的使用情况</li>\n<li>时间信息、控制信息等</li>\n</ul>\n</li>\n<li>Inode Bitmap<ul>\n<li>Inode的位示图</li>\n<li>记录已分配的Inode和未分配的Inode</li>\n</ul>\n</li>\n<li>Block Bitmap<ul>\n<li>功能与Inode bitmap类似</li>\n<li>记录Data block的使用情况</li>\n</ul>\n</li>\n<li>Inode Table<ul>\n<li>存放文件Inode的地方</li>\n<li>每一个文件（目录）都有一个Inode</li>\n<li>是每一个文件（目录）的索引节点</li>\n<li>Inode：<ul>\n<li>文件类型 文件权限 文件物理地址 文件长度 文件连接计数 文件存取时间 索引节点编号 文件状态 访问计数 链接指针 …</li>\n<li>文件名不是存放在Inode节点上的，而是存放在目录的Inode节点</li>\n<li>列出目录文件的时候无需加载文件的Inode</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Data Block<ul>\n<li>Data block是存放文件内容的地方</li>\n<li>每个block都有唯一的编号</li>\n<li>文件的block记录在文件的Inode上</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gnhudx17c4j30ku0b9dhl.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-设备管理\"><a href=\"#6-设备管理\" class=\"headerlink\" title=\"6.设备管理\"></a>6.设备管理</h2><ul>\n<li><p>广义的IO设备</p>\n<ul>\n<li>对CPU而言，凡是对CPU进行数据输入的都</li>\n<li>对CPU而言，凡是CPU进行数据输出的都是输出设备是输入设备</li>\n</ul>\n</li>\n<li><p>广义的IIO设备分类</p>\n<ul>\n<li>使用特性分类<ul>\n<li>存储设备： U盘 内存 磁盘 </li>\n<li>交互IO设备：键盘 显示器 鼠标</li>\n</ul>\n</li>\n<li>信息交换的单位<ul>\n<li>块设备 ：磁盘 SD卡 </li>\n<li>字符设备：打印机 Shell终端</li>\n</ul>\n</li>\n<li>设备共享属性<ul>\n<li>独占设备 </li>\n<li>共享设备 </li>\n<li>虚拟设备</li>\n</ul>\n</li>\n<li>传输速率<ul>\n<li>低速设备 </li>\n<li>中速设备 </li>\n<li>高速设备</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>IO设备的缓冲区</p>\n<ul>\n<li>背景：CPU与IO设备的速率不匹配</li>\n<li>减少CPU处理IO请求的频率</li>\n<li>提高CPU与IO设备之间的并行性</li>\n<li>专用缓冲区只适用于特定的IO进程</li>\n<li>当这样的IO进程比较多时，对内存的消耗也很大</li>\n<li>操作系统划出可供多个进程使用的公共缓冲区，称之为缓冲池</li>\n</ul>\n</li>\n<li><p>SPOOLing技术</p>\n<ul>\n<li>虚拟设备技术</li>\n<li>是关于慢速字符设备如何与计算机主机交换信息的一种技术</li>\n<li>利用高速共享设备将低速的独享设备模拟为高速的共享设备</li>\n<li>逻辑上，系统为每一个用户都分配了一台独立的高速独享设备</li>\n<li>SPOOLing技术把同步调用低速设备改为异步调用</li>\n<li>在输入、输出之间增加了排队转储环节（输入井、输出井）</li>\n<li>SPOOLing负责输入（出）井与低速设备之间的调度</li>\n<li>逻辑上，进程直接与高速设备交互，减少了进程的等待时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-实践\"><a href=\"#7-实践\" class=\"headerlink\" title=\"7.实践\"></a>7.实践</h2><h3 id=\"7-1-线程同步实践\"><a href=\"#7-1-线程同步实践\" class=\"headerlink\" title=\"7.1 线程同步实践\"></a>7.1 线程同步实践</h3><ul>\n<li>互斥量<ul>\n<li>两个线程的指令交叉执行导致了同步问题</li>\n<li>互斥量可以保证先后执行</li>\n<li>原子性<ul>\n<li>这一系列操作要么全部执行完成，要么全部没有执行</li>\n<li>原子性是指一系列操作不可被中断的特性</li>\n<li>不存在部分执行部分未执行的情况 </li>\n</ul>\n</li>\n<li>互斥量（互斥锁），处于两态之一的变量：解锁和加锁</li>\n<li>互斥量是最简单的线程同步的方法</li>\n<li>两个状态可以保证资源访问的串行</li>\n<li>开发者可以直接使用API完成资源的加锁、解锁操作</li>\n<li>操作系统直接提供了互斥量的API<ul>\n<li>C 语言<ul>\n<li>pthread_mutex_lock</li>\n<li>pthread_mutex_t</li>\n<li>pthread_mutex_unlock</li>\n</ul>\n</li>\n<li>Java<ul>\n<li>synchronized</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>自旋锁<ul>\n<li>和互斥锁有什么不一样的？</li>\n<li>使用自旋锁的线程会反复检查锁变量是否可用</li>\n<li>自旋锁也是一种多线程同步的变量</li>\n<li>自旋锁不会让出CPU，是一种忙等待状态</li>\n<li>死循环等待锁被释放</li>\n<li>操作系统内部很多地方使用的是自旋锁</li>\n<li>自旋锁避免了进程或线程上下文切换的开销</li>\n<li>自旋锁不适合在单核CPU使用，因为自旋锁不会让出CPU</li>\n<li>api<ul>\n<li>pthread_spinlock_t</li>\n<li>pthread_ spinlock <em>lock</em></li>\n<li>pthread_ spinlock _unlock</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>读写锁<ul>\n<li>读取的时候并不会改变临界资源的值</li>\n<li>临界资源多读少写</li>\n<li>是否存在效率更高的同步方法？</li>\n<li>允许多个读者同时访问资源以提高读性能</li>\n<li>读写锁是一种特殊的自旋锁</li>\n<li>对于写操作则是互斥的</li>\n<li>API<ul>\n<li>pthread_rwlock_t</li>\n<li>pthread_rwlock_rdlock（读锁）</li>\n<li>pthread_rwlock_wrlock（写锁）</li>\n</ul>\n</li>\n<li>互斥量、自旋锁、读写锁 同步过程：等待解锁–加锁–【临界资源】–解锁</li>\n</ul>\n</li>\n<li>条件变量<ul>\n<li>条件变量允许线程睡眠，直到满足某种条件</li>\n<li>条件变量是一种相对复杂的线程同步方法</li>\n<li>当满足条件时，可以向该线程信号，通知唤醒</li>\n<li>生产者消费者问题<ul>\n<li>缓冲区满时，不允许生产者往缓冲区生产，生产者必须等待</li>\n<li>缓冲区小于等于0时，不允许消费者消费，消费者必须等待</li>\n<li>当生产者生产一个产品时，唤醒可能等待的消费者</li>\n<li>当消费者消费一个产品时，唤醒可能等待的生产者</li>\n</ul>\n</li>\n<li>API<ul>\n<li>pthread_cond_t,配合互斥量使用</li>\n<li>pthread_cond_wait(等待条件满足)</li>\n<li>pthread_cond_signal(等待被唤醒)</li>\n</ul>\n</li>\n<li>条件变量同步流程：等待解锁–加锁保护条件变量–等待条件满足被唤醒–【临界资源】–解锁</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>同步方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>互斥锁</td>\n<td>最简单的一种线程同步方法，会阻塞线程</td>\n</tr>\n<tr>\n<td>自旋锁</td>\n<td>避免切换的一种线程同步方法，属于“忙等待”，不让出CPU</td>\n</tr>\n<tr>\n<td>读写锁</td>\n<td>为“读多写少” 的资源设计的线程同步方法，可以显著提高性能</td>\n</tr>\n<tr>\n<td>条件变量</td>\n<td>相对复杂的一种线程同步方法，有更灵活的使用场景</td>\n</tr>\n</tbody></table>\n<h3 id=\"7-2-进程同步实践\"><a href=\"#7-2-进程同步实践\" class=\"headerlink\" title=\"7.2 进程同步实践\"></a>7.2 进程同步实践</h3><ul>\n<li><p>使用fork系统调用创建进程</p>\n<ul>\n<li>fork创建的进程初始化状态与父进程一样</li>\n<li>fork系统调用是用于创建进程的</li>\n<li>系统会为fork的进程分配新的资源</li>\n<li>fork会返回两次，分别返回子进程id和0</li>\n<li>fork系统调用无参数</li>\n<li>返回子进程id的是父进程，返回0的是子进程</li>\n</ul>\n</li>\n<li><p>共享内存</p>\n<ul>\n<li>进程的线程共享进程资源</li>\n<li>进程共享计算机资源</li>\n<li>在某种程度上，多进程是共同使用物理内存的</li>\n<li>由于操作系统的进程管理，进程间的内存空间是独立的</li>\n<li>进程默认是不能访问进程空间之外的内存空间的</li>\n<li>共享存储允许不相关的进程访问同一片物理内存</li>\n<li>共享内存是两个进程之间共享和传递数据最快的方式</li>\n<li>共享内存未提供同步机制，需要借助其他机制管理访问，比如通过一个Boolean的变量来控制是否可读可写</li>\n<li>共享内存是高性能后台开发中最常用的进程同步方式</li>\n<li>共享内存 使用流程<ul>\n<li>申请共享内存 </li>\n<li>连接到进程空间</li>\n<li>脱离进程空间 </li>\n<li>使用共享内存&amp;删除</li>\n</ul>\n</li>\n<li>代码实现</li>\n</ul>\n</li>\n<li><p>Unix域套接字</p>\n<ul>\n<li>域套接字是一种高级的进程间通信的方法</li>\n<li>Unix域套接字可以用于同一机器进程间通信</li>\n<li>套接字(socket)原是网络通信中使用的术语</li>\n<li>Unix系统提供的域套接字提供了网络套接字类似的功能</li>\n<li>Nginx、uWSGI</li>\n<li>服务端<ul>\n<li>创建套接字</li>\n<li>绑定(bind)套接字</li>\n<li>监听(listen)套接字</li>\n<li>接收&amp;处理信息</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>创建套接字</li>\n<li>连接套接字</li>\n<li>发送信息</li>\n</ul>\n</li>\n<li>代码实现</li>\n<li>提供了单机简单可靠的进程通信同步服务</li>\n<li>只能在单机使用，不能跨机器使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-关于我\"><a href=\"#8-关于我\" class=\"headerlink\" title=\"8.关于我\"></a>8.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p>\n<p><a href=\"http://basedev.cn/\" target=\"_blank\" rel=\"noopener\">个人网站 basedev.cn</a>  </p>\n<p><a href=\"https://github.com/jaydroid1024\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p>\n<h2 id=\"9-参考\"><a href=\"#9-参考\" class=\"headerlink\" title=\"9.参考\"></a>9.参考</h2><p><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content\" target=\"_blank\" rel=\"noopener\">重学操作系统 | 拉钩教育</a></p>\n<p><a href=\"https://coding.imooc.com/class/package/355.html\" target=\"_blank\" rel=\"noopener\">编程必备基础 | 慕课网</a></p>\n"},{"title":"筑基系列-计算机网络基础知识小抄版","date":"2021-07-31T06:16:55.000Z","cover":true,"summary":"计算机网络基础理论提纲挈领，包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# 筑基系列-计算机网络基础知识小抄版\n\n\n\n> 计算机基础知识筑基三部曲：\n>\n> - **[第一部：筑基系列-计算机基础知识小抄版](https://juejin.cn/post/6991367806772052004)**\n>   - 包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n> - **[第二部：筑基系列-操作系统基础知识小抄版](https://juejin.cn/post/6991385109509193764)**\n>   - 包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n> - **[第三部：筑基系列-计算机网络基础知识小抄版](https://juejin.cn/post/6991397445251334151)**\n>   - 包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n## 目录\n\n- [1.计算机网络概述](#1.计算机网络概述)\n\n  - [1.1 什么是计算机网络](#11-什么是计算机网络)\n  - [1.2 计算机网络的分类](#12-计算机网络的分类)\n  - [1.3 计算机网络的发展历史](#13-计算机网络的发展历史)\n  - [1.4 计算机网络的层次结构](#14-计算机网络的层次结构)\n  - [1.5 现代互联网的网络拓扑](#15-现代互联网的网络拓扑)\n  - [1.6 计算机网络的性能指标](#16-计算机网络的性能指标)\n\n- [2.物理层](#2.物理层)\n\n  - [2.1 物理层的作用](#21-物理层的作用)\n  - [2.2 信道的基本概念](#22-信道的基本概念)\n\n- [3.数据链路层](#3.数据链路层)\n\n  - [3.1 数据链路层主要功能](#31-数据链路层主要功能)\n  - [3.2 最大传输单元MTU](#32-最大传输单元mtu)\n  - [3.3 以太网协议详解](#33-以太网协议详解)\n\n- [4.网络层](#4.网络层)\n  - [4.1 网络层的主要功能](#41-网络层的主要功能)\n  - [4.2 IP协议详解](#42-ip协议详解)\n  - [4.3 IP协议的转发流程](#43-ip协议的转发流程)\n  - [4.4 ARP协议与RARP协议](#44-arp协议与rarp协议)\n  - [4.5 IP地址的分类](#45-ip地址的分类)\n  - [4.6 IP地址的划分子网](#46-ip地址的划分子网)\n  - [4.7 无分类地址CIDR](#47-无分类地址cidr)\n  - [4.8 网络地址转换NAT技术](#48-网络地址转换nat技术)\n  - [4.9 ICMP协议详解](#49-icmp协议详解)\n  - [4.10 网络层的路由概述](#410-网络层的路由概述)\n  - [4.11 自治系统(AS)](#411-自治系统as)\n  - [4.12 内部网关路由协议之RIP协议](#412-内部网关路由协议之rip协议)\n  - [4.13 外部网关路由协议之BGP协议](#413-外部网关路由协议之bgp协议)\n  \n- [5.传输层](#5.传输层)\n\n  - [5.1 传输层的主要功能](#51-传输层的主要功能)\n  - [5.2 UDP协议详解](#52-udp协议详解)\n  - [5.3 TCP报文详解](#53-tcp报文详解)\n  - [5.4 TCP可靠传输的基本原理](#54-tcp可靠传输的基本原理)\n  - [5.5 TCP协议的可靠传输](#55-tcp协议的可靠传输)\n  - [5.6 TCP协议的流量控制](#56-tcp协议的流量控制)\n  - [5.7 TCP协议的拥塞控制](#57-tcp协议的拥塞控制)\n  - [5.8 TCP连接的建立](#58-tcp连接的建立)\n  - [5.9 TCP连接的释放](#59-tcp连接的释放)\n  - [5.10 套接字与套接字编程](#510-套接字与套接字编程)\n\n- [6.应用层](#6.应用层)\n  - [6.1 应用层概述](#61-应用层概述)\n  - [6.2 应用层主要功能](#62-应用层主要功能)\n  - [6.3 DNS服务详解](#63-dns服务详解)\n  - [6.4 DHCP协议详解](#64-dhcp协议详解)\n  - [6.5 HTTP协议详解](#65-http协议详解)\n  - [6.6 HTTP工作的结构](#66-http工作的结构)\n  \n  - [6.7 HTTPS协议详解](#67-https协议详解)\n  - [6.8 输入域名按下回车键的过程有哪些](#68-输入域名按下回车键的过程有哪些)\n  \n- [7.HTTP协议详解](#7.HTTP协议详解)\n\n  - [7.1 浏览器背后的故事](#71-浏览器背后的故事)\n  - [7.2 HTTP协议的前世今生](#72-http协议的前世今生)\n  - [7.3 透过TCP/IP看HTTP](#73-透过tcpip看http)\n\n- [8.计算机网络实践](#8.计算机网络实践)\n\n  - [8.1 网络嗅探工具](#81-网络嗅探工具)\n\n- [9.关于我](#9关于我)\n\n- [10.参考](#10参考)\n\n\n\n## 1.计算机网络概述\n\n### 1.1 什么是计算机网络\n\n- 计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统\n- 计算机网络的不是软件概念，还包含硬件设备\n- 计算机网络不仅仅是信息通信，还可以支持广泛的应用\n\n### 1.2 计算机网络的分类\n\n| 分类   | 英文                     | 范围           | 区域       |\n| ------ | ------------------------ | -------------- | ---------- |\n| 广域网 | WAN(Wide Area Network)   | 几十到几千公里 | 跨省、跨国 |\n| 城域网 | MAN(Metro. Area Network) | 5KM-50KM       | 城市间     |\n| 局域网 | LAN(Local Area Network)  | 1KM以内        | 地区内     |\n\n### 计算机网络的发展历史\n\n- 世界互联网发展历史\n\n  - 单个网络 ARPANET\n    - 计算机-->交换机<--计算机\n  -  三级结构互联网\n    - 主干网-->地区网-->校园网\n  - 多层次ISP互联网\n    - ISP(Internet Service Provider): 网络服务提供商\n    - 中国电信、中国移动、中国联通等\n    - 主干ISP(海底电缆)-->地区ISP(山东移动)-->校园、家庭、公司\n    - 查看全球网络地图：https://www.infrapedia.com/app\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171046.jpg)\n\n- 中国互联网的发展历史\n\n\t- 1980 年开始互联网实验\n\t- 1989 年第一个公共网络建立运行\n\t- 1994 接入国际互联网\n\t- 中国的互联网企业\n\t  - 中国电信互联网CHINANET\n\t  - 中国联通互联网UNINET\n\t  - 中国移动互联网CMNET\n\t  - 中国教育与科研计算机网CERNET\n\t  - 中国科学技术网CSTNET\n\t  - 1996年，张朝阳创建搜狐\n\t  - 1997年，丁磊创建网易\n\t  - 1998年，王志东创建新浪\n\t  - 1998年，马化腾、张志东创建腾讯\n\t  - 1999年，马云创建阿里巴巴\n\t  - 2000年，李彦宏创建百度\n\n### 1.4 计算机网络的层次结构\n\n- 层次结构设计的基本原则\n  - 分层实现不同的功能\n    - 保证数据通路顺畅\n    - 识别目的计算机\n    - 目的计算机状态\n    - 数据是否错误\n    - 层次划分：网络应用数据(视频、文件、游戏)-->数据可靠通信(数据错误、重复)-->物理网络接入(光电等物理特性)\n  - 各层之间是相互独立的\n  - 每一层要有足够的灵活性\n  - 各层之间完全解耦\n- OSI七层模型\n  - 应用层：为计算机用户提供接口和服务\n  - 表示层：数据处理（编码解码、加密解密等）\n  - 会话层：管理（建立、维护、重连）通信会话\n  - 传输层：管理端到端的通信连接\n  - 网络层：数据路由（决定数据在网络的路径）\n  - 数据链路层：管理相邻节点之间的数据通信\n  - 物理层：数据通信的光电物理特性\n  - OSI在市场化过程中困难重重， TCP/IP在全球范围成功运行\n  - OSI欲成为全球计算机都遵循的标准\n  - OSI最终并没有成为广为使用的标准模型\n  - 为什么没有被接受\n    - OSI标准制定周期过长，按OSI标准生产的设备无法及时进入市场\n    - OSI的专家缺乏实际经验\n    - OSI模型设计的并不合理，一些功能在多层中重复出现\n- TCP/IP四层模型\n  - 应用层：HTTP/FTP/… ，对应OSI的应用层、表示层、会话层\n  - 传输层：TCP/UDP，对应OSI的传输层\n  - 网络层：IP/ICMP，对应OSI的网络层\n  - 网络接口层：Ethernet/ARP/RARP，对应OSI的数据链路层、物理层\n\n### 1.5 现代互联网的网络拓扑\n\n- 边缘部分\n  - 家庭：终端机器(手机)-->路由器-->网关-->地区ISP\n  - 企业：终端机器(电脑)-->路由器-->内部网关-->统一网关-->地区ISP\n- 核心部分\n  - 地区ISP-->主干ISP-->国际路由器\n- 网络连接错综复杂\n- 接入设备数以亿计\n- 网络覆盖边际全球\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171055.jpg)\n\n\n\n- 客户-服务器(C/S)模式\n  - C请求服务-->S获得服务\n- 对等连接(P2P)模式\n\n### 1.6 计算机网络的性能指标\n\n- 速率\n  - 速率单位： bps=bit/s\n  - 为什么电信拉的100M光纤，测试峰值速度只有12M每秒？\n    -  bps到字节的转换\n    - 网络常用单位为(Mbps)\n    - 100M/s = 100Mbps = 100Mbit/s\n    - 100Mbit/s=(100/8)MB/s=12.5MB/s\n- 时延\n  - 总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延\n  - 发送时延\n    - 发送时延 = 数据长度(𝑏𝑖𝑡)/发送速率(𝑏𝑖𝑡/𝑠)\n    - 发送速率受限于计算机网卡\n  - 传输时延\n    - 传播时延 = 传输路径距离/传播速率(𝑏𝑖𝑡/𝑠)\n    - 传播速率受限于传输介质，铜线、光线\n  - 排队时延\n    - 数据包在网络设备中等待被处理的时间\n  - 处理时延\n    - 数据包到达设备或者目的机器被处理所需要的时间\n- 往返时间RTT\n  - RTT表示的是数据报文在端到端通信中的来回一次的时间\n  - RTT(Route-Trip Time)是评估网络质量的一项重要指标\n  - 通常使用ping命令查看RTT\n\n\n\n## 2.物理层\n\n### 2.1 物理层的作用\n\n- 相关设备\n  - 双绞线\n  - 同轴电缆\n  - 光纤\n  - 红外线\n  - 无线\n  - 激光\n- 传输比特流\n- 连接不同的物理设备\n- 物理特性\n  - 机械特性\n  - 电气特性\n  - 功能特性\n  - 过程特性\n\n### 2.2 信道的基本概念\n\n- 一条通信电路包含一个接收信道和一个发送信道\n- 信道是往一个方向传送信息的媒体\n- 单工信道\n  - 有线电视、无线电收音机等等\n  - 只能一个方向通信，没有反方向反馈的信道\n- 半双工信道\n  - 不能双方同时发送，也不能同时接收\n  - 双方都可以发送和接收信息\n- 全双工信道\n  - 双方都可以同时发送和接收信息\n\n- 分用-复用技术\n  - 信道利用率并不高？\n  - 分用器\n  - 复用器\n  - 频分复用\n  - 时分复用\n  - 波分复用\n  - 码分复用\n\n\n\n## 3.数据链路层\n\n### 3.1 数据链路层主要功能\n\n- 封装成帧\n\n  - 发送端在网络层的一段数据前后添加特定标记形成“帧”\n  - “帧”是数据链路层数据的基本单位\n  - 接收端根据前后特定标记识别出“帧”\n  - 物理层才不管你“帧”不“帧”，物理层之作用bit流的传输\n  - IP数据报-->“帧”的数据[帧首部， “帧”的数据 ，帧尾部]\n  -  帧首部和尾部是特定的控制字符（特定比特流）SOH: 00000001，EOT: 00000100\n- 透明传输\n  - “一种实际存在的事物却又看起来不存在一样”\n  - “透明”在计算机领域是非常重要的一个术语\n  - “即是控制字符在帧数据中，但是要当做不存在的去处理”\n  - 数据中也出现了控制字符，对数据中的控制字符进行特殊处理，转义\n  - “\\n”、“\\t”等控制字符，编程语言中“\\”一般为转义字符，“\\\\” 、“\\\\\\\\”\n- 差错监测\n  - 数据链路层负责起“差错监测”的工作\n  - 物理层只管传输比特流，无法控制是否出错\n  - 循环冗余校验码CRC\n    - 检测数据传输或者保存后可能出现的错误\n    - 一种根据传输或保存的数据而产生固定位数校验码的方法\n    - 生成的数字计算出来并且附加到数据后面\n    - 模“2”除法\n      - 与算术除法类似，但除法不借位，实际是“异或”操作\n      - 模“2”除法是二进制下的除法\n      - 0 xor 0 = 0，0 xor 1 = 1，1 xor 0 = 1，1 xor 1 = 0\n    - 检测流程\n      - 选定一个用于校验的多项式G(x)，并在数据尾部添加r个0\n      - 将添加r个0后的数据，使用模“2”除法除以多项式的位串\n      - 得到的余数填充在原数据r个0的位置得到可校验的位串\n      - 例子1：使用CRC计算101001的可校验位串\n        - 计算过程有点难！！！\n    - 数据链路层只进行数据的检测，不进行纠正，一旦出错会丢弃\n    - CRC的错误检测能力与位串的阶数r有关\n  - 奇偶校验码\n    - 检测机制：在比特流最后一位加上一位（1或者0），（所有比特流中的1相加）偶数加0，奇数加1 \n    - 缺陷：出错两位，奇偶校验码校测不到错误\n\n### 3.2 最大传输单元MTU\n\n- MTU\n  - 数据链路层的数据帧也不是无限大的\n  - 最大传输单元MTU(Maximum Transmission Unit)\n  - 数据帧过大或过小都会影响传输的效率\n  - 总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延\n  - 以太网MTU一般为1500字节\n- 路径MTU\n  - 路径MTU由链路中MTU的最小值决定\n  - 木桶效应\n\n### 3.3 以太网协议详解\n\n- MAC地址\n\n  - MAC地址（Media Access Control Address）直译为媒体存取控制位址，也称为局域网地址（LAN Address）\n  - 每一个设备都拥有唯一的MAC地址\n  - MAC地址（物理地址、硬件地址）\n  - MAC地址共48位，使用十六进制表示\n  - ipconfig/all 查看本机所有MAC地址 ，30-B4-9E-ED-85-CA\n\n- 以太网协议\n\n  - 以太网是一种应用于数据链路层的协议\n  - 以太网(Ethernet)是一种使用广泛的局域网技术\n  - 使用以太网可以完成相邻设备的数据帧传输\n  - 以太网数据格式\n    - 类型：0800： IP数据报，0806： ARP请求/应答，8035： RARP请求/应答\n\n  | 目的地址（MAC地址) 单位字节 | 源地址 | 类型 | 帧数据  | CRC校验码 |\n  | --------------------------- | ------ | ---- | ------- | --------- |\n  | 6                           | 6      | 2    | 46-1500 | 4         |\n\n  - MAC地址表，路由器持有\n\n  | MAC地址           | 硬件接口 |\n  | ----------------- | -------- |\n  | 31-B4-9E-ED-85-CA | 接口1    |\n  | 32-B4-9E-ED-85-CB | 接口2    |\n  | 33-B4-9E-ED-85-CC | 接口4    |\n\n  - A终端通过路由器发送数据到C终端的过程\n    - A通过网卡发出数据帧\n    - 数据帧到达路由器，路由器取出前6字节（目的MAC地址）\n    - 路由器匹配MAC地址表，找到对应的网络接口\n    - 路由器往该网络接口发送数据帧\n    - 如果MAC地址表没有匹配成功\n    - 路由器将广播A的数据包到除A以外的端口\n    - 路由器检查MAC地址表，发现没有C的信息\n    - 路由器将收到来自B、 C的回应，并将地址记录\n  - 以太网协议只提供相邻物理节点传输，跨设备是无法传输的，需要借助网络层\n\n\n\n## 4.网络层\n\n### 4.1 网络层的主要功能\n\n- 网络层：数据路由（决定数据在网络的路径）\n- 数据链路层只能解决相邻物理节点传输\n\n### 4.2 IP协议详解\n\n- 虚拟互联网络\n\n  - 物理设备通过使用IP协议，屏蔽了物理网络之间的差异\n  - 实际的计算机网络是错综复杂的\n  - 当网络中的主机使用IP协议连接时，则无需关注网络细节\n  - IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发\n  - IP协议使得复杂的实际网络变为一个虚拟互连的网络\n  - IP协议解决了在虚拟网络中数据报传输路径的问题\n\n- IP协议\n\n  - IP地址\n    - MAC地址： 30-B4-9E-ED-85-CA：00110000-11000020-11101101-01000101-11001010\n      - 48位，16进制表示\n      - 唯一，不可变\n    - P地址： 192.168.11.11：11000000.10101000.00001011.00001011\n      - 32位，常分成4个8位，一般采用点分十进制表示，共可以表示 2^32 = 4294961296\n      - IP地址常使用**点分十进制**来表示(0~255.0~255.0~255.0~255)，例如：255.255.255.255\n      - 受网络环境影响会发生改变\n  - IP报文格式\n\n  | 协议层     | 数据格式                                                     |\n  | ---------- | ------------------------------------------------------------ |\n  | 物理层     | 001010101001110110101010101010…10101010101010101010101010101 |\n  | 数据链路层 | 【帧首部 】【“帧”的数据】 【帧尾部】                         |\n  | 网络层     | 【IP首部】【 IP数据报的数据】                                |\n\n  - IP报文头部各个参数的作用\n\n  | 4位版本             | 4位首部长度 | 8位服务类型(TOS) | 16位总长度(字节) |\n  | ------------------- | ----------- | ---------------- | ---------------- |\n  | 16位标识            | 3位标志     | 13位片偏移       |                  |\n  | 8位生存时间(TTL)    | 8位协议     | 16位首部校验和   |                  |\n  | 32位源IP地址        |             |                  |                  |\n  | 32位目的IP地址      |             |                  |                  |\n  | 选项options（若有） |             |                  |                  |\n  | IP数据              |             |                  |                  |\n\n  - 每一行32位，第六行可选，所以IP报文头部至少占4×5=20个字节\n  - 第一行\n    - 版本：占4位，指的是IP协议的版本，通信双方的版本必须一致，当前主流版本是4，即IPv4，也有IPv6\n    - 首部位长度：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字”（4个字节），也即是IP首部最大长度为60字节\n    - 8位服务类型(TOS)：TOS包括共8位，包括3 bit的优先权字段（取值可以从000-111所有值），4 bit的TOS子字段和1 bit未用位但必须置0。\n    - 总长度：占16位，最大数值为65535，表示的是IP数据报总长度（IP首部+IP数据），数据链路层MTU,如果IP数据报的数据多余“帧”的数据，需要分片处理\n  - 第二行\n    - 16位标识：IP协议内部使用\n    - 3位标志：标记是否可以分片\n    - 13位片偏移：第几个分片\n  - 第三行\n    - TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文，避免数据在网络无限传输\n    - 协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP等）\n      - 协议名 ICMP、 IGMP、 IP 、TCP、 UDP、 OSPF …，字段值 1 、2 、4 、6、 17、 89 …\n    - 首部校验和：占16位，校验IP首部是否有出错\n  - 源IP地址：发送方\n  - 目的IP地址：接收方\n\n### 4.3 IP协议的转发流程\n\n- 逐跳(hop-by-hop)\n\n- 路由表\n\n  - 计算机或者路由器都拥有路由表\n  - MAC地址表和路由表\n\n  | MAC地址 | 硬件接口 |      | 目的IP地址 | 下一跳IP地址 |\n  | ------- | -------- | ---- | ---------- | ------------ |\n  | A       | E1       |      | IP1        | IP4          |\n  | B       | E2       |      | IP2        | IP5          |\n  | C       | E3       |      | IP3        | IP6          |\n\n- 转发流程：网络层\n\n  ![](https://tva1.sinaimg.cn/large/008eGmZEly1gnl5pjkrqtj30nm07gjsc.jpg)\n\n  - A将数据报发送给E\n  - A发出目的地为C的IP数据报， 查询路由表发现下一跳为E\n  - E查询路由表发现下一跳为F，将数据报发送给F\n  - F查询路由表发现目的地C直接连接，将数据报发送给C\n\n- IP数据报每一跳的IP地址始终不变\n\n- 数据帧每一跳的MAC地址都在变化\n\n### 4.4 ARP协议与RARP协议\n\n- ARP协议\n  - ARP(Address Resolution Protocol)地址解析协议，通过IP地址查找MAC地址\n  - ARP缓存表：[IP地址, MAC地址] 如：192.168.83.254 ---00-50-56-e0-33-40\n  - ARP缓存表缓存了IP地址到硬件地址之间的映射关系\n  - ARP缓存表是ARP协议和RARP协议运行的关键\n  - ARP缓存表中的记录并不是永久有效的，有一定的期限\n  - **arp -a** :查看ARP缓存表\n  - 数据报格式，共28个字节，封装在数据链路层里，用于网络层，【类型0806 ，ARP请求/应答 ，PAD】\n    - 硬件类型，2位\n    - 协议类型 ，2位\n    - 标记 ，24\n    - 发送端 以太网地址 ，6位\n    - 发送端 IP地址 ，4位\n    - 目的端 以太网地址 ，6位\n    - 目的端 IP地址，4位\n- RARP协议\n  - RARP(Reverse Address Resolution Protocol)逆地址解析协议\n  - 数据链路层MAC48位地址--》网络层IP32位地址\n- ARP和RARP的操作对程序员是透明的\n- (R)ARP协议是TCP/IP协议栈里面基础的协议\n- 理解(R)ARP协议有助于理解网络分层的细节\n- 转发流程：网络层+数据链路层+物理层\n  - 第一步：A->E\n    - A发出目的地为C的IP数据报， 查询路由表发现下一跳为E\n    - A将IP数据报交给数据链路层，并告知目的MAC地址是E\n    - 数据链路层填充源MAC地址A和目的MAC地址E\n    - 数据链路层通过物理层将数据发送给E\n  - 第二步：E-->F\n    - E的数据链路层接收到数据帧， 把帧数据交给网络层\n    - E查询路由表， 发现下一跳为F\n    - E把数据报交给数据链路层， 并告知目的MAC地址为F\n    - E的数据链路层封装数据帧并发送\n  - 第三步：F-->C\n    - F的数据链路层接收到数据帧， 把帧数据交给网络层\n    - F查询路由表， 发现下一跳为C\n    - F把数据报交给数据链路层，并告知目的MAC地址为C\n    - F的数据链路层封装数据帧并发送\n\n### 4.5 IP地址的分类\n\n- IP地址长度为32位，常分成4个8位，常使用点分十进制来表示(0~255.0~255.0~255.0~255)，2^32 = 4294961296\n\n- 直接对42亿多个IP地址规划和分配IP地址非常麻烦\n\n- IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=\n\n- 分类的IP地址\n\n  - 网络号 \n    - 网络号的位数直接决定了可以分配的网络数（计算方法=2^网络号位数-特殊网络号数）\n  - 主机号\n    - 主机号的位数则决定了网络中最大的主机数（计算方法=2^主机号位数-特殊主机号数）\n\n  | IP类型 | 组成                            | 最小网络号           | 最大网络号                | 子网数量(理想)        | 最小主机号 | 最大主机号  | 主机数量        |\n  | ------ | ------------------------------- | -------------------- | ------------------------- | --------------------- | ---------- | ----------- | --------------- |\n  | A      | 8位网络号(0开头）+24位主机号    | 0(00000000)          | 127(01111111)             | 2^7=128               | 0.0.0      | 255.255.255 | 2^24=16,777,216 |\n  | B      | 16位网络号（10开头）+16位主机号 | 128(100000000).0     | 191(10111111).255         | 2^14(6+8)=16,384      | 0.0        | 255.255     | 2^16=65536      |\n  | C      | 24位网络号（110开头）+8位主机号 | 192(110000000).0.0   | 223(11011111).255.255     | 2^21(5+8+8)=2,097,252 | 0          | 255         | 2^8=256         |\n  | D      | 组播地址（1110开头）            | 224(111000000).0.0.0 | 239(11101111).255.255.255 | 2^4=16                |            |             |                 |\n  | E      | 保留以后再用（1111开头）        | 240(111110000).0.0.0 | 225(11111111).255.255.255 | 2^4=16                |            |             |                 |\n\n  - 特殊的网络号\n    - A类地址网络段后7位全1(01111111:127)表示回环地址\n    - A类地址网络段全0(00000000)表示特殊网络\n    - B类地址网络段(10000000.00000000:128.0)是不可使用的\n    - C类地址网络段(192.0.0)是不可使用的\n    - 上表中的A类IP的子网可用数量为：2^7-2，B类:2^14-1，C类：2^21-1\n  - 特殊的主机号\n    - 主机号为全1表示广播地址，向当前网络段所有主机发消息，例如：1.0.0.0\n    - 主机号全0表示当前网络段，不可分配为特定主机，例如：1.255.255.255\n    - 上表中A\\B\\C的可用主机号数量为：2^24-2、2^16-2、2^8-2\n  - 127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。localhost是个域名\n  - 如何判断一个IP属于哪一类IP地址\n    - 取出首八位：\n    - A类：(0,127) / 0xxxxxxx，\n    - B类：[128,19]) / 10xxxxxx，\n    - C类：[192,223] / 110xxxxx\n\n### 4.6 IP地址的划分子网\n\n- 某公司拥有100名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？\n  - C类可分配的主机数量为2^8-2=254个\n- 某公司拥有256名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？\n  - B类可分配的主机数量为2^16-2=65534个\n  - 造成了很大的地址空间浪费\n- 子网号\n  - IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=\n  - 例如一个C类IP 193.10.10.0 = 24位网络号（110开头）+8位主机号 \n  - 主机号段为.0=.00000000\n  - 将主机号段最高位分成 **.0**0000000 和  **.1**0000000 两个子网\n  -  **.0**0000000 子网可以表示的主机范围为：(0) **.0**0000000 -- (127) **.0**1111111 \n  -  **.1**0000000 子网可以表示的主机范围为：(128) **.1**0000000 -- (255) **.1**1111111 \n  - 某公司拥有100名员工，每人配备一个计算机，就可以申请C类IP的子网从而可以充分利用IP的数量\n- 子网掩码\n  - 子网号这么多，有没有办法快速判断某个IP的网络子网掩码号？\n  - 子网掩码由连续的1和连续的0组成\n  - 子网掩码和IP地址一样，都是32位\n  - 某一个子网的子网掩码具备网络号位数个连续的1\n  - A类IP的子网掩码：255.0.0.0 \n  - B类IP的子网掩码：255.255.0.0 \n  - C类IP的子网掩码：255.255.255.0\n  - 划分子网的子网掩码：子网掩码-子网号-主机号\n    - 例如：193.10.10.0 = 24位网络号（110开头）+1位子网号+7位主机号 \n      - 子网掩码为：255.255.255.128（24+1个1和7个0组成）\n      - 求 193.10.10.6 这个IP对应的子网号\n      - 第一步IP对应的二进制：            193.10.10.6 -- 11000001.00001010.00001010.00000110\n      - 第二步子网掩码对应的二进制：255.255.255.128 -- 11111111.11111111.11111111.10000000\n      - 第三步：一二步与运算得到子网号 11000001.00001010.00001010.00000000  -- 193.10.10.0\n\n### 4.7 无分类地址CIDR\n\n- IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】\n\n- 子网划分相对复杂所以出现了CIDR\n\n- 无类域内路由选择（Classless Inter-Domain Routing）\n\n- CIDR中没有A、 B、 C类网络号、和子网划分的概念\n\n- CIDR将网络前缀相同的IP地址称为一个“CIDR地址块”\n\n- IP地址=【网络前缀+主机号】\n\n- 网络前缀是任意位数的\n\n- CIDR采用斜线记法来表示一个IP地址\n\n  - 193.10.10.129/25==11000001.00001010.00001010.10000001\n  - 25表示网络前缀有25位，主机位有7位\n  - 相比原来子网划分更加灵活\n  - 超网-》子网\n\n  | CIDR前缀长度 | 掩码点分十进制 | 地址数    |\n  | ------------ | -------------- | --------- |\n  | /13          | 255.248.0.0    | 2^19=512K |\n  | /14          | 255.252.0.0    | 2^18=256K |\n  | /15          | 255.254.0.0    | 2^17=128K |\n  | /16          | 255.255.0.0    | 2^16=64K  |\n  | /17          | 255.255.128.0  | 2^15=32K  |\n  | /18          | 255.255.192.0  | 2^14=16K  |\n  | /19          | 255.255.224.0  | 2^13=8K   |\n\n  \n\n### 4.8 网络地址转换NAT技术\n\n-  IPv4最多只有40+亿个IP地址\n\n- 早期IP地址的不合理规划导致IP号浪费\n\n- 网络拓扑：边缘部分：家庭，多个设备如何复用同一个IP地址的\n\n- 内网地址\n\n  - 内部机构使用\n  - 避免与外网地址重复\n  - 三类内网地址\n    - 10.0.0.0~10.255.255.255（支持千万数量级设备）\n    - 172.16.0.0~172.31.255.255（支持百万数量级设备）\n    - 192.168.0.0~192.168.255.255（支持万数量级设备）\n\n- 外网地址\n\n  - 全球范围使用\n  - 全球公网唯一\n\n- 网络地址转换NAT技术\n\n  - 内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？\n  - 网络地址转换NAT(Network Address Translation)\n  - NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中\n  - NAT减缓了IP地址的消耗，但是增加了网络通信的复杂度\n  - 端口(Port)号\n  - 端口映射表：NA(P)T表\n\n  | 数据传输方向 | 旧的地址和端口号   | 新的地址与端口号   |\n  | ------------ | ------------------ | ------------------ |\n  | 出           | 92.168.2.11:6666   | 173.21.59.10:16666 |\n  | 出           | 192.168.2.10:7777  | 173.21.59.10:17777 |\n  | 入           | 173.21.59.10:16666 | 192.168.2.11:6666  |\n  | 入           | 173.21.59.10:17777 | 192.168.2.10:7777  |\n\n  \n\n### 4.9 ICMP协议详解\n\n- 网际控制报文协议（Internet Control Message Protocol）\n\n- ICMP协议可以报告错误信息或者异常情况，辅助IP协议\n\n- 网络层  【IP首部】-【 IP数据报的数据】\n\n- 【IP首部】协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP、ICMP等）\n\n- ICMP数据封装在【 IP数据报的数据】里面\n\n- 【ICMP报文首部】-【 ICMP报文数据】\n\n- 8位类型+ 8位代码 +16位校验和+ICMP报文数据\n\n- 分类\n\n  - 差错报告报文 \n  - 询问报文\n\n  | ICMP报文种类 | 类型的值        | 报文类型                    | 具体代码 |\n  | ------------ | --------------- | --------------------------- | -------- |\n  | 差错报告报文 | 3 (终点不可达） | 网络不可达 / 主机不可达     | 0/1      |\n  |              | 5 (重定向）     | 对网络重定向 / 对主机重定向 | 0/1      |\n  |              | 11              | 传输超时                    | -        |\n  |              | 12              | 坏的IP头 / 缺少其他必要参数 | 0/1      |\n  | 询问报文     | 0或8            | 回送(Echo)请求或应答        | -        |\n  |              | 13或14          | 时间戳(Timestamp)请求或应答 | -        |\n\n- ICMP报文的应用\n\n  - Ping应用\n    - 询问报文-0或8 - 回送(Echo)请求或应答\n    - Ping回环地址127.0.0.1,如果失败计算机的协议栈可能出问题，需要重装操作系统\n    - Ping网关地址，如果失败，网关路由器可能出问题\n    - Ping远端地址，如果失败，家到ISP服务商之间可能出问题了，需要找服务商解决\n  - Traceroute应用\n    - Traceroute可以探测IP数据报在网络中走过的路径\n    - 【IP首部】TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文--ICMP终点不可达差错报文\n    - 命令：Windows：tracert github.com ，Mac：traceroute to github.com \n      - **221.179.159.20来自北京市北京 移动**\n      - **111.24.3.17来自 移动**\n      - **223.119.2.21来自香港 移动**\n      - **52.93.11.39来自新加坡 亚马逊云**\n\n### 4.10 网络层的路由概述\n\n- 路由表问题\n\n  - 路由表是怎么来的\n  - 下一跳地址是唯一的吗？\n  - 下一跳地址是怎么来的？\n  - 下一跳地址是最佳的吗？\n  - 路由器怎么多，他们是怎么协同工作的？\n  - 需要一个好的算法去解决这些事情\n\n- 路由算法\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171345.jpg)\n\n  - 每一条边表示一条网络路径\n  - 每一顶点表示一个网络、路由器或计算机\n  - 路由算法实际上是图论的算法\n  - 网络环境复杂，路由算法要比图论的算法要复杂\n  - 路由算法具备哪些特性\n    - 算法是正确的、 完整的\n    - 算法在计算上应该尽可能的简单\n    - 算法可以适应网络中的变化\n    - 算法是稳定的和公平的\n\n\n### 4.11 自治系统(AS)\n\n- 对互联网进行划分\n  - 互联网的规模是非常大的\n  - 互联网环境是非常复杂的\n  - 自治系统(Autonomous System)\n  - 自治系统内部路由的协议称为：内部网关协议(RIP、 OSPF)\n  - 自治系统外部路由的协议称为：外部网关协议(BGP)\n  - 两个内部网关协议需要通过外部网关协议进行通讯\n- 一个自治系统(AS)是处于一个管理机构下的网络设备群\n- AS内部网络自行管理， AS对外提供一个或者多个出（入）口\n\n### 4.12 内部网关路由协议之RIP协议\n\n- 距离矢量(DV)算法\n  - DV=Distance vector\n  - 每一个节点使用两个向量𝐷𝑖和S𝑖\n  - 𝐷𝑖描述的是当前节点到别的节点的距离\n  - S𝑖描述的是当前节点到别的节点的下一节点\n  - 每一个节点与相邻的节点交换向量𝐷𝑖和S𝑖的信息\n  - 每一个节点根据交换的信息更新自己的节点信息\n  - 算法实现过程\n    - todo\n- RIP协议的过程\n  - RIP(Routing Information Protocol)协议\n  -  RIP协议是使用DV算法的一种路由协议\n  - RIP协议把网络的跳数(hop)作为DV算法的距离\n  - RIP协议每隔30s交换一次路由信息\n  - RIP协议认为跳数>15的路由则为不可达路由\n  - 具体流程\n    - 路由器初始化路由信息(两个向量𝐷𝑖和S𝑖)\n    - 对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）\n      - 检索本地路由，将信息中新的路由插入到路由表里面\n      - 检索本地路由，对于下一跳为X的，更新为修改后的信息\n      - 检索本地路由，对比相同目的的距离，如果新信息的距离更小，则更新本地路由表\n    - 如果3分钟没有收到相邻的路由信息，则把相邻路由设置为不可达(16跳)\n- RIP协议的优缺点\n  - 故障信息传递慢\n  - RIP协议：实现简单，开销很小\n  - RIP协议：限制了网络的规模\n  - RIP协议：“坏消息传的慢”，更新收敛时间过长\n\n- Dijkstra（迪杰斯特拉）算法\n\n  - Dijkstra算法是著名的图算法\n  - Dijkstra算法解决有权图从一个节点到其他节点的最短路径问题\n  - “以起始点为中心，向外层层扩展”\n  - 最短路径问题\n    - 初始化两个集合(S, U)（S为只有初始顶点点A的集合， U为其他顶点集合）\n    - 如果U不为空， 对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D\n      - 将顶点D的纳入S集合\n      - 更新通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）\n      -  重复2步骤\n    - 知道U集合为空，算法完成\n\n- 内部网关路由协议之OSPF协议\n\n  - 链路状态(LS)协议\n    - 向所有的路由器发送消息\n    - 消息描述该路由器与相邻路由器的链路状态\n      - 距离、时延、带宽\n    - 只有链路状态发生变化时，才发送更新信息\n  - OSPF协议的过程\n    - OSPF(Open Shortest Path First：开放最短路径优先)\n    - OSPF协议的核心是Dijkstra算法\n    - 向所有的路由器发送消息\n      - 获得网络中的所有信息--> “网络的完整拓扑”\n      - 也称为“链路状态数据库”\n      - “链路状态数据库”是全网一致的\n      - Dijkstra（迪杰斯特拉）算法\n    - 消息描述该路由器与相邻路由器的链路状态\n      - OSPF协议更加客观、更加先进\n    - 只有链路状态发生变化时，才发送更新信息\n      - 减少了数据的交换，更快收敛\n    - 路由器接入网络\n    - 路由器向邻居发出问候信息\n    - 与邻居交流链路状态数据库\n    - 广播和更新未知路由\n  - 五种消息类型\n    - 问候消息（Hello）\n    - 链路状态数据库描述信息\n    - 链路状态请求信息\n    - 链路状态更新信息\n    - 链路状态确认信息\n\n  | RIP协议                  | OSPF协议                         |\n  | ------------------------ | -------------------------------- |\n  | 从邻居看网络             | 整个网络的拓扑                   |\n  | 在路由器之间累加距离     | Dijkstra算法计算最短路径         |\n  | 频繁、周期更新，收敛很慢 | 状态变化更新，收敛很快           |\n  | 路由间拷贝路由信息       | 路由间传递链路状态，自行计算路径 |\n\n\n\n\n### 4.13 外部网关路由协议之BGP协议\n\n- BGP(Border Gateway Protocol: 边际网关协议)\n- BGP协议是运行在自制系统(AS)之间的一种协议\n- 互联网的规模很大\n- AS内部使用不同的路由协议\n- AS之间需要考虑除网络特性以外的一些因素（政治、安全…）\n- BGP协议能够找到一条到达目的比较好的路由\n- BGP发言人(speaker)\n  - BGP并不关心内部网络拓扑\n  - AS之间通过BGP发言人交流信息\n  - BGP Speaker可以人为配置策略\n\n\n\n## 5.传输层\n\n### 5.1 传输层的主要功能\n\n- 本质：跨设备的进程与进程的通信\n\n  - 单机进程间通信方式：共享内存、Unix域套接字\n\n- 端口的概念\n\n  - 使用端口(Port)来标记不同的网络进程\n  - 端口(Port)使用16比特位表示(0~65535)\n\n  | FTP  | HTTP | HTTPS | DNS  | TELNET |\n  | ---- | ---- | ----- | ---- | ------ |\n  | 21   | 80   | 443   | 53   | 23     |\n\n  \n\n### 5.2 UDP协议详解\n\n- UDP是一个非常简单的协议\n- UDP(User Datagram Protocol: 用户数据报协议)\n- 数据报(Datagram)\n  - 不合并 不拆分\n- 层次位置\n\n| 协议层     | 数据格式                                                     |\n| ---------- | ------------------------------------------------------------ |\n| 物理层     | 001010101001110110101010101010…10101010101010101010101010101 |\n| 数据链路层 | 【帧首部 】【“帧”的数据】 【帧尾部】                         |\n| 网络层     | 【IP首部】【 IP数据报的数据】                                |\n| 传输层     | 【UDP首部】【 UDP数据报的数据(应用层数据)】                  |\n\n- 报文结构\n  - 16位源端口号 + 16位目的端口号\n  - 16位UDP长度 + 16位UDP校验和\n  - 头部报文共8个字节\n  - UDP数据\n  - 各个报文字段的意义\n    - 16位源端口号\n      - 源机器使用的网络进程\n    - 16位目的端口号\n      - 目的机器使用的进程\n    - 16位UDP长度\n      - udp数据报的长度，最小是8个字节仅包括手部\n    - 6位UDP校验和\n      - 检测数据报在传输过程中是否出错\n- UDP的特点\n  - UDP是无连接协议\n  - UDP不能保证可靠的交付数据，“想发就发”，“无法保证数据在网络中是否丢失”\n  -  UDP是面向报文传输的\n  - UDP没有拥塞控制\n  - UDP的首部开销很小\n\n### 5.3 TCP报文详解\n\n- TCP(Transmission Control Protocol: 传输控制协议)\n- TCP协议是计算机网络中非常复杂的一个协议\n- 层次位置\n\n| 协议层     | 数据格式                                                     |\n| ---------- | ------------------------------------------------------------ |\n| 物理层     | 001010101001110110101010101010…10101010101010101010101010101 |\n| 数据链路层 | 【帧首部 】【“帧”的数据】 【帧尾部】                         |\n| 网络层     | 【IP首部】【 IP数据报的数据】                                |\n| 传输层     | 【TCP首部】【 TCP数据报的数据 】                             |\n\n- 特点\n\n  - TCP是面向连接的协议\n  - TCP的一个连接有两端（点对点通信）\n  - TCP提供可靠的传输服务\n  - TCP协议提供全双工的通信\n  - TCP是面向字节流的协议，合并、分拆\n\n- 报文结构\n\n  - 16位源端口 16位目的端口\n\n  - 32位序号\n\n  - 32位确认号\n\n  - 数据偏移 +保留字段 +TCP标记 +窗口\n\n  - 16位校验和 + 16位紧急指针\n\n  - 以上行固定20个字节\n\n  - TCP选项（可选）+ 填充\n\n  - 各个报文字段的意义\n\n    - 16位源端口号\n\n      - 源机器使用的网络进程\n\n    - 16位目的端口号\n\n      - 目的机器使用的进程\n\n    - 32位序号\n\n      - 0~2^32-1\n      - 面向字节流，一个字节一个序号\n      - 数据首字节序号\n\n    - 32位确认号\n\n      - 0~2^32-1\n      - 一个字节一个序号\n      - 期望收到数据的首字节序号\n      - 确认号为N：则表示N-1序号的数据都已经收到\n\n    - 数据偏移\n\n      - 占4位： 0~15，单位为： 32位字\n      - 数据偏离首部的距离\n\n    - 保留字段\n\n    - TCP标记\n\n      - 占6位，每位各有不同意义\n      - TCP三次握手和四次挥手会用到这里的标记为\n\n      | 标记 | 含义                                             |\n      | ---- | ------------------------------------------------ |\n      | URG  | Urgent: 紧急位， URG=1，表示紧急数据             |\n      | ACK  | Acknowledgement: 确认位， ACK=1，确认号才生效    |\n      | PSH  | Push: 推送位， PSH=1，尽快地把数据交付给应用层   |\n      | RST  | Reset: 重置位， RST=1，重新建立连接              |\n      | SYN  | Synchronization: 同步位， SYN=1 表示连接请求报文 |\n      | FIN  | Finish: 终止位， FIN=1 表示释放连接              |\n\n    - 窗口\n\n      - 占16位： 0~2^16-1\n      - 窗口指明允许对方发送的数据量\n      - 确认号是500，窗口大小1000，则501-1500是可以接收的\n\n    - 16位校验和 \n\n    - 16位紧急指针\n\n      - 紧急数据（URG=1）\n      - 指定紧急数据在报文的位置\n\n    - TCP选项（可选）\n\n      - 最多40字节\n      - 支持未来的拓展\n\n    - 填充\n\n### 5.4 TCP可靠传输的基本原理\n\n- 停止等待协议\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171526.jpg)\n\n  - 无差错的情况\n  - 出差错的情况\n    - 发送的消息在路上丢失了\n    - 确认的消息在路上丢失了\n    - 确认的消息很久才到\n    - 超时重传\n    - 超时重传计时器\n      - 每发送一个消息，都需要设置一个定时器\n  - 优缺点\n    - 停止等待协议是最简单的可靠传输协议\n    - 停止等待协议对信道的利用效率不高\n\n- 连续ARQ协议\n\n  - ARQ(Automatic Repeat reQuest：自动重传请求)\n  - 既然单个发送和确认效率低，可不可以批量发送和确认？\n  - 滑动窗口\n    - 固定窗口内的字节批量发出，确认几个窗口就向后滑动几个\n  - 累计确认\n    - 只要收到某个消息的确认，那么这个消息之前的消息都确认了\n\n### 5.5 TCP协议的可靠传输\n\n- TCP的可靠传输基于连续ARQ协议\n- TCP的滑动窗口以字节为单位\n- 滑动窗口\n  - 【已经确认的字节序号】-【窗口】-【不允许发送的字节序号】\n  - 窗口中的字节数据：已发送未确认+可用窗口\n  - 如果没有按顺序收到窗口开始的确认，只收到中间的确认消息，窗口不滑动，执行超时重传\n  - 选择重传\n    - 选择重传需要指定需要重传的字节\n    - 每一个字节都有唯一的32位序号\n    - 存储在TCP选项（可选）\n    - 最多40个字节，序号展4个字节，最多10个序号，每个序号表示的某段的起止位置，分段传输\n\n### 5.6 TCP协议的流量控制\n\n- 流量控制指让发送方发送速率不要太快\n- 流量控制是使用滑动窗口来实现的\n- 流量控制流程\n  - **窗口（rwnd）**指明允许对方发送的数据量，Receiver window\n  - **序号（seq）**用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则TCP用序号对每个字节进行计数。序号是32bit的无符号数，序号到达232－1后又从0开始。sequence\n  - **确认序号（ack）** 是上次已成功收到数据字节序号加1。只有ACK标志位为1时确认序号字段才有效。acknowledgement \n  - **确认位（ACK）**  Acknowledgement: 确认位， ACK=1，确认号才生效\n  - 发送方：发送100字节的数据（seq=1, DATA）\n  - 发送方：发送100字节的数据（seq=101, DATA）\n  - ->接收方：确认200字节的数据，并告诉对方窗口为300（ACK=1, ack=201, rwnd=300）\n  - 发送方：发送100字节的数据（seq=301, DATA）\n  - 发送方：发送200字节的数据（seq=401, DATA）\n  - ->接收方：确认300字节的数据，并告诉对方窗口为0（ACK=1, ack=601, rwnd=0）\n  - ->接收方想再次接受数据需要发送窗口大小给发送方\n  - 如果这个窗口调整请求出错了会产生死锁吗\n  - 坚持定时器来避免死锁的情况\n- 坚持定时器\n  - 当接收到窗口为0的消息，则启动坚持定时器\n  - 坚持定时器每隔一段时间发送一个窗口探测报文\n\n### 5.7 TCP协议的拥塞控制\n\n- 一条数据链路经过非常多的设备\n- 数据链路中各个部分都有可能成为网路传输的瓶颈\n- 拥塞控制 VS 流量控制\n  - 流量控制考虑点对点的通信量的控制\n  - 拥塞控制考虑整个网络，是全局性的考虑\n- 拥塞判断：报文超时可以认为是拥塞\n- 拥塞控制算法\n  - 慢启动算法\n    - 由小到大逐渐增加发送数据量\n    - 每收到一个报文确认，就加一，例如：1 2 4 8 16 （指数增长）\n    - 慢启动阈值(ssthresh)\n  - 拥塞避免算法\n    - 维护一个拥塞窗口的变量，大于慢启动阈值\n    - 只要网络不拥塞，就试探着拥塞窗口调大，17 18 19\n    - 最大限度的利用管道\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171603.jpg)\n\n### 5.8 TCP连接的建立\n\n- TCP标记：占6位，每位各有不同意义\n\n| 标记 | 含义                                                         |\n| ---- | ------------------------------------------------------------ |\n| SYN  | Synchronization: 同步位， SYN=1 表示连接请求报文             |\n| ACK  | Acknowledgement: 确认位， ACK=1，确认号才生效                |\n| FIN  | Finish: 终止位， FIN=1 表示释放连接                          |\n| seq  | sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位 |\n| ack  | acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位 |\n\n- 三次握手建立TCP连接的过程\n  - 接收方：监听\n  - 发送方：SYN=1, seq=x\n  - 发送方：同步已发送\n  - 接收方：SYN=1, ACK=1, seq=y, ack=x+ 1\n  - 接收方：同步已接受\n  - 发送方：ACK=1, seq=x+ 1, ack=y+1\n  - 发送方：建立连接\n  - 接收方：建立连接\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171620.jpg)\n\n- 为什么需要三次握手\n  - 避免已经失效的连接请求报文传送到对方， 引起错误\n  - 避免两次建立连接时多次连接的情况\n  - 第三次握手时，发送方可以检查是否已经发起了第三次，如果已经发起了就忽略其它超时的连接\n\n\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801172608.jpg)\n\n\n\n- TCP三次握手 \n  - 使用TCP协议进行通信的双方必须先建立连接，然后才能开始传输数据。为了确保连接双方可靠性，在双方建立连接时, TCP协议采用了三次握手策略。\n  - 第一次握手:客户端发送带有SYN标志的连接请求报文段，然后进入SYN SEND )状态，等待服务端的确认。\n  - 第二次握手:服务端接收到客户端的SYN报文段后需要发送ACK信息对这个SYN报文段进行确认。同时，还要发送自己的SYN请求信息。服务端会将上述的信息放到一个报文段(SYN+ ACK报文段)中，一并发送给客户端此时服务端将会进入SYN RECV状态。\n  - 第三次握手:客户端接收到服务端的SYN+ ACK报文段后,会想服务端发送ACK确认报文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED状态,完成TCP三次握手。\n- 为什么需要第三次\n  - 确认双方的收发能力，一共八个能力：自己的收发和对方的收发\n  - 第一次：服务端能知道客户端的发送和自己的接收能力正常\n  - 第二次：客户端能知道服务端的接收（第一次）和发送能力和自己的发送（第一次）能力和接收能力都正常\n  - 第三次：服务端能知道客户端的接收（第二次）和自己的发送（第二次）能力正常\n\n### 5.9 TCP连接的释放\n\n- TCP标记：占6位，每位各有不同意义\n\n| 标记 | 含义                                                         |\n| ---- | ------------------------------------------------------------ |\n| SYN  | Synchronization: 同步位， SYN=1 表示连接请求报文             |\n| ACK  | Acknowledgement: 确认位， ACK=1，确认号才生效                |\n| FIN  | Finish: 终止位， FIN=1 表示释放连接                          |\n| seq  | sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位 |\n| ack  | acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位 |\n\n- 四次释放\n\n  - 四次释放TCP连接的过程\n    - 发送方：FIN=1,seq=u\n    - 发送方：释放等待状态（FIN-WAIT-1）\n    - 接收方：ACK=1,seq=v,ack=u+1\n    - 发送方：释放等待状态（FIN-WAIT-2）\n    - 接收方：关闭等待状态（CLOSE-WAIT）\n    - 接收方：因为是被动关闭可能有未发出的数据需要继续完成发送\n    - 接收方：FIN=1,ACK=1,seq=w,ack=u+1\n    - 接收方：最后确认状态（LAST-ACK）\n    - 发送方：ACK=1,seq=u+1,ack=w+1\n    - 发送方：等待计时（TIME-WAIT）\n    - 接收方：关闭状态\n    - 发送方：关闭状态\n  - 等待计时器\n    - 等待时间：2MSL\n      - MSL(Max Segment Lifetime): 最长报文段寿命\n      - MSL建议设置为2分钟\n    - 为什么需要等待2MSL？\n      - 确保发送方的ACK可以到达接收方\n      - 最后一个报文没有确认\n      - 接收方在 2MSL时间内没有收到，则接收方会重发确认释放请求数据报\n      - 确保当前连接的所有报文都已经过期\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171643.jpg)\n\n### 5.10 套接字与套接字编程\n\n- 使用端口(Port)来标记不同的网络进程，端口(Port)使用16比特位表示(0~65535)\n- 网络套接字\n  - 𝐼𝑃: 𝑃𝑜𝑟𝑡------ 套接字\n  - 套接字(Socket)是抽象概念，表示TCP连接的一端\n  - 通过套接字可以进行数据发送或接收\n  - TCP连接由两个套接字组成：TCP={ 𝑆𝑜𝑐𝑘𝑒𝑡1: 𝑆𝑜𝑐𝑘𝑒𝑡2}= { {𝐼𝑃: 𝑃𝑜𝑟𝑡}  { 𝐼𝑃: 𝑃𝑜𝑟𝑡} }\n  - 客户端 --TCP连接---服务端\n  - 服务端\n    - 创建套接字\n    - 绑定(bind)套接字\n    - 监听(listen)套接字\n    - 接收&处理信息\n  - 客户端\n    - 创建套接字\n    - 连接套接字\n    - 发送信息\n- 客户端-服务端编程\n  - Java、Pathy\n- 网络套接字 VS 域套接字\n  - 域套接字：域套接字文件，不会经过tcp/ip协议簇，单机跨进程建议使用\n  - 网络套接字：单机和跨机都会在tcp/ip协议栈走一圈，单机跨进程不建议使用\n\n\n\n## 6.应用层\n\n### 6.1 应用层概述\n\n- 传输层以及以下的层提供完整的通信服务\n- 应用层是面向用户的一层\n- 已有的应用层软件 ，面向传输层的编程\n- UDP\n  - 多媒体信息分发\n    - 视频 语音 实时信息\n- TCP\n  - 可靠消息传输\n    - 金融交易 可靠通讯 MQ\n\n### 6.2 应用层主要功能\n\n- 应用进程的报文类型（请求报文、应答报文）\n- 报文的语法、格式\n- 应用进程发送数据的时机、规则\n- 定义应用间通讯的规则\n\n### 6.3 DNS服务详解\n\n- DNS（Domain Name System: 域名系统）\n\n  - 域：Domain，网络端，自治域\n  - 名：Name，IP地址\n\n- 主机的进程：Web 服务、网络存储服务、远程调用服务、邮件服务\n\n- IP地址+端口：14.215.177.39:80 、14.18.245.164:25、161.23.37.215:8810\n\n- DNS的功能\n\n  - 使用域名帮助记忆\n    - 点分十进制转为人容易记忆的单词\n    - 域名-->DNS服务-->IP\n\n- 域名详解\n\n  - 域名由点、字母和数字组成\n\n  - 点分割不同的域\n\n  - 域名可以分为顶级域、二级域、三级域\n\n    - 例如 ：www(三级域).taobao(二级域).com(顶级域)\n    - 顶级域\n      - 国家\n        - cn：中国\n        - us：美国\n        - uk：英国\n        - ca：加拿大\n      - 通用\n        - com：公司\n        - net：网络服务机构\n        - gov：政府机构\n        - org：其它组织机构\n    - 二级域\n      - qq、taobao、baidu、alibaba、aliyun、amazon、google、facebook\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171724.jpg)\n\n- 域名服务器\n\n  - 一般由国际或者机构搭建\n  - 查询过程\n    - 本地查询，有就返回\n    - 没有去查根域名服务器\n    - 根域名服务器告诉去查哪一个顶级域名服务器\n    - 顶级域名服务器查到后告诉哪一个域名服务器\n    - 如果域名服务器没找到会返回根域名服务器再次查找\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171736.jpg)\n\n- DNS域名解析\n  - 通常我们访问一一个网站，使用的是主机名或者域名来进行访问的。因为相对于IP地址(一组纯数字)，域名更容易让人记住。但TCP/IP协议使用的是IP地址进行访问的，所以必须有个机制或服务把域名转换成IP地址。DNS服务就是用来解决这个问题的，它提供域名到IP地址之间的解析服务。\n  - 用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户\n- DNS解析流程\n  - 就近原则\n  - 本机host文件\n  - 本机dns服务\n  - 远程13台根域名服务\n  - 转发模式\n\n\n\n### 6.4 DHCP协议详解\n\n- DHCP是什么\n  - DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)\n  - DHCP是一个局域网协议\n  - DHCP是应用UDP协议的应用层协议\n- DHCP的功能\n  - 即插即用联网\n    - 临时IP，内网地址，转换为外网\n    - 租期，租期到了会回收\n- DHCP的工作机制\n  - DHCP服务器监听默认端口： 67\n  - 主机使用UDP协议广播DHCP发现报文\n  - DHCP服务器发出DHCP提供报文\n  - 主机向DHCP服务器发出DHCP请求报文\n  - DHCP服务器回应并提供IP地址\n\n### 6.5 HTTP协议详解\n\n- HTTP是什么\n\n  - HTTP(HyperText Transfer Protocol: 超文本传输协议)\n  - 超文本： “超级文本”， “带超链接文本”，“富文本”\n  -  http(s)://<主机>:<端口>/<路径>，例如：https://www.baidu.com/\n  - HTTP协议是可靠的数据传输协议\n    - Web内容：文本 图片 文件 动图 音频 视频\n  - C/S: 客户端--->HTTP协议----> 服务端\n\n- Web服务器\n\n  - 硬件部分 ：阿里云虚拟服务器、迷你计算机\n\n  - 软件部分：Apache、Nginx\n\n    - *Nginx* (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。\n    - Apache(音译为阿帕奇)是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。\n\n  - 工作机制\n\n    - 接受客户端连接 \n    - 接收请求报文 \n    - 处理请求\n    - 访问Web资源\n    - 构造应答\n    - 发送应答\n\n  - HTTP请求方法\n\n    - GET：获取指定的服务端资源\n    - POST：提交数据到服务端\n    - DELETE：删除指定的服务端资源\n    - UPDATE：更新指定的服务端资源\n    - PUT\n    - OPTIONS\n    - PATCH\n    - HEAD\n    - TRACE\n\n  - HTTP指定资源\n\n    - 在地址中指定\n    - 在请求数据中指定\n\n  - HTTP请求报文\n\n    - [请求方法] [请求地址] [HTTP版本]\n    - [请求头]\n    - [请求内容]\n\n  - HTTP应答报文\n\n    - [HTTP版本] [状态码] [状态解释]\n    - [应答头]\n    - [应答内容]\n\n  - HTTP应答状态码\n\n    - 状态码 含义\n      200~299 成功状态码\n      300~399 重定向状态码\n      400~499 客户端错误状态码\n      500~599 服务端错误状态码\n\n    | 状态码  | 含义             |\n    | ------- | ---------------- |\n    | 200~299 | 成功状态码       |\n    | 300~399 | 重定向状态码     |\n    | 400~499 | 客户端错误状态码 |\n    | 500~599 | 服务端错误状态码 |\n\n### 6.6 HTTP工作的结构\n\n- Web代理\n  - 正向代理\n  - 反向代理\n- CDN\n  - CDN（Content Delivery Network：内容分发网络）\n  - 多媒体内容\n- 爬虫\n  - 增加网络拥塞\n  - 损耗服务器资源\n\n### 6.7 HTTPS协议详解\n\n- 敏感信息：账号密码、个人信息、账户金额、交易信息、敏感信息…\n- HTTPS(Secure)是安全的HTTP协议\n- http(s)://<主机>:<端口>/<路径>，端口：443\n- 工作机制\n  - 加密模型\n    - 对称加密：使用秘钥加密 ，使用秘钥解密，两个秘钥“一致”\n    - 非对称加密：两个秘钥“不一致”\n      - A、 B是拥有一定数学关系的一组秘钥\n      - 私钥：私钥自己使用，不对外公开\n      - 公钥：公钥给大家使用，对外公开\n  - 数字证书\n    - 数字证书是可信任组织颁发给特定对象的认证\n    - 证书格式、版本号\n    - 证书序列号\n    - 签名算法\n    - 有效期\n    - 对象名称\n    - 对象公开秘钥\n  - SSL\n    - SSL(Secure Sockets Layer: 安全套接层)\n    - SSL位于传输层与应用层之间\n    - 数据安全和数据完整\n    - 对传输层数据进行加密后传输\n  - HTTPS工作流程\n    - 443端口的TCP连接\n    - SSL安全参数握手\n    - 客户端发送数据\n    - 服务端发送数据\n  - SSL安全参数握手过程\n    - 客户端：随机数1、协议版本、加密算法\n    - 服务端：确定加密算法、数字证书、随机数2\n    - 客户端：\n      - 确认证书是否有效\n      - 生成随机数3\n      - 使用服务器的公钥加密随机数3\n    - 根据随机数1、 2、 3和相同的算法生成对称秘钥\n    - 双方使用对称秘钥进行加密通信\n    - 综合使用对称加密、非对称加密\n    - 双方分别生成秘钥，没有经过传输\n\n### 6.8 输入域名按下回车键的过程有哪些\n\n- 域名解析\n  - 客户端生成DNS的UDP报文\n  - 查询本机配置的DNS IP地址\n  - UDP报文经本机协议栈发送出去\n  - 网络层 数据链路层 物理层\n  - 请求顶级域名服务器\n- 建立连接\n  - TCP三次握手\n  - SSL握手 交换秘钥\n- HTTP通信\n  - GET\n- 释放连接\n  - 四次挥手 结束连接\n\n\n\n## 7.HTTP协议详解\n\n### 7.1 浏览器背后的故事\n\n- http://www.basedev.cn/\n- 用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户\n- HTTP\n  - 超文本传输协议(HTTP)是一-种通信协议， 它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器\n  - HTTP是- -个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展\n- Web与HTTP\n  - WEB是一种基于超文本和HTTP的、 全球性的、动态交互的、跨平台的分布式图形信息系统\n  - 建立在Internet上的一种网络服务，为浏览者在Internet.上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超，级链接将Internet上的信息节点组织成一个互为关联的网状结构\n\n### 7.2 HTTP协议的前世今生\n\n- 1990年10月万维网之父TimBerners-Lee最早提出了HTTP协议\n- 1991年HTTP0.9诞生\n- 1996年5月HTTP1.0发布\n- 1997年1月HTTP1.1发布\n- 2015年5月HTTP2.0提出\n- HTTP3.0，QUIC协议\n\n### 7.3 透过TCP/IP看HTTP\n\n- TCP/IP协议族\n  - TCP/IP协议其实是一-系列与互联网相关联的协议集 合起来的总称\n  - 分层管理是TCP/IP协议的重要特征\n- 应用层\n  - 应用层一般是我们编写的应用程序,决定了向用户提供的应用服务。应用层可以通过系统调用与传输层进行通信。如: FTP、DNS、HTTP等。\n- 传输层\n  - 传输层通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。\n  - 在传输层有两个性质不同的协议:TCP和UDP。\n- 网络层\n  - 网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(传输路线)到达对方计算机，并把数据包传输给对方。\n- 链路层.\n  - 链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件设备驱动、NIC (Network Interface Card,网络适配器)以及光纤等物理可见部分。硬件. 上的范畴均在链路层的作用范围之内。\n- 数据包的封装过程\n\n![](https://tva1.sinaimg.cn/large/008eGmZEly1gnqxpcdpezj30ig0aqzm8.jpg)\n- http数据传输过程\n  - 发送端发送数据时，数据会从上层传输到下层，且每经过一层都会被打上该层的头部信息。\n  - 接收端接收数据时，数据会从下层传输到上层，传输前会把下层的头部信息删除.\n  \n  \n\n\n## 8.计算机网络实践\n\n### 8.1 网络嗅探工具\n\n- 实现流程\n\n  - 搭建服务基本框架\n  - Python操作字节序列\n    - 字节序\n      - 255 = 00000000,11111111\n      - 大端字节序：高位在前，00000000,11111111\n        - 网络，易读\n      - 小端字节序：高位在后，11111111, 00000000\n        - 主机，CPU对小端字节序处理效率高效\n      - 计算机电路先处理低位字节效率比较高\n      - 人类习惯读写大端字节序\n    - 格式字符\n      - %s 字符串，%d 整数，%x 十六进制，%f 浮点数\n      - 格式字符 C++/Python类型 标准大小（字节）\n      - B-unsigned char/整数 1\n      - H unsigned short/整数 2\n      - L unsigned long/整数 4\n      - s char[]/字节串 \n  - 实现IP报文解析器\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801173224.jpg)\n\n  - 实现UDP报文解析器\n  - 实现TCP报文解析器\n\n- 网卡模式\n\n  - 混杂模式 \n    - 接受所有经过网卡设备的数据 \n  - 非混杂模式\n    - 只接受目的地址指向自己的数据\n\n- IP报文解析\n\n- TCP报文解析\n\n- UDP报文解析\n\n- 从零到一实现HTTP服务器开发\n\n\n\n## 9.关于我\n\n一个专注基础知识的十二线小码农，本着 **基础，体系，实践，分享** 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。\n\n[个人网站 basedev.cn](http://basedev.cn/)  \n\n[Github](https://github.com/jaydroid1024)\n\nBaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践\n\n\n\n## 10.参考\n\n[重学操作系统 | 拉钩教育](https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content)\n\n[编程必备基础 | 慕课网](https://coding.imooc.com/class/package/355.html)\n\n","source":"_posts/computer_net.md","raw":"---\ntitle: 筑基系列-计算机网络基础知识小抄版\ndate: 2021-07-31 14:16:55\ncover: true\ntags: \n    - 计算机基础\n    - 计算机网络\n    - TCP/IP\n    - HTTP/HTTPS\n    - OSI七层模型\n    - DNS\ncategory: \n\t- 计算机\nsummary: 计算机网络基础理论提纲挈领，包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# 筑基系列-计算机网络基础知识小抄版\n\n\n\n> 计算机基础知识筑基三部曲：\n>\n> - **[第一部：筑基系列-计算机基础知识小抄版](https://juejin.cn/post/6991367806772052004)**\n>   - 包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等\n> - **[第二部：筑基系列-操作系统基础知识小抄版](https://juejin.cn/post/6991385109509193764)**\n>   - 包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等\n> - **[第三部：筑基系列-计算机网络基础知识小抄版](https://juejin.cn/post/6991397445251334151)**\n>   - 包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等\n\n\n\n## 目录\n\n- [1.计算机网络概述](#1.计算机网络概述)\n\n  - [1.1 什么是计算机网络](#11-什么是计算机网络)\n  - [1.2 计算机网络的分类](#12-计算机网络的分类)\n  - [1.3 计算机网络的发展历史](#13-计算机网络的发展历史)\n  - [1.4 计算机网络的层次结构](#14-计算机网络的层次结构)\n  - [1.5 现代互联网的网络拓扑](#15-现代互联网的网络拓扑)\n  - [1.6 计算机网络的性能指标](#16-计算机网络的性能指标)\n\n- [2.物理层](#2.物理层)\n\n  - [2.1 物理层的作用](#21-物理层的作用)\n  - [2.2 信道的基本概念](#22-信道的基本概念)\n\n- [3.数据链路层](#3.数据链路层)\n\n  - [3.1 数据链路层主要功能](#31-数据链路层主要功能)\n  - [3.2 最大传输单元MTU](#32-最大传输单元mtu)\n  - [3.3 以太网协议详解](#33-以太网协议详解)\n\n- [4.网络层](#4.网络层)\n  - [4.1 网络层的主要功能](#41-网络层的主要功能)\n  - [4.2 IP协议详解](#42-ip协议详解)\n  - [4.3 IP协议的转发流程](#43-ip协议的转发流程)\n  - [4.4 ARP协议与RARP协议](#44-arp协议与rarp协议)\n  - [4.5 IP地址的分类](#45-ip地址的分类)\n  - [4.6 IP地址的划分子网](#46-ip地址的划分子网)\n  - [4.7 无分类地址CIDR](#47-无分类地址cidr)\n  - [4.8 网络地址转换NAT技术](#48-网络地址转换nat技术)\n  - [4.9 ICMP协议详解](#49-icmp协议详解)\n  - [4.10 网络层的路由概述](#410-网络层的路由概述)\n  - [4.11 自治系统(AS)](#411-自治系统as)\n  - [4.12 内部网关路由协议之RIP协议](#412-内部网关路由协议之rip协议)\n  - [4.13 外部网关路由协议之BGP协议](#413-外部网关路由协议之bgp协议)\n  \n- [5.传输层](#5.传输层)\n\n  - [5.1 传输层的主要功能](#51-传输层的主要功能)\n  - [5.2 UDP协议详解](#52-udp协议详解)\n  - [5.3 TCP报文详解](#53-tcp报文详解)\n  - [5.4 TCP可靠传输的基本原理](#54-tcp可靠传输的基本原理)\n  - [5.5 TCP协议的可靠传输](#55-tcp协议的可靠传输)\n  - [5.6 TCP协议的流量控制](#56-tcp协议的流量控制)\n  - [5.7 TCP协议的拥塞控制](#57-tcp协议的拥塞控制)\n  - [5.8 TCP连接的建立](#58-tcp连接的建立)\n  - [5.9 TCP连接的释放](#59-tcp连接的释放)\n  - [5.10 套接字与套接字编程](#510-套接字与套接字编程)\n\n- [6.应用层](#6.应用层)\n  - [6.1 应用层概述](#61-应用层概述)\n  - [6.2 应用层主要功能](#62-应用层主要功能)\n  - [6.3 DNS服务详解](#63-dns服务详解)\n  - [6.4 DHCP协议详解](#64-dhcp协议详解)\n  - [6.5 HTTP协议详解](#65-http协议详解)\n  - [6.6 HTTP工作的结构](#66-http工作的结构)\n  \n  - [6.7 HTTPS协议详解](#67-https协议详解)\n  - [6.8 输入域名按下回车键的过程有哪些](#68-输入域名按下回车键的过程有哪些)\n  \n- [7.HTTP协议详解](#7.HTTP协议详解)\n\n  - [7.1 浏览器背后的故事](#71-浏览器背后的故事)\n  - [7.2 HTTP协议的前世今生](#72-http协议的前世今生)\n  - [7.3 透过TCP/IP看HTTP](#73-透过tcpip看http)\n\n- [8.计算机网络实践](#8.计算机网络实践)\n\n  - [8.1 网络嗅探工具](#81-网络嗅探工具)\n\n- [9.关于我](#9关于我)\n\n- [10.参考](#10参考)\n\n\n\n## 1.计算机网络概述\n\n### 1.1 什么是计算机网络\n\n- 计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统\n- 计算机网络的不是软件概念，还包含硬件设备\n- 计算机网络不仅仅是信息通信，还可以支持广泛的应用\n\n### 1.2 计算机网络的分类\n\n| 分类   | 英文                     | 范围           | 区域       |\n| ------ | ------------------------ | -------------- | ---------- |\n| 广域网 | WAN(Wide Area Network)   | 几十到几千公里 | 跨省、跨国 |\n| 城域网 | MAN(Metro. Area Network) | 5KM-50KM       | 城市间     |\n| 局域网 | LAN(Local Area Network)  | 1KM以内        | 地区内     |\n\n### 计算机网络的发展历史\n\n- 世界互联网发展历史\n\n  - 单个网络 ARPANET\n    - 计算机-->交换机<--计算机\n  -  三级结构互联网\n    - 主干网-->地区网-->校园网\n  - 多层次ISP互联网\n    - ISP(Internet Service Provider): 网络服务提供商\n    - 中国电信、中国移动、中国联通等\n    - 主干ISP(海底电缆)-->地区ISP(山东移动)-->校园、家庭、公司\n    - 查看全球网络地图：https://www.infrapedia.com/app\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171046.jpg)\n\n- 中国互联网的发展历史\n\n\t- 1980 年开始互联网实验\n\t- 1989 年第一个公共网络建立运行\n\t- 1994 接入国际互联网\n\t- 中国的互联网企业\n\t  - 中国电信互联网CHINANET\n\t  - 中国联通互联网UNINET\n\t  - 中国移动互联网CMNET\n\t  - 中国教育与科研计算机网CERNET\n\t  - 中国科学技术网CSTNET\n\t  - 1996年，张朝阳创建搜狐\n\t  - 1997年，丁磊创建网易\n\t  - 1998年，王志东创建新浪\n\t  - 1998年，马化腾、张志东创建腾讯\n\t  - 1999年，马云创建阿里巴巴\n\t  - 2000年，李彦宏创建百度\n\n### 1.4 计算机网络的层次结构\n\n- 层次结构设计的基本原则\n  - 分层实现不同的功能\n    - 保证数据通路顺畅\n    - 识别目的计算机\n    - 目的计算机状态\n    - 数据是否错误\n    - 层次划分：网络应用数据(视频、文件、游戏)-->数据可靠通信(数据错误、重复)-->物理网络接入(光电等物理特性)\n  - 各层之间是相互独立的\n  - 每一层要有足够的灵活性\n  - 各层之间完全解耦\n- OSI七层模型\n  - 应用层：为计算机用户提供接口和服务\n  - 表示层：数据处理（编码解码、加密解密等）\n  - 会话层：管理（建立、维护、重连）通信会话\n  - 传输层：管理端到端的通信连接\n  - 网络层：数据路由（决定数据在网络的路径）\n  - 数据链路层：管理相邻节点之间的数据通信\n  - 物理层：数据通信的光电物理特性\n  - OSI在市场化过程中困难重重， TCP/IP在全球范围成功运行\n  - OSI欲成为全球计算机都遵循的标准\n  - OSI最终并没有成为广为使用的标准模型\n  - 为什么没有被接受\n    - OSI标准制定周期过长，按OSI标准生产的设备无法及时进入市场\n    - OSI的专家缺乏实际经验\n    - OSI模型设计的并不合理，一些功能在多层中重复出现\n- TCP/IP四层模型\n  - 应用层：HTTP/FTP/… ，对应OSI的应用层、表示层、会话层\n  - 传输层：TCP/UDP，对应OSI的传输层\n  - 网络层：IP/ICMP，对应OSI的网络层\n  - 网络接口层：Ethernet/ARP/RARP，对应OSI的数据链路层、物理层\n\n### 1.5 现代互联网的网络拓扑\n\n- 边缘部分\n  - 家庭：终端机器(手机)-->路由器-->网关-->地区ISP\n  - 企业：终端机器(电脑)-->路由器-->内部网关-->统一网关-->地区ISP\n- 核心部分\n  - 地区ISP-->主干ISP-->国际路由器\n- 网络连接错综复杂\n- 接入设备数以亿计\n- 网络覆盖边际全球\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171055.jpg)\n\n\n\n- 客户-服务器(C/S)模式\n  - C请求服务-->S获得服务\n- 对等连接(P2P)模式\n\n### 1.6 计算机网络的性能指标\n\n- 速率\n  - 速率单位： bps=bit/s\n  - 为什么电信拉的100M光纤，测试峰值速度只有12M每秒？\n    -  bps到字节的转换\n    - 网络常用单位为(Mbps)\n    - 100M/s = 100Mbps = 100Mbit/s\n    - 100Mbit/s=(100/8)MB/s=12.5MB/s\n- 时延\n  - 总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延\n  - 发送时延\n    - 发送时延 = 数据长度(𝑏𝑖𝑡)/发送速率(𝑏𝑖𝑡/𝑠)\n    - 发送速率受限于计算机网卡\n  - 传输时延\n    - 传播时延 = 传输路径距离/传播速率(𝑏𝑖𝑡/𝑠)\n    - 传播速率受限于传输介质，铜线、光线\n  - 排队时延\n    - 数据包在网络设备中等待被处理的时间\n  - 处理时延\n    - 数据包到达设备或者目的机器被处理所需要的时间\n- 往返时间RTT\n  - RTT表示的是数据报文在端到端通信中的来回一次的时间\n  - RTT(Route-Trip Time)是评估网络质量的一项重要指标\n  - 通常使用ping命令查看RTT\n\n\n\n## 2.物理层\n\n### 2.1 物理层的作用\n\n- 相关设备\n  - 双绞线\n  - 同轴电缆\n  - 光纤\n  - 红外线\n  - 无线\n  - 激光\n- 传输比特流\n- 连接不同的物理设备\n- 物理特性\n  - 机械特性\n  - 电气特性\n  - 功能特性\n  - 过程特性\n\n### 2.2 信道的基本概念\n\n- 一条通信电路包含一个接收信道和一个发送信道\n- 信道是往一个方向传送信息的媒体\n- 单工信道\n  - 有线电视、无线电收音机等等\n  - 只能一个方向通信，没有反方向反馈的信道\n- 半双工信道\n  - 不能双方同时发送，也不能同时接收\n  - 双方都可以发送和接收信息\n- 全双工信道\n  - 双方都可以同时发送和接收信息\n\n- 分用-复用技术\n  - 信道利用率并不高？\n  - 分用器\n  - 复用器\n  - 频分复用\n  - 时分复用\n  - 波分复用\n  - 码分复用\n\n\n\n## 3.数据链路层\n\n### 3.1 数据链路层主要功能\n\n- 封装成帧\n\n  - 发送端在网络层的一段数据前后添加特定标记形成“帧”\n  - “帧”是数据链路层数据的基本单位\n  - 接收端根据前后特定标记识别出“帧”\n  - 物理层才不管你“帧”不“帧”，物理层之作用bit流的传输\n  - IP数据报-->“帧”的数据[帧首部， “帧”的数据 ，帧尾部]\n  -  帧首部和尾部是特定的控制字符（特定比特流）SOH: 00000001，EOT: 00000100\n- 透明传输\n  - “一种实际存在的事物却又看起来不存在一样”\n  - “透明”在计算机领域是非常重要的一个术语\n  - “即是控制字符在帧数据中，但是要当做不存在的去处理”\n  - 数据中也出现了控制字符，对数据中的控制字符进行特殊处理，转义\n  - “\\n”、“\\t”等控制字符，编程语言中“\\”一般为转义字符，“\\\\” 、“\\\\\\\\”\n- 差错监测\n  - 数据链路层负责起“差错监测”的工作\n  - 物理层只管传输比特流，无法控制是否出错\n  - 循环冗余校验码CRC\n    - 检测数据传输或者保存后可能出现的错误\n    - 一种根据传输或保存的数据而产生固定位数校验码的方法\n    - 生成的数字计算出来并且附加到数据后面\n    - 模“2”除法\n      - 与算术除法类似，但除法不借位，实际是“异或”操作\n      - 模“2”除法是二进制下的除法\n      - 0 xor 0 = 0，0 xor 1 = 1，1 xor 0 = 1，1 xor 1 = 0\n    - 检测流程\n      - 选定一个用于校验的多项式G(x)，并在数据尾部添加r个0\n      - 将添加r个0后的数据，使用模“2”除法除以多项式的位串\n      - 得到的余数填充在原数据r个0的位置得到可校验的位串\n      - 例子1：使用CRC计算101001的可校验位串\n        - 计算过程有点难！！！\n    - 数据链路层只进行数据的检测，不进行纠正，一旦出错会丢弃\n    - CRC的错误检测能力与位串的阶数r有关\n  - 奇偶校验码\n    - 检测机制：在比特流最后一位加上一位（1或者0），（所有比特流中的1相加）偶数加0，奇数加1 \n    - 缺陷：出错两位，奇偶校验码校测不到错误\n\n### 3.2 最大传输单元MTU\n\n- MTU\n  - 数据链路层的数据帧也不是无限大的\n  - 最大传输单元MTU(Maximum Transmission Unit)\n  - 数据帧过大或过小都会影响传输的效率\n  - 总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延\n  - 以太网MTU一般为1500字节\n- 路径MTU\n  - 路径MTU由链路中MTU的最小值决定\n  - 木桶效应\n\n### 3.3 以太网协议详解\n\n- MAC地址\n\n  - MAC地址（Media Access Control Address）直译为媒体存取控制位址，也称为局域网地址（LAN Address）\n  - 每一个设备都拥有唯一的MAC地址\n  - MAC地址（物理地址、硬件地址）\n  - MAC地址共48位，使用十六进制表示\n  - ipconfig/all 查看本机所有MAC地址 ，30-B4-9E-ED-85-CA\n\n- 以太网协议\n\n  - 以太网是一种应用于数据链路层的协议\n  - 以太网(Ethernet)是一种使用广泛的局域网技术\n  - 使用以太网可以完成相邻设备的数据帧传输\n  - 以太网数据格式\n    - 类型：0800： IP数据报，0806： ARP请求/应答，8035： RARP请求/应答\n\n  | 目的地址（MAC地址) 单位字节 | 源地址 | 类型 | 帧数据  | CRC校验码 |\n  | --------------------------- | ------ | ---- | ------- | --------- |\n  | 6                           | 6      | 2    | 46-1500 | 4         |\n\n  - MAC地址表，路由器持有\n\n  | MAC地址           | 硬件接口 |\n  | ----------------- | -------- |\n  | 31-B4-9E-ED-85-CA | 接口1    |\n  | 32-B4-9E-ED-85-CB | 接口2    |\n  | 33-B4-9E-ED-85-CC | 接口4    |\n\n  - A终端通过路由器发送数据到C终端的过程\n    - A通过网卡发出数据帧\n    - 数据帧到达路由器，路由器取出前6字节（目的MAC地址）\n    - 路由器匹配MAC地址表，找到对应的网络接口\n    - 路由器往该网络接口发送数据帧\n    - 如果MAC地址表没有匹配成功\n    - 路由器将广播A的数据包到除A以外的端口\n    - 路由器检查MAC地址表，发现没有C的信息\n    - 路由器将收到来自B、 C的回应，并将地址记录\n  - 以太网协议只提供相邻物理节点传输，跨设备是无法传输的，需要借助网络层\n\n\n\n## 4.网络层\n\n### 4.1 网络层的主要功能\n\n- 网络层：数据路由（决定数据在网络的路径）\n- 数据链路层只能解决相邻物理节点传输\n\n### 4.2 IP协议详解\n\n- 虚拟互联网络\n\n  - 物理设备通过使用IP协议，屏蔽了物理网络之间的差异\n  - 实际的计算机网络是错综复杂的\n  - 当网络中的主机使用IP协议连接时，则无需关注网络细节\n  - IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发\n  - IP协议使得复杂的实际网络变为一个虚拟互连的网络\n  - IP协议解决了在虚拟网络中数据报传输路径的问题\n\n- IP协议\n\n  - IP地址\n    - MAC地址： 30-B4-9E-ED-85-CA：00110000-11000020-11101101-01000101-11001010\n      - 48位，16进制表示\n      - 唯一，不可变\n    - P地址： 192.168.11.11：11000000.10101000.00001011.00001011\n      - 32位，常分成4个8位，一般采用点分十进制表示，共可以表示 2^32 = 4294961296\n      - IP地址常使用**点分十进制**来表示(0~255.0~255.0~255.0~255)，例如：255.255.255.255\n      - 受网络环境影响会发生改变\n  - IP报文格式\n\n  | 协议层     | 数据格式                                                     |\n  | ---------- | ------------------------------------------------------------ |\n  | 物理层     | 001010101001110110101010101010…10101010101010101010101010101 |\n  | 数据链路层 | 【帧首部 】【“帧”的数据】 【帧尾部】                         |\n  | 网络层     | 【IP首部】【 IP数据报的数据】                                |\n\n  - IP报文头部各个参数的作用\n\n  | 4位版本             | 4位首部长度 | 8位服务类型(TOS) | 16位总长度(字节) |\n  | ------------------- | ----------- | ---------------- | ---------------- |\n  | 16位标识            | 3位标志     | 13位片偏移       |                  |\n  | 8位生存时间(TTL)    | 8位协议     | 16位首部校验和   |                  |\n  | 32位源IP地址        |             |                  |                  |\n  | 32位目的IP地址      |             |                  |                  |\n  | 选项options（若有） |             |                  |                  |\n  | IP数据              |             |                  |                  |\n\n  - 每一行32位，第六行可选，所以IP报文头部至少占4×5=20个字节\n  - 第一行\n    - 版本：占4位，指的是IP协议的版本，通信双方的版本必须一致，当前主流版本是4，即IPv4，也有IPv6\n    - 首部位长度：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字”（4个字节），也即是IP首部最大长度为60字节\n    - 8位服务类型(TOS)：TOS包括共8位，包括3 bit的优先权字段（取值可以从000-111所有值），4 bit的TOS子字段和1 bit未用位但必须置0。\n    - 总长度：占16位，最大数值为65535，表示的是IP数据报总长度（IP首部+IP数据），数据链路层MTU,如果IP数据报的数据多余“帧”的数据，需要分片处理\n  - 第二行\n    - 16位标识：IP协议内部使用\n    - 3位标志：标记是否可以分片\n    - 13位片偏移：第几个分片\n  - 第三行\n    - TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文，避免数据在网络无限传输\n    - 协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP等）\n      - 协议名 ICMP、 IGMP、 IP 、TCP、 UDP、 OSPF …，字段值 1 、2 、4 、6、 17、 89 …\n    - 首部校验和：占16位，校验IP首部是否有出错\n  - 源IP地址：发送方\n  - 目的IP地址：接收方\n\n### 4.3 IP协议的转发流程\n\n- 逐跳(hop-by-hop)\n\n- 路由表\n\n  - 计算机或者路由器都拥有路由表\n  - MAC地址表和路由表\n\n  | MAC地址 | 硬件接口 |      | 目的IP地址 | 下一跳IP地址 |\n  | ------- | -------- | ---- | ---------- | ------------ |\n  | A       | E1       |      | IP1        | IP4          |\n  | B       | E2       |      | IP2        | IP5          |\n  | C       | E3       |      | IP3        | IP6          |\n\n- 转发流程：网络层\n\n  ![](https://tva1.sinaimg.cn/large/008eGmZEly1gnl5pjkrqtj30nm07gjsc.jpg)\n\n  - A将数据报发送给E\n  - A发出目的地为C的IP数据报， 查询路由表发现下一跳为E\n  - E查询路由表发现下一跳为F，将数据报发送给F\n  - F查询路由表发现目的地C直接连接，将数据报发送给C\n\n- IP数据报每一跳的IP地址始终不变\n\n- 数据帧每一跳的MAC地址都在变化\n\n### 4.4 ARP协议与RARP协议\n\n- ARP协议\n  - ARP(Address Resolution Protocol)地址解析协议，通过IP地址查找MAC地址\n  - ARP缓存表：[IP地址, MAC地址] 如：192.168.83.254 ---00-50-56-e0-33-40\n  - ARP缓存表缓存了IP地址到硬件地址之间的映射关系\n  - ARP缓存表是ARP协议和RARP协议运行的关键\n  - ARP缓存表中的记录并不是永久有效的，有一定的期限\n  - **arp -a** :查看ARP缓存表\n  - 数据报格式，共28个字节，封装在数据链路层里，用于网络层，【类型0806 ，ARP请求/应答 ，PAD】\n    - 硬件类型，2位\n    - 协议类型 ，2位\n    - 标记 ，24\n    - 发送端 以太网地址 ，6位\n    - 发送端 IP地址 ，4位\n    - 目的端 以太网地址 ，6位\n    - 目的端 IP地址，4位\n- RARP协议\n  - RARP(Reverse Address Resolution Protocol)逆地址解析协议\n  - 数据链路层MAC48位地址--》网络层IP32位地址\n- ARP和RARP的操作对程序员是透明的\n- (R)ARP协议是TCP/IP协议栈里面基础的协议\n- 理解(R)ARP协议有助于理解网络分层的细节\n- 转发流程：网络层+数据链路层+物理层\n  - 第一步：A->E\n    - A发出目的地为C的IP数据报， 查询路由表发现下一跳为E\n    - A将IP数据报交给数据链路层，并告知目的MAC地址是E\n    - 数据链路层填充源MAC地址A和目的MAC地址E\n    - 数据链路层通过物理层将数据发送给E\n  - 第二步：E-->F\n    - E的数据链路层接收到数据帧， 把帧数据交给网络层\n    - E查询路由表， 发现下一跳为F\n    - E把数据报交给数据链路层， 并告知目的MAC地址为F\n    - E的数据链路层封装数据帧并发送\n  - 第三步：F-->C\n    - F的数据链路层接收到数据帧， 把帧数据交给网络层\n    - F查询路由表， 发现下一跳为C\n    - F把数据报交给数据链路层，并告知目的MAC地址为C\n    - F的数据链路层封装数据帧并发送\n\n### 4.5 IP地址的分类\n\n- IP地址长度为32位，常分成4个8位，常使用点分十进制来表示(0~255.0~255.0~255.0~255)，2^32 = 4294961296\n\n- 直接对42亿多个IP地址规划和分配IP地址非常麻烦\n\n- IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=\n\n- 分类的IP地址\n\n  - 网络号 \n    - 网络号的位数直接决定了可以分配的网络数（计算方法=2^网络号位数-特殊网络号数）\n  - 主机号\n    - 主机号的位数则决定了网络中最大的主机数（计算方法=2^主机号位数-特殊主机号数）\n\n  | IP类型 | 组成                            | 最小网络号           | 最大网络号                | 子网数量(理想)        | 最小主机号 | 最大主机号  | 主机数量        |\n  | ------ | ------------------------------- | -------------------- | ------------------------- | --------------------- | ---------- | ----------- | --------------- |\n  | A      | 8位网络号(0开头）+24位主机号    | 0(00000000)          | 127(01111111)             | 2^7=128               | 0.0.0      | 255.255.255 | 2^24=16,777,216 |\n  | B      | 16位网络号（10开头）+16位主机号 | 128(100000000).0     | 191(10111111).255         | 2^14(6+8)=16,384      | 0.0        | 255.255     | 2^16=65536      |\n  | C      | 24位网络号（110开头）+8位主机号 | 192(110000000).0.0   | 223(11011111).255.255     | 2^21(5+8+8)=2,097,252 | 0          | 255         | 2^8=256         |\n  | D      | 组播地址（1110开头）            | 224(111000000).0.0.0 | 239(11101111).255.255.255 | 2^4=16                |            |             |                 |\n  | E      | 保留以后再用（1111开头）        | 240(111110000).0.0.0 | 225(11111111).255.255.255 | 2^4=16                |            |             |                 |\n\n  - 特殊的网络号\n    - A类地址网络段后7位全1(01111111:127)表示回环地址\n    - A类地址网络段全0(00000000)表示特殊网络\n    - B类地址网络段(10000000.00000000:128.0)是不可使用的\n    - C类地址网络段(192.0.0)是不可使用的\n    - 上表中的A类IP的子网可用数量为：2^7-2，B类:2^14-1，C类：2^21-1\n  - 特殊的主机号\n    - 主机号为全1表示广播地址，向当前网络段所有主机发消息，例如：1.0.0.0\n    - 主机号全0表示当前网络段，不可分配为特定主机，例如：1.255.255.255\n    - 上表中A\\B\\C的可用主机号数量为：2^24-2、2^16-2、2^8-2\n  - 127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。localhost是个域名\n  - 如何判断一个IP属于哪一类IP地址\n    - 取出首八位：\n    - A类：(0,127) / 0xxxxxxx，\n    - B类：[128,19]) / 10xxxxxx，\n    - C类：[192,223] / 110xxxxx\n\n### 4.6 IP地址的划分子网\n\n- 某公司拥有100名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？\n  - C类可分配的主机数量为2^8-2=254个\n- 某公司拥有256名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？\n  - B类可分配的主机数量为2^16-2=65534个\n  - 造成了很大的地址空间浪费\n- 子网号\n  - IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=\n  - 例如一个C类IP 193.10.10.0 = 24位网络号（110开头）+8位主机号 \n  - 主机号段为.0=.00000000\n  - 将主机号段最高位分成 **.0**0000000 和  **.1**0000000 两个子网\n  -  **.0**0000000 子网可以表示的主机范围为：(0) **.0**0000000 -- (127) **.0**1111111 \n  -  **.1**0000000 子网可以表示的主机范围为：(128) **.1**0000000 -- (255) **.1**1111111 \n  - 某公司拥有100名员工，每人配备一个计算机，就可以申请C类IP的子网从而可以充分利用IP的数量\n- 子网掩码\n  - 子网号这么多，有没有办法快速判断某个IP的网络子网掩码号？\n  - 子网掩码由连续的1和连续的0组成\n  - 子网掩码和IP地址一样，都是32位\n  - 某一个子网的子网掩码具备网络号位数个连续的1\n  - A类IP的子网掩码：255.0.0.0 \n  - B类IP的子网掩码：255.255.0.0 \n  - C类IP的子网掩码：255.255.255.0\n  - 划分子网的子网掩码：子网掩码-子网号-主机号\n    - 例如：193.10.10.0 = 24位网络号（110开头）+1位子网号+7位主机号 \n      - 子网掩码为：255.255.255.128（24+1个1和7个0组成）\n      - 求 193.10.10.6 这个IP对应的子网号\n      - 第一步IP对应的二进制：            193.10.10.6 -- 11000001.00001010.00001010.00000110\n      - 第二步子网掩码对应的二进制：255.255.255.128 -- 11111111.11111111.11111111.10000000\n      - 第三步：一二步与运算得到子网号 11000001.00001010.00001010.00000000  -- 193.10.10.0\n\n### 4.7 无分类地址CIDR\n\n- IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】\n\n- 子网划分相对复杂所以出现了CIDR\n\n- 无类域内路由选择（Classless Inter-Domain Routing）\n\n- CIDR中没有A、 B、 C类网络号、和子网划分的概念\n\n- CIDR将网络前缀相同的IP地址称为一个“CIDR地址块”\n\n- IP地址=【网络前缀+主机号】\n\n- 网络前缀是任意位数的\n\n- CIDR采用斜线记法来表示一个IP地址\n\n  - 193.10.10.129/25==11000001.00001010.00001010.10000001\n  - 25表示网络前缀有25位，主机位有7位\n  - 相比原来子网划分更加灵活\n  - 超网-》子网\n\n  | CIDR前缀长度 | 掩码点分十进制 | 地址数    |\n  | ------------ | -------------- | --------- |\n  | /13          | 255.248.0.0    | 2^19=512K |\n  | /14          | 255.252.0.0    | 2^18=256K |\n  | /15          | 255.254.0.0    | 2^17=128K |\n  | /16          | 255.255.0.0    | 2^16=64K  |\n  | /17          | 255.255.128.0  | 2^15=32K  |\n  | /18          | 255.255.192.0  | 2^14=16K  |\n  | /19          | 255.255.224.0  | 2^13=8K   |\n\n  \n\n### 4.8 网络地址转换NAT技术\n\n-  IPv4最多只有40+亿个IP地址\n\n- 早期IP地址的不合理规划导致IP号浪费\n\n- 网络拓扑：边缘部分：家庭，多个设备如何复用同一个IP地址的\n\n- 内网地址\n\n  - 内部机构使用\n  - 避免与外网地址重复\n  - 三类内网地址\n    - 10.0.0.0~10.255.255.255（支持千万数量级设备）\n    - 172.16.0.0~172.31.255.255（支持百万数量级设备）\n    - 192.168.0.0~192.168.255.255（支持万数量级设备）\n\n- 外网地址\n\n  - 全球范围使用\n  - 全球公网唯一\n\n- 网络地址转换NAT技术\n\n  - 内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？\n  - 网络地址转换NAT(Network Address Translation)\n  - NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中\n  - NAT减缓了IP地址的消耗，但是增加了网络通信的复杂度\n  - 端口(Port)号\n  - 端口映射表：NA(P)T表\n\n  | 数据传输方向 | 旧的地址和端口号   | 新的地址与端口号   |\n  | ------------ | ------------------ | ------------------ |\n  | 出           | 92.168.2.11:6666   | 173.21.59.10:16666 |\n  | 出           | 192.168.2.10:7777  | 173.21.59.10:17777 |\n  | 入           | 173.21.59.10:16666 | 192.168.2.11:6666  |\n  | 入           | 173.21.59.10:17777 | 192.168.2.10:7777  |\n\n  \n\n### 4.9 ICMP协议详解\n\n- 网际控制报文协议（Internet Control Message Protocol）\n\n- ICMP协议可以报告错误信息或者异常情况，辅助IP协议\n\n- 网络层  【IP首部】-【 IP数据报的数据】\n\n- 【IP首部】协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP、ICMP等）\n\n- ICMP数据封装在【 IP数据报的数据】里面\n\n- 【ICMP报文首部】-【 ICMP报文数据】\n\n- 8位类型+ 8位代码 +16位校验和+ICMP报文数据\n\n- 分类\n\n  - 差错报告报文 \n  - 询问报文\n\n  | ICMP报文种类 | 类型的值        | 报文类型                    | 具体代码 |\n  | ------------ | --------------- | --------------------------- | -------- |\n  | 差错报告报文 | 3 (终点不可达） | 网络不可达 / 主机不可达     | 0/1      |\n  |              | 5 (重定向）     | 对网络重定向 / 对主机重定向 | 0/1      |\n  |              | 11              | 传输超时                    | -        |\n  |              | 12              | 坏的IP头 / 缺少其他必要参数 | 0/1      |\n  | 询问报文     | 0或8            | 回送(Echo)请求或应答        | -        |\n  |              | 13或14          | 时间戳(Timestamp)请求或应答 | -        |\n\n- ICMP报文的应用\n\n  - Ping应用\n    - 询问报文-0或8 - 回送(Echo)请求或应答\n    - Ping回环地址127.0.0.1,如果失败计算机的协议栈可能出问题，需要重装操作系统\n    - Ping网关地址，如果失败，网关路由器可能出问题\n    - Ping远端地址，如果失败，家到ISP服务商之间可能出问题了，需要找服务商解决\n  - Traceroute应用\n    - Traceroute可以探测IP数据报在网络中走过的路径\n    - 【IP首部】TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文--ICMP终点不可达差错报文\n    - 命令：Windows：tracert github.com ，Mac：traceroute to github.com \n      - **221.179.159.20来自北京市北京 移动**\n      - **111.24.3.17来自 移动**\n      - **223.119.2.21来自香港 移动**\n      - **52.93.11.39来自新加坡 亚马逊云**\n\n### 4.10 网络层的路由概述\n\n- 路由表问题\n\n  - 路由表是怎么来的\n  - 下一跳地址是唯一的吗？\n  - 下一跳地址是怎么来的？\n  - 下一跳地址是最佳的吗？\n  - 路由器怎么多，他们是怎么协同工作的？\n  - 需要一个好的算法去解决这些事情\n\n- 路由算法\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171345.jpg)\n\n  - 每一条边表示一条网络路径\n  - 每一顶点表示一个网络、路由器或计算机\n  - 路由算法实际上是图论的算法\n  - 网络环境复杂，路由算法要比图论的算法要复杂\n  - 路由算法具备哪些特性\n    - 算法是正确的、 完整的\n    - 算法在计算上应该尽可能的简单\n    - 算法可以适应网络中的变化\n    - 算法是稳定的和公平的\n\n\n### 4.11 自治系统(AS)\n\n- 对互联网进行划分\n  - 互联网的规模是非常大的\n  - 互联网环境是非常复杂的\n  - 自治系统(Autonomous System)\n  - 自治系统内部路由的协议称为：内部网关协议(RIP、 OSPF)\n  - 自治系统外部路由的协议称为：外部网关协议(BGP)\n  - 两个内部网关协议需要通过外部网关协议进行通讯\n- 一个自治系统(AS)是处于一个管理机构下的网络设备群\n- AS内部网络自行管理， AS对外提供一个或者多个出（入）口\n\n### 4.12 内部网关路由协议之RIP协议\n\n- 距离矢量(DV)算法\n  - DV=Distance vector\n  - 每一个节点使用两个向量𝐷𝑖和S𝑖\n  - 𝐷𝑖描述的是当前节点到别的节点的距离\n  - S𝑖描述的是当前节点到别的节点的下一节点\n  - 每一个节点与相邻的节点交换向量𝐷𝑖和S𝑖的信息\n  - 每一个节点根据交换的信息更新自己的节点信息\n  - 算法实现过程\n    - todo\n- RIP协议的过程\n  - RIP(Routing Information Protocol)协议\n  -  RIP协议是使用DV算法的一种路由协议\n  - RIP协议把网络的跳数(hop)作为DV算法的距离\n  - RIP协议每隔30s交换一次路由信息\n  - RIP协议认为跳数>15的路由则为不可达路由\n  - 具体流程\n    - 路由器初始化路由信息(两个向量𝐷𝑖和S𝑖)\n    - 对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）\n      - 检索本地路由，将信息中新的路由插入到路由表里面\n      - 检索本地路由，对于下一跳为X的，更新为修改后的信息\n      - 检索本地路由，对比相同目的的距离，如果新信息的距离更小，则更新本地路由表\n    - 如果3分钟没有收到相邻的路由信息，则把相邻路由设置为不可达(16跳)\n- RIP协议的优缺点\n  - 故障信息传递慢\n  - RIP协议：实现简单，开销很小\n  - RIP协议：限制了网络的规模\n  - RIP协议：“坏消息传的慢”，更新收敛时间过长\n\n- Dijkstra（迪杰斯特拉）算法\n\n  - Dijkstra算法是著名的图算法\n  - Dijkstra算法解决有权图从一个节点到其他节点的最短路径问题\n  - “以起始点为中心，向外层层扩展”\n  - 最短路径问题\n    - 初始化两个集合(S, U)（S为只有初始顶点点A的集合， U为其他顶点集合）\n    - 如果U不为空， 对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D\n      - 将顶点D的纳入S集合\n      - 更新通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）\n      -  重复2步骤\n    - 知道U集合为空，算法完成\n\n- 内部网关路由协议之OSPF协议\n\n  - 链路状态(LS)协议\n    - 向所有的路由器发送消息\n    - 消息描述该路由器与相邻路由器的链路状态\n      - 距离、时延、带宽\n    - 只有链路状态发生变化时，才发送更新信息\n  - OSPF协议的过程\n    - OSPF(Open Shortest Path First：开放最短路径优先)\n    - OSPF协议的核心是Dijkstra算法\n    - 向所有的路由器发送消息\n      - 获得网络中的所有信息--> “网络的完整拓扑”\n      - 也称为“链路状态数据库”\n      - “链路状态数据库”是全网一致的\n      - Dijkstra（迪杰斯特拉）算法\n    - 消息描述该路由器与相邻路由器的链路状态\n      - OSPF协议更加客观、更加先进\n    - 只有链路状态发生变化时，才发送更新信息\n      - 减少了数据的交换，更快收敛\n    - 路由器接入网络\n    - 路由器向邻居发出问候信息\n    - 与邻居交流链路状态数据库\n    - 广播和更新未知路由\n  - 五种消息类型\n    - 问候消息（Hello）\n    - 链路状态数据库描述信息\n    - 链路状态请求信息\n    - 链路状态更新信息\n    - 链路状态确认信息\n\n  | RIP协议                  | OSPF协议                         |\n  | ------------------------ | -------------------------------- |\n  | 从邻居看网络             | 整个网络的拓扑                   |\n  | 在路由器之间累加距离     | Dijkstra算法计算最短路径         |\n  | 频繁、周期更新，收敛很慢 | 状态变化更新，收敛很快           |\n  | 路由间拷贝路由信息       | 路由间传递链路状态，自行计算路径 |\n\n\n\n\n### 4.13 外部网关路由协议之BGP协议\n\n- BGP(Border Gateway Protocol: 边际网关协议)\n- BGP协议是运行在自制系统(AS)之间的一种协议\n- 互联网的规模很大\n- AS内部使用不同的路由协议\n- AS之间需要考虑除网络特性以外的一些因素（政治、安全…）\n- BGP协议能够找到一条到达目的比较好的路由\n- BGP发言人(speaker)\n  - BGP并不关心内部网络拓扑\n  - AS之间通过BGP发言人交流信息\n  - BGP Speaker可以人为配置策略\n\n\n\n## 5.传输层\n\n### 5.1 传输层的主要功能\n\n- 本质：跨设备的进程与进程的通信\n\n  - 单机进程间通信方式：共享内存、Unix域套接字\n\n- 端口的概念\n\n  - 使用端口(Port)来标记不同的网络进程\n  - 端口(Port)使用16比特位表示(0~65535)\n\n  | FTP  | HTTP | HTTPS | DNS  | TELNET |\n  | ---- | ---- | ----- | ---- | ------ |\n  | 21   | 80   | 443   | 53   | 23     |\n\n  \n\n### 5.2 UDP协议详解\n\n- UDP是一个非常简单的协议\n- UDP(User Datagram Protocol: 用户数据报协议)\n- 数据报(Datagram)\n  - 不合并 不拆分\n- 层次位置\n\n| 协议层     | 数据格式                                                     |\n| ---------- | ------------------------------------------------------------ |\n| 物理层     | 001010101001110110101010101010…10101010101010101010101010101 |\n| 数据链路层 | 【帧首部 】【“帧”的数据】 【帧尾部】                         |\n| 网络层     | 【IP首部】【 IP数据报的数据】                                |\n| 传输层     | 【UDP首部】【 UDP数据报的数据(应用层数据)】                  |\n\n- 报文结构\n  - 16位源端口号 + 16位目的端口号\n  - 16位UDP长度 + 16位UDP校验和\n  - 头部报文共8个字节\n  - UDP数据\n  - 各个报文字段的意义\n    - 16位源端口号\n      - 源机器使用的网络进程\n    - 16位目的端口号\n      - 目的机器使用的进程\n    - 16位UDP长度\n      - udp数据报的长度，最小是8个字节仅包括手部\n    - 6位UDP校验和\n      - 检测数据报在传输过程中是否出错\n- UDP的特点\n  - UDP是无连接协议\n  - UDP不能保证可靠的交付数据，“想发就发”，“无法保证数据在网络中是否丢失”\n  -  UDP是面向报文传输的\n  - UDP没有拥塞控制\n  - UDP的首部开销很小\n\n### 5.3 TCP报文详解\n\n- TCP(Transmission Control Protocol: 传输控制协议)\n- TCP协议是计算机网络中非常复杂的一个协议\n- 层次位置\n\n| 协议层     | 数据格式                                                     |\n| ---------- | ------------------------------------------------------------ |\n| 物理层     | 001010101001110110101010101010…10101010101010101010101010101 |\n| 数据链路层 | 【帧首部 】【“帧”的数据】 【帧尾部】                         |\n| 网络层     | 【IP首部】【 IP数据报的数据】                                |\n| 传输层     | 【TCP首部】【 TCP数据报的数据 】                             |\n\n- 特点\n\n  - TCP是面向连接的协议\n  - TCP的一个连接有两端（点对点通信）\n  - TCP提供可靠的传输服务\n  - TCP协议提供全双工的通信\n  - TCP是面向字节流的协议，合并、分拆\n\n- 报文结构\n\n  - 16位源端口 16位目的端口\n\n  - 32位序号\n\n  - 32位确认号\n\n  - 数据偏移 +保留字段 +TCP标记 +窗口\n\n  - 16位校验和 + 16位紧急指针\n\n  - 以上行固定20个字节\n\n  - TCP选项（可选）+ 填充\n\n  - 各个报文字段的意义\n\n    - 16位源端口号\n\n      - 源机器使用的网络进程\n\n    - 16位目的端口号\n\n      - 目的机器使用的进程\n\n    - 32位序号\n\n      - 0~2^32-1\n      - 面向字节流，一个字节一个序号\n      - 数据首字节序号\n\n    - 32位确认号\n\n      - 0~2^32-1\n      - 一个字节一个序号\n      - 期望收到数据的首字节序号\n      - 确认号为N：则表示N-1序号的数据都已经收到\n\n    - 数据偏移\n\n      - 占4位： 0~15，单位为： 32位字\n      - 数据偏离首部的距离\n\n    - 保留字段\n\n    - TCP标记\n\n      - 占6位，每位各有不同意义\n      - TCP三次握手和四次挥手会用到这里的标记为\n\n      | 标记 | 含义                                             |\n      | ---- | ------------------------------------------------ |\n      | URG  | Urgent: 紧急位， URG=1，表示紧急数据             |\n      | ACK  | Acknowledgement: 确认位， ACK=1，确认号才生效    |\n      | PSH  | Push: 推送位， PSH=1，尽快地把数据交付给应用层   |\n      | RST  | Reset: 重置位， RST=1，重新建立连接              |\n      | SYN  | Synchronization: 同步位， SYN=1 表示连接请求报文 |\n      | FIN  | Finish: 终止位， FIN=1 表示释放连接              |\n\n    - 窗口\n\n      - 占16位： 0~2^16-1\n      - 窗口指明允许对方发送的数据量\n      - 确认号是500，窗口大小1000，则501-1500是可以接收的\n\n    - 16位校验和 \n\n    - 16位紧急指针\n\n      - 紧急数据（URG=1）\n      - 指定紧急数据在报文的位置\n\n    - TCP选项（可选）\n\n      - 最多40字节\n      - 支持未来的拓展\n\n    - 填充\n\n### 5.4 TCP可靠传输的基本原理\n\n- 停止等待协议\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171526.jpg)\n\n  - 无差错的情况\n  - 出差错的情况\n    - 发送的消息在路上丢失了\n    - 确认的消息在路上丢失了\n    - 确认的消息很久才到\n    - 超时重传\n    - 超时重传计时器\n      - 每发送一个消息，都需要设置一个定时器\n  - 优缺点\n    - 停止等待协议是最简单的可靠传输协议\n    - 停止等待协议对信道的利用效率不高\n\n- 连续ARQ协议\n\n  - ARQ(Automatic Repeat reQuest：自动重传请求)\n  - 既然单个发送和确认效率低，可不可以批量发送和确认？\n  - 滑动窗口\n    - 固定窗口内的字节批量发出，确认几个窗口就向后滑动几个\n  - 累计确认\n    - 只要收到某个消息的确认，那么这个消息之前的消息都确认了\n\n### 5.5 TCP协议的可靠传输\n\n- TCP的可靠传输基于连续ARQ协议\n- TCP的滑动窗口以字节为单位\n- 滑动窗口\n  - 【已经确认的字节序号】-【窗口】-【不允许发送的字节序号】\n  - 窗口中的字节数据：已发送未确认+可用窗口\n  - 如果没有按顺序收到窗口开始的确认，只收到中间的确认消息，窗口不滑动，执行超时重传\n  - 选择重传\n    - 选择重传需要指定需要重传的字节\n    - 每一个字节都有唯一的32位序号\n    - 存储在TCP选项（可选）\n    - 最多40个字节，序号展4个字节，最多10个序号，每个序号表示的某段的起止位置，分段传输\n\n### 5.6 TCP协议的流量控制\n\n- 流量控制指让发送方发送速率不要太快\n- 流量控制是使用滑动窗口来实现的\n- 流量控制流程\n  - **窗口（rwnd）**指明允许对方发送的数据量，Receiver window\n  - **序号（seq）**用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则TCP用序号对每个字节进行计数。序号是32bit的无符号数，序号到达232－1后又从0开始。sequence\n  - **确认序号（ack）** 是上次已成功收到数据字节序号加1。只有ACK标志位为1时确认序号字段才有效。acknowledgement \n  - **确认位（ACK）**  Acknowledgement: 确认位， ACK=1，确认号才生效\n  - 发送方：发送100字节的数据（seq=1, DATA）\n  - 发送方：发送100字节的数据（seq=101, DATA）\n  - ->接收方：确认200字节的数据，并告诉对方窗口为300（ACK=1, ack=201, rwnd=300）\n  - 发送方：发送100字节的数据（seq=301, DATA）\n  - 发送方：发送200字节的数据（seq=401, DATA）\n  - ->接收方：确认300字节的数据，并告诉对方窗口为0（ACK=1, ack=601, rwnd=0）\n  - ->接收方想再次接受数据需要发送窗口大小给发送方\n  - 如果这个窗口调整请求出错了会产生死锁吗\n  - 坚持定时器来避免死锁的情况\n- 坚持定时器\n  - 当接收到窗口为0的消息，则启动坚持定时器\n  - 坚持定时器每隔一段时间发送一个窗口探测报文\n\n### 5.7 TCP协议的拥塞控制\n\n- 一条数据链路经过非常多的设备\n- 数据链路中各个部分都有可能成为网路传输的瓶颈\n- 拥塞控制 VS 流量控制\n  - 流量控制考虑点对点的通信量的控制\n  - 拥塞控制考虑整个网络，是全局性的考虑\n- 拥塞判断：报文超时可以认为是拥塞\n- 拥塞控制算法\n  - 慢启动算法\n    - 由小到大逐渐增加发送数据量\n    - 每收到一个报文确认，就加一，例如：1 2 4 8 16 （指数增长）\n    - 慢启动阈值(ssthresh)\n  - 拥塞避免算法\n    - 维护一个拥塞窗口的变量，大于慢启动阈值\n    - 只要网络不拥塞，就试探着拥塞窗口调大，17 18 19\n    - 最大限度的利用管道\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171603.jpg)\n\n### 5.8 TCP连接的建立\n\n- TCP标记：占6位，每位各有不同意义\n\n| 标记 | 含义                                                         |\n| ---- | ------------------------------------------------------------ |\n| SYN  | Synchronization: 同步位， SYN=1 表示连接请求报文             |\n| ACK  | Acknowledgement: 确认位， ACK=1，确认号才生效                |\n| FIN  | Finish: 终止位， FIN=1 表示释放连接                          |\n| seq  | sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位 |\n| ack  | acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位 |\n\n- 三次握手建立TCP连接的过程\n  - 接收方：监听\n  - 发送方：SYN=1, seq=x\n  - 发送方：同步已发送\n  - 接收方：SYN=1, ACK=1, seq=y, ack=x+ 1\n  - 接收方：同步已接受\n  - 发送方：ACK=1, seq=x+ 1, ack=y+1\n  - 发送方：建立连接\n  - 接收方：建立连接\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171620.jpg)\n\n- 为什么需要三次握手\n  - 避免已经失效的连接请求报文传送到对方， 引起错误\n  - 避免两次建立连接时多次连接的情况\n  - 第三次握手时，发送方可以检查是否已经发起了第三次，如果已经发起了就忽略其它超时的连接\n\n\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801172608.jpg)\n\n\n\n- TCP三次握手 \n  - 使用TCP协议进行通信的双方必须先建立连接，然后才能开始传输数据。为了确保连接双方可靠性，在双方建立连接时, TCP协议采用了三次握手策略。\n  - 第一次握手:客户端发送带有SYN标志的连接请求报文段，然后进入SYN SEND )状态，等待服务端的确认。\n  - 第二次握手:服务端接收到客户端的SYN报文段后需要发送ACK信息对这个SYN报文段进行确认。同时，还要发送自己的SYN请求信息。服务端会将上述的信息放到一个报文段(SYN+ ACK报文段)中，一并发送给客户端此时服务端将会进入SYN RECV状态。\n  - 第三次握手:客户端接收到服务端的SYN+ ACK报文段后,会想服务端发送ACK确认报文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED状态,完成TCP三次握手。\n- 为什么需要第三次\n  - 确认双方的收发能力，一共八个能力：自己的收发和对方的收发\n  - 第一次：服务端能知道客户端的发送和自己的接收能力正常\n  - 第二次：客户端能知道服务端的接收（第一次）和发送能力和自己的发送（第一次）能力和接收能力都正常\n  - 第三次：服务端能知道客户端的接收（第二次）和自己的发送（第二次）能力正常\n\n### 5.9 TCP连接的释放\n\n- TCP标记：占6位，每位各有不同意义\n\n| 标记 | 含义                                                         |\n| ---- | ------------------------------------------------------------ |\n| SYN  | Synchronization: 同步位， SYN=1 表示连接请求报文             |\n| ACK  | Acknowledgement: 确认位， ACK=1，确认号才生效                |\n| FIN  | Finish: 终止位， FIN=1 表示释放连接                          |\n| seq  | sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位 |\n| ack  | acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位 |\n\n- 四次释放\n\n  - 四次释放TCP连接的过程\n    - 发送方：FIN=1,seq=u\n    - 发送方：释放等待状态（FIN-WAIT-1）\n    - 接收方：ACK=1,seq=v,ack=u+1\n    - 发送方：释放等待状态（FIN-WAIT-2）\n    - 接收方：关闭等待状态（CLOSE-WAIT）\n    - 接收方：因为是被动关闭可能有未发出的数据需要继续完成发送\n    - 接收方：FIN=1,ACK=1,seq=w,ack=u+1\n    - 接收方：最后确认状态（LAST-ACK）\n    - 发送方：ACK=1,seq=u+1,ack=w+1\n    - 发送方：等待计时（TIME-WAIT）\n    - 接收方：关闭状态\n    - 发送方：关闭状态\n  - 等待计时器\n    - 等待时间：2MSL\n      - MSL(Max Segment Lifetime): 最长报文段寿命\n      - MSL建议设置为2分钟\n    - 为什么需要等待2MSL？\n      - 确保发送方的ACK可以到达接收方\n      - 最后一个报文没有确认\n      - 接收方在 2MSL时间内没有收到，则接收方会重发确认释放请求数据报\n      - 确保当前连接的所有报文都已经过期\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171643.jpg)\n\n### 5.10 套接字与套接字编程\n\n- 使用端口(Port)来标记不同的网络进程，端口(Port)使用16比特位表示(0~65535)\n- 网络套接字\n  - 𝐼𝑃: 𝑃𝑜𝑟𝑡------ 套接字\n  - 套接字(Socket)是抽象概念，表示TCP连接的一端\n  - 通过套接字可以进行数据发送或接收\n  - TCP连接由两个套接字组成：TCP={ 𝑆𝑜𝑐𝑘𝑒𝑡1: 𝑆𝑜𝑐𝑘𝑒𝑡2}= { {𝐼𝑃: 𝑃𝑜𝑟𝑡}  { 𝐼𝑃: 𝑃𝑜𝑟𝑡} }\n  - 客户端 --TCP连接---服务端\n  - 服务端\n    - 创建套接字\n    - 绑定(bind)套接字\n    - 监听(listen)套接字\n    - 接收&处理信息\n  - 客户端\n    - 创建套接字\n    - 连接套接字\n    - 发送信息\n- 客户端-服务端编程\n  - Java、Pathy\n- 网络套接字 VS 域套接字\n  - 域套接字：域套接字文件，不会经过tcp/ip协议簇，单机跨进程建议使用\n  - 网络套接字：单机和跨机都会在tcp/ip协议栈走一圈，单机跨进程不建议使用\n\n\n\n## 6.应用层\n\n### 6.1 应用层概述\n\n- 传输层以及以下的层提供完整的通信服务\n- 应用层是面向用户的一层\n- 已有的应用层软件 ，面向传输层的编程\n- UDP\n  - 多媒体信息分发\n    - 视频 语音 实时信息\n- TCP\n  - 可靠消息传输\n    - 金融交易 可靠通讯 MQ\n\n### 6.2 应用层主要功能\n\n- 应用进程的报文类型（请求报文、应答报文）\n- 报文的语法、格式\n- 应用进程发送数据的时机、规则\n- 定义应用间通讯的规则\n\n### 6.3 DNS服务详解\n\n- DNS（Domain Name System: 域名系统）\n\n  - 域：Domain，网络端，自治域\n  - 名：Name，IP地址\n\n- 主机的进程：Web 服务、网络存储服务、远程调用服务、邮件服务\n\n- IP地址+端口：14.215.177.39:80 、14.18.245.164:25、161.23.37.215:8810\n\n- DNS的功能\n\n  - 使用域名帮助记忆\n    - 点分十进制转为人容易记忆的单词\n    - 域名-->DNS服务-->IP\n\n- 域名详解\n\n  - 域名由点、字母和数字组成\n\n  - 点分割不同的域\n\n  - 域名可以分为顶级域、二级域、三级域\n\n    - 例如 ：www(三级域).taobao(二级域).com(顶级域)\n    - 顶级域\n      - 国家\n        - cn：中国\n        - us：美国\n        - uk：英国\n        - ca：加拿大\n      - 通用\n        - com：公司\n        - net：网络服务机构\n        - gov：政府机构\n        - org：其它组织机构\n    - 二级域\n      - qq、taobao、baidu、alibaba、aliyun、amazon、google、facebook\n\n    ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171724.jpg)\n\n- 域名服务器\n\n  - 一般由国际或者机构搭建\n  - 查询过程\n    - 本地查询，有就返回\n    - 没有去查根域名服务器\n    - 根域名服务器告诉去查哪一个顶级域名服务器\n    - 顶级域名服务器查到后告诉哪一个域名服务器\n    - 如果域名服务器没找到会返回根域名服务器再次查找\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171736.jpg)\n\n- DNS域名解析\n  - 通常我们访问一一个网站，使用的是主机名或者域名来进行访问的。因为相对于IP地址(一组纯数字)，域名更容易让人记住。但TCP/IP协议使用的是IP地址进行访问的，所以必须有个机制或服务把域名转换成IP地址。DNS服务就是用来解决这个问题的，它提供域名到IP地址之间的解析服务。\n  - 用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户\n- DNS解析流程\n  - 就近原则\n  - 本机host文件\n  - 本机dns服务\n  - 远程13台根域名服务\n  - 转发模式\n\n\n\n### 6.4 DHCP协议详解\n\n- DHCP是什么\n  - DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)\n  - DHCP是一个局域网协议\n  - DHCP是应用UDP协议的应用层协议\n- DHCP的功能\n  - 即插即用联网\n    - 临时IP，内网地址，转换为外网\n    - 租期，租期到了会回收\n- DHCP的工作机制\n  - DHCP服务器监听默认端口： 67\n  - 主机使用UDP协议广播DHCP发现报文\n  - DHCP服务器发出DHCP提供报文\n  - 主机向DHCP服务器发出DHCP请求报文\n  - DHCP服务器回应并提供IP地址\n\n### 6.5 HTTP协议详解\n\n- HTTP是什么\n\n  - HTTP(HyperText Transfer Protocol: 超文本传输协议)\n  - 超文本： “超级文本”， “带超链接文本”，“富文本”\n  -  http(s)://<主机>:<端口>/<路径>，例如：https://www.baidu.com/\n  - HTTP协议是可靠的数据传输协议\n    - Web内容：文本 图片 文件 动图 音频 视频\n  - C/S: 客户端--->HTTP协议----> 服务端\n\n- Web服务器\n\n  - 硬件部分 ：阿里云虚拟服务器、迷你计算机\n\n  - 软件部分：Apache、Nginx\n\n    - *Nginx* (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。\n    - Apache(音译为阿帕奇)是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。\n\n  - 工作机制\n\n    - 接受客户端连接 \n    - 接收请求报文 \n    - 处理请求\n    - 访问Web资源\n    - 构造应答\n    - 发送应答\n\n  - HTTP请求方法\n\n    - GET：获取指定的服务端资源\n    - POST：提交数据到服务端\n    - DELETE：删除指定的服务端资源\n    - UPDATE：更新指定的服务端资源\n    - PUT\n    - OPTIONS\n    - PATCH\n    - HEAD\n    - TRACE\n\n  - HTTP指定资源\n\n    - 在地址中指定\n    - 在请求数据中指定\n\n  - HTTP请求报文\n\n    - [请求方法] [请求地址] [HTTP版本]\n    - [请求头]\n    - [请求内容]\n\n  - HTTP应答报文\n\n    - [HTTP版本] [状态码] [状态解释]\n    - [应答头]\n    - [应答内容]\n\n  - HTTP应答状态码\n\n    - 状态码 含义\n      200~299 成功状态码\n      300~399 重定向状态码\n      400~499 客户端错误状态码\n      500~599 服务端错误状态码\n\n    | 状态码  | 含义             |\n    | ------- | ---------------- |\n    | 200~299 | 成功状态码       |\n    | 300~399 | 重定向状态码     |\n    | 400~499 | 客户端错误状态码 |\n    | 500~599 | 服务端错误状态码 |\n\n### 6.6 HTTP工作的结构\n\n- Web代理\n  - 正向代理\n  - 反向代理\n- CDN\n  - CDN（Content Delivery Network：内容分发网络）\n  - 多媒体内容\n- 爬虫\n  - 增加网络拥塞\n  - 损耗服务器资源\n\n### 6.7 HTTPS协议详解\n\n- 敏感信息：账号密码、个人信息、账户金额、交易信息、敏感信息…\n- HTTPS(Secure)是安全的HTTP协议\n- http(s)://<主机>:<端口>/<路径>，端口：443\n- 工作机制\n  - 加密模型\n    - 对称加密：使用秘钥加密 ，使用秘钥解密，两个秘钥“一致”\n    - 非对称加密：两个秘钥“不一致”\n      - A、 B是拥有一定数学关系的一组秘钥\n      - 私钥：私钥自己使用，不对外公开\n      - 公钥：公钥给大家使用，对外公开\n  - 数字证书\n    - 数字证书是可信任组织颁发给特定对象的认证\n    - 证书格式、版本号\n    - 证书序列号\n    - 签名算法\n    - 有效期\n    - 对象名称\n    - 对象公开秘钥\n  - SSL\n    - SSL(Secure Sockets Layer: 安全套接层)\n    - SSL位于传输层与应用层之间\n    - 数据安全和数据完整\n    - 对传输层数据进行加密后传输\n  - HTTPS工作流程\n    - 443端口的TCP连接\n    - SSL安全参数握手\n    - 客户端发送数据\n    - 服务端发送数据\n  - SSL安全参数握手过程\n    - 客户端：随机数1、协议版本、加密算法\n    - 服务端：确定加密算法、数字证书、随机数2\n    - 客户端：\n      - 确认证书是否有效\n      - 生成随机数3\n      - 使用服务器的公钥加密随机数3\n    - 根据随机数1、 2、 3和相同的算法生成对称秘钥\n    - 双方使用对称秘钥进行加密通信\n    - 综合使用对称加密、非对称加密\n    - 双方分别生成秘钥，没有经过传输\n\n### 6.8 输入域名按下回车键的过程有哪些\n\n- 域名解析\n  - 客户端生成DNS的UDP报文\n  - 查询本机配置的DNS IP地址\n  - UDP报文经本机协议栈发送出去\n  - 网络层 数据链路层 物理层\n  - 请求顶级域名服务器\n- 建立连接\n  - TCP三次握手\n  - SSL握手 交换秘钥\n- HTTP通信\n  - GET\n- 释放连接\n  - 四次挥手 结束连接\n\n\n\n## 7.HTTP协议详解\n\n### 7.1 浏览器背后的故事\n\n- http://www.basedev.cn/\n- 用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户\n- HTTP\n  - 超文本传输协议(HTTP)是一-种通信协议， 它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器\n  - HTTP是- -个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展\n- Web与HTTP\n  - WEB是一种基于超文本和HTTP的、 全球性的、动态交互的、跨平台的分布式图形信息系统\n  - 建立在Internet上的一种网络服务，为浏览者在Internet.上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超，级链接将Internet上的信息节点组织成一个互为关联的网状结构\n\n### 7.2 HTTP协议的前世今生\n\n- 1990年10月万维网之父TimBerners-Lee最早提出了HTTP协议\n- 1991年HTTP0.9诞生\n- 1996年5月HTTP1.0发布\n- 1997年1月HTTP1.1发布\n- 2015年5月HTTP2.0提出\n- HTTP3.0，QUIC协议\n\n### 7.3 透过TCP/IP看HTTP\n\n- TCP/IP协议族\n  - TCP/IP协议其实是一-系列与互联网相关联的协议集 合起来的总称\n  - 分层管理是TCP/IP协议的重要特征\n- 应用层\n  - 应用层一般是我们编写的应用程序,决定了向用户提供的应用服务。应用层可以通过系统调用与传输层进行通信。如: FTP、DNS、HTTP等。\n- 传输层\n  - 传输层通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。\n  - 在传输层有两个性质不同的协议:TCP和UDP。\n- 网络层\n  - 网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(传输路线)到达对方计算机，并把数据包传输给对方。\n- 链路层.\n  - 链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件设备驱动、NIC (Network Interface Card,网络适配器)以及光纤等物理可见部分。硬件. 上的范畴均在链路层的作用范围之内。\n- 数据包的封装过程\n\n![](https://tva1.sinaimg.cn/large/008eGmZEly1gnqxpcdpezj30ig0aqzm8.jpg)\n- http数据传输过程\n  - 发送端发送数据时，数据会从上层传输到下层，且每经过一层都会被打上该层的头部信息。\n  - 接收端接收数据时，数据会从下层传输到上层，传输前会把下层的头部信息删除.\n  \n  \n\n\n## 8.计算机网络实践\n\n### 8.1 网络嗅探工具\n\n- 实现流程\n\n  - 搭建服务基本框架\n  - Python操作字节序列\n    - 字节序\n      - 255 = 00000000,11111111\n      - 大端字节序：高位在前，00000000,11111111\n        - 网络，易读\n      - 小端字节序：高位在后，11111111, 00000000\n        - 主机，CPU对小端字节序处理效率高效\n      - 计算机电路先处理低位字节效率比较高\n      - 人类习惯读写大端字节序\n    - 格式字符\n      - %s 字符串，%d 整数，%x 十六进制，%f 浮点数\n      - 格式字符 C++/Python类型 标准大小（字节）\n      - B-unsigned char/整数 1\n      - H unsigned short/整数 2\n      - L unsigned long/整数 4\n      - s char[]/字节串 \n  - 实现IP报文解析器\n\n  ![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801173224.jpg)\n\n  - 实现UDP报文解析器\n  - 实现TCP报文解析器\n\n- 网卡模式\n\n  - 混杂模式 \n    - 接受所有经过网卡设备的数据 \n  - 非混杂模式\n    - 只接受目的地址指向自己的数据\n\n- IP报文解析\n\n- TCP报文解析\n\n- UDP报文解析\n\n- 从零到一实现HTTP服务器开发\n\n\n\n## 9.关于我\n\n一个专注基础知识的十二线小码农，本着 **基础，体系，实践，分享** 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。\n\n[个人网站 basedev.cn](http://basedev.cn/)  \n\n[Github](https://github.com/jaydroid1024)\n\nBaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践\n\n\n\n## 10.参考\n\n[重学操作系统 | 拉钩教育](https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content)\n\n[编程必备基础 | 慕课网](https://coding.imooc.com/class/package/355.html)\n\n","slug":"computer_net","published":1,"updated":"2021-08-01T10:03:58.071Z","_id":"ckrt0rg170000s7xf5t0466lx","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-计算机网络基础知识小抄版\"><a href=\"#筑基系列-计算机网络基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-计算机网络基础知识小抄版\"></a>筑基系列-计算机网络基础知识小抄版</h1><blockquote>\n<p>计算机基础知识筑基三部曲：</p>\n<ul>\n<li><strong><a href=\"https://juejin.cn/post/6991367806772052004\" target=\"_blank\" rel=\"noopener\">第一部：筑基系列-计算机基础知识小抄版</a></strong><ul>\n<li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991385109509193764\" target=\"_blank\" rel=\"noopener\">第二部：筑基系列-操作系统基础知识小抄版</a></strong><ul>\n<li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991397445251334151\" target=\"_blank\" rel=\"noopener\">第三部：筑基系列-计算机网络基础知识小抄版</a></strong><ul>\n<li>包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#1.计算机网络概述\">1.计算机网络概述</a></p>\n<ul>\n<li><a href=\"#11-什么是计算机网络\">1.1 什么是计算机网络</a></li>\n<li><a href=\"#12-计算机网络的分类\">1.2 计算机网络的分类</a></li>\n<li><a href=\"#13-计算机网络的发展历史\">1.3 计算机网络的发展历史</a></li>\n<li><a href=\"#14-计算机网络的层次结构\">1.4 计算机网络的层次结构</a></li>\n<li><a href=\"#15-现代互联网的网络拓扑\">1.5 现代互联网的网络拓扑</a></li>\n<li><a href=\"#16-计算机网络的性能指标\">1.6 计算机网络的性能指标</a></li>\n</ul>\n</li>\n<li><p><a href=\"#2.物理层\">2.物理层</a></p>\n<ul>\n<li><a href=\"#21-物理层的作用\">2.1 物理层的作用</a></li>\n<li><a href=\"#22-信道的基本概念\">2.2 信道的基本概念</a></li>\n</ul>\n</li>\n<li><p><a href=\"#3.数据链路层\">3.数据链路层</a></p>\n<ul>\n<li><a href=\"#31-数据链路层主要功能\">3.1 数据链路层主要功能</a></li>\n<li><a href=\"#32-最大传输单元mtu\">3.2 最大传输单元MTU</a></li>\n<li><a href=\"#33-以太网协议详解\">3.3 以太网协议详解</a></li>\n</ul>\n</li>\n<li><p><a href=\"#4.网络层\">4.网络层</a></p>\n<ul>\n<li><a href=\"#41-网络层的主要功能\">4.1 网络层的主要功能</a></li>\n<li><a href=\"#42-ip协议详解\">4.2 IP协议详解</a></li>\n<li><a href=\"#43-ip协议的转发流程\">4.3 IP协议的转发流程</a></li>\n<li><a href=\"#44-arp协议与rarp协议\">4.4 ARP协议与RARP协议</a></li>\n<li><a href=\"#45-ip地址的分类\">4.5 IP地址的分类</a></li>\n<li><a href=\"#46-ip地址的划分子网\">4.6 IP地址的划分子网</a></li>\n<li><a href=\"#47-无分类地址cidr\">4.7 无分类地址CIDR</a></li>\n<li><a href=\"#48-网络地址转换nat技术\">4.8 网络地址转换NAT技术</a></li>\n<li><a href=\"#49-icmp协议详解\">4.9 ICMP协议详解</a></li>\n<li><a href=\"#410-网络层的路由概述\">4.10 网络层的路由概述</a></li>\n<li><a href=\"#411-自治系统as\">4.11 自治系统(AS)</a></li>\n<li><a href=\"#412-内部网关路由协议之rip协议\">4.12 内部网关路由协议之RIP协议</a></li>\n<li><a href=\"#413-外部网关路由协议之bgp协议\">4.13 外部网关路由协议之BGP协议</a></li>\n</ul>\n</li>\n<li><p><a href=\"#5.传输层\">5.传输层</a></p>\n<ul>\n<li><a href=\"#51-传输层的主要功能\">5.1 传输层的主要功能</a></li>\n<li><a href=\"#52-udp协议详解\">5.2 UDP协议详解</a></li>\n<li><a href=\"#53-tcp报文详解\">5.3 TCP报文详解</a></li>\n<li><a href=\"#54-tcp可靠传输的基本原理\">5.4 TCP可靠传输的基本原理</a></li>\n<li><a href=\"#55-tcp协议的可靠传输\">5.5 TCP协议的可靠传输</a></li>\n<li><a href=\"#56-tcp协议的流量控制\">5.6 TCP协议的流量控制</a></li>\n<li><a href=\"#57-tcp协议的拥塞控制\">5.7 TCP协议的拥塞控制</a></li>\n<li><a href=\"#58-tcp连接的建立\">5.8 TCP连接的建立</a></li>\n<li><a href=\"#59-tcp连接的释放\">5.9 TCP连接的释放</a></li>\n<li><a href=\"#510-套接字与套接字编程\">5.10 套接字与套接字编程</a></li>\n</ul>\n</li>\n<li><p><a href=\"#6.应用层\">6.应用层</a></p>\n<ul>\n<li><p><a href=\"#61-应用层概述\">6.1 应用层概述</a></p>\n</li>\n<li><p><a href=\"#62-应用层主要功能\">6.2 应用层主要功能</a></p>\n</li>\n<li><p><a href=\"#63-dns服务详解\">6.3 DNS服务详解</a></p>\n</li>\n<li><p><a href=\"#64-dhcp协议详解\">6.4 DHCP协议详解</a></p>\n</li>\n<li><p><a href=\"#65-http协议详解\">6.5 HTTP协议详解</a></p>\n</li>\n<li><p><a href=\"#66-http工作的结构\">6.6 HTTP工作的结构</a></p>\n</li>\n<li><p><a href=\"#67-https协议详解\">6.7 HTTPS协议详解</a></p>\n</li>\n<li><p><a href=\"#68-输入域名按下回车键的过程有哪些\">6.8 输入域名按下回车键的过程有哪些</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#7.HTTP协议详解\">7.HTTP协议详解</a></p>\n<ul>\n<li><a href=\"#71-浏览器背后的故事\">7.1 浏览器背后的故事</a></li>\n<li><a href=\"#72-http协议的前世今生\">7.2 HTTP协议的前世今生</a></li>\n<li><a href=\"#73-透过tcpip看http\">7.3 透过TCP/IP看HTTP</a></li>\n</ul>\n</li>\n<li><p><a href=\"#8.计算机网络实践\">8.计算机网络实践</a></p>\n<ul>\n<li><a href=\"#81-网络嗅探工具\">8.1 网络嗅探工具</a></li>\n</ul>\n</li>\n<li><p><a href=\"#9关于我\">9.关于我</a></p>\n</li>\n<li><p><a href=\"#10参考\">10.参考</a></p>\n</li>\n</ul>\n<h2 id=\"1-计算机网络概述\"><a href=\"#1-计算机网络概述\" class=\"headerlink\" title=\"1.计算机网络概述\"></a>1.计算机网络概述</h2><h3 id=\"1-1-什么是计算机网络\"><a href=\"#1-1-什么是计算机网络\" class=\"headerlink\" title=\"1.1 什么是计算机网络\"></a>1.1 什么是计算机网络</h3><ul>\n<li>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</li>\n<li>计算机网络的不是软件概念，还包含硬件设备</li>\n<li>计算机网络不仅仅是信息通信，还可以支持广泛的应用</li>\n</ul>\n<h3 id=\"1-2-计算机网络的分类\"><a href=\"#1-2-计算机网络的分类\" class=\"headerlink\" title=\"1.2 计算机网络的分类\"></a>1.2 计算机网络的分类</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>英文</th>\n<th>范围</th>\n<th>区域</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>广域网</td>\n<td>WAN(Wide Area Network)</td>\n<td>几十到几千公里</td>\n<td>跨省、跨国</td>\n</tr>\n<tr>\n<td>城域网</td>\n<td>MAN(Metro. Area Network)</td>\n<td>5KM-50KM</td>\n<td>城市间</td>\n</tr>\n<tr>\n<td>局域网</td>\n<td>LAN(Local Area Network)</td>\n<td>1KM以内</td>\n<td>地区内</td>\n</tr>\n</tbody></table>\n<h3 id=\"计算机网络的发展历史\"><a href=\"#计算机网络的发展历史\" class=\"headerlink\" title=\"计算机网络的发展历史\"></a>计算机网络的发展历史</h3><ul>\n<li><p>世界互联网发展历史</p>\n<ul>\n<li>单个网络 ARPANET<ul>\n<li>计算机–&gt;交换机&lt;–计算机</li>\n</ul>\n</li>\n<li>三级结构互联网<ul>\n<li>主干网–&gt;地区网–&gt;校园网</li>\n</ul>\n</li>\n<li>多层次ISP互联网<ul>\n<li>ISP(Internet Service Provider): 网络服务提供商</li>\n<li>中国电信、中国移动、中国联通等</li>\n<li>主干ISP(海底电缆)–&gt;地区ISP(山东移动)–&gt;校园、家庭、公司</li>\n<li>查看全球网络地图：<a href=\"https://www.infrapedia.com/app\" target=\"_blank\" rel=\"noopener\">https://www.infrapedia.com/app</a></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171046.jpg\" alt=\"\"></p>\n</li>\n<li><p>中国互联网的发展历史</p>\n<ul>\n<li>1980 年开始互联网实验</li>\n<li>1989 年第一个公共网络建立运行</li>\n<li>1994 接入国际互联网</li>\n<li>中国的互联网企业<ul>\n<li>中国电信互联网CHINANET</li>\n<li>中国联通互联网UNINET</li>\n<li>中国移动互联网CMNET</li>\n<li>中国教育与科研计算机网CERNET</li>\n<li>中国科学技术网CSTNET</li>\n<li>1996年，张朝阳创建搜狐</li>\n<li>1997年，丁磊创建网易</li>\n<li>1998年，王志东创建新浪</li>\n<li>1998年，马化腾、张志东创建腾讯</li>\n<li>1999年，马云创建阿里巴巴</li>\n<li>2000年，李彦宏创建百度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-计算机网络的层次结构\"><a href=\"#1-4-计算机网络的层次结构\" class=\"headerlink\" title=\"1.4 计算机网络的层次结构\"></a>1.4 计算机网络的层次结构</h3><ul>\n<li>层次结构设计的基本原则<ul>\n<li>分层实现不同的功能<ul>\n<li>保证数据通路顺畅</li>\n<li>识别目的计算机</li>\n<li>目的计算机状态</li>\n<li>数据是否错误</li>\n<li>层次划分：网络应用数据(视频、文件、游戏)–&gt;数据可靠通信(数据错误、重复)–&gt;物理网络接入(光电等物理特性)</li>\n</ul>\n</li>\n<li>各层之间是相互独立的</li>\n<li>每一层要有足够的灵活性</li>\n<li>各层之间完全解耦</li>\n</ul>\n</li>\n<li>OSI七层模型<ul>\n<li>应用层：为计算机用户提供接口和服务</li>\n<li>表示层：数据处理（编码解码、加密解密等）</li>\n<li>会话层：管理（建立、维护、重连）通信会话</li>\n<li>传输层：管理端到端的通信连接</li>\n<li>网络层：数据路由（决定数据在网络的路径）</li>\n<li>数据链路层：管理相邻节点之间的数据通信</li>\n<li>物理层：数据通信的光电物理特性</li>\n<li>OSI在市场化过程中困难重重， TCP/IP在全球范围成功运行</li>\n<li>OSI欲成为全球计算机都遵循的标准</li>\n<li>OSI最终并没有成为广为使用的标准模型</li>\n<li>为什么没有被接受<ul>\n<li>OSI标准制定周期过长，按OSI标准生产的设备无法及时进入市场</li>\n<li>OSI的专家缺乏实际经验</li>\n<li>OSI模型设计的并不合理，一些功能在多层中重复出现</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>TCP/IP四层模型<ul>\n<li>应用层：HTTP/FTP/… ，对应OSI的应用层、表示层、会话层</li>\n<li>传输层：TCP/UDP，对应OSI的传输层</li>\n<li>网络层：IP/ICMP，对应OSI的网络层</li>\n<li>网络接口层：Ethernet/ARP/RARP，对应OSI的数据链路层、物理层</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-5-现代互联网的网络拓扑\"><a href=\"#1-5-现代互联网的网络拓扑\" class=\"headerlink\" title=\"1.5 现代互联网的网络拓扑\"></a>1.5 现代互联网的网络拓扑</h3><ul>\n<li>边缘部分<ul>\n<li>家庭：终端机器(手机)–&gt;路由器–&gt;网关–&gt;地区ISP</li>\n<li>企业：终端机器(电脑)–&gt;路由器–&gt;内部网关–&gt;统一网关–&gt;地区ISP</li>\n</ul>\n</li>\n<li>核心部分<ul>\n<li>地区ISP–&gt;主干ISP–&gt;国际路由器</li>\n</ul>\n</li>\n<li>网络连接错综复杂</li>\n<li>接入设备数以亿计</li>\n<li>网络覆盖边际全球</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171055.jpg\" alt=\"\"></p>\n<ul>\n<li>客户-服务器(C/S)模式<ul>\n<li>C请求服务–&gt;S获得服务</li>\n</ul>\n</li>\n<li>对等连接(P2P)模式</li>\n</ul>\n<h3 id=\"1-6-计算机网络的性能指标\"><a href=\"#1-6-计算机网络的性能指标\" class=\"headerlink\" title=\"1.6 计算机网络的性能指标\"></a>1.6 计算机网络的性能指标</h3><ul>\n<li>速率<ul>\n<li>速率单位： bps=bit/s</li>\n<li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul>\n<li>bps到字节的转换</li>\n<li>网络常用单位为(Mbps)</li>\n<li>100M/s = 100Mbps = 100Mbit/s</li>\n<li>100Mbit/s=(100/8)MB/s=12.5MB/s</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>时延<ul>\n<li>总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延</li>\n<li>发送时延<ul>\n<li>发送时延 = 数据长度(𝑏𝑖𝑡)/发送速率(𝑏𝑖𝑡/𝑠)</li>\n<li>发送速率受限于计算机网卡</li>\n</ul>\n</li>\n<li>传输时延<ul>\n<li>传播时延 = 传输路径距离/传播速率(𝑏𝑖𝑡/𝑠)</li>\n<li>传播速率受限于传输介质，铜线、光线</li>\n</ul>\n</li>\n<li>排队时延<ul>\n<li>数据包在网络设备中等待被处理的时间</li>\n</ul>\n</li>\n<li>处理时延<ul>\n<li>数据包到达设备或者目的机器被处理所需要的时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>往返时间RTT<ul>\n<li>RTT表示的是数据报文在端到端通信中的来回一次的时间</li>\n<li>RTT(Route-Trip Time)是评估网络质量的一项重要指标</li>\n<li>通常使用ping命令查看RTT</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-物理层\"><a href=\"#2-物理层\" class=\"headerlink\" title=\"2.物理层\"></a>2.物理层</h2><h3 id=\"2-1-物理层的作用\"><a href=\"#2-1-物理层的作用\" class=\"headerlink\" title=\"2.1 物理层的作用\"></a>2.1 物理层的作用</h3><ul>\n<li>相关设备<ul>\n<li>双绞线</li>\n<li>同轴电缆</li>\n<li>光纤</li>\n<li>红外线</li>\n<li>无线</li>\n<li>激光</li>\n</ul>\n</li>\n<li>传输比特流</li>\n<li>连接不同的物理设备</li>\n<li>物理特性<ul>\n<li>机械特性</li>\n<li>电气特性</li>\n<li>功能特性</li>\n<li>过程特性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-信道的基本概念\"><a href=\"#2-2-信道的基本概念\" class=\"headerlink\" title=\"2.2 信道的基本概念\"></a>2.2 信道的基本概念</h3><ul>\n<li><p>一条通信电路包含一个接收信道和一个发送信道</p>\n</li>\n<li><p>信道是往一个方向传送信息的媒体</p>\n</li>\n<li><p>单工信道</p>\n<ul>\n<li>有线电视、无线电收音机等等</li>\n<li>只能一个方向通信，没有反方向反馈的信道</li>\n</ul>\n</li>\n<li><p>半双工信道</p>\n<ul>\n<li>不能双方同时发送，也不能同时接收</li>\n<li>双方都可以发送和接收信息</li>\n</ul>\n</li>\n<li><p>全双工信道</p>\n<ul>\n<li>双方都可以同时发送和接收信息</li>\n</ul>\n</li>\n<li><p>分用-复用技术</p>\n<ul>\n<li>信道利用率并不高？</li>\n<li>分用器</li>\n<li>复用器</li>\n<li>频分复用</li>\n<li>时分复用</li>\n<li>波分复用</li>\n<li>码分复用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-数据链路层\"><a href=\"#3-数据链路层\" class=\"headerlink\" title=\"3.数据链路层\"></a>3.数据链路层</h2><h3 id=\"3-1-数据链路层主要功能\"><a href=\"#3-1-数据链路层主要功能\" class=\"headerlink\" title=\"3.1 数据链路层主要功能\"></a>3.1 数据链路层主要功能</h3><ul>\n<li><p>封装成帧</p>\n<ul>\n<li>发送端在网络层的一段数据前后添加特定标记形成“帧”</li>\n<li>“帧”是数据链路层数据的基本单位</li>\n<li>接收端根据前后特定标记识别出“帧”</li>\n<li>物理层才不管你“帧”不“帧”，物理层之作用bit流的传输</li>\n<li>IP数据报–&gt;“帧”的数据[帧首部， “帧”的数据 ，帧尾部]</li>\n<li>帧首部和尾部是特定的控制字符（特定比特流）SOH: 00000001，EOT: 00000100</li>\n</ul>\n</li>\n<li><p>透明传输</p>\n<ul>\n<li>“一种实际存在的事物却又看起来不存在一样”</li>\n<li>“透明”在计算机领域是非常重要的一个术语</li>\n<li>“即是控制字符在帧数据中，但是要当做不存在的去处理”</li>\n<li>数据中也出现了控制字符，对数据中的控制字符进行特殊处理，转义</li>\n<li>“\\n”、“\\t”等控制字符，编程语言中“\\”一般为转义字符，“\\” 、“\\\\”</li>\n</ul>\n</li>\n<li><p>差错监测</p>\n<ul>\n<li>数据链路层负责起“差错监测”的工作</li>\n<li>物理层只管传输比特流，无法控制是否出错</li>\n<li>循环冗余校验码CRC<ul>\n<li>检测数据传输或者保存后可能出现的错误</li>\n<li>一种根据传输或保存的数据而产生固定位数校验码的方法</li>\n<li>生成的数字计算出来并且附加到数据后面</li>\n<li>模“2”除法<ul>\n<li>与算术除法类似，但除法不借位，实际是“异或”操作</li>\n<li>模“2”除法是二进制下的除法</li>\n<li>0 xor 0 = 0，0 xor 1 = 1，1 xor 0 = 1，1 xor 1 = 0</li>\n</ul>\n</li>\n<li>检测流程<ul>\n<li>选定一个用于校验的多项式G(x)，并在数据尾部添加r个0</li>\n<li>将添加r个0后的数据，使用模“2”除法除以多项式的位串</li>\n<li>得到的余数填充在原数据r个0的位置得到可校验的位串</li>\n<li>例子1：使用CRC计算101001的可校验位串<ul>\n<li>计算过程有点难！！！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据链路层只进行数据的检测，不进行纠正，一旦出错会丢弃</li>\n<li>CRC的错误检测能力与位串的阶数r有关</li>\n</ul>\n</li>\n<li>奇偶校验码<ul>\n<li>检测机制：在比特流最后一位加上一位（1或者0），（所有比特流中的1相加）偶数加0，奇数加1 </li>\n<li>缺陷：出错两位，奇偶校验码校测不到错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-最大传输单元MTU\"><a href=\"#3-2-最大传输单元MTU\" class=\"headerlink\" title=\"3.2 最大传输单元MTU\"></a>3.2 最大传输单元MTU</h3><ul>\n<li>MTU<ul>\n<li>数据链路层的数据帧也不是无限大的</li>\n<li>最大传输单元MTU(Maximum Transmission Unit)</li>\n<li>数据帧过大或过小都会影响传输的效率</li>\n<li>总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延</li>\n<li>以太网MTU一般为1500字节</li>\n</ul>\n</li>\n<li>路径MTU<ul>\n<li>路径MTU由链路中MTU的最小值决定</li>\n<li>木桶效应</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-以太网协议详解\"><a href=\"#3-3-以太网协议详解\" class=\"headerlink\" title=\"3.3 以太网协议详解\"></a>3.3 以太网协议详解</h3><ul>\n<li><p>MAC地址</p>\n<ul>\n<li>MAC地址（Media Access Control Address）直译为媒体存取控制位址，也称为局域网地址（LAN Address）</li>\n<li>每一个设备都拥有唯一的MAC地址</li>\n<li>MAC地址（物理地址、硬件地址）</li>\n<li>MAC地址共48位，使用十六进制表示</li>\n<li>ipconfig/all 查看本机所有MAC地址 ，30-B4-9E-ED-85-CA</li>\n</ul>\n</li>\n<li><p>以太网协议</p>\n<ul>\n<li>以太网是一种应用于数据链路层的协议</li>\n<li>以太网(Ethernet)是一种使用广泛的局域网技术</li>\n<li>使用以太网可以完成相邻设备的数据帧传输</li>\n<li>以太网数据格式<ul>\n<li>类型：0800： IP数据报，0806： ARP请求/应答，8035： RARP请求/应答</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目的地址（MAC地址) 单位字节</th>\n<th>源地址</th>\n<th>类型</th>\n<th>帧数据</th>\n<th>CRC校验码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>6</td>\n<td>6</td>\n<td>2</td>\n<td>46-1500</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<ul>\n<li>MAC地址表，路由器持有</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>MAC地址</th>\n<th>硬件接口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>31-B4-9E-ED-85-CA</td>\n<td>接口1</td>\n</tr>\n<tr>\n<td>32-B4-9E-ED-85-CB</td>\n<td>接口2</td>\n</tr>\n<tr>\n<td>33-B4-9E-ED-85-CC</td>\n<td>接口4</td>\n</tr>\n</tbody></table>\n<ul>\n<li>A终端通过路由器发送数据到C终端的过程<ul>\n<li>A通过网卡发出数据帧</li>\n<li>数据帧到达路由器，路由器取出前6字节（目的MAC地址）</li>\n<li>路由器匹配MAC地址表，找到对应的网络接口</li>\n<li>路由器往该网络接口发送数据帧</li>\n<li>如果MAC地址表没有匹配成功</li>\n<li>路由器将广播A的数据包到除A以外的端口</li>\n<li>路由器检查MAC地址表，发现没有C的信息</li>\n<li>路由器将收到来自B、 C的回应，并将地址记录</li>\n</ul>\n</li>\n<li>以太网协议只提供相邻物理节点传输，跨设备是无法传输的，需要借助网络层</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-网络层\"><a href=\"#4-网络层\" class=\"headerlink\" title=\"4.网络层\"></a>4.网络层</h2><h3 id=\"4-1-网络层的主要功能\"><a href=\"#4-1-网络层的主要功能\" class=\"headerlink\" title=\"4.1 网络层的主要功能\"></a>4.1 网络层的主要功能</h3><ul>\n<li>网络层：数据路由（决定数据在网络的路径）</li>\n<li>数据链路层只能解决相邻物理节点传输</li>\n</ul>\n<h3 id=\"4-2-IP协议详解\"><a href=\"#4-2-IP协议详解\" class=\"headerlink\" title=\"4.2 IP协议详解\"></a>4.2 IP协议详解</h3><ul>\n<li><p>虚拟互联网络</p>\n<ul>\n<li>物理设备通过使用IP协议，屏蔽了物理网络之间的差异</li>\n<li>实际的计算机网络是错综复杂的</li>\n<li>当网络中的主机使用IP协议连接时，则无需关注网络细节</li>\n<li>IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发</li>\n<li>IP协议使得复杂的实际网络变为一个虚拟互连的网络</li>\n<li>IP协议解决了在虚拟网络中数据报传输路径的问题</li>\n</ul>\n</li>\n<li><p>IP协议</p>\n<ul>\n<li>IP地址<ul>\n<li>MAC地址： 30-B4-9E-ED-85-CA：00110000-11000020-11101101-01000101-11001010<ul>\n<li>48位，16进制表示</li>\n<li>唯一，不可变</li>\n</ul>\n</li>\n<li>P地址： 192.168.11.11：11000000.10101000.00001011.00001011<ul>\n<li>32位，常分成4个8位，一般采用点分十进制表示，共可以表示 2^32 = 4294961296</li>\n<li>IP地址常使用<strong>点分十进制</strong>来表示(0<del>255.0</del>255.0<del>255.0</del>255)，例如：255.255.255.255</li>\n<li>受网络环境影响会发生改变</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>IP报文格式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>协议层</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理层</td>\n<td>001010101001110110101010101010…10101010101010101010101010101</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>【帧首部 】【“帧”的数据】 【帧尾部】</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>【IP首部】【 IP数据报的数据】</td>\n</tr>\n</tbody></table>\n<ul>\n<li>IP报文头部各个参数的作用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>4位版本</th>\n<th>4位首部长度</th>\n<th>8位服务类型(TOS)</th>\n<th>16位总长度(字节)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>16位标识</td>\n<td>3位标志</td>\n<td>13位片偏移</td>\n<td></td>\n</tr>\n<tr>\n<td>8位生存时间(TTL)</td>\n<td>8位协议</td>\n<td>16位首部校验和</td>\n<td></td>\n</tr>\n<tr>\n<td>32位源IP地址</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>32位目的IP地址</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>选项options（若有）</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>IP数据</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>每一行32位，第六行可选，所以IP报文头部至少占4×5=20个字节</li>\n<li>第一行<ul>\n<li>版本：占4位，指的是IP协议的版本，通信双方的版本必须一致，当前主流版本是4，即IPv4，也有IPv6</li>\n<li>首部位长度：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字”（4个字节），也即是IP首部最大长度为60字节</li>\n<li>8位服务类型(TOS)：TOS包括共8位，包括3 bit的优先权字段（取值可以从000-111所有值），4 bit的TOS子字段和1 bit未用位但必须置0。</li>\n<li>总长度：占16位，最大数值为65535，表示的是IP数据报总长度（IP首部+IP数据），数据链路层MTU,如果IP数据报的数据多余“帧”的数据，需要分片处理</li>\n</ul>\n</li>\n<li>第二行<ul>\n<li>16位标识：IP协议内部使用</li>\n<li>3位标志：标记是否可以分片</li>\n<li>13位片偏移：第几个分片</li>\n</ul>\n</li>\n<li>第三行<ul>\n<li>TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文，避免数据在网络无限传输</li>\n<li>协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP等）<ul>\n<li>协议名 ICMP、 IGMP、 IP 、TCP、 UDP、 OSPF …，字段值 1 、2 、4 、6、 17、 89 …</li>\n</ul>\n</li>\n<li>首部校验和：占16位，校验IP首部是否有出错</li>\n</ul>\n</li>\n<li>源IP地址：发送方</li>\n<li>目的IP地址：接收方</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-IP协议的转发流程\"><a href=\"#4-3-IP协议的转发流程\" class=\"headerlink\" title=\"4.3 IP协议的转发流程\"></a>4.3 IP协议的转发流程</h3><ul>\n<li><p>逐跳(hop-by-hop)</p>\n</li>\n<li><p>路由表</p>\n<ul>\n<li>计算机或者路由器都拥有路由表</li>\n<li>MAC地址表和路由表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>MAC地址</th>\n<th>硬件接口</th>\n<th></th>\n<th>目的IP地址</th>\n<th>下一跳IP地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>E1</td>\n<td></td>\n<td>IP1</td>\n<td>IP4</td>\n</tr>\n<tr>\n<td>B</td>\n<td>E2</td>\n<td></td>\n<td>IP2</td>\n<td>IP5</td>\n</tr>\n<tr>\n<td>C</td>\n<td>E3</td>\n<td></td>\n<td>IP3</td>\n<td>IP6</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>转发流程：网络层</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gnl5pjkrqtj30nm07gjsc.jpg\" alt=\"\"></p>\n<ul>\n<li>A将数据报发送给E</li>\n<li>A发出目的地为C的IP数据报， 查询路由表发现下一跳为E</li>\n<li>E查询路由表发现下一跳为F，将数据报发送给F</li>\n<li>F查询路由表发现目的地C直接连接，将数据报发送给C</li>\n</ul>\n</li>\n<li><p>IP数据报每一跳的IP地址始终不变</p>\n</li>\n<li><p>数据帧每一跳的MAC地址都在变化</p>\n</li>\n</ul>\n<h3 id=\"4-4-ARP协议与RARP协议\"><a href=\"#4-4-ARP协议与RARP协议\" class=\"headerlink\" title=\"4.4 ARP协议与RARP协议\"></a>4.4 ARP协议与RARP协议</h3><ul>\n<li>ARP协议<ul>\n<li>ARP(Address Resolution Protocol)地址解析协议，通过IP地址查找MAC地址</li>\n<li>ARP缓存表：[IP地址, MAC地址] 如：192.168.83.254 —00-50-56-e0-33-40</li>\n<li>ARP缓存表缓存了IP地址到硬件地址之间的映射关系</li>\n<li>ARP缓存表是ARP协议和RARP协议运行的关键</li>\n<li>ARP缓存表中的记录并不是永久有效的，有一定的期限</li>\n<li><strong>arp -a</strong> :查看ARP缓存表</li>\n<li>数据报格式，共28个字节，封装在数据链路层里，用于网络层，【类型0806 ，ARP请求/应答 ，PAD】<ul>\n<li>硬件类型，2位</li>\n<li>协议类型 ，2位</li>\n<li>标记 ，24</li>\n<li>发送端 以太网地址 ，6位</li>\n<li>发送端 IP地址 ，4位</li>\n<li>目的端 以太网地址 ，6位</li>\n<li>目的端 IP地址，4位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>RARP协议<ul>\n<li>RARP(Reverse Address Resolution Protocol)逆地址解析协议</li>\n<li>数据链路层MAC48位地址–》网络层IP32位地址</li>\n</ul>\n</li>\n<li>ARP和RARP的操作对程序员是透明的</li>\n<li>(R)ARP协议是TCP/IP协议栈里面基础的协议</li>\n<li>理解(R)ARP协议有助于理解网络分层的细节</li>\n<li>转发流程：网络层+数据链路层+物理层<ul>\n<li>第一步：A-&gt;E<ul>\n<li>A发出目的地为C的IP数据报， 查询路由表发现下一跳为E</li>\n<li>A将IP数据报交给数据链路层，并告知目的MAC地址是E</li>\n<li>数据链路层填充源MAC地址A和目的MAC地址E</li>\n<li>数据链路层通过物理层将数据发送给E</li>\n</ul>\n</li>\n<li>第二步：E–&gt;F<ul>\n<li>E的数据链路层接收到数据帧， 把帧数据交给网络层</li>\n<li>E查询路由表， 发现下一跳为F</li>\n<li>E把数据报交给数据链路层， 并告知目的MAC地址为F</li>\n<li>E的数据链路层封装数据帧并发送</li>\n</ul>\n</li>\n<li>第三步：F–&gt;C<ul>\n<li>F的数据链路层接收到数据帧， 把帧数据交给网络层</li>\n<li>F查询路由表， 发现下一跳为C</li>\n<li>F把数据报交给数据链路层，并告知目的MAC地址为C</li>\n<li>F的数据链路层封装数据帧并发送</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-5-IP地址的分类\"><a href=\"#4-5-IP地址的分类\" class=\"headerlink\" title=\"4.5 IP地址的分类\"></a>4.5 IP地址的分类</h3><ul>\n<li><p>IP地址长度为32位，常分成4个8位，常使用点分十进制来表示(0<del>255.0</del>255.0<del>255.0</del>255)，2^32 = 4294961296</p>\n</li>\n<li><p>直接对42亿多个IP地址规划和分配IP地址非常麻烦</p>\n</li>\n<li><p>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=</p>\n</li>\n<li><p>分类的IP地址</p>\n<ul>\n<li>网络号 <ul>\n<li>网络号的位数直接决定了可以分配的网络数（计算方法=2^网络号位数-特殊网络号数）</li>\n</ul>\n</li>\n<li>主机号<ul>\n<li>主机号的位数则决定了网络中最大的主机数（计算方法=2^主机号位数-特殊主机号数）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>IP类型</th>\n<th>组成</th>\n<th>最小网络号</th>\n<th>最大网络号</th>\n<th>子网数量(理想)</th>\n<th>最小主机号</th>\n<th>最大主机号</th>\n<th>主机数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>8位网络号(0开头）+24位主机号</td>\n<td>0(00000000)</td>\n<td>127(01111111)</td>\n<td>2^7=128</td>\n<td>0.0.0</td>\n<td>255.255.255</td>\n<td>2^24=16,777,216</td>\n</tr>\n<tr>\n<td>B</td>\n<td>16位网络号（10开头）+16位主机号</td>\n<td>128(100000000).0</td>\n<td>191(10111111).255</td>\n<td>2^14(6+8)=16,384</td>\n<td>0.0</td>\n<td>255.255</td>\n<td>2^16=65536</td>\n</tr>\n<tr>\n<td>C</td>\n<td>24位网络号（110开头）+8位主机号</td>\n<td>192(110000000).0.0</td>\n<td>223(11011111).255.255</td>\n<td>2^21(5+8+8)=2,097,252</td>\n<td>0</td>\n<td>255</td>\n<td>2^8=256</td>\n</tr>\n<tr>\n<td>D</td>\n<td>组播地址（1110开头）</td>\n<td>224(111000000).0.0.0</td>\n<td>239(11101111).255.255.255</td>\n<td>2^4=16</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>E</td>\n<td>保留以后再用（1111开头）</td>\n<td>240(111110000).0.0.0</td>\n<td>225(11111111).255.255.255</td>\n<td>2^4=16</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>特殊的网络号<ul>\n<li>A类地址网络段后7位全1(01111111:127)表示回环地址</li>\n<li>A类地址网络段全0(00000000)表示特殊网络</li>\n<li>B类地址网络段(10000000.00000000:128.0)是不可使用的</li>\n<li>C类地址网络段(192.0.0)是不可使用的</li>\n<li>上表中的A类IP的子网可用数量为：2^7-2，B类:2^14-1，C类：2^21-1</li>\n</ul>\n</li>\n<li>特殊的主机号<ul>\n<li>主机号为全1表示广播地址，向当前网络段所有主机发消息，例如：1.0.0.0</li>\n<li>主机号全0表示当前网络段，不可分配为特定主机，例如：1.255.255.255</li>\n<li>上表中A\\B\\C的可用主机号数量为：2^24-2、2^16-2、2^8-2</li>\n</ul>\n</li>\n<li>127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。localhost是个域名</li>\n<li>如何判断一个IP属于哪一类IP地址<ul>\n<li>取出首八位：</li>\n<li>A类：(0,127) / 0xxxxxxx，</li>\n<li>B类：[128,19]) / 10xxxxxx，</li>\n<li>C类：[192,223] / 110xxxxx</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-6-IP地址的划分子网\"><a href=\"#4-6-IP地址的划分子网\" class=\"headerlink\" title=\"4.6 IP地址的划分子网\"></a>4.6 IP地址的划分子网</h3><ul>\n<li>某公司拥有100名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？<ul>\n<li>C类可分配的主机数量为2^8-2=254个</li>\n</ul>\n</li>\n<li>某公司拥有256名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？<ul>\n<li>B类可分配的主机数量为2^16-2=65534个</li>\n<li>造成了很大的地址空间浪费</li>\n</ul>\n</li>\n<li>子网号<ul>\n<li>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=</li>\n<li>例如一个C类IP 193.10.10.0 = 24位网络号（110开头）+8位主机号 </li>\n<li>主机号段为.0=.00000000</li>\n<li>将主机号段最高位分成 <strong>.0</strong>0000000 和  <strong>.1</strong>0000000 两个子网</li>\n<li><strong>.0</strong>0000000 子网可以表示的主机范围为：(0) <strong>.0</strong>0000000 – (127) <strong>.0</strong>1111111 </li>\n<li><strong>.1</strong>0000000 子网可以表示的主机范围为：(128) <strong>.1</strong>0000000 – (255) <strong>.1</strong>1111111 </li>\n<li>某公司拥有100名员工，每人配备一个计算机，就可以申请C类IP的子网从而可以充分利用IP的数量</li>\n</ul>\n</li>\n<li>子网掩码<ul>\n<li>子网号这么多，有没有办法快速判断某个IP的网络子网掩码号？</li>\n<li>子网掩码由连续的1和连续的0组成</li>\n<li>子网掩码和IP地址一样，都是32位</li>\n<li>某一个子网的子网掩码具备网络号位数个连续的1</li>\n<li>A类IP的子网掩码：255.0.0.0 </li>\n<li>B类IP的子网掩码：255.255.0.0 </li>\n<li>C类IP的子网掩码：255.255.255.0</li>\n<li>划分子网的子网掩码：子网掩码-子网号-主机号<ul>\n<li>例如：193.10.10.0 = 24位网络号（110开头）+1位子网号+7位主机号 <ul>\n<li>子网掩码为：255.255.255.128（24+1个1和7个0组成）</li>\n<li>求 193.10.10.6 这个IP对应的子网号</li>\n<li>第一步IP对应的二进制：            193.10.10.6 – 11000001.00001010.00001010.00000110</li>\n<li>第二步子网掩码对应的二进制：255.255.255.128 – 11111111.11111111.11111111.10000000</li>\n<li>第三步：一二步与运算得到子网号 11000001.00001010.00001010.00000000  – 193.10.10.0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-7-无分类地址CIDR\"><a href=\"#4-7-无分类地址CIDR\" class=\"headerlink\" title=\"4.7 无分类地址CIDR\"></a>4.7 无分类地址CIDR</h3><ul>\n<li><p>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】</p>\n</li>\n<li><p>子网划分相对复杂所以出现了CIDR</p>\n</li>\n<li><p>无类域内路由选择（Classless Inter-Domain Routing）</p>\n</li>\n<li><p>CIDR中没有A、 B、 C类网络号、和子网划分的概念</p>\n</li>\n<li><p>CIDR将网络前缀相同的IP地址称为一个“CIDR地址块”</p>\n</li>\n<li><p>IP地址=【网络前缀+主机号】</p>\n</li>\n<li><p>网络前缀是任意位数的</p>\n</li>\n<li><p>CIDR采用斜线记法来表示一个IP地址</p>\n<ul>\n<li>193.10.10.129/25==11000001.00001010.00001010.10000001</li>\n<li>25表示网络前缀有25位，主机位有7位</li>\n<li>相比原来子网划分更加灵活</li>\n<li>超网-》子网</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>CIDR前缀长度</th>\n<th>掩码点分十进制</th>\n<th>地址数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/13</td>\n<td>255.248.0.0</td>\n<td>2^19=512K</td>\n</tr>\n<tr>\n<td>/14</td>\n<td>255.252.0.0</td>\n<td>2^18=256K</td>\n</tr>\n<tr>\n<td>/15</td>\n<td>255.254.0.0</td>\n<td>2^17=128K</td>\n</tr>\n<tr>\n<td>/16</td>\n<td>255.255.0.0</td>\n<td>2^16=64K</td>\n</tr>\n<tr>\n<td>/17</td>\n<td>255.255.128.0</td>\n<td>2^15=32K</td>\n</tr>\n<tr>\n<td>/18</td>\n<td>255.255.192.0</td>\n<td>2^14=16K</td>\n</tr>\n<tr>\n<td>/19</td>\n<td>255.255.224.0</td>\n<td>2^13=8K</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"4-8-网络地址转换NAT技术\"><a href=\"#4-8-网络地址转换NAT技术\" class=\"headerlink\" title=\"4.8 网络地址转换NAT技术\"></a>4.8 网络地址转换NAT技术</h3><ul>\n<li><p>IPv4最多只有40+亿个IP地址</p>\n</li>\n<li><p>早期IP地址的不合理规划导致IP号浪费</p>\n</li>\n<li><p>网络拓扑：边缘部分：家庭，多个设备如何复用同一个IP地址的</p>\n</li>\n<li><p>内网地址</p>\n<ul>\n<li>内部机构使用</li>\n<li>避免与外网地址重复</li>\n<li>三类内网地址<ul>\n<li>10.0.0.0~10.255.255.255（支持千万数量级设备）</li>\n<li>172.16.0.0~172.31.255.255（支持百万数量级设备）</li>\n<li>192.168.0.0~192.168.255.255（支持万数量级设备）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>外网地址</p>\n<ul>\n<li>全球范围使用</li>\n<li>全球公网唯一</li>\n</ul>\n</li>\n<li><p>网络地址转换NAT技术</p>\n<ul>\n<li>内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？</li>\n<li>网络地址转换NAT(Network Address Translation)</li>\n<li>NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中</li>\n<li>NAT减缓了IP地址的消耗，但是增加了网络通信的复杂度</li>\n<li>端口(Port)号</li>\n<li>端口映射表：NA(P)T表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据传输方向</th>\n<th>旧的地址和端口号</th>\n<th>新的地址与端口号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>出</td>\n<td>92.168.2.11:6666</td>\n<td>173.21.59.10:16666</td>\n</tr>\n<tr>\n<td>出</td>\n<td>192.168.2.10:7777</td>\n<td>173.21.59.10:17777</td>\n</tr>\n<tr>\n<td>入</td>\n<td>173.21.59.10:16666</td>\n<td>192.168.2.11:6666</td>\n</tr>\n<tr>\n<td>入</td>\n<td>173.21.59.10:17777</td>\n<td>192.168.2.10:7777</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"4-9-ICMP协议详解\"><a href=\"#4-9-ICMP协议详解\" class=\"headerlink\" title=\"4.9 ICMP协议详解\"></a>4.9 ICMP协议详解</h3><ul>\n<li><p>网际控制报文协议（Internet Control Message Protocol）</p>\n</li>\n<li><p>ICMP协议可以报告错误信息或者异常情况，辅助IP协议</p>\n</li>\n<li><p>网络层  【IP首部】-【 IP数据报的数据】</p>\n</li>\n<li><p>【IP首部】协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP、ICMP等）</p>\n</li>\n<li><p>ICMP数据封装在【 IP数据报的数据】里面</p>\n</li>\n<li><p>【ICMP报文首部】-【 ICMP报文数据】</p>\n</li>\n<li><p>8位类型+ 8位代码 +16位校验和+ICMP报文数据</p>\n</li>\n<li><p>分类</p>\n<ul>\n<li>差错报告报文 </li>\n<li>询问报文</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>ICMP报文种类</th>\n<th>类型的值</th>\n<th>报文类型</th>\n<th>具体代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>差错报告报文</td>\n<td>3 (终点不可达）</td>\n<td>网络不可达 / 主机不可达</td>\n<td>0/1</td>\n</tr>\n<tr>\n<td></td>\n<td>5 (重定向）</td>\n<td>对网络重定向 / 对主机重定向</td>\n<td>0/1</td>\n</tr>\n<tr>\n<td></td>\n<td>11</td>\n<td>传输超时</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>12</td>\n<td>坏的IP头 / 缺少其他必要参数</td>\n<td>0/1</td>\n</tr>\n<tr>\n<td>询问报文</td>\n<td>0或8</td>\n<td>回送(Echo)请求或应答</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>13或14</td>\n<td>时间戳(Timestamp)请求或应答</td>\n<td>-</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>ICMP报文的应用</p>\n<ul>\n<li>Ping应用<ul>\n<li>询问报文-0或8 - 回送(Echo)请求或应答</li>\n<li>Ping回环地址127.0.0.1,如果失败计算机的协议栈可能出问题，需要重装操作系统</li>\n<li>Ping网关地址，如果失败，网关路由器可能出问题</li>\n<li>Ping远端地址，如果失败，家到ISP服务商之间可能出问题了，需要找服务商解决</li>\n</ul>\n</li>\n<li>Traceroute应用<ul>\n<li>Traceroute可以探测IP数据报在网络中走过的路径</li>\n<li>【IP首部】TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文–ICMP终点不可达差错报文</li>\n<li>命令：Windows：tracert github.com ，Mac：traceroute to github.com <ul>\n<li><strong>221.179.159.20来自北京市北京 移动</strong></li>\n<li><strong>111.24.3.17来自 移动</strong></li>\n<li><strong>223.119.2.21来自香港 移动</strong></li>\n<li><strong>52.93.11.39来自新加坡 亚马逊云</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-10-网络层的路由概述\"><a href=\"#4-10-网络层的路由概述\" class=\"headerlink\" title=\"4.10 网络层的路由概述\"></a>4.10 网络层的路由概述</h3><ul>\n<li><p>路由表问题</p>\n<ul>\n<li>路由表是怎么来的</li>\n<li>下一跳地址是唯一的吗？</li>\n<li>下一跳地址是怎么来的？</li>\n<li>下一跳地址是最佳的吗？</li>\n<li>路由器怎么多，他们是怎么协同工作的？</li>\n<li>需要一个好的算法去解决这些事情</li>\n</ul>\n</li>\n<li><p>路由算法</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171345.jpg\" alt=\"\"></p>\n<ul>\n<li>每一条边表示一条网络路径</li>\n<li>每一顶点表示一个网络、路由器或计算机</li>\n<li>路由算法实际上是图论的算法</li>\n<li>网络环境复杂，路由算法要比图论的算法要复杂</li>\n<li>路由算法具备哪些特性<ul>\n<li>算法是正确的、 完整的</li>\n<li>算法在计算上应该尽可能的简单</li>\n<li>算法可以适应网络中的变化</li>\n<li>算法是稳定的和公平的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-11-自治系统-AS\"><a href=\"#4-11-自治系统-AS\" class=\"headerlink\" title=\"4.11 自治系统(AS)\"></a>4.11 自治系统(AS)</h3><ul>\n<li>对互联网进行划分<ul>\n<li>互联网的规模是非常大的</li>\n<li>互联网环境是非常复杂的</li>\n<li>自治系统(Autonomous System)</li>\n<li>自治系统内部路由的协议称为：内部网关协议(RIP、 OSPF)</li>\n<li>自治系统外部路由的协议称为：外部网关协议(BGP)</li>\n<li>两个内部网关协议需要通过外部网关协议进行通讯</li>\n</ul>\n</li>\n<li>一个自治系统(AS)是处于一个管理机构下的网络设备群</li>\n<li>AS内部网络自行管理， AS对外提供一个或者多个出（入）口</li>\n</ul>\n<h3 id=\"4-12-内部网关路由协议之RIP协议\"><a href=\"#4-12-内部网关路由协议之RIP协议\" class=\"headerlink\" title=\"4.12 内部网关路由协议之RIP协议\"></a>4.12 内部网关路由协议之RIP协议</h3><ul>\n<li><p>距离矢量(DV)算法</p>\n<ul>\n<li>DV=Distance vector</li>\n<li>每一个节点使用两个向量𝐷𝑖和S𝑖</li>\n<li>𝐷𝑖描述的是当前节点到别的节点的距离</li>\n<li>S𝑖描述的是当前节点到别的节点的下一节点</li>\n<li>每一个节点与相邻的节点交换向量𝐷𝑖和S𝑖的信息</li>\n<li>每一个节点根据交换的信息更新自己的节点信息</li>\n<li>算法实现过程<ul>\n<li>todo</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RIP协议的过程</p>\n<ul>\n<li>RIP(Routing Information Protocol)协议</li>\n<li>RIP协议是使用DV算法的一种路由协议</li>\n<li>RIP协议把网络的跳数(hop)作为DV算法的距离</li>\n<li>RIP协议每隔30s交换一次路由信息</li>\n<li>RIP协议认为跳数&gt;15的路由则为不可达路由</li>\n<li>具体流程<ul>\n<li>路由器初始化路由信息(两个向量𝐷𝑖和S𝑖)</li>\n<li>对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）<ul>\n<li>检索本地路由，将信息中新的路由插入到路由表里面</li>\n<li>检索本地路由，对于下一跳为X的，更新为修改后的信息</li>\n<li>检索本地路由，对比相同目的的距离，如果新信息的距离更小，则更新本地路由表</li>\n</ul>\n</li>\n<li>如果3分钟没有收到相邻的路由信息，则把相邻路由设置为不可达(16跳)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RIP协议的优缺点</p>\n<ul>\n<li>故障信息传递慢</li>\n<li>RIP协议：实现简单，开销很小</li>\n<li>RIP协议：限制了网络的规模</li>\n<li>RIP协议：“坏消息传的慢”，更新收敛时间过长</li>\n</ul>\n</li>\n<li><p>Dijkstra（迪杰斯特拉）算法</p>\n<ul>\n<li>Dijkstra算法是著名的图算法</li>\n<li>Dijkstra算法解决有权图从一个节点到其他节点的最短路径问题</li>\n<li>“以起始点为中心，向外层层扩展”</li>\n<li>最短路径问题<ul>\n<li>初始化两个集合(S, U)（S为只有初始顶点点A的集合， U为其他顶点集合）</li>\n<li>如果U不为空， 对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D<ul>\n<li>将顶点D的纳入S集合</li>\n<li>更新通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）</li>\n<li>重复2步骤</li>\n</ul>\n</li>\n<li>知道U集合为空，算法完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内部网关路由协议之OSPF协议</p>\n<ul>\n<li>链路状态(LS)协议<ul>\n<li>向所有的路由器发送消息</li>\n<li>消息描述该路由器与相邻路由器的链路状态<ul>\n<li>距离、时延、带宽</li>\n</ul>\n</li>\n<li>只有链路状态发生变化时，才发送更新信息</li>\n</ul>\n</li>\n<li>OSPF协议的过程<ul>\n<li>OSPF(Open Shortest Path First：开放最短路径优先)</li>\n<li>OSPF协议的核心是Dijkstra算法</li>\n<li>向所有的路由器发送消息<ul>\n<li>获得网络中的所有信息–&gt; “网络的完整拓扑”</li>\n<li>也称为“链路状态数据库”</li>\n<li>“链路状态数据库”是全网一致的</li>\n<li>Dijkstra（迪杰斯特拉）算法</li>\n</ul>\n</li>\n<li>消息描述该路由器与相邻路由器的链路状态<ul>\n<li>OSPF协议更加客观、更加先进</li>\n</ul>\n</li>\n<li>只有链路状态发生变化时，才发送更新信息<ul>\n<li>减少了数据的交换，更快收敛</li>\n</ul>\n</li>\n<li>路由器接入网络</li>\n<li>路由器向邻居发出问候信息</li>\n<li>与邻居交流链路状态数据库</li>\n<li>广播和更新未知路由</li>\n</ul>\n</li>\n<li>五种消息类型<ul>\n<li>问候消息（Hello）</li>\n<li>链路状态数据库描述信息</li>\n<li>链路状态请求信息</li>\n<li>链路状态更新信息</li>\n<li>链路状态确认信息</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>RIP协议</th>\n<th>OSPF协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>从邻居看网络</td>\n<td>整个网络的拓扑</td>\n</tr>\n<tr>\n<td>在路由器之间累加距离</td>\n<td>Dijkstra算法计算最短路径</td>\n</tr>\n<tr>\n<td>频繁、周期更新，收敛很慢</td>\n<td>状态变化更新，收敛很快</td>\n</tr>\n<tr>\n<td>路由间拷贝路由信息</td>\n<td>路由间传递链路状态，自行计算路径</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"4-13-外部网关路由协议之BGP协议\"><a href=\"#4-13-外部网关路由协议之BGP协议\" class=\"headerlink\" title=\"4.13 外部网关路由协议之BGP协议\"></a>4.13 外部网关路由协议之BGP协议</h3><ul>\n<li>BGP(Border Gateway Protocol: 边际网关协议)</li>\n<li>BGP协议是运行在自制系统(AS)之间的一种协议</li>\n<li>互联网的规模很大</li>\n<li>AS内部使用不同的路由协议</li>\n<li>AS之间需要考虑除网络特性以外的一些因素（政治、安全…）</li>\n<li>BGP协议能够找到一条到达目的比较好的路由</li>\n<li>BGP发言人(speaker)<ul>\n<li>BGP并不关心内部网络拓扑</li>\n<li>AS之间通过BGP发言人交流信息</li>\n<li>BGP Speaker可以人为配置策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-传输层\"><a href=\"#5-传输层\" class=\"headerlink\" title=\"5.传输层\"></a>5.传输层</h2><h3 id=\"5-1-传输层的主要功能\"><a href=\"#5-1-传输层的主要功能\" class=\"headerlink\" title=\"5.1 传输层的主要功能\"></a>5.1 传输层的主要功能</h3><ul>\n<li><p>本质：跨设备的进程与进程的通信</p>\n<ul>\n<li>单机进程间通信方式：共享内存、Unix域套接字</li>\n</ul>\n</li>\n<li><p>端口的概念</p>\n<ul>\n<li>使用端口(Port)来标记不同的网络进程</li>\n<li>端口(Port)使用16比特位表示(0~65535)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>FTP</th>\n<th>HTTP</th>\n<th>HTTPS</th>\n<th>DNS</th>\n<th>TELNET</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>21</td>\n<td>80</td>\n<td>443</td>\n<td>53</td>\n<td>23</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"5-2-UDP协议详解\"><a href=\"#5-2-UDP协议详解\" class=\"headerlink\" title=\"5.2 UDP协议详解\"></a>5.2 UDP协议详解</h3><ul>\n<li>UDP是一个非常简单的协议</li>\n<li>UDP(User Datagram Protocol: 用户数据报协议)</li>\n<li>数据报(Datagram)<ul>\n<li>不合并 不拆分</li>\n</ul>\n</li>\n<li>层次位置</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>协议层</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理层</td>\n<td>001010101001110110101010101010…10101010101010101010101010101</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>【帧首部 】【“帧”的数据】 【帧尾部】</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>【IP首部】【 IP数据报的数据】</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>【UDP首部】【 UDP数据报的数据(应用层数据)】</td>\n</tr>\n</tbody></table>\n<ul>\n<li>报文结构<ul>\n<li>16位源端口号 + 16位目的端口号</li>\n<li>16位UDP长度 + 16位UDP校验和</li>\n<li>头部报文共8个字节</li>\n<li>UDP数据</li>\n<li>各个报文字段的意义<ul>\n<li>16位源端口号<ul>\n<li>源机器使用的网络进程</li>\n</ul>\n</li>\n<li>16位目的端口号<ul>\n<li>目的机器使用的进程</li>\n</ul>\n</li>\n<li>16位UDP长度<ul>\n<li>udp数据报的长度，最小是8个字节仅包括手部</li>\n</ul>\n</li>\n<li>6位UDP校验和<ul>\n<li>检测数据报在传输过程中是否出错</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UDP的特点<ul>\n<li>UDP是无连接协议</li>\n<li>UDP不能保证可靠的交付数据，“想发就发”，“无法保证数据在网络中是否丢失”</li>\n<li>UDP是面向报文传输的</li>\n<li>UDP没有拥塞控制</li>\n<li>UDP的首部开销很小</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-TCP报文详解\"><a href=\"#5-3-TCP报文详解\" class=\"headerlink\" title=\"5.3 TCP报文详解\"></a>5.3 TCP报文详解</h3><ul>\n<li>TCP(Transmission Control Protocol: 传输控制协议)</li>\n<li>TCP协议是计算机网络中非常复杂的一个协议</li>\n<li>层次位置</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>协议层</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理层</td>\n<td>001010101001110110101010101010…10101010101010101010101010101</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>【帧首部 】【“帧”的数据】 【帧尾部】</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>【IP首部】【 IP数据报的数据】</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>【TCP首部】【 TCP数据报的数据 】</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>特点</p>\n<ul>\n<li>TCP是面向连接的协议</li>\n<li>TCP的一个连接有两端（点对点通信）</li>\n<li>TCP提供可靠的传输服务</li>\n<li>TCP协议提供全双工的通信</li>\n<li>TCP是面向字节流的协议，合并、分拆</li>\n</ul>\n</li>\n<li><p>报文结构</p>\n<ul>\n<li><p>16位源端口 16位目的端口</p>\n</li>\n<li><p>32位序号</p>\n</li>\n<li><p>32位确认号</p>\n</li>\n<li><p>数据偏移 +保留字段 +TCP标记 +窗口</p>\n</li>\n<li><p>16位校验和 + 16位紧急指针</p>\n</li>\n<li><p>以上行固定20个字节</p>\n</li>\n<li><p>TCP选项（可选）+ 填充</p>\n</li>\n<li><p>各个报文字段的意义</p>\n<ul>\n<li><p>16位源端口号</p>\n<ul>\n<li>源机器使用的网络进程</li>\n</ul>\n</li>\n<li><p>16位目的端口号</p>\n<ul>\n<li>目的机器使用的进程</li>\n</ul>\n</li>\n<li><p>32位序号</p>\n<ul>\n<li>0~2^32-1</li>\n<li>面向字节流，一个字节一个序号</li>\n<li>数据首字节序号</li>\n</ul>\n</li>\n<li><p>32位确认号</p>\n<ul>\n<li>0~2^32-1</li>\n<li>一个字节一个序号</li>\n<li>期望收到数据的首字节序号</li>\n<li>确认号为N：则表示N-1序号的数据都已经收到</li>\n</ul>\n</li>\n<li><p>数据偏移</p>\n<ul>\n<li>占4位： 0~15，单位为： 32位字</li>\n<li>数据偏离首部的距离</li>\n</ul>\n</li>\n<li><p>保留字段</p>\n</li>\n<li><p>TCP标记</p>\n<ul>\n<li>占6位，每位各有不同意义</li>\n<li>TCP三次握手和四次挥手会用到这里的标记为</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>URG</td>\n<td>Urgent: 紧急位， URG=1，表示紧急数据</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgement: 确认位， ACK=1，确认号才生效</td>\n</tr>\n<tr>\n<td>PSH</td>\n<td>Push: 推送位， PSH=1，尽快地把数据交付给应用层</td>\n</tr>\n<tr>\n<td>RST</td>\n<td>Reset: 重置位， RST=1，重新建立连接</td>\n</tr>\n<tr>\n<td>SYN</td>\n<td>Synchronization: 同步位， SYN=1 表示连接请求报文</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>Finish: 终止位， FIN=1 表示释放连接</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>窗口</p>\n<ul>\n<li>占16位： 0~2^16-1</li>\n<li>窗口指明允许对方发送的数据量</li>\n<li>确认号是500，窗口大小1000，则501-1500是可以接收的</li>\n</ul>\n</li>\n<li><p>16位校验和 </p>\n</li>\n<li><p>16位紧急指针</p>\n<ul>\n<li>紧急数据（URG=1）</li>\n<li>指定紧急数据在报文的位置</li>\n</ul>\n</li>\n<li><p>TCP选项（可选）</p>\n<ul>\n<li>最多40字节</li>\n<li>支持未来的拓展</li>\n</ul>\n</li>\n<li><p>填充</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-TCP可靠传输的基本原理\"><a href=\"#5-4-TCP可靠传输的基本原理\" class=\"headerlink\" title=\"5.4 TCP可靠传输的基本原理\"></a>5.4 TCP可靠传输的基本原理</h3><ul>\n<li><p>停止等待协议</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171526.jpg\" alt=\"\"></p>\n<ul>\n<li>无差错的情况</li>\n<li>出差错的情况<ul>\n<li>发送的消息在路上丢失了</li>\n<li>确认的消息在路上丢失了</li>\n<li>确认的消息很久才到</li>\n<li>超时重传</li>\n<li>超时重传计时器<ul>\n<li>每发送一个消息，都需要设置一个定时器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>停止等待协议是最简单的可靠传输协议</li>\n<li>停止等待协议对信道的利用效率不高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>连续ARQ协议</p>\n<ul>\n<li>ARQ(Automatic Repeat reQuest：自动重传请求)</li>\n<li>既然单个发送和确认效率低，可不可以批量发送和确认？</li>\n<li>滑动窗口<ul>\n<li>固定窗口内的字节批量发出，确认几个窗口就向后滑动几个</li>\n</ul>\n</li>\n<li>累计确认<ul>\n<li>只要收到某个消息的确认，那么这个消息之前的消息都确认了</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-5-TCP协议的可靠传输\"><a href=\"#5-5-TCP协议的可靠传输\" class=\"headerlink\" title=\"5.5 TCP协议的可靠传输\"></a>5.5 TCP协议的可靠传输</h3><ul>\n<li>TCP的可靠传输基于连续ARQ协议</li>\n<li>TCP的滑动窗口以字节为单位</li>\n<li>滑动窗口<ul>\n<li>【已经确认的字节序号】-【窗口】-【不允许发送的字节序号】</li>\n<li>窗口中的字节数据：已发送未确认+可用窗口</li>\n<li>如果没有按顺序收到窗口开始的确认，只收到中间的确认消息，窗口不滑动，执行超时重传</li>\n<li>选择重传<ul>\n<li>选择重传需要指定需要重传的字节</li>\n<li>每一个字节都有唯一的32位序号</li>\n<li>存储在TCP选项（可选）</li>\n<li>最多40个字节，序号展4个字节，最多10个序号，每个序号表示的某段的起止位置，分段传输</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-6-TCP协议的流量控制\"><a href=\"#5-6-TCP协议的流量控制\" class=\"headerlink\" title=\"5.6 TCP协议的流量控制\"></a>5.6 TCP协议的流量控制</h3><ul>\n<li>流量控制指让发送方发送速率不要太快</li>\n<li>流量控制是使用滑动窗口来实现的</li>\n<li>流量控制流程<ul>\n<li><strong>窗口（rwnd）</strong>指明允许对方发送的数据量，Receiver window</li>\n<li><strong>序号（seq）</strong>用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则TCP用序号对每个字节进行计数。序号是32bit的无符号数，序号到达232－1后又从0开始。sequence</li>\n<li><strong>确认序号（ack）</strong> 是上次已成功收到数据字节序号加1。只有ACK标志位为1时确认序号字段才有效。acknowledgement </li>\n<li><strong>确认位（ACK）</strong>  Acknowledgement: 确认位， ACK=1，确认号才生效</li>\n<li>发送方：发送100字节的数据（seq=1, DATA）</li>\n<li>发送方：发送100字节的数据（seq=101, DATA）</li>\n<li>-&gt;接收方：确认200字节的数据，并告诉对方窗口为300（ACK=1, ack=201, rwnd=300）</li>\n<li>发送方：发送100字节的数据（seq=301, DATA）</li>\n<li>发送方：发送200字节的数据（seq=401, DATA）</li>\n<li>-&gt;接收方：确认300字节的数据，并告诉对方窗口为0（ACK=1, ack=601, rwnd=0）</li>\n<li>-&gt;接收方想再次接受数据需要发送窗口大小给发送方</li>\n<li>如果这个窗口调整请求出错了会产生死锁吗</li>\n<li>坚持定时器来避免死锁的情况</li>\n</ul>\n</li>\n<li>坚持定时器<ul>\n<li>当接收到窗口为0的消息，则启动坚持定时器</li>\n<li>坚持定时器每隔一段时间发送一个窗口探测报文</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-7-TCP协议的拥塞控制\"><a href=\"#5-7-TCP协议的拥塞控制\" class=\"headerlink\" title=\"5.7 TCP协议的拥塞控制\"></a>5.7 TCP协议的拥塞控制</h3><ul>\n<li>一条数据链路经过非常多的设备</li>\n<li>数据链路中各个部分都有可能成为网路传输的瓶颈</li>\n<li>拥塞控制 VS 流量控制<ul>\n<li>流量控制考虑点对点的通信量的控制</li>\n<li>拥塞控制考虑整个网络，是全局性的考虑</li>\n</ul>\n</li>\n<li>拥塞判断：报文超时可以认为是拥塞</li>\n<li>拥塞控制算法<ul>\n<li>慢启动算法<ul>\n<li>由小到大逐渐增加发送数据量</li>\n<li>每收到一个报文确认，就加一，例如：1 2 4 8 16 （指数增长）</li>\n<li>慢启动阈值(ssthresh)</li>\n</ul>\n</li>\n<li>拥塞避免算法<ul>\n<li>维护一个拥塞窗口的变量，大于慢启动阈值</li>\n<li>只要网络不拥塞，就试探着拥塞窗口调大，17 18 19</li>\n<li>最大限度的利用管道</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171603.jpg\" alt=\"\"></p>\n<h3 id=\"5-8-TCP连接的建立\"><a href=\"#5-8-TCP连接的建立\" class=\"headerlink\" title=\"5.8 TCP连接的建立\"></a>5.8 TCP连接的建立</h3><ul>\n<li>TCP标记：占6位，每位各有不同意义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>Synchronization: 同步位， SYN=1 表示连接请求报文</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgement: 确认位， ACK=1，确认号才生效</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>Finish: 终止位， FIN=1 表示释放连接</td>\n</tr>\n<tr>\n<td>seq</td>\n<td>sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位</td>\n</tr>\n<tr>\n<td>ack</td>\n<td>acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位</td>\n</tr>\n</tbody></table>\n<ul>\n<li>三次握手建立TCP连接的过程<ul>\n<li>接收方：监听</li>\n<li>发送方：SYN=1, seq=x</li>\n<li>发送方：同步已发送</li>\n<li>接收方：SYN=1, ACK=1, seq=y, ack=x+ 1</li>\n<li>接收方：同步已接受</li>\n<li>发送方：ACK=1, seq=x+ 1, ack=y+1</li>\n<li>发送方：建立连接</li>\n<li>接收方：建立连接</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171620.jpg\" alt=\"\"></p>\n<ul>\n<li>为什么需要三次握手<ul>\n<li>避免已经失效的连接请求报文传送到对方， 引起错误</li>\n<li>避免两次建立连接时多次连接的情况</li>\n<li>第三次握手时，发送方可以检查是否已经发起了第三次，如果已经发起了就忽略其它超时的连接</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801172608.jpg\" alt=\"\"></p>\n<ul>\n<li>TCP三次握手 <ul>\n<li>使用TCP协议进行通信的双方必须先建立连接，然后才能开始传输数据。为了确保连接双方可靠性，在双方建立连接时, TCP协议采用了三次握手策略。</li>\n<li>第一次握手:客户端发送带有SYN标志的连接请求报文段，然后进入SYN SEND )状态，等待服务端的确认。</li>\n<li>第二次握手:服务端接收到客户端的SYN报文段后需要发送ACK信息对这个SYN报文段进行确认。同时，还要发送自己的SYN请求信息。服务端会将上述的信息放到一个报文段(SYN+ ACK报文段)中，一并发送给客户端此时服务端将会进入SYN RECV状态。</li>\n<li>第三次握手:客户端接收到服务端的SYN+ ACK报文段后,会想服务端发送ACK确认报文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED状态,完成TCP三次握手。</li>\n</ul>\n</li>\n<li>为什么需要第三次<ul>\n<li>确认双方的收发能力，一共八个能力：自己的收发和对方的收发</li>\n<li>第一次：服务端能知道客户端的发送和自己的接收能力正常</li>\n<li>第二次：客户端能知道服务端的接收（第一次）和发送能力和自己的发送（第一次）能力和接收能力都正常</li>\n<li>第三次：服务端能知道客户端的接收（第二次）和自己的发送（第二次）能力正常</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-9-TCP连接的释放\"><a href=\"#5-9-TCP连接的释放\" class=\"headerlink\" title=\"5.9 TCP连接的释放\"></a>5.9 TCP连接的释放</h3><ul>\n<li>TCP标记：占6位，每位各有不同意义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>Synchronization: 同步位， SYN=1 表示连接请求报文</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgement: 确认位， ACK=1，确认号才生效</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>Finish: 终止位， FIN=1 表示释放连接</td>\n</tr>\n<tr>\n<td>seq</td>\n<td>sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位</td>\n</tr>\n<tr>\n<td>ack</td>\n<td>acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>四次释放</p>\n<ul>\n<li>四次释放TCP连接的过程<ul>\n<li>发送方：FIN=1,seq=u</li>\n<li>发送方：释放等待状态（FIN-WAIT-1）</li>\n<li>接收方：ACK=1,seq=v,ack=u+1</li>\n<li>发送方：释放等待状态（FIN-WAIT-2）</li>\n<li>接收方：关闭等待状态（CLOSE-WAIT）</li>\n<li>接收方：因为是被动关闭可能有未发出的数据需要继续完成发送</li>\n<li>接收方：FIN=1,ACK=1,seq=w,ack=u+1</li>\n<li>接收方：最后确认状态（LAST-ACK）</li>\n<li>发送方：ACK=1,seq=u+1,ack=w+1</li>\n<li>发送方：等待计时（TIME-WAIT）</li>\n<li>接收方：关闭状态</li>\n<li>发送方：关闭状态</li>\n</ul>\n</li>\n<li>等待计时器<ul>\n<li>等待时间：2MSL<ul>\n<li>MSL(Max Segment Lifetime): 最长报文段寿命</li>\n<li>MSL建议设置为2分钟</li>\n</ul>\n</li>\n<li>为什么需要等待2MSL？<ul>\n<li>确保发送方的ACK可以到达接收方</li>\n<li>最后一个报文没有确认</li>\n<li>接收方在 2MSL时间内没有收到，则接收方会重发确认释放请求数据报</li>\n<li>确保当前连接的所有报文都已经过期</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171643.jpg\" alt=\"\"></p>\n<h3 id=\"5-10-套接字与套接字编程\"><a href=\"#5-10-套接字与套接字编程\" class=\"headerlink\" title=\"5.10 套接字与套接字编程\"></a>5.10 套接字与套接字编程</h3><ul>\n<li>使用端口(Port)来标记不同的网络进程，端口(Port)使用16比特位表示(0~65535)</li>\n<li>网络套接字<ul>\n<li>𝐼𝑃: 𝑃𝑜𝑟𝑡—— 套接字</li>\n<li>套接字(Socket)是抽象概念，表示TCP连接的一端</li>\n<li>通过套接字可以进行数据发送或接收</li>\n<li>TCP连接由两个套接字组成：TCP={ 𝑆𝑜𝑐𝑘𝑒𝑡1: 𝑆𝑜𝑐𝑘𝑒𝑡2}= { {𝐼𝑃: 𝑃𝑜𝑟𝑡}  { 𝐼𝑃: 𝑃𝑜𝑟𝑡} }</li>\n<li>客户端 –TCP连接—服务端</li>\n<li>服务端<ul>\n<li>创建套接字</li>\n<li>绑定(bind)套接字</li>\n<li>监听(listen)套接字</li>\n<li>接收&amp;处理信息</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>创建套接字</li>\n<li>连接套接字</li>\n<li>发送信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>客户端-服务端编程<ul>\n<li>Java、Pathy</li>\n</ul>\n</li>\n<li>网络套接字 VS 域套接字<ul>\n<li>域套接字：域套接字文件，不会经过tcp/ip协议簇，单机跨进程建议使用</li>\n<li>网络套接字：单机和跨机都会在tcp/ip协议栈走一圈，单机跨进程不建议使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-应用层\"><a href=\"#6-应用层\" class=\"headerlink\" title=\"6.应用层\"></a>6.应用层</h2><h3 id=\"6-1-应用层概述\"><a href=\"#6-1-应用层概述\" class=\"headerlink\" title=\"6.1 应用层概述\"></a>6.1 应用层概述</h3><ul>\n<li>传输层以及以下的层提供完整的通信服务</li>\n<li>应用层是面向用户的一层</li>\n<li>已有的应用层软件 ，面向传输层的编程</li>\n<li>UDP<ul>\n<li>多媒体信息分发<ul>\n<li>视频 语音 实时信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>TCP<ul>\n<li>可靠消息传输<ul>\n<li>金融交易 可靠通讯 MQ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-应用层主要功能\"><a href=\"#6-2-应用层主要功能\" class=\"headerlink\" title=\"6.2 应用层主要功能\"></a>6.2 应用层主要功能</h3><ul>\n<li>应用进程的报文类型（请求报文、应答报文）</li>\n<li>报文的语法、格式</li>\n<li>应用进程发送数据的时机、规则</li>\n<li>定义应用间通讯的规则</li>\n</ul>\n<h3 id=\"6-3-DNS服务详解\"><a href=\"#6-3-DNS服务详解\" class=\"headerlink\" title=\"6.3 DNS服务详解\"></a>6.3 DNS服务详解</h3><ul>\n<li><p>DNS（Domain Name System: 域名系统）</p>\n<ul>\n<li>域：Domain，网络端，自治域</li>\n<li>名：Name，IP地址</li>\n</ul>\n</li>\n<li><p>主机的进程：Web 服务、网络存储服务、远程调用服务、邮件服务</p>\n</li>\n<li><p>IP地址+端口：14.215.177.39:80 、14.18.245.164:25、161.23.37.215:8810</p>\n</li>\n<li><p>DNS的功能</p>\n<ul>\n<li>使用域名帮助记忆<ul>\n<li>点分十进制转为人容易记忆的单词</li>\n<li>域名–&gt;DNS服务–&gt;IP</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>域名详解</p>\n<ul>\n<li><p>域名由点、字母和数字组成</p>\n</li>\n<li><p>点分割不同的域</p>\n</li>\n<li><p>域名可以分为顶级域、二级域、三级域</p>\n<ul>\n<li>例如 ：www(三级域).taobao(二级域).com(顶级域)</li>\n<li>顶级域<ul>\n<li>国家<ul>\n<li>cn：中国</li>\n<li>us：美国</li>\n<li>uk：英国</li>\n<li>ca：加拿大</li>\n</ul>\n</li>\n<li>通用<ul>\n<li>com：公司</li>\n<li>net：网络服务机构</li>\n<li>gov：政府机构</li>\n<li>org：其它组织机构</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>二级域<ul>\n<li>qq、taobao、baidu、alibaba、aliyun、amazon、google、facebook</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171724.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>域名服务器</p>\n<ul>\n<li>一般由国际或者机构搭建</li>\n<li>查询过程<ul>\n<li>本地查询，有就返回</li>\n<li>没有去查根域名服务器</li>\n<li>根域名服务器告诉去查哪一个顶级域名服务器</li>\n<li>顶级域名服务器查到后告诉哪一个域名服务器</li>\n<li>如果域名服务器没找到会返回根域名服务器再次查找</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171736.jpg\" alt=\"\"></p>\n</li>\n<li><p>DNS域名解析</p>\n<ul>\n<li>通常我们访问一一个网站，使用的是主机名或者域名来进行访问的。因为相对于IP地址(一组纯数字)，域名更容易让人记住。但TCP/IP协议使用的是IP地址进行访问的，所以必须有个机制或服务把域名转换成IP地址。DNS服务就是用来解决这个问题的，它提供域名到IP地址之间的解析服务。</li>\n<li>用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户</li>\n</ul>\n</li>\n<li><p>DNS解析流程</p>\n<ul>\n<li>就近原则</li>\n<li>本机host文件</li>\n<li>本机dns服务</li>\n<li>远程13台根域名服务</li>\n<li>转发模式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-4-DHCP协议详解\"><a href=\"#6-4-DHCP协议详解\" class=\"headerlink\" title=\"6.4 DHCP协议详解\"></a>6.4 DHCP协议详解</h3><ul>\n<li>DHCP是什么<ul>\n<li>DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)</li>\n<li>DHCP是一个局域网协议</li>\n<li>DHCP是应用UDP协议的应用层协议</li>\n</ul>\n</li>\n<li>DHCP的功能<ul>\n<li>即插即用联网<ul>\n<li>临时IP，内网地址，转换为外网</li>\n<li>租期，租期到了会回收</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DHCP的工作机制<ul>\n<li>DHCP服务器监听默认端口： 67</li>\n<li>主机使用UDP协议广播DHCP发现报文</li>\n<li>DHCP服务器发出DHCP提供报文</li>\n<li>主机向DHCP服务器发出DHCP请求报文</li>\n<li>DHCP服务器回应并提供IP地址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-5-HTTP协议详解\"><a href=\"#6-5-HTTP协议详解\" class=\"headerlink\" title=\"6.5 HTTP协议详解\"></a>6.5 HTTP协议详解</h3><ul>\n<li><p>HTTP是什么</p>\n<ul>\n<li>HTTP(HyperText Transfer Protocol: 超文本传输协议)</li>\n<li>超文本： “超级文本”， “带超链接文本”，“富文本”</li>\n<li>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;，例如：<a href=\"https://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/</a></li>\n<li>HTTP协议是可靠的数据传输协议<ul>\n<li>Web内容：文本 图片 文件 动图 音频 视频</li>\n</ul>\n</li>\n<li>C/S: 客户端—&gt;HTTP协议—-&gt; 服务端</li>\n</ul>\n</li>\n<li><p>Web服务器</p>\n<ul>\n<li><p>硬件部分 ：阿里云虚拟服务器、迷你计算机</p>\n</li>\n<li><p>软件部分：Apache、Nginx</p>\n<ul>\n<li><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</li>\n<li>Apache(音译为阿帕奇)是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。</li>\n</ul>\n</li>\n<li><p>工作机制</p>\n<ul>\n<li>接受客户端连接 </li>\n<li>接收请求报文 </li>\n<li>处理请求</li>\n<li>访问Web资源</li>\n<li>构造应答</li>\n<li>发送应答</li>\n</ul>\n</li>\n<li><p>HTTP请求方法</p>\n<ul>\n<li>GET：获取指定的服务端资源</li>\n<li>POST：提交数据到服务端</li>\n<li>DELETE：删除指定的服务端资源</li>\n<li>UPDATE：更新指定的服务端资源</li>\n<li>PUT</li>\n<li>OPTIONS</li>\n<li>PATCH</li>\n<li>HEAD</li>\n<li>TRACE</li>\n</ul>\n</li>\n<li><p>HTTP指定资源</p>\n<ul>\n<li>在地址中指定</li>\n<li>在请求数据中指定</li>\n</ul>\n</li>\n<li><p>HTTP请求报文</p>\n<ul>\n<li>[请求方法] [请求地址] [HTTP版本]</li>\n<li>[请求头]</li>\n<li>[请求内容]</li>\n</ul>\n</li>\n<li><p>HTTP应答报文</p>\n<ul>\n<li>[HTTP版本] [状态码] [状态解释]</li>\n<li>[应答头]</li>\n<li>[应答内容]</li>\n</ul>\n</li>\n<li><p>HTTP应答状态码</p>\n<ul>\n<li>状态码 含义<br>200<del>299 成功状态码<br>300</del>399 重定向状态码<br>400<del>499 客户端错误状态码<br>500</del>599 服务端错误状态码</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200~299</td>\n<td>成功状态码</td>\n</tr>\n<tr>\n<td>300~399</td>\n<td>重定向状态码</td>\n</tr>\n<tr>\n<td>400~499</td>\n<td>客户端错误状态码</td>\n</tr>\n<tr>\n<td>500~599</td>\n<td>服务端错误状态码</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-6-HTTP工作的结构\"><a href=\"#6-6-HTTP工作的结构\" class=\"headerlink\" title=\"6.6 HTTP工作的结构\"></a>6.6 HTTP工作的结构</h3><ul>\n<li>Web代理<ul>\n<li>正向代理</li>\n<li>反向代理</li>\n</ul>\n</li>\n<li>CDN<ul>\n<li>CDN（Content Delivery Network：内容分发网络）</li>\n<li>多媒体内容</li>\n</ul>\n</li>\n<li>爬虫<ul>\n<li>增加网络拥塞</li>\n<li>损耗服务器资源</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-7-HTTPS协议详解\"><a href=\"#6-7-HTTPS协议详解\" class=\"headerlink\" title=\"6.7 HTTPS协议详解\"></a>6.7 HTTPS协议详解</h3><ul>\n<li>敏感信息：账号密码、个人信息、账户金额、交易信息、敏感信息…</li>\n<li>HTTPS(Secure)是安全的HTTP协议</li>\n<li>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;，端口：443</li>\n<li>工作机制<ul>\n<li>加密模型<ul>\n<li>对称加密：使用秘钥加密 ，使用秘钥解密，两个秘钥“一致”</li>\n<li>非对称加密：两个秘钥“不一致”<ul>\n<li>A、 B是拥有一定数学关系的一组秘钥</li>\n<li>私钥：私钥自己使用，不对外公开</li>\n<li>公钥：公钥给大家使用，对外公开</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数字证书<ul>\n<li>数字证书是可信任组织颁发给特定对象的认证</li>\n<li>证书格式、版本号</li>\n<li>证书序列号</li>\n<li>签名算法</li>\n<li>有效期</li>\n<li>对象名称</li>\n<li>对象公开秘钥</li>\n</ul>\n</li>\n<li>SSL<ul>\n<li>SSL(Secure Sockets Layer: 安全套接层)</li>\n<li>SSL位于传输层与应用层之间</li>\n<li>数据安全和数据完整</li>\n<li>对传输层数据进行加密后传输</li>\n</ul>\n</li>\n<li>HTTPS工作流程<ul>\n<li>443端口的TCP连接</li>\n<li>SSL安全参数握手</li>\n<li>客户端发送数据</li>\n<li>服务端发送数据</li>\n</ul>\n</li>\n<li>SSL安全参数握手过程<ul>\n<li>客户端：随机数1、协议版本、加密算法</li>\n<li>服务端：确定加密算法、数字证书、随机数2</li>\n<li>客户端：<ul>\n<li>确认证书是否有效</li>\n<li>生成随机数3</li>\n<li>使用服务器的公钥加密随机数3</li>\n</ul>\n</li>\n<li>根据随机数1、 2、 3和相同的算法生成对称秘钥</li>\n<li>双方使用对称秘钥进行加密通信</li>\n<li>综合使用对称加密、非对称加密</li>\n<li>双方分别生成秘钥，没有经过传输</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-8-输入域名按下回车键的过程有哪些\"><a href=\"#6-8-输入域名按下回车键的过程有哪些\" class=\"headerlink\" title=\"6.8 输入域名按下回车键的过程有哪些\"></a>6.8 输入域名按下回车键的过程有哪些</h3><ul>\n<li>域名解析<ul>\n<li>客户端生成DNS的UDP报文</li>\n<li>查询本机配置的DNS IP地址</li>\n<li>UDP报文经本机协议栈发送出去</li>\n<li>网络层 数据链路层 物理层</li>\n<li>请求顶级域名服务器</li>\n</ul>\n</li>\n<li>建立连接<ul>\n<li>TCP三次握手</li>\n<li>SSL握手 交换秘钥</li>\n</ul>\n</li>\n<li>HTTP通信<ul>\n<li>GET</li>\n</ul>\n</li>\n<li>释放连接<ul>\n<li>四次挥手 结束连接</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-HTTP协议详解\"><a href=\"#7-HTTP协议详解\" class=\"headerlink\" title=\"7.HTTP协议详解\"></a>7.HTTP协议详解</h2><h3 id=\"7-1-浏览器背后的故事\"><a href=\"#7-1-浏览器背后的故事\" class=\"headerlink\" title=\"7.1 浏览器背后的故事\"></a>7.1 浏览器背后的故事</h3><ul>\n<li><a href=\"http://www.basedev.cn/\">http://www.basedev.cn/</a></li>\n<li>用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户</li>\n<li>HTTP<ul>\n<li>超文本传输协议(HTTP)是一-种通信协议， 它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器</li>\n<li>HTTP是- -个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展</li>\n</ul>\n</li>\n<li>Web与HTTP<ul>\n<li>WEB是一种基于超文本和HTTP的、 全球性的、动态交互的、跨平台的分布式图形信息系统</li>\n<li>建立在Internet上的一种网络服务，为浏览者在Internet.上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超，级链接将Internet上的信息节点组织成一个互为关联的网状结构</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-2-HTTP协议的前世今生\"><a href=\"#7-2-HTTP协议的前世今生\" class=\"headerlink\" title=\"7.2 HTTP协议的前世今生\"></a>7.2 HTTP协议的前世今生</h3><ul>\n<li>1990年10月万维网之父TimBerners-Lee最早提出了HTTP协议</li>\n<li>1991年HTTP0.9诞生</li>\n<li>1996年5月HTTP1.0发布</li>\n<li>1997年1月HTTP1.1发布</li>\n<li>2015年5月HTTP2.0提出</li>\n<li>HTTP3.0，QUIC协议</li>\n</ul>\n<h3 id=\"7-3-透过TCP-IP看HTTP\"><a href=\"#7-3-透过TCP-IP看HTTP\" class=\"headerlink\" title=\"7.3 透过TCP/IP看HTTP\"></a>7.3 透过TCP/IP看HTTP</h3><ul>\n<li>TCP/IP协议族<ul>\n<li>TCP/IP协议其实是一-系列与互联网相关联的协议集 合起来的总称</li>\n<li>分层管理是TCP/IP协议的重要特征</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>应用层一般是我们编写的应用程序,决定了向用户提供的应用服务。应用层可以通过系统调用与传输层进行通信。如: FTP、DNS、HTTP等。</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>传输层通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。</li>\n<li>在传输层有两个性质不同的协议:TCP和UDP。</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(传输路线)到达对方计算机，并把数据包传输给对方。</li>\n</ul>\n</li>\n<li>链路层.<ul>\n<li>链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件设备驱动、NIC (Network Interface Card,网络适配器)以及光纤等物理可见部分。硬件. 上的范畴均在链路层的作用范围之内。</li>\n</ul>\n</li>\n<li>数据包的封装过程</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gnqxpcdpezj30ig0aqzm8.jpg\" alt=\"\"></p>\n<ul>\n<li>http数据传输过程<ul>\n<li>发送端发送数据时，数据会从上层传输到下层，且每经过一层都会被打上该层的头部信息。</li>\n<li>接收端接收数据时，数据会从下层传输到上层，传输前会把下层的头部信息删除.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-计算机网络实践\"><a href=\"#8-计算机网络实践\" class=\"headerlink\" title=\"8.计算机网络实践\"></a>8.计算机网络实践</h2><h3 id=\"8-1-网络嗅探工具\"><a href=\"#8-1-网络嗅探工具\" class=\"headerlink\" title=\"8.1 网络嗅探工具\"></a>8.1 网络嗅探工具</h3><ul>\n<li><p>实现流程</p>\n<ul>\n<li>搭建服务基本框架</li>\n<li>Python操作字节序列<ul>\n<li>字节序<ul>\n<li>255 = 00000000,11111111</li>\n<li>大端字节序：高位在前，00000000,11111111<ul>\n<li>网络，易读</li>\n</ul>\n</li>\n<li>小端字节序：高位在后，11111111, 00000000<ul>\n<li>主机，CPU对小端字节序处理效率高效</li>\n</ul>\n</li>\n<li>计算机电路先处理低位字节效率比较高</li>\n<li>人类习惯读写大端字节序</li>\n</ul>\n</li>\n<li>格式字符<ul>\n<li>%s 字符串，%d 整数，%x 十六进制，%f 浮点数</li>\n<li>格式字符 C++/Python类型 标准大小（字节）</li>\n<li>B-unsigned char/整数 1</li>\n<li>H unsigned short/整数 2</li>\n<li>L unsigned long/整数 4</li>\n<li>s char[]/字节串 </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实现IP报文解析器</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801173224.jpg\" alt=\"\"></p>\n<ul>\n<li>实现UDP报文解析器</li>\n<li>实现TCP报文解析器</li>\n</ul>\n</li>\n<li><p>网卡模式</p>\n<ul>\n<li>混杂模式 <ul>\n<li>接受所有经过网卡设备的数据 </li>\n</ul>\n</li>\n<li>非混杂模式<ul>\n<li>只接受目的地址指向自己的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>IP报文解析</p>\n</li>\n<li><p>TCP报文解析</p>\n</li>\n<li><p>UDP报文解析</p>\n</li>\n<li><p>从零到一实现HTTP服务器开发</p>\n</li>\n</ul>\n<h2 id=\"9-关于我\"><a href=\"#9-关于我\" class=\"headerlink\" title=\"9.关于我\"></a>9.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p>\n<p><a href=\"http://basedev.cn/\" target=\"_blank\" rel=\"noopener\">个人网站 basedev.cn</a>  </p>\n<p><a href=\"https://github.com/jaydroid1024\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p>\n<h2 id=\"10-参考\"><a href=\"#10-参考\" class=\"headerlink\" title=\"10.参考\"></a>10.参考</h2><p><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&amp;courseId=478&amp;lagoufrom=noapp&amp;sharetype=wx_friend#/content\" target=\"_blank\" rel=\"noopener\">重学操作系统 | 拉钩教育</a></p>\n<p><a href=\"https://coding.imooc.com/class/package/355.html\" target=\"_blank\" rel=\"noopener\">编程必备基础 | 慕课网</a></p>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-计算机网络基础知识小抄版\"><a href=\"#筑基系列-计算机网络基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-计算机网络基础知识小抄版\"></a>筑基系列-计算机网络基础知识小抄版</h1><blockquote>\n<p>计算机基础知识筑基三部曲：</p>\n<ul>\n<li><strong><a href=\"https://juejin.cn/post/6991367806772052004\" target=\"_blank\" rel=\"noopener\">第一部：筑基系列-计算机基础知识小抄版</a></strong><ul>\n<li>包括发展史、CPU、总线、存储器、指令系统、控制器、运算器、位运算等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991385109509193764\" target=\"_blank\" rel=\"noopener\">第二部：筑基系列-操作系统基础知识小抄版</a></strong><ul>\n<li>包括进程与线程同步管理、作业管理、存储管理、虚拟内存、Linux、文件管理等</li>\n</ul>\n</li>\n<li><strong><a href=\"https://juejin.cn/post/6991397445251334151\" target=\"_blank\" rel=\"noopener\">第三部：筑基系列-计算机网络基础知识小抄版</a></strong><ul>\n<li>包括OSI七层模型各层详解、IP协议、TCP\\IP协议、Http协议、DNS协议等</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"#1.计算机网络概述\">1.计算机网络概述</a></p>\n<ul>\n<li><a href=\"#11-什么是计算机网络\">1.1 什么是计算机网络</a></li>\n<li><a href=\"#12-计算机网络的分类\">1.2 计算机网络的分类</a></li>\n<li><a href=\"#13-计算机网络的发展历史\">1.3 计算机网络的发展历史</a></li>\n<li><a href=\"#14-计算机网络的层次结构\">1.4 计算机网络的层次结构</a></li>\n<li><a href=\"#15-现代互联网的网络拓扑\">1.5 现代互联网的网络拓扑</a></li>\n<li><a href=\"#16-计算机网络的性能指标\">1.6 计算机网络的性能指标</a></li>\n</ul>\n</li>\n<li><p><a href=\"#2.物理层\">2.物理层</a></p>\n<ul>\n<li><a href=\"#21-物理层的作用\">2.1 物理层的作用</a></li>\n<li><a href=\"#22-信道的基本概念\">2.2 信道的基本概念</a></li>\n</ul>\n</li>\n<li><p><a href=\"#3.数据链路层\">3.数据链路层</a></p>\n<ul>\n<li><a href=\"#31-数据链路层主要功能\">3.1 数据链路层主要功能</a></li>\n<li><a href=\"#32-最大传输单元mtu\">3.2 最大传输单元MTU</a></li>\n<li><a href=\"#33-以太网协议详解\">3.3 以太网协议详解</a></li>\n</ul>\n</li>\n<li><p><a href=\"#4.网络层\">4.网络层</a></p>\n<ul>\n<li><a href=\"#41-网络层的主要功能\">4.1 网络层的主要功能</a></li>\n<li><a href=\"#42-ip协议详解\">4.2 IP协议详解</a></li>\n<li><a href=\"#43-ip协议的转发流程\">4.3 IP协议的转发流程</a></li>\n<li><a href=\"#44-arp协议与rarp协议\">4.4 ARP协议与RARP协议</a></li>\n<li><a href=\"#45-ip地址的分类\">4.5 IP地址的分类</a></li>\n<li><a href=\"#46-ip地址的划分子网\">4.6 IP地址的划分子网</a></li>\n<li><a href=\"#47-无分类地址cidr\">4.7 无分类地址CIDR</a></li>\n<li><a href=\"#48-网络地址转换nat技术\">4.8 网络地址转换NAT技术</a></li>\n<li><a href=\"#49-icmp协议详解\">4.9 ICMP协议详解</a></li>\n<li><a href=\"#410-网络层的路由概述\">4.10 网络层的路由概述</a></li>\n<li><a href=\"#411-自治系统as\">4.11 自治系统(AS)</a></li>\n<li><a href=\"#412-内部网关路由协议之rip协议\">4.12 内部网关路由协议之RIP协议</a></li>\n<li><a href=\"#413-外部网关路由协议之bgp协议\">4.13 外部网关路由协议之BGP协议</a></li>\n</ul>\n</li>\n<li><p><a href=\"#5.传输层\">5.传输层</a></p>\n<ul>\n<li><a href=\"#51-传输层的主要功能\">5.1 传输层的主要功能</a></li>\n<li><a href=\"#52-udp协议详解\">5.2 UDP协议详解</a></li>\n<li><a href=\"#53-tcp报文详解\">5.3 TCP报文详解</a></li>\n<li><a href=\"#54-tcp可靠传输的基本原理\">5.4 TCP可靠传输的基本原理</a></li>\n<li><a href=\"#55-tcp协议的可靠传输\">5.5 TCP协议的可靠传输</a></li>\n<li><a href=\"#56-tcp协议的流量控制\">5.6 TCP协议的流量控制</a></li>\n<li><a href=\"#57-tcp协议的拥塞控制\">5.7 TCP协议的拥塞控制</a></li>\n<li><a href=\"#58-tcp连接的建立\">5.8 TCP连接的建立</a></li>\n<li><a href=\"#59-tcp连接的释放\">5.9 TCP连接的释放</a></li>\n<li><a href=\"#510-套接字与套接字编程\">5.10 套接字与套接字编程</a></li>\n</ul>\n</li>\n<li><p><a href=\"#6.应用层\">6.应用层</a></p>\n<ul>\n<li><p><a href=\"#61-应用层概述\">6.1 应用层概述</a></p>\n</li>\n<li><p><a href=\"#62-应用层主要功能\">6.2 应用层主要功能</a></p>\n</li>\n<li><p><a href=\"#63-dns服务详解\">6.3 DNS服务详解</a></p>\n</li>\n<li><p><a href=\"#64-dhcp协议详解\">6.4 DHCP协议详解</a></p>\n</li>\n<li><p><a href=\"#65-http协议详解\">6.5 HTTP协议详解</a></p>\n</li>\n<li><p><a href=\"#66-http工作的结构\">6.6 HTTP工作的结构</a></p>\n</li>\n<li><p><a href=\"#67-https协议详解\">6.7 HTTPS协议详解</a></p>\n</li>\n<li><p><a href=\"#68-输入域名按下回车键的过程有哪些\">6.8 输入域名按下回车键的过程有哪些</a></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"#7.HTTP协议详解\">7.HTTP协议详解</a></p>\n<ul>\n<li><a href=\"#71-浏览器背后的故事\">7.1 浏览器背后的故事</a></li>\n<li><a href=\"#72-http协议的前世今生\">7.2 HTTP协议的前世今生</a></li>\n<li><a href=\"#73-透过tcpip看http\">7.3 透过TCP/IP看HTTP</a></li>\n</ul>\n</li>\n<li><p><a href=\"#8.计算机网络实践\">8.计算机网络实践</a></p>\n<ul>\n<li><a href=\"#81-网络嗅探工具\">8.1 网络嗅探工具</a></li>\n</ul>\n</li>\n<li><p><a href=\"#9关于我\">9.关于我</a></p>\n</li>\n<li><p><a href=\"#10参考\">10.参考</a></p>\n</li>\n</ul>\n<h2 id=\"1-计算机网络概述\"><a href=\"#1-计算机网络概述\" class=\"headerlink\" title=\"1.计算机网络概述\"></a>1.计算机网络概述</h2><h3 id=\"1-1-什么是计算机网络\"><a href=\"#1-1-什么是计算机网络\" class=\"headerlink\" title=\"1.1 什么是计算机网络\"></a>1.1 什么是计算机网络</h3><ul>\n<li>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</li>\n<li>计算机网络的不是软件概念，还包含硬件设备</li>\n<li>计算机网络不仅仅是信息通信，还可以支持广泛的应用</li>\n</ul>\n<h3 id=\"1-2-计算机网络的分类\"><a href=\"#1-2-计算机网络的分类\" class=\"headerlink\" title=\"1.2 计算机网络的分类\"></a>1.2 计算机网络的分类</h3><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>英文</th>\n<th>范围</th>\n<th>区域</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>广域网</td>\n<td>WAN(Wide Area Network)</td>\n<td>几十到几千公里</td>\n<td>跨省、跨国</td>\n</tr>\n<tr>\n<td>城域网</td>\n<td>MAN(Metro. Area Network)</td>\n<td>5KM-50KM</td>\n<td>城市间</td>\n</tr>\n<tr>\n<td>局域网</td>\n<td>LAN(Local Area Network)</td>\n<td>1KM以内</td>\n<td>地区内</td>\n</tr>\n</tbody></table>\n<h3 id=\"计算机网络的发展历史\"><a href=\"#计算机网络的发展历史\" class=\"headerlink\" title=\"计算机网络的发展历史\"></a>计算机网络的发展历史</h3><ul>\n<li><p>世界互联网发展历史</p>\n<ul>\n<li>单个网络 ARPANET<ul>\n<li>计算机–&gt;交换机&lt;–计算机</li>\n</ul>\n</li>\n<li>三级结构互联网<ul>\n<li>主干网–&gt;地区网–&gt;校园网</li>\n</ul>\n</li>\n<li>多层次ISP互联网<ul>\n<li>ISP(Internet Service Provider): 网络服务提供商</li>\n<li>中国电信、中国移动、中国联通等</li>\n<li>主干ISP(海底电缆)–&gt;地区ISP(山东移动)–&gt;校园、家庭、公司</li>\n<li>查看全球网络地图：<a href=\"https://www.infrapedia.com/app\" target=\"_blank\" rel=\"noopener\">https://www.infrapedia.com/app</a></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171046.jpg\" alt=\"\"></p>\n</li>\n<li><p>中国互联网的发展历史</p>\n<ul>\n<li>1980 年开始互联网实验</li>\n<li>1989 年第一个公共网络建立运行</li>\n<li>1994 接入国际互联网</li>\n<li>中国的互联网企业<ul>\n<li>中国电信互联网CHINANET</li>\n<li>中国联通互联网UNINET</li>\n<li>中国移动互联网CMNET</li>\n<li>中国教育与科研计算机网CERNET</li>\n<li>中国科学技术网CSTNET</li>\n<li>1996年，张朝阳创建搜狐</li>\n<li>1997年，丁磊创建网易</li>\n<li>1998年，王志东创建新浪</li>\n<li>1998年，马化腾、张志东创建腾讯</li>\n<li>1999年，马云创建阿里巴巴</li>\n<li>2000年，李彦宏创建百度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-计算机网络的层次结构\"><a href=\"#1-4-计算机网络的层次结构\" class=\"headerlink\" title=\"1.4 计算机网络的层次结构\"></a>1.4 计算机网络的层次结构</h3><ul>\n<li>层次结构设计的基本原则<ul>\n<li>分层实现不同的功能<ul>\n<li>保证数据通路顺畅</li>\n<li>识别目的计算机</li>\n<li>目的计算机状态</li>\n<li>数据是否错误</li>\n<li>层次划分：网络应用数据(视频、文件、游戏)–&gt;数据可靠通信(数据错误、重复)–&gt;物理网络接入(光电等物理特性)</li>\n</ul>\n</li>\n<li>各层之间是相互独立的</li>\n<li>每一层要有足够的灵活性</li>\n<li>各层之间完全解耦</li>\n</ul>\n</li>\n<li>OSI七层模型<ul>\n<li>应用层：为计算机用户提供接口和服务</li>\n<li>表示层：数据处理（编码解码、加密解密等）</li>\n<li>会话层：管理（建立、维护、重连）通信会话</li>\n<li>传输层：管理端到端的通信连接</li>\n<li>网络层：数据路由（决定数据在网络的路径）</li>\n<li>数据链路层：管理相邻节点之间的数据通信</li>\n<li>物理层：数据通信的光电物理特性</li>\n<li>OSI在市场化过程中困难重重， TCP/IP在全球范围成功运行</li>\n<li>OSI欲成为全球计算机都遵循的标准</li>\n<li>OSI最终并没有成为广为使用的标准模型</li>\n<li>为什么没有被接受<ul>\n<li>OSI标准制定周期过长，按OSI标准生产的设备无法及时进入市场</li>\n<li>OSI的专家缺乏实际经验</li>\n<li>OSI模型设计的并不合理，一些功能在多层中重复出现</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>TCP/IP四层模型<ul>\n<li>应用层：HTTP/FTP/… ，对应OSI的应用层、表示层、会话层</li>\n<li>传输层：TCP/UDP，对应OSI的传输层</li>\n<li>网络层：IP/ICMP，对应OSI的网络层</li>\n<li>网络接口层：Ethernet/ARP/RARP，对应OSI的数据链路层、物理层</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-5-现代互联网的网络拓扑\"><a href=\"#1-5-现代互联网的网络拓扑\" class=\"headerlink\" title=\"1.5 现代互联网的网络拓扑\"></a>1.5 现代互联网的网络拓扑</h3><ul>\n<li>边缘部分<ul>\n<li>家庭：终端机器(手机)–&gt;路由器–&gt;网关–&gt;地区ISP</li>\n<li>企业：终端机器(电脑)–&gt;路由器–&gt;内部网关–&gt;统一网关–&gt;地区ISP</li>\n</ul>\n</li>\n<li>核心部分<ul>\n<li>地区ISP–&gt;主干ISP–&gt;国际路由器</li>\n</ul>\n</li>\n<li>网络连接错综复杂</li>\n<li>接入设备数以亿计</li>\n<li>网络覆盖边际全球</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171055.jpg\" alt=\"\"></p>\n<ul>\n<li>客户-服务器(C/S)模式<ul>\n<li>C请求服务–&gt;S获得服务</li>\n</ul>\n</li>\n<li>对等连接(P2P)模式</li>\n</ul>\n<h3 id=\"1-6-计算机网络的性能指标\"><a href=\"#1-6-计算机网络的性能指标\" class=\"headerlink\" title=\"1.6 计算机网络的性能指标\"></a>1.6 计算机网络的性能指标</h3><ul>\n<li>速率<ul>\n<li>速率单位： bps=bit/s</li>\n<li>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？<ul>\n<li>bps到字节的转换</li>\n<li>网络常用单位为(Mbps)</li>\n<li>100M/s = 100Mbps = 100Mbit/s</li>\n<li>100Mbit/s=(100/8)MB/s=12.5MB/s</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>时延<ul>\n<li>总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延</li>\n<li>发送时延<ul>\n<li>发送时延 = 数据长度(𝑏𝑖𝑡)/发送速率(𝑏𝑖𝑡/𝑠)</li>\n<li>发送速率受限于计算机网卡</li>\n</ul>\n</li>\n<li>传输时延<ul>\n<li>传播时延 = 传输路径距离/传播速率(𝑏𝑖𝑡/𝑠)</li>\n<li>传播速率受限于传输介质，铜线、光线</li>\n</ul>\n</li>\n<li>排队时延<ul>\n<li>数据包在网络设备中等待被处理的时间</li>\n</ul>\n</li>\n<li>处理时延<ul>\n<li>数据包到达设备或者目的机器被处理所需要的时间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>往返时间RTT<ul>\n<li>RTT表示的是数据报文在端到端通信中的来回一次的时间</li>\n<li>RTT(Route-Trip Time)是评估网络质量的一项重要指标</li>\n<li>通常使用ping命令查看RTT</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-物理层\"><a href=\"#2-物理层\" class=\"headerlink\" title=\"2.物理层\"></a>2.物理层</h2><h3 id=\"2-1-物理层的作用\"><a href=\"#2-1-物理层的作用\" class=\"headerlink\" title=\"2.1 物理层的作用\"></a>2.1 物理层的作用</h3><ul>\n<li>相关设备<ul>\n<li>双绞线</li>\n<li>同轴电缆</li>\n<li>光纤</li>\n<li>红外线</li>\n<li>无线</li>\n<li>激光</li>\n</ul>\n</li>\n<li>传输比特流</li>\n<li>连接不同的物理设备</li>\n<li>物理特性<ul>\n<li>机械特性</li>\n<li>电气特性</li>\n<li>功能特性</li>\n<li>过程特性</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-2-信道的基本概念\"><a href=\"#2-2-信道的基本概念\" class=\"headerlink\" title=\"2.2 信道的基本概念\"></a>2.2 信道的基本概念</h3><ul>\n<li><p>一条通信电路包含一个接收信道和一个发送信道</p>\n</li>\n<li><p>信道是往一个方向传送信息的媒体</p>\n</li>\n<li><p>单工信道</p>\n<ul>\n<li>有线电视、无线电收音机等等</li>\n<li>只能一个方向通信，没有反方向反馈的信道</li>\n</ul>\n</li>\n<li><p>半双工信道</p>\n<ul>\n<li>不能双方同时发送，也不能同时接收</li>\n<li>双方都可以发送和接收信息</li>\n</ul>\n</li>\n<li><p>全双工信道</p>\n<ul>\n<li>双方都可以同时发送和接收信息</li>\n</ul>\n</li>\n<li><p>分用-复用技术</p>\n<ul>\n<li>信道利用率并不高？</li>\n<li>分用器</li>\n<li>复用器</li>\n<li>频分复用</li>\n<li>时分复用</li>\n<li>波分复用</li>\n<li>码分复用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-数据链路层\"><a href=\"#3-数据链路层\" class=\"headerlink\" title=\"3.数据链路层\"></a>3.数据链路层</h2><h3 id=\"3-1-数据链路层主要功能\"><a href=\"#3-1-数据链路层主要功能\" class=\"headerlink\" title=\"3.1 数据链路层主要功能\"></a>3.1 数据链路层主要功能</h3><ul>\n<li><p>封装成帧</p>\n<ul>\n<li>发送端在网络层的一段数据前后添加特定标记形成“帧”</li>\n<li>“帧”是数据链路层数据的基本单位</li>\n<li>接收端根据前后特定标记识别出“帧”</li>\n<li>物理层才不管你“帧”不“帧”，物理层之作用bit流的传输</li>\n<li>IP数据报–&gt;“帧”的数据[帧首部， “帧”的数据 ，帧尾部]</li>\n<li>帧首部和尾部是特定的控制字符（特定比特流）SOH: 00000001，EOT: 00000100</li>\n</ul>\n</li>\n<li><p>透明传输</p>\n<ul>\n<li>“一种实际存在的事物却又看起来不存在一样”</li>\n<li>“透明”在计算机领域是非常重要的一个术语</li>\n<li>“即是控制字符在帧数据中，但是要当做不存在的去处理”</li>\n<li>数据中也出现了控制字符，对数据中的控制字符进行特殊处理，转义</li>\n<li>“\\n”、“\\t”等控制字符，编程语言中“\\”一般为转义字符，“\\” 、“\\\\”</li>\n</ul>\n</li>\n<li><p>差错监测</p>\n<ul>\n<li>数据链路层负责起“差错监测”的工作</li>\n<li>物理层只管传输比特流，无法控制是否出错</li>\n<li>循环冗余校验码CRC<ul>\n<li>检测数据传输或者保存后可能出现的错误</li>\n<li>一种根据传输或保存的数据而产生固定位数校验码的方法</li>\n<li>生成的数字计算出来并且附加到数据后面</li>\n<li>模“2”除法<ul>\n<li>与算术除法类似，但除法不借位，实际是“异或”操作</li>\n<li>模“2”除法是二进制下的除法</li>\n<li>0 xor 0 = 0，0 xor 1 = 1，1 xor 0 = 1，1 xor 1 = 0</li>\n</ul>\n</li>\n<li>检测流程<ul>\n<li>选定一个用于校验的多项式G(x)，并在数据尾部添加r个0</li>\n<li>将添加r个0后的数据，使用模“2”除法除以多项式的位串</li>\n<li>得到的余数填充在原数据r个0的位置得到可校验的位串</li>\n<li>例子1：使用CRC计算101001的可校验位串<ul>\n<li>计算过程有点难！！！</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据链路层只进行数据的检测，不进行纠正，一旦出错会丢弃</li>\n<li>CRC的错误检测能力与位串的阶数r有关</li>\n</ul>\n</li>\n<li>奇偶校验码<ul>\n<li>检测机制：在比特流最后一位加上一位（1或者0），（所有比特流中的1相加）偶数加0，奇数加1 </li>\n<li>缺陷：出错两位，奇偶校验码校测不到错误</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-最大传输单元MTU\"><a href=\"#3-2-最大传输单元MTU\" class=\"headerlink\" title=\"3.2 最大传输单元MTU\"></a>3.2 最大传输单元MTU</h3><ul>\n<li>MTU<ul>\n<li>数据链路层的数据帧也不是无限大的</li>\n<li>最大传输单元MTU(Maximum Transmission Unit)</li>\n<li>数据帧过大或过小都会影响传输的效率</li>\n<li>总时延 = 发送时延 + 排队时延 + 传播时延 + 处理时延</li>\n<li>以太网MTU一般为1500字节</li>\n</ul>\n</li>\n<li>路径MTU<ul>\n<li>路径MTU由链路中MTU的最小值决定</li>\n<li>木桶效应</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-以太网协议详解\"><a href=\"#3-3-以太网协议详解\" class=\"headerlink\" title=\"3.3 以太网协议详解\"></a>3.3 以太网协议详解</h3><ul>\n<li><p>MAC地址</p>\n<ul>\n<li>MAC地址（Media Access Control Address）直译为媒体存取控制位址，也称为局域网地址（LAN Address）</li>\n<li>每一个设备都拥有唯一的MAC地址</li>\n<li>MAC地址（物理地址、硬件地址）</li>\n<li>MAC地址共48位，使用十六进制表示</li>\n<li>ipconfig/all 查看本机所有MAC地址 ，30-B4-9E-ED-85-CA</li>\n</ul>\n</li>\n<li><p>以太网协议</p>\n<ul>\n<li>以太网是一种应用于数据链路层的协议</li>\n<li>以太网(Ethernet)是一种使用广泛的局域网技术</li>\n<li>使用以太网可以完成相邻设备的数据帧传输</li>\n<li>以太网数据格式<ul>\n<li>类型：0800： IP数据报，0806： ARP请求/应答，8035： RARP请求/应答</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>目的地址（MAC地址) 单位字节</th>\n<th>源地址</th>\n<th>类型</th>\n<th>帧数据</th>\n<th>CRC校验码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>6</td>\n<td>6</td>\n<td>2</td>\n<td>46-1500</td>\n<td>4</td>\n</tr>\n</tbody></table>\n<ul>\n<li>MAC地址表，路由器持有</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>MAC地址</th>\n<th>硬件接口</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>31-B4-9E-ED-85-CA</td>\n<td>接口1</td>\n</tr>\n<tr>\n<td>32-B4-9E-ED-85-CB</td>\n<td>接口2</td>\n</tr>\n<tr>\n<td>33-B4-9E-ED-85-CC</td>\n<td>接口4</td>\n</tr>\n</tbody></table>\n<ul>\n<li>A终端通过路由器发送数据到C终端的过程<ul>\n<li>A通过网卡发出数据帧</li>\n<li>数据帧到达路由器，路由器取出前6字节（目的MAC地址）</li>\n<li>路由器匹配MAC地址表，找到对应的网络接口</li>\n<li>路由器往该网络接口发送数据帧</li>\n<li>如果MAC地址表没有匹配成功</li>\n<li>路由器将广播A的数据包到除A以外的端口</li>\n<li>路由器检查MAC地址表，发现没有C的信息</li>\n<li>路由器将收到来自B、 C的回应，并将地址记录</li>\n</ul>\n</li>\n<li>以太网协议只提供相邻物理节点传输，跨设备是无法传输的，需要借助网络层</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-网络层\"><a href=\"#4-网络层\" class=\"headerlink\" title=\"4.网络层\"></a>4.网络层</h2><h3 id=\"4-1-网络层的主要功能\"><a href=\"#4-1-网络层的主要功能\" class=\"headerlink\" title=\"4.1 网络层的主要功能\"></a>4.1 网络层的主要功能</h3><ul>\n<li>网络层：数据路由（决定数据在网络的路径）</li>\n<li>数据链路层只能解决相邻物理节点传输</li>\n</ul>\n<h3 id=\"4-2-IP协议详解\"><a href=\"#4-2-IP协议详解\" class=\"headerlink\" title=\"4.2 IP协议详解\"></a>4.2 IP协议详解</h3><ul>\n<li><p>虚拟互联网络</p>\n<ul>\n<li>物理设备通过使用IP协议，屏蔽了物理网络之间的差异</li>\n<li>实际的计算机网络是错综复杂的</li>\n<li>当网络中的主机使用IP协议连接时，则无需关注网络细节</li>\n<li>IP协议使得网络层可以屏蔽底层细节而专注网络层的数据转发</li>\n<li>IP协议使得复杂的实际网络变为一个虚拟互连的网络</li>\n<li>IP协议解决了在虚拟网络中数据报传输路径的问题</li>\n</ul>\n</li>\n<li><p>IP协议</p>\n<ul>\n<li>IP地址<ul>\n<li>MAC地址： 30-B4-9E-ED-85-CA：00110000-11000020-11101101-01000101-11001010<ul>\n<li>48位，16进制表示</li>\n<li>唯一，不可变</li>\n</ul>\n</li>\n<li>P地址： 192.168.11.11：11000000.10101000.00001011.00001011<ul>\n<li>32位，常分成4个8位，一般采用点分十进制表示，共可以表示 2^32 = 4294961296</li>\n<li>IP地址常使用<strong>点分十进制</strong>来表示(0<del>255.0</del>255.0<del>255.0</del>255)，例如：255.255.255.255</li>\n<li>受网络环境影响会发生改变</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>IP报文格式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>协议层</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理层</td>\n<td>001010101001110110101010101010…10101010101010101010101010101</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>【帧首部 】【“帧”的数据】 【帧尾部】</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>【IP首部】【 IP数据报的数据】</td>\n</tr>\n</tbody></table>\n<ul>\n<li>IP报文头部各个参数的作用</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>4位版本</th>\n<th>4位首部长度</th>\n<th>8位服务类型(TOS)</th>\n<th>16位总长度(字节)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>16位标识</td>\n<td>3位标志</td>\n<td>13位片偏移</td>\n<td></td>\n</tr>\n<tr>\n<td>8位生存时间(TTL)</td>\n<td>8位协议</td>\n<td>16位首部校验和</td>\n<td></td>\n</tr>\n<tr>\n<td>32位源IP地址</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>32位目的IP地址</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>选项options（若有）</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>IP数据</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>每一行32位，第六行可选，所以IP报文头部至少占4×5=20个字节</li>\n<li>第一行<ul>\n<li>版本：占4位，指的是IP协议的版本，通信双方的版本必须一致，当前主流版本是4，即IPv4，也有IPv6</li>\n<li>首部位长度：占4位，最大数值为15，表示的是IP首部长度，单位是“32位字”（4个字节），也即是IP首部最大长度为60字节</li>\n<li>8位服务类型(TOS)：TOS包括共8位，包括3 bit的优先权字段（取值可以从000-111所有值），4 bit的TOS子字段和1 bit未用位但必须置0。</li>\n<li>总长度：占16位，最大数值为65535，表示的是IP数据报总长度（IP首部+IP数据），数据链路层MTU,如果IP数据报的数据多余“帧”的数据，需要分片处理</li>\n</ul>\n</li>\n<li>第二行<ul>\n<li>16位标识：IP协议内部使用</li>\n<li>3位标志：标记是否可以分片</li>\n<li>13位片偏移：第几个分片</li>\n</ul>\n</li>\n<li>第三行<ul>\n<li>TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文，避免数据在网络无限传输</li>\n<li>协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP等）<ul>\n<li>协议名 ICMP、 IGMP、 IP 、TCP、 UDP、 OSPF …，字段值 1 、2 、4 、6、 17、 89 …</li>\n</ul>\n</li>\n<li>首部校验和：占16位，校验IP首部是否有出错</li>\n</ul>\n</li>\n<li>源IP地址：发送方</li>\n<li>目的IP地址：接收方</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-3-IP协议的转发流程\"><a href=\"#4-3-IP协议的转发流程\" class=\"headerlink\" title=\"4.3 IP协议的转发流程\"></a>4.3 IP协议的转发流程</h3><ul>\n<li><p>逐跳(hop-by-hop)</p>\n</li>\n<li><p>路由表</p>\n<ul>\n<li>计算机或者路由器都拥有路由表</li>\n<li>MAC地址表和路由表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>MAC地址</th>\n<th>硬件接口</th>\n<th></th>\n<th>目的IP地址</th>\n<th>下一跳IP地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>E1</td>\n<td></td>\n<td>IP1</td>\n<td>IP4</td>\n</tr>\n<tr>\n<td>B</td>\n<td>E2</td>\n<td></td>\n<td>IP2</td>\n<td>IP5</td>\n</tr>\n<tr>\n<td>C</td>\n<td>E3</td>\n<td></td>\n<td>IP3</td>\n<td>IP6</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>转发流程：网络层</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gnl5pjkrqtj30nm07gjsc.jpg\" alt=\"\"></p>\n<ul>\n<li>A将数据报发送给E</li>\n<li>A发出目的地为C的IP数据报， 查询路由表发现下一跳为E</li>\n<li>E查询路由表发现下一跳为F，将数据报发送给F</li>\n<li>F查询路由表发现目的地C直接连接，将数据报发送给C</li>\n</ul>\n</li>\n<li><p>IP数据报每一跳的IP地址始终不变</p>\n</li>\n<li><p>数据帧每一跳的MAC地址都在变化</p>\n</li>\n</ul>\n<h3 id=\"4-4-ARP协议与RARP协议\"><a href=\"#4-4-ARP协议与RARP协议\" class=\"headerlink\" title=\"4.4 ARP协议与RARP协议\"></a>4.4 ARP协议与RARP协议</h3><ul>\n<li>ARP协议<ul>\n<li>ARP(Address Resolution Protocol)地址解析协议，通过IP地址查找MAC地址</li>\n<li>ARP缓存表：[IP地址, MAC地址] 如：192.168.83.254 —00-50-56-e0-33-40</li>\n<li>ARP缓存表缓存了IP地址到硬件地址之间的映射关系</li>\n<li>ARP缓存表是ARP协议和RARP协议运行的关键</li>\n<li>ARP缓存表中的记录并不是永久有效的，有一定的期限</li>\n<li><strong>arp -a</strong> :查看ARP缓存表</li>\n<li>数据报格式，共28个字节，封装在数据链路层里，用于网络层，【类型0806 ，ARP请求/应答 ，PAD】<ul>\n<li>硬件类型，2位</li>\n<li>协议类型 ，2位</li>\n<li>标记 ，24</li>\n<li>发送端 以太网地址 ，6位</li>\n<li>发送端 IP地址 ，4位</li>\n<li>目的端 以太网地址 ，6位</li>\n<li>目的端 IP地址，4位</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>RARP协议<ul>\n<li>RARP(Reverse Address Resolution Protocol)逆地址解析协议</li>\n<li>数据链路层MAC48位地址–》网络层IP32位地址</li>\n</ul>\n</li>\n<li>ARP和RARP的操作对程序员是透明的</li>\n<li>(R)ARP协议是TCP/IP协议栈里面基础的协议</li>\n<li>理解(R)ARP协议有助于理解网络分层的细节</li>\n<li>转发流程：网络层+数据链路层+物理层<ul>\n<li>第一步：A-&gt;E<ul>\n<li>A发出目的地为C的IP数据报， 查询路由表发现下一跳为E</li>\n<li>A将IP数据报交给数据链路层，并告知目的MAC地址是E</li>\n<li>数据链路层填充源MAC地址A和目的MAC地址E</li>\n<li>数据链路层通过物理层将数据发送给E</li>\n</ul>\n</li>\n<li>第二步：E–&gt;F<ul>\n<li>E的数据链路层接收到数据帧， 把帧数据交给网络层</li>\n<li>E查询路由表， 发现下一跳为F</li>\n<li>E把数据报交给数据链路层， 并告知目的MAC地址为F</li>\n<li>E的数据链路层封装数据帧并发送</li>\n</ul>\n</li>\n<li>第三步：F–&gt;C<ul>\n<li>F的数据链路层接收到数据帧， 把帧数据交给网络层</li>\n<li>F查询路由表， 发现下一跳为C</li>\n<li>F把数据报交给数据链路层，并告知目的MAC地址为C</li>\n<li>F的数据链路层封装数据帧并发送</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-5-IP地址的分类\"><a href=\"#4-5-IP地址的分类\" class=\"headerlink\" title=\"4.5 IP地址的分类\"></a>4.5 IP地址的分类</h3><ul>\n<li><p>IP地址长度为32位，常分成4个8位，常使用点分十进制来表示(0<del>255.0</del>255.0<del>255.0</del>255)，2^32 = 4294961296</p>\n</li>\n<li><p>直接对42亿多个IP地址规划和分配IP地址非常麻烦</p>\n</li>\n<li><p>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=</p>\n</li>\n<li><p>分类的IP地址</p>\n<ul>\n<li>网络号 <ul>\n<li>网络号的位数直接决定了可以分配的网络数（计算方法=2^网络号位数-特殊网络号数）</li>\n</ul>\n</li>\n<li>主机号<ul>\n<li>主机号的位数则决定了网络中最大的主机数（计算方法=2^主机号位数-特殊主机号数）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>IP类型</th>\n<th>组成</th>\n<th>最小网络号</th>\n<th>最大网络号</th>\n<th>子网数量(理想)</th>\n<th>最小主机号</th>\n<th>最大主机号</th>\n<th>主机数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>8位网络号(0开头）+24位主机号</td>\n<td>0(00000000)</td>\n<td>127(01111111)</td>\n<td>2^7=128</td>\n<td>0.0.0</td>\n<td>255.255.255</td>\n<td>2^24=16,777,216</td>\n</tr>\n<tr>\n<td>B</td>\n<td>16位网络号（10开头）+16位主机号</td>\n<td>128(100000000).0</td>\n<td>191(10111111).255</td>\n<td>2^14(6+8)=16,384</td>\n<td>0.0</td>\n<td>255.255</td>\n<td>2^16=65536</td>\n</tr>\n<tr>\n<td>C</td>\n<td>24位网络号（110开头）+8位主机号</td>\n<td>192(110000000).0.0</td>\n<td>223(11011111).255.255</td>\n<td>2^21(5+8+8)=2,097,252</td>\n<td>0</td>\n<td>255</td>\n<td>2^8=256</td>\n</tr>\n<tr>\n<td>D</td>\n<td>组播地址（1110开头）</td>\n<td>224(111000000).0.0.0</td>\n<td>239(11101111).255.255.255</td>\n<td>2^4=16</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>E</td>\n<td>保留以后再用（1111开头）</td>\n<td>240(111110000).0.0.0</td>\n<td>225(11111111).255.255.255</td>\n<td>2^4=16</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>特殊的网络号<ul>\n<li>A类地址网络段后7位全1(01111111:127)表示回环地址</li>\n<li>A类地址网络段全0(00000000)表示特殊网络</li>\n<li>B类地址网络段(10000000.00000000:128.0)是不可使用的</li>\n<li>C类地址网络段(192.0.0)是不可使用的</li>\n<li>上表中的A类IP的子网可用数量为：2^7-2，B类:2^14-1，C类：2^21-1</li>\n</ul>\n</li>\n<li>特殊的主机号<ul>\n<li>主机号为全1表示广播地址，向当前网络段所有主机发消息，例如：1.0.0.0</li>\n<li>主机号全0表示当前网络段，不可分配为特定主机，例如：1.255.255.255</li>\n<li>上表中A\\B\\C的可用主机号数量为：2^24-2、2^16-2、2^8-2</li>\n</ul>\n</li>\n<li>127.0.0.1，通常被称为本地回环地址(Loopback Address)，不属于任何一个有类别地址类。localhost是个域名</li>\n<li>如何判断一个IP属于哪一类IP地址<ul>\n<li>取出首八位：</li>\n<li>A类：(0,127) / 0xxxxxxx，</li>\n<li>B类：[128,19]) / 10xxxxxx，</li>\n<li>C类：[192,223] / 110xxxxx</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-6-IP地址的划分子网\"><a href=\"#4-6-IP地址的划分子网\" class=\"headerlink\" title=\"4.6 IP地址的划分子网\"></a>4.6 IP地址的划分子网</h3><ul>\n<li>某公司拥有100名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？<ul>\n<li>C类可分配的主机数量为2^8-2=254个</li>\n</ul>\n</li>\n<li>某公司拥有256名员工，每人配备一个计算机，请问该公司应该申请哪种网络段？<ul>\n<li>B类可分配的主机数量为2^16-2=65534个</li>\n<li>造成了很大的地址空间浪费</li>\n</ul>\n</li>\n<li>子网号<ul>\n<li>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】=</li>\n<li>例如一个C类IP 193.10.10.0 = 24位网络号（110开头）+8位主机号 </li>\n<li>主机号段为.0=.00000000</li>\n<li>将主机号段最高位分成 <strong>.0</strong>0000000 和  <strong>.1</strong>0000000 两个子网</li>\n<li><strong>.0</strong>0000000 子网可以表示的主机范围为：(0) <strong>.0</strong>0000000 – (127) <strong>.0</strong>1111111 </li>\n<li><strong>.1</strong>0000000 子网可以表示的主机范围为：(128) <strong>.1</strong>0000000 – (255) <strong>.1</strong>1111111 </li>\n<li>某公司拥有100名员工，每人配备一个计算机，就可以申请C类IP的子网从而可以充分利用IP的数量</li>\n</ul>\n</li>\n<li>子网掩码<ul>\n<li>子网号这么多，有没有办法快速判断某个IP的网络子网掩码号？</li>\n<li>子网掩码由连续的1和连续的0组成</li>\n<li>子网掩码和IP地址一样，都是32位</li>\n<li>某一个子网的子网掩码具备网络号位数个连续的1</li>\n<li>A类IP的子网掩码：255.0.0.0 </li>\n<li>B类IP的子网掩码：255.255.0.0 </li>\n<li>C类IP的子网掩码：255.255.255.0</li>\n<li>划分子网的子网掩码：子网掩码-子网号-主机号<ul>\n<li>例如：193.10.10.0 = 24位网络号（110开头）+1位子网号+7位主机号 <ul>\n<li>子网掩码为：255.255.255.128（24+1个1和7个0组成）</li>\n<li>求 193.10.10.6 这个IP对应的子网号</li>\n<li>第一步IP对应的二进制：            193.10.10.6 – 11000001.00001010.00001010.00000110</li>\n<li>第二步子网掩码对应的二进制：255.255.255.128 – 11111111.11111111.11111111.10000000</li>\n<li>第三步：一二步与运算得到子网号 11000001.00001010.00001010.00000000  – 193.10.10.0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-7-无分类地址CIDR\"><a href=\"#4-7-无分类地址CIDR\" class=\"headerlink\" title=\"4.7 无分类地址CIDR\"></a>4.7 无分类地址CIDR</h3><ul>\n<li><p>IP地址=【网络号段+主机号段】=【网络号段+ (子网号段+子网主机号段)】</p>\n</li>\n<li><p>子网划分相对复杂所以出现了CIDR</p>\n</li>\n<li><p>无类域内路由选择（Classless Inter-Domain Routing）</p>\n</li>\n<li><p>CIDR中没有A、 B、 C类网络号、和子网划分的概念</p>\n</li>\n<li><p>CIDR将网络前缀相同的IP地址称为一个“CIDR地址块”</p>\n</li>\n<li><p>IP地址=【网络前缀+主机号】</p>\n</li>\n<li><p>网络前缀是任意位数的</p>\n</li>\n<li><p>CIDR采用斜线记法来表示一个IP地址</p>\n<ul>\n<li>193.10.10.129/25==11000001.00001010.00001010.10000001</li>\n<li>25表示网络前缀有25位，主机位有7位</li>\n<li>相比原来子网划分更加灵活</li>\n<li>超网-》子网</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>CIDR前缀长度</th>\n<th>掩码点分十进制</th>\n<th>地址数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/13</td>\n<td>255.248.0.0</td>\n<td>2^19=512K</td>\n</tr>\n<tr>\n<td>/14</td>\n<td>255.252.0.0</td>\n<td>2^18=256K</td>\n</tr>\n<tr>\n<td>/15</td>\n<td>255.254.0.0</td>\n<td>2^17=128K</td>\n</tr>\n<tr>\n<td>/16</td>\n<td>255.255.0.0</td>\n<td>2^16=64K</td>\n</tr>\n<tr>\n<td>/17</td>\n<td>255.255.128.0</td>\n<td>2^15=32K</td>\n</tr>\n<tr>\n<td>/18</td>\n<td>255.255.192.0</td>\n<td>2^14=16K</td>\n</tr>\n<tr>\n<td>/19</td>\n<td>255.255.224.0</td>\n<td>2^13=8K</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"4-8-网络地址转换NAT技术\"><a href=\"#4-8-网络地址转换NAT技术\" class=\"headerlink\" title=\"4.8 网络地址转换NAT技术\"></a>4.8 网络地址转换NAT技术</h3><ul>\n<li><p>IPv4最多只有40+亿个IP地址</p>\n</li>\n<li><p>早期IP地址的不合理规划导致IP号浪费</p>\n</li>\n<li><p>网络拓扑：边缘部分：家庭，多个设备如何复用同一个IP地址的</p>\n</li>\n<li><p>内网地址</p>\n<ul>\n<li>内部机构使用</li>\n<li>避免与外网地址重复</li>\n<li>三类内网地址<ul>\n<li>10.0.0.0~10.255.255.255（支持千万数量级设备）</li>\n<li>172.16.0.0~172.31.255.255（支持百万数量级设备）</li>\n<li>192.168.0.0~192.168.255.255（支持万数量级设备）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>外网地址</p>\n<ul>\n<li>全球范围使用</li>\n<li>全球公网唯一</li>\n</ul>\n</li>\n<li><p>网络地址转换NAT技术</p>\n<ul>\n<li>内网多个设备使用同一个外网IP请求外网的服务，外部怎么知道具体是哪个设备在请求的？</li>\n<li>网络地址转换NAT(Network Address Translation)</li>\n<li>NAT技术用于多个主机通过一个公有IP访问互联网的私有网络中</li>\n<li>NAT减缓了IP地址的消耗，但是增加了网络通信的复杂度</li>\n<li>端口(Port)号</li>\n<li>端口映射表：NA(P)T表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据传输方向</th>\n<th>旧的地址和端口号</th>\n<th>新的地址与端口号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>出</td>\n<td>92.168.2.11:6666</td>\n<td>173.21.59.10:16666</td>\n</tr>\n<tr>\n<td>出</td>\n<td>192.168.2.10:7777</td>\n<td>173.21.59.10:17777</td>\n</tr>\n<tr>\n<td>入</td>\n<td>173.21.59.10:16666</td>\n<td>192.168.2.11:6666</td>\n</tr>\n<tr>\n<td>入</td>\n<td>173.21.59.10:17777</td>\n<td>192.168.2.10:7777</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"4-9-ICMP协议详解\"><a href=\"#4-9-ICMP协议详解\" class=\"headerlink\" title=\"4.9 ICMP协议详解\"></a>4.9 ICMP协议详解</h3><ul>\n<li><p>网际控制报文协议（Internet Control Message Protocol）</p>\n</li>\n<li><p>ICMP协议可以报告错误信息或者异常情况，辅助IP协议</p>\n</li>\n<li><p>网络层  【IP首部】-【 IP数据报的数据】</p>\n</li>\n<li><p>【IP首部】协议：占8位，表明IP数据所携带的具体数据是什么协议的（如： TCP、 UDP、ICMP等）</p>\n</li>\n<li><p>ICMP数据封装在【 IP数据报的数据】里面</p>\n</li>\n<li><p>【ICMP报文首部】-【 ICMP报文数据】</p>\n</li>\n<li><p>8位类型+ 8位代码 +16位校验和+ICMP报文数据</p>\n</li>\n<li><p>分类</p>\n<ul>\n<li>差错报告报文 </li>\n<li>询问报文</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>ICMP报文种类</th>\n<th>类型的值</th>\n<th>报文类型</th>\n<th>具体代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>差错报告报文</td>\n<td>3 (终点不可达）</td>\n<td>网络不可达 / 主机不可达</td>\n<td>0/1</td>\n</tr>\n<tr>\n<td></td>\n<td>5 (重定向）</td>\n<td>对网络重定向 / 对主机重定向</td>\n<td>0/1</td>\n</tr>\n<tr>\n<td></td>\n<td>11</td>\n<td>传输超时</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>12</td>\n<td>坏的IP头 / 缺少其他必要参数</td>\n<td>0/1</td>\n</tr>\n<tr>\n<td>询问报文</td>\n<td>0或8</td>\n<td>回送(Echo)请求或应答</td>\n<td>-</td>\n</tr>\n<tr>\n<td></td>\n<td>13或14</td>\n<td>时间戳(Timestamp)请求或应答</td>\n<td>-</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>ICMP报文的应用</p>\n<ul>\n<li>Ping应用<ul>\n<li>询问报文-0或8 - 回送(Echo)请求或应答</li>\n<li>Ping回环地址127.0.0.1,如果失败计算机的协议栈可能出问题，需要重装操作系统</li>\n<li>Ping网关地址，如果失败，网关路由器可能出问题</li>\n<li>Ping远端地址，如果失败，家到ISP服务商之间可能出问题了，需要找服务商解决</li>\n</ul>\n</li>\n<li>Traceroute应用<ul>\n<li>Traceroute可以探测IP数据报在网络中走过的路径</li>\n<li>【IP首部】TTL：占8位，表明IP数据报文在网络中的寿命，每经过一个设备， TTL减1，当TTL=0时，网络设备必须丢弃该报文–ICMP终点不可达差错报文</li>\n<li>命令：Windows：tracert github.com ，Mac：traceroute to github.com <ul>\n<li><strong>221.179.159.20来自北京市北京 移动</strong></li>\n<li><strong>111.24.3.17来自 移动</strong></li>\n<li><strong>223.119.2.21来自香港 移动</strong></li>\n<li><strong>52.93.11.39来自新加坡 亚马逊云</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-10-网络层的路由概述\"><a href=\"#4-10-网络层的路由概述\" class=\"headerlink\" title=\"4.10 网络层的路由概述\"></a>4.10 网络层的路由概述</h3><ul>\n<li><p>路由表问题</p>\n<ul>\n<li>路由表是怎么来的</li>\n<li>下一跳地址是唯一的吗？</li>\n<li>下一跳地址是怎么来的？</li>\n<li>下一跳地址是最佳的吗？</li>\n<li>路由器怎么多，他们是怎么协同工作的？</li>\n<li>需要一个好的算法去解决这些事情</li>\n</ul>\n</li>\n<li><p>路由算法</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171345.jpg\" alt=\"\"></p>\n<ul>\n<li>每一条边表示一条网络路径</li>\n<li>每一顶点表示一个网络、路由器或计算机</li>\n<li>路由算法实际上是图论的算法</li>\n<li>网络环境复杂，路由算法要比图论的算法要复杂</li>\n<li>路由算法具备哪些特性<ul>\n<li>算法是正确的、 完整的</li>\n<li>算法在计算上应该尽可能的简单</li>\n<li>算法可以适应网络中的变化</li>\n<li>算法是稳定的和公平的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-11-自治系统-AS\"><a href=\"#4-11-自治系统-AS\" class=\"headerlink\" title=\"4.11 自治系统(AS)\"></a>4.11 自治系统(AS)</h3><ul>\n<li>对互联网进行划分<ul>\n<li>互联网的规模是非常大的</li>\n<li>互联网环境是非常复杂的</li>\n<li>自治系统(Autonomous System)</li>\n<li>自治系统内部路由的协议称为：内部网关协议(RIP、 OSPF)</li>\n<li>自治系统外部路由的协议称为：外部网关协议(BGP)</li>\n<li>两个内部网关协议需要通过外部网关协议进行通讯</li>\n</ul>\n</li>\n<li>一个自治系统(AS)是处于一个管理机构下的网络设备群</li>\n<li>AS内部网络自行管理， AS对外提供一个或者多个出（入）口</li>\n</ul>\n<h3 id=\"4-12-内部网关路由协议之RIP协议\"><a href=\"#4-12-内部网关路由协议之RIP协议\" class=\"headerlink\" title=\"4.12 内部网关路由协议之RIP协议\"></a>4.12 内部网关路由协议之RIP协议</h3><ul>\n<li><p>距离矢量(DV)算法</p>\n<ul>\n<li>DV=Distance vector</li>\n<li>每一个节点使用两个向量𝐷𝑖和S𝑖</li>\n<li>𝐷𝑖描述的是当前节点到别的节点的距离</li>\n<li>S𝑖描述的是当前节点到别的节点的下一节点</li>\n<li>每一个节点与相邻的节点交换向量𝐷𝑖和S𝑖的信息</li>\n<li>每一个节点根据交换的信息更新自己的节点信息</li>\n<li>算法实现过程<ul>\n<li>todo</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RIP协议的过程</p>\n<ul>\n<li>RIP(Routing Information Protocol)协议</li>\n<li>RIP协议是使用DV算法的一种路由协议</li>\n<li>RIP协议把网络的跳数(hop)作为DV算法的距离</li>\n<li>RIP协议每隔30s交换一次路由信息</li>\n<li>RIP协议认为跳数&gt;15的路由则为不可达路由</li>\n<li>具体流程<ul>\n<li>路由器初始化路由信息(两个向量𝐷𝑖和S𝑖)</li>\n<li>对相邻路由器X发过来的信息，对信息的内容进行修改（下一跳地址设置为X，所有距离加1）<ul>\n<li>检索本地路由，将信息中新的路由插入到路由表里面</li>\n<li>检索本地路由，对于下一跳为X的，更新为修改后的信息</li>\n<li>检索本地路由，对比相同目的的距离，如果新信息的距离更小，则更新本地路由表</li>\n</ul>\n</li>\n<li>如果3分钟没有收到相邻的路由信息，则把相邻路由设置为不可达(16跳)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RIP协议的优缺点</p>\n<ul>\n<li>故障信息传递慢</li>\n<li>RIP协议：实现简单，开销很小</li>\n<li>RIP协议：限制了网络的规模</li>\n<li>RIP协议：“坏消息传的慢”，更新收敛时间过长</li>\n</ul>\n</li>\n<li><p>Dijkstra（迪杰斯特拉）算法</p>\n<ul>\n<li>Dijkstra算法是著名的图算法</li>\n<li>Dijkstra算法解决有权图从一个节点到其他节点的最短路径问题</li>\n<li>“以起始点为中心，向外层层扩展”</li>\n<li>最短路径问题<ul>\n<li>初始化两个集合(S, U)（S为只有初始顶点点A的集合， U为其他顶点集合）</li>\n<li>如果U不为空， 对U集合顶点进行距离的排序，并取出距离A最近的一个顶点D<ul>\n<li>将顶点D的纳入S集合</li>\n<li>更新通过顶点D到达U集合所有点的距离（如果距离更小则更新，否则不更新）</li>\n<li>重复2步骤</li>\n</ul>\n</li>\n<li>知道U集合为空，算法完成</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内部网关路由协议之OSPF协议</p>\n<ul>\n<li>链路状态(LS)协议<ul>\n<li>向所有的路由器发送消息</li>\n<li>消息描述该路由器与相邻路由器的链路状态<ul>\n<li>距离、时延、带宽</li>\n</ul>\n</li>\n<li>只有链路状态发生变化时，才发送更新信息</li>\n</ul>\n</li>\n<li>OSPF协议的过程<ul>\n<li>OSPF(Open Shortest Path First：开放最短路径优先)</li>\n<li>OSPF协议的核心是Dijkstra算法</li>\n<li>向所有的路由器发送消息<ul>\n<li>获得网络中的所有信息–&gt; “网络的完整拓扑”</li>\n<li>也称为“链路状态数据库”</li>\n<li>“链路状态数据库”是全网一致的</li>\n<li>Dijkstra（迪杰斯特拉）算法</li>\n</ul>\n</li>\n<li>消息描述该路由器与相邻路由器的链路状态<ul>\n<li>OSPF协议更加客观、更加先进</li>\n</ul>\n</li>\n<li>只有链路状态发生变化时，才发送更新信息<ul>\n<li>减少了数据的交换，更快收敛</li>\n</ul>\n</li>\n<li>路由器接入网络</li>\n<li>路由器向邻居发出问候信息</li>\n<li>与邻居交流链路状态数据库</li>\n<li>广播和更新未知路由</li>\n</ul>\n</li>\n<li>五种消息类型<ul>\n<li>问候消息（Hello）</li>\n<li>链路状态数据库描述信息</li>\n<li>链路状态请求信息</li>\n<li>链路状态更新信息</li>\n<li>链路状态确认信息</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>RIP协议</th>\n<th>OSPF协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>从邻居看网络</td>\n<td>整个网络的拓扑</td>\n</tr>\n<tr>\n<td>在路由器之间累加距离</td>\n<td>Dijkstra算法计算最短路径</td>\n</tr>\n<tr>\n<td>频繁、周期更新，收敛很慢</td>\n<td>状态变化更新，收敛很快</td>\n</tr>\n<tr>\n<td>路由间拷贝路由信息</td>\n<td>路由间传递链路状态，自行计算路径</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"4-13-外部网关路由协议之BGP协议\"><a href=\"#4-13-外部网关路由协议之BGP协议\" class=\"headerlink\" title=\"4.13 外部网关路由协议之BGP协议\"></a>4.13 外部网关路由协议之BGP协议</h3><ul>\n<li>BGP(Border Gateway Protocol: 边际网关协议)</li>\n<li>BGP协议是运行在自制系统(AS)之间的一种协议</li>\n<li>互联网的规模很大</li>\n<li>AS内部使用不同的路由协议</li>\n<li>AS之间需要考虑除网络特性以外的一些因素（政治、安全…）</li>\n<li>BGP协议能够找到一条到达目的比较好的路由</li>\n<li>BGP发言人(speaker)<ul>\n<li>BGP并不关心内部网络拓扑</li>\n<li>AS之间通过BGP发言人交流信息</li>\n<li>BGP Speaker可以人为配置策略</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-传输层\"><a href=\"#5-传输层\" class=\"headerlink\" title=\"5.传输层\"></a>5.传输层</h2><h3 id=\"5-1-传输层的主要功能\"><a href=\"#5-1-传输层的主要功能\" class=\"headerlink\" title=\"5.1 传输层的主要功能\"></a>5.1 传输层的主要功能</h3><ul>\n<li><p>本质：跨设备的进程与进程的通信</p>\n<ul>\n<li>单机进程间通信方式：共享内存、Unix域套接字</li>\n</ul>\n</li>\n<li><p>端口的概念</p>\n<ul>\n<li>使用端口(Port)来标记不同的网络进程</li>\n<li>端口(Port)使用16比特位表示(0~65535)</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>FTP</th>\n<th>HTTP</th>\n<th>HTTPS</th>\n<th>DNS</th>\n<th>TELNET</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>21</td>\n<td>80</td>\n<td>443</td>\n<td>53</td>\n<td>23</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h3 id=\"5-2-UDP协议详解\"><a href=\"#5-2-UDP协议详解\" class=\"headerlink\" title=\"5.2 UDP协议详解\"></a>5.2 UDP协议详解</h3><ul>\n<li>UDP是一个非常简单的协议</li>\n<li>UDP(User Datagram Protocol: 用户数据报协议)</li>\n<li>数据报(Datagram)<ul>\n<li>不合并 不拆分</li>\n</ul>\n</li>\n<li>层次位置</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>协议层</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理层</td>\n<td>001010101001110110101010101010…10101010101010101010101010101</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>【帧首部 】【“帧”的数据】 【帧尾部】</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>【IP首部】【 IP数据报的数据】</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>【UDP首部】【 UDP数据报的数据(应用层数据)】</td>\n</tr>\n</tbody></table>\n<ul>\n<li>报文结构<ul>\n<li>16位源端口号 + 16位目的端口号</li>\n<li>16位UDP长度 + 16位UDP校验和</li>\n<li>头部报文共8个字节</li>\n<li>UDP数据</li>\n<li>各个报文字段的意义<ul>\n<li>16位源端口号<ul>\n<li>源机器使用的网络进程</li>\n</ul>\n</li>\n<li>16位目的端口号<ul>\n<li>目的机器使用的进程</li>\n</ul>\n</li>\n<li>16位UDP长度<ul>\n<li>udp数据报的长度，最小是8个字节仅包括手部</li>\n</ul>\n</li>\n<li>6位UDP校验和<ul>\n<li>检测数据报在传输过程中是否出错</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>UDP的特点<ul>\n<li>UDP是无连接协议</li>\n<li>UDP不能保证可靠的交付数据，“想发就发”，“无法保证数据在网络中是否丢失”</li>\n<li>UDP是面向报文传输的</li>\n<li>UDP没有拥塞控制</li>\n<li>UDP的首部开销很小</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-3-TCP报文详解\"><a href=\"#5-3-TCP报文详解\" class=\"headerlink\" title=\"5.3 TCP报文详解\"></a>5.3 TCP报文详解</h3><ul>\n<li>TCP(Transmission Control Protocol: 传输控制协议)</li>\n<li>TCP协议是计算机网络中非常复杂的一个协议</li>\n<li>层次位置</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>协议层</th>\n<th>数据格式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>物理层</td>\n<td>001010101001110110101010101010…10101010101010101010101010101</td>\n</tr>\n<tr>\n<td>数据链路层</td>\n<td>【帧首部 】【“帧”的数据】 【帧尾部】</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>【IP首部】【 IP数据报的数据】</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>【TCP首部】【 TCP数据报的数据 】</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>特点</p>\n<ul>\n<li>TCP是面向连接的协议</li>\n<li>TCP的一个连接有两端（点对点通信）</li>\n<li>TCP提供可靠的传输服务</li>\n<li>TCP协议提供全双工的通信</li>\n<li>TCP是面向字节流的协议，合并、分拆</li>\n</ul>\n</li>\n<li><p>报文结构</p>\n<ul>\n<li><p>16位源端口 16位目的端口</p>\n</li>\n<li><p>32位序号</p>\n</li>\n<li><p>32位确认号</p>\n</li>\n<li><p>数据偏移 +保留字段 +TCP标记 +窗口</p>\n</li>\n<li><p>16位校验和 + 16位紧急指针</p>\n</li>\n<li><p>以上行固定20个字节</p>\n</li>\n<li><p>TCP选项（可选）+ 填充</p>\n</li>\n<li><p>各个报文字段的意义</p>\n<ul>\n<li><p>16位源端口号</p>\n<ul>\n<li>源机器使用的网络进程</li>\n</ul>\n</li>\n<li><p>16位目的端口号</p>\n<ul>\n<li>目的机器使用的进程</li>\n</ul>\n</li>\n<li><p>32位序号</p>\n<ul>\n<li>0~2^32-1</li>\n<li>面向字节流，一个字节一个序号</li>\n<li>数据首字节序号</li>\n</ul>\n</li>\n<li><p>32位确认号</p>\n<ul>\n<li>0~2^32-1</li>\n<li>一个字节一个序号</li>\n<li>期望收到数据的首字节序号</li>\n<li>确认号为N：则表示N-1序号的数据都已经收到</li>\n</ul>\n</li>\n<li><p>数据偏移</p>\n<ul>\n<li>占4位： 0~15，单位为： 32位字</li>\n<li>数据偏离首部的距离</li>\n</ul>\n</li>\n<li><p>保留字段</p>\n</li>\n<li><p>TCP标记</p>\n<ul>\n<li>占6位，每位各有不同意义</li>\n<li>TCP三次握手和四次挥手会用到这里的标记为</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>URG</td>\n<td>Urgent: 紧急位， URG=1，表示紧急数据</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgement: 确认位， ACK=1，确认号才生效</td>\n</tr>\n<tr>\n<td>PSH</td>\n<td>Push: 推送位， PSH=1，尽快地把数据交付给应用层</td>\n</tr>\n<tr>\n<td>RST</td>\n<td>Reset: 重置位， RST=1，重新建立连接</td>\n</tr>\n<tr>\n<td>SYN</td>\n<td>Synchronization: 同步位， SYN=1 表示连接请求报文</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>Finish: 终止位， FIN=1 表示释放连接</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>窗口</p>\n<ul>\n<li>占16位： 0~2^16-1</li>\n<li>窗口指明允许对方发送的数据量</li>\n<li>确认号是500，窗口大小1000，则501-1500是可以接收的</li>\n</ul>\n</li>\n<li><p>16位校验和 </p>\n</li>\n<li><p>16位紧急指针</p>\n<ul>\n<li>紧急数据（URG=1）</li>\n<li>指定紧急数据在报文的位置</li>\n</ul>\n</li>\n<li><p>TCP选项（可选）</p>\n<ul>\n<li>最多40字节</li>\n<li>支持未来的拓展</li>\n</ul>\n</li>\n<li><p>填充</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-4-TCP可靠传输的基本原理\"><a href=\"#5-4-TCP可靠传输的基本原理\" class=\"headerlink\" title=\"5.4 TCP可靠传输的基本原理\"></a>5.4 TCP可靠传输的基本原理</h3><ul>\n<li><p>停止等待协议</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171526.jpg\" alt=\"\"></p>\n<ul>\n<li>无差错的情况</li>\n<li>出差错的情况<ul>\n<li>发送的消息在路上丢失了</li>\n<li>确认的消息在路上丢失了</li>\n<li>确认的消息很久才到</li>\n<li>超时重传</li>\n<li>超时重传计时器<ul>\n<li>每发送一个消息，都需要设置一个定时器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>停止等待协议是最简单的可靠传输协议</li>\n<li>停止等待协议对信道的利用效率不高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>连续ARQ协议</p>\n<ul>\n<li>ARQ(Automatic Repeat reQuest：自动重传请求)</li>\n<li>既然单个发送和确认效率低，可不可以批量发送和确认？</li>\n<li>滑动窗口<ul>\n<li>固定窗口内的字节批量发出，确认几个窗口就向后滑动几个</li>\n</ul>\n</li>\n<li>累计确认<ul>\n<li>只要收到某个消息的确认，那么这个消息之前的消息都确认了</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-5-TCP协议的可靠传输\"><a href=\"#5-5-TCP协议的可靠传输\" class=\"headerlink\" title=\"5.5 TCP协议的可靠传输\"></a>5.5 TCP协议的可靠传输</h3><ul>\n<li>TCP的可靠传输基于连续ARQ协议</li>\n<li>TCP的滑动窗口以字节为单位</li>\n<li>滑动窗口<ul>\n<li>【已经确认的字节序号】-【窗口】-【不允许发送的字节序号】</li>\n<li>窗口中的字节数据：已发送未确认+可用窗口</li>\n<li>如果没有按顺序收到窗口开始的确认，只收到中间的确认消息，窗口不滑动，执行超时重传</li>\n<li>选择重传<ul>\n<li>选择重传需要指定需要重传的字节</li>\n<li>每一个字节都有唯一的32位序号</li>\n<li>存储在TCP选项（可选）</li>\n<li>最多40个字节，序号展4个字节，最多10个序号，每个序号表示的某段的起止位置，分段传输</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-6-TCP协议的流量控制\"><a href=\"#5-6-TCP协议的流量控制\" class=\"headerlink\" title=\"5.6 TCP协议的流量控制\"></a>5.6 TCP协议的流量控制</h3><ul>\n<li>流量控制指让发送方发送速率不要太快</li>\n<li>流量控制是使用滑动窗口来实现的</li>\n<li>流量控制流程<ul>\n<li><strong>窗口（rwnd）</strong>指明允许对方发送的数据量，Receiver window</li>\n<li><strong>序号（seq）</strong>用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则TCP用序号对每个字节进行计数。序号是32bit的无符号数，序号到达232－1后又从0开始。sequence</li>\n<li><strong>确认序号（ack）</strong> 是上次已成功收到数据字节序号加1。只有ACK标志位为1时确认序号字段才有效。acknowledgement </li>\n<li><strong>确认位（ACK）</strong>  Acknowledgement: 确认位， ACK=1，确认号才生效</li>\n<li>发送方：发送100字节的数据（seq=1, DATA）</li>\n<li>发送方：发送100字节的数据（seq=101, DATA）</li>\n<li>-&gt;接收方：确认200字节的数据，并告诉对方窗口为300（ACK=1, ack=201, rwnd=300）</li>\n<li>发送方：发送100字节的数据（seq=301, DATA）</li>\n<li>发送方：发送200字节的数据（seq=401, DATA）</li>\n<li>-&gt;接收方：确认300字节的数据，并告诉对方窗口为0（ACK=1, ack=601, rwnd=0）</li>\n<li>-&gt;接收方想再次接受数据需要发送窗口大小给发送方</li>\n<li>如果这个窗口调整请求出错了会产生死锁吗</li>\n<li>坚持定时器来避免死锁的情况</li>\n</ul>\n</li>\n<li>坚持定时器<ul>\n<li>当接收到窗口为0的消息，则启动坚持定时器</li>\n<li>坚持定时器每隔一段时间发送一个窗口探测报文</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-7-TCP协议的拥塞控制\"><a href=\"#5-7-TCP协议的拥塞控制\" class=\"headerlink\" title=\"5.7 TCP协议的拥塞控制\"></a>5.7 TCP协议的拥塞控制</h3><ul>\n<li>一条数据链路经过非常多的设备</li>\n<li>数据链路中各个部分都有可能成为网路传输的瓶颈</li>\n<li>拥塞控制 VS 流量控制<ul>\n<li>流量控制考虑点对点的通信量的控制</li>\n<li>拥塞控制考虑整个网络，是全局性的考虑</li>\n</ul>\n</li>\n<li>拥塞判断：报文超时可以认为是拥塞</li>\n<li>拥塞控制算法<ul>\n<li>慢启动算法<ul>\n<li>由小到大逐渐增加发送数据量</li>\n<li>每收到一个报文确认，就加一，例如：1 2 4 8 16 （指数增长）</li>\n<li>慢启动阈值(ssthresh)</li>\n</ul>\n</li>\n<li>拥塞避免算法<ul>\n<li>维护一个拥塞窗口的变量，大于慢启动阈值</li>\n<li>只要网络不拥塞，就试探着拥塞窗口调大，17 18 19</li>\n<li>最大限度的利用管道</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171603.jpg\" alt=\"\"></p>\n<h3 id=\"5-8-TCP连接的建立\"><a href=\"#5-8-TCP连接的建立\" class=\"headerlink\" title=\"5.8 TCP连接的建立\"></a>5.8 TCP连接的建立</h3><ul>\n<li>TCP标记：占6位，每位各有不同意义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>Synchronization: 同步位， SYN=1 表示连接请求报文</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgement: 确认位， ACK=1，确认号才生效</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>Finish: 终止位， FIN=1 表示释放连接</td>\n</tr>\n<tr>\n<td>seq</td>\n<td>sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位</td>\n</tr>\n<tr>\n<td>ack</td>\n<td>acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位</td>\n</tr>\n</tbody></table>\n<ul>\n<li>三次握手建立TCP连接的过程<ul>\n<li>接收方：监听</li>\n<li>发送方：SYN=1, seq=x</li>\n<li>发送方：同步已发送</li>\n<li>接收方：SYN=1, ACK=1, seq=y, ack=x+ 1</li>\n<li>接收方：同步已接受</li>\n<li>发送方：ACK=1, seq=x+ 1, ack=y+1</li>\n<li>发送方：建立连接</li>\n<li>接收方：建立连接</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171620.jpg\" alt=\"\"></p>\n<ul>\n<li>为什么需要三次握手<ul>\n<li>避免已经失效的连接请求报文传送到对方， 引起错误</li>\n<li>避免两次建立连接时多次连接的情况</li>\n<li>第三次握手时，发送方可以检查是否已经发起了第三次，如果已经发起了就忽略其它超时的连接</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801172608.jpg\" alt=\"\"></p>\n<ul>\n<li>TCP三次握手 <ul>\n<li>使用TCP协议进行通信的双方必须先建立连接，然后才能开始传输数据。为了确保连接双方可靠性，在双方建立连接时, TCP协议采用了三次握手策略。</li>\n<li>第一次握手:客户端发送带有SYN标志的连接请求报文段，然后进入SYN SEND )状态，等待服务端的确认。</li>\n<li>第二次握手:服务端接收到客户端的SYN报文段后需要发送ACK信息对这个SYN报文段进行确认。同时，还要发送自己的SYN请求信息。服务端会将上述的信息放到一个报文段(SYN+ ACK报文段)中，一并发送给客户端此时服务端将会进入SYN RECV状态。</li>\n<li>第三次握手:客户端接收到服务端的SYN+ ACK报文段后,会想服务端发送ACK确认报文段，这个报文段发送完毕后，客户端和服务端都进入ESTABLISHED状态,完成TCP三次握手。</li>\n</ul>\n</li>\n<li>为什么需要第三次<ul>\n<li>确认双方的收发能力，一共八个能力：自己的收发和对方的收发</li>\n<li>第一次：服务端能知道客户端的发送和自己的接收能力正常</li>\n<li>第二次：客户端能知道服务端的接收（第一次）和发送能力和自己的发送（第一次）能力和接收能力都正常</li>\n<li>第三次：服务端能知道客户端的接收（第二次）和自己的发送（第二次）能力正常</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-9-TCP连接的释放\"><a href=\"#5-9-TCP连接的释放\" class=\"headerlink\" title=\"5.9 TCP连接的释放\"></a>5.9 TCP连接的释放</h3><ul>\n<li>TCP标记：占6位，每位各有不同意义</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标记</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SYN</td>\n<td>Synchronization: 同步位， SYN=1 表示连接请求报文</td>\n</tr>\n<tr>\n<td>ACK</td>\n<td>Acknowledgement: 确认位， ACK=1，确认号才生效</td>\n</tr>\n<tr>\n<td>FIN</td>\n<td>Finish: 终止位， FIN=1 表示释放连接</td>\n</tr>\n<tr>\n<td>seq</td>\n<td>sequence，序号（seq）用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。32位</td>\n</tr>\n<tr>\n<td>ack</td>\n<td>acknowledgement，确认序号（ack）是上一次已成功收到的数据字节序号（seq）加1。标识期望发对方发来的序号是它的值，只有ACK标志位为1时确认序号字段才有效。32位</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>四次释放</p>\n<ul>\n<li>四次释放TCP连接的过程<ul>\n<li>发送方：FIN=1,seq=u</li>\n<li>发送方：释放等待状态（FIN-WAIT-1）</li>\n<li>接收方：ACK=1,seq=v,ack=u+1</li>\n<li>发送方：释放等待状态（FIN-WAIT-2）</li>\n<li>接收方：关闭等待状态（CLOSE-WAIT）</li>\n<li>接收方：因为是被动关闭可能有未发出的数据需要继续完成发送</li>\n<li>接收方：FIN=1,ACK=1,seq=w,ack=u+1</li>\n<li>接收方：最后确认状态（LAST-ACK）</li>\n<li>发送方：ACK=1,seq=u+1,ack=w+1</li>\n<li>发送方：等待计时（TIME-WAIT）</li>\n<li>接收方：关闭状态</li>\n<li>发送方：关闭状态</li>\n</ul>\n</li>\n<li>等待计时器<ul>\n<li>等待时间：2MSL<ul>\n<li>MSL(Max Segment Lifetime): 最长报文段寿命</li>\n<li>MSL建议设置为2分钟</li>\n</ul>\n</li>\n<li>为什么需要等待2MSL？<ul>\n<li>确保发送方的ACK可以到达接收方</li>\n<li>最后一个报文没有确认</li>\n<li>接收方在 2MSL时间内没有收到，则接收方会重发确认释放请求数据报</li>\n<li>确保当前连接的所有报文都已经过期</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171643.jpg\" alt=\"\"></p>\n<h3 id=\"5-10-套接字与套接字编程\"><a href=\"#5-10-套接字与套接字编程\" class=\"headerlink\" title=\"5.10 套接字与套接字编程\"></a>5.10 套接字与套接字编程</h3><ul>\n<li>使用端口(Port)来标记不同的网络进程，端口(Port)使用16比特位表示(0~65535)</li>\n<li>网络套接字<ul>\n<li>𝐼𝑃: 𝑃𝑜𝑟𝑡—— 套接字</li>\n<li>套接字(Socket)是抽象概念，表示TCP连接的一端</li>\n<li>通过套接字可以进行数据发送或接收</li>\n<li>TCP连接由两个套接字组成：TCP={ 𝑆𝑜𝑐𝑘𝑒𝑡1: 𝑆𝑜𝑐𝑘𝑒𝑡2}= { {𝐼𝑃: 𝑃𝑜𝑟𝑡}  { 𝐼𝑃: 𝑃𝑜𝑟𝑡} }</li>\n<li>客户端 –TCP连接—服务端</li>\n<li>服务端<ul>\n<li>创建套接字</li>\n<li>绑定(bind)套接字</li>\n<li>监听(listen)套接字</li>\n<li>接收&amp;处理信息</li>\n</ul>\n</li>\n<li>客户端<ul>\n<li>创建套接字</li>\n<li>连接套接字</li>\n<li>发送信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>客户端-服务端编程<ul>\n<li>Java、Pathy</li>\n</ul>\n</li>\n<li>网络套接字 VS 域套接字<ul>\n<li>域套接字：域套接字文件，不会经过tcp/ip协议簇，单机跨进程建议使用</li>\n<li>网络套接字：单机和跨机都会在tcp/ip协议栈走一圈，单机跨进程不建议使用</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6-应用层\"><a href=\"#6-应用层\" class=\"headerlink\" title=\"6.应用层\"></a>6.应用层</h2><h3 id=\"6-1-应用层概述\"><a href=\"#6-1-应用层概述\" class=\"headerlink\" title=\"6.1 应用层概述\"></a>6.1 应用层概述</h3><ul>\n<li>传输层以及以下的层提供完整的通信服务</li>\n<li>应用层是面向用户的一层</li>\n<li>已有的应用层软件 ，面向传输层的编程</li>\n<li>UDP<ul>\n<li>多媒体信息分发<ul>\n<li>视频 语音 实时信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>TCP<ul>\n<li>可靠消息传输<ul>\n<li>金融交易 可靠通讯 MQ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-2-应用层主要功能\"><a href=\"#6-2-应用层主要功能\" class=\"headerlink\" title=\"6.2 应用层主要功能\"></a>6.2 应用层主要功能</h3><ul>\n<li>应用进程的报文类型（请求报文、应答报文）</li>\n<li>报文的语法、格式</li>\n<li>应用进程发送数据的时机、规则</li>\n<li>定义应用间通讯的规则</li>\n</ul>\n<h3 id=\"6-3-DNS服务详解\"><a href=\"#6-3-DNS服务详解\" class=\"headerlink\" title=\"6.3 DNS服务详解\"></a>6.3 DNS服务详解</h3><ul>\n<li><p>DNS（Domain Name System: 域名系统）</p>\n<ul>\n<li>域：Domain，网络端，自治域</li>\n<li>名：Name，IP地址</li>\n</ul>\n</li>\n<li><p>主机的进程：Web 服务、网络存储服务、远程调用服务、邮件服务</p>\n</li>\n<li><p>IP地址+端口：14.215.177.39:80 、14.18.245.164:25、161.23.37.215:8810</p>\n</li>\n<li><p>DNS的功能</p>\n<ul>\n<li>使用域名帮助记忆<ul>\n<li>点分十进制转为人容易记忆的单词</li>\n<li>域名–&gt;DNS服务–&gt;IP</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>域名详解</p>\n<ul>\n<li><p>域名由点、字母和数字组成</p>\n</li>\n<li><p>点分割不同的域</p>\n</li>\n<li><p>域名可以分为顶级域、二级域、三级域</p>\n<ul>\n<li>例如 ：www(三级域).taobao(二级域).com(顶级域)</li>\n<li>顶级域<ul>\n<li>国家<ul>\n<li>cn：中国</li>\n<li>us：美国</li>\n<li>uk：英国</li>\n<li>ca：加拿大</li>\n</ul>\n</li>\n<li>通用<ul>\n<li>com：公司</li>\n<li>net：网络服务机构</li>\n<li>gov：政府机构</li>\n<li>org：其它组织机构</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>二级域<ul>\n<li>qq、taobao、baidu、alibaba、aliyun、amazon、google、facebook</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171724.jpg\" alt=\"\"></p>\n</li>\n</ul>\n</li>\n<li><p>域名服务器</p>\n<ul>\n<li>一般由国际或者机构搭建</li>\n<li>查询过程<ul>\n<li>本地查询，有就返回</li>\n<li>没有去查根域名服务器</li>\n<li>根域名服务器告诉去查哪一个顶级域名服务器</li>\n<li>顶级域名服务器查到后告诉哪一个域名服务器</li>\n<li>如果域名服务器没找到会返回根域名服务器再次查找</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801171736.jpg\" alt=\"\"></p>\n</li>\n<li><p>DNS域名解析</p>\n<ul>\n<li>通常我们访问一一个网站，使用的是主机名或者域名来进行访问的。因为相对于IP地址(一组纯数字)，域名更容易让人记住。但TCP/IP协议使用的是IP地址进行访问的，所以必须有个机制或服务把域名转换成IP地址。DNS服务就是用来解决这个问题的，它提供域名到IP地址之间的解析服务。</li>\n<li>用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户</li>\n</ul>\n</li>\n<li><p>DNS解析流程</p>\n<ul>\n<li>就近原则</li>\n<li>本机host文件</li>\n<li>本机dns服务</li>\n<li>远程13台根域名服务</li>\n<li>转发模式</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-4-DHCP协议详解\"><a href=\"#6-4-DHCP协议详解\" class=\"headerlink\" title=\"6.4 DHCP协议详解\"></a>6.4 DHCP协议详解</h3><ul>\n<li>DHCP是什么<ul>\n<li>DHCP(Dynamic Host Configuration Protocol: 动态主机设置协议)</li>\n<li>DHCP是一个局域网协议</li>\n<li>DHCP是应用UDP协议的应用层协议</li>\n</ul>\n</li>\n<li>DHCP的功能<ul>\n<li>即插即用联网<ul>\n<li>临时IP，内网地址，转换为外网</li>\n<li>租期，租期到了会回收</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>DHCP的工作机制<ul>\n<li>DHCP服务器监听默认端口： 67</li>\n<li>主机使用UDP协议广播DHCP发现报文</li>\n<li>DHCP服务器发出DHCP提供报文</li>\n<li>主机向DHCP服务器发出DHCP请求报文</li>\n<li>DHCP服务器回应并提供IP地址</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-5-HTTP协议详解\"><a href=\"#6-5-HTTP协议详解\" class=\"headerlink\" title=\"6.5 HTTP协议详解\"></a>6.5 HTTP协议详解</h3><ul>\n<li><p>HTTP是什么</p>\n<ul>\n<li>HTTP(HyperText Transfer Protocol: 超文本传输协议)</li>\n<li>超文本： “超级文本”， “带超链接文本”，“富文本”</li>\n<li>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;，例如：<a href=\"https://www.baidu.com/\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com/</a></li>\n<li>HTTP协议是可靠的数据传输协议<ul>\n<li>Web内容：文本 图片 文件 动图 音频 视频</li>\n</ul>\n</li>\n<li>C/S: 客户端—&gt;HTTP协议—-&gt; 服务端</li>\n</ul>\n</li>\n<li><p>Web服务器</p>\n<ul>\n<li><p>硬件部分 ：阿里云虚拟服务器、迷你计算机</p>\n</li>\n<li><p>软件部分：Apache、Nginx</p>\n<ul>\n<li><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</li>\n<li>Apache(音译为阿帕奇)是世界使用排名第一的Web服务器软件。它可以运行在几乎所有广泛使用的计算机平台上，由于其跨平台和安全性被广泛使用，是最流行的Web服务器端软件之一。</li>\n</ul>\n</li>\n<li><p>工作机制</p>\n<ul>\n<li>接受客户端连接 </li>\n<li>接收请求报文 </li>\n<li>处理请求</li>\n<li>访问Web资源</li>\n<li>构造应答</li>\n<li>发送应答</li>\n</ul>\n</li>\n<li><p>HTTP请求方法</p>\n<ul>\n<li>GET：获取指定的服务端资源</li>\n<li>POST：提交数据到服务端</li>\n<li>DELETE：删除指定的服务端资源</li>\n<li>UPDATE：更新指定的服务端资源</li>\n<li>PUT</li>\n<li>OPTIONS</li>\n<li>PATCH</li>\n<li>HEAD</li>\n<li>TRACE</li>\n</ul>\n</li>\n<li><p>HTTP指定资源</p>\n<ul>\n<li>在地址中指定</li>\n<li>在请求数据中指定</li>\n</ul>\n</li>\n<li><p>HTTP请求报文</p>\n<ul>\n<li>[请求方法] [请求地址] [HTTP版本]</li>\n<li>[请求头]</li>\n<li>[请求内容]</li>\n</ul>\n</li>\n<li><p>HTTP应答报文</p>\n<ul>\n<li>[HTTP版本] [状态码] [状态解释]</li>\n<li>[应答头]</li>\n<li>[应答内容]</li>\n</ul>\n</li>\n<li><p>HTTP应答状态码</p>\n<ul>\n<li>状态码 含义<br>200<del>299 成功状态码<br>300</del>399 重定向状态码<br>400<del>499 客户端错误状态码<br>500</del>599 服务端错误状态码</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200~299</td>\n<td>成功状态码</td>\n</tr>\n<tr>\n<td>300~399</td>\n<td>重定向状态码</td>\n</tr>\n<tr>\n<td>400~499</td>\n<td>客户端错误状态码</td>\n</tr>\n<tr>\n<td>500~599</td>\n<td>服务端错误状态码</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-6-HTTP工作的结构\"><a href=\"#6-6-HTTP工作的结构\" class=\"headerlink\" title=\"6.6 HTTP工作的结构\"></a>6.6 HTTP工作的结构</h3><ul>\n<li>Web代理<ul>\n<li>正向代理</li>\n<li>反向代理</li>\n</ul>\n</li>\n<li>CDN<ul>\n<li>CDN（Content Delivery Network：内容分发网络）</li>\n<li>多媒体内容</li>\n</ul>\n</li>\n<li>爬虫<ul>\n<li>增加网络拥塞</li>\n<li>损耗服务器资源</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-7-HTTPS协议详解\"><a href=\"#6-7-HTTPS协议详解\" class=\"headerlink\" title=\"6.7 HTTPS协议详解\"></a>6.7 HTTPS协议详解</h3><ul>\n<li>敏感信息：账号密码、个人信息、账户金额、交易信息、敏感信息…</li>\n<li>HTTPS(Secure)是安全的HTTP协议</li>\n<li>http(s)://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;，端口：443</li>\n<li>工作机制<ul>\n<li>加密模型<ul>\n<li>对称加密：使用秘钥加密 ，使用秘钥解密，两个秘钥“一致”</li>\n<li>非对称加密：两个秘钥“不一致”<ul>\n<li>A、 B是拥有一定数学关系的一组秘钥</li>\n<li>私钥：私钥自己使用，不对外公开</li>\n<li>公钥：公钥给大家使用，对外公开</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数字证书<ul>\n<li>数字证书是可信任组织颁发给特定对象的认证</li>\n<li>证书格式、版本号</li>\n<li>证书序列号</li>\n<li>签名算法</li>\n<li>有效期</li>\n<li>对象名称</li>\n<li>对象公开秘钥</li>\n</ul>\n</li>\n<li>SSL<ul>\n<li>SSL(Secure Sockets Layer: 安全套接层)</li>\n<li>SSL位于传输层与应用层之间</li>\n<li>数据安全和数据完整</li>\n<li>对传输层数据进行加密后传输</li>\n</ul>\n</li>\n<li>HTTPS工作流程<ul>\n<li>443端口的TCP连接</li>\n<li>SSL安全参数握手</li>\n<li>客户端发送数据</li>\n<li>服务端发送数据</li>\n</ul>\n</li>\n<li>SSL安全参数握手过程<ul>\n<li>客户端：随机数1、协议版本、加密算法</li>\n<li>服务端：确定加密算法、数字证书、随机数2</li>\n<li>客户端：<ul>\n<li>确认证书是否有效</li>\n<li>生成随机数3</li>\n<li>使用服务器的公钥加密随机数3</li>\n</ul>\n</li>\n<li>根据随机数1、 2、 3和相同的算法生成对称秘钥</li>\n<li>双方使用对称秘钥进行加密通信</li>\n<li>综合使用对称加密、非对称加密</li>\n<li>双方分别生成秘钥，没有经过传输</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-8-输入域名按下回车键的过程有哪些\"><a href=\"#6-8-输入域名按下回车键的过程有哪些\" class=\"headerlink\" title=\"6.8 输入域名按下回车键的过程有哪些\"></a>6.8 输入域名按下回车键的过程有哪些</h3><ul>\n<li>域名解析<ul>\n<li>客户端生成DNS的UDP报文</li>\n<li>查询本机配置的DNS IP地址</li>\n<li>UDP报文经本机协议栈发送出去</li>\n<li>网络层 数据链路层 物理层</li>\n<li>请求顶级域名服务器</li>\n</ul>\n</li>\n<li>建立连接<ul>\n<li>TCP三次握手</li>\n<li>SSL握手 交换秘钥</li>\n</ul>\n</li>\n<li>HTTP通信<ul>\n<li>GET</li>\n</ul>\n</li>\n<li>释放连接<ul>\n<li>四次挥手 结束连接</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-HTTP协议详解\"><a href=\"#7-HTTP协议详解\" class=\"headerlink\" title=\"7.HTTP协议详解\"></a>7.HTTP协议详解</h2><h3 id=\"7-1-浏览器背后的故事\"><a href=\"#7-1-浏览器背后的故事\" class=\"headerlink\" title=\"7.1 浏览器背后的故事\"></a>7.1 浏览器背后的故事</h3><ul>\n<li><a href=\"http://www.basedev.cn/\">http://www.basedev.cn/</a></li>\n<li>用户输入-浏览器-域名查询-获取IP-发送请求-web服务器-回传网页内容-浏览器-渲染-用户</li>\n<li>HTTP<ul>\n<li>超文本传输协议(HTTP)是一-种通信协议， 它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器</li>\n<li>HTTP是- -个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展</li>\n</ul>\n</li>\n<li>Web与HTTP<ul>\n<li>WEB是一种基于超文本和HTTP的、 全球性的、动态交互的、跨平台的分布式图形信息系统</li>\n<li>建立在Internet上的一种网络服务，为浏览者在Internet.上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超，级链接将Internet上的信息节点组织成一个互为关联的网状结构</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"7-2-HTTP协议的前世今生\"><a href=\"#7-2-HTTP协议的前世今生\" class=\"headerlink\" title=\"7.2 HTTP协议的前世今生\"></a>7.2 HTTP协议的前世今生</h3><ul>\n<li>1990年10月万维网之父TimBerners-Lee最早提出了HTTP协议</li>\n<li>1991年HTTP0.9诞生</li>\n<li>1996年5月HTTP1.0发布</li>\n<li>1997年1月HTTP1.1发布</li>\n<li>2015年5月HTTP2.0提出</li>\n<li>HTTP3.0，QUIC协议</li>\n</ul>\n<h3 id=\"7-3-透过TCP-IP看HTTP\"><a href=\"#7-3-透过TCP-IP看HTTP\" class=\"headerlink\" title=\"7.3 透过TCP/IP看HTTP\"></a>7.3 透过TCP/IP看HTTP</h3><ul>\n<li>TCP/IP协议族<ul>\n<li>TCP/IP协议其实是一-系列与互联网相关联的协议集 合起来的总称</li>\n<li>分层管理是TCP/IP协议的重要特征</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>应用层一般是我们编写的应用程序,决定了向用户提供的应用服务。应用层可以通过系统调用与传输层进行通信。如: FTP、DNS、HTTP等。</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>传输层通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。</li>\n<li>在传输层有两个性质不同的协议:TCP和UDP。</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径(传输路线)到达对方计算机，并把数据包传输给对方。</li>\n</ul>\n</li>\n<li>链路层.<ul>\n<li>链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件设备驱动、NIC (Network Interface Card,网络适配器)以及光纤等物理可见部分。硬件. 上的范畴均在链路层的作用范围之内。</li>\n</ul>\n</li>\n<li>数据包的封装过程</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008eGmZEly1gnqxpcdpezj30ig0aqzm8.jpg\" alt=\"\"></p>\n<ul>\n<li>http数据传输过程<ul>\n<li>发送端发送数据时，数据会从上层传输到下层，且每经过一层都会被打上该层的头部信息。</li>\n<li>接收端接收数据时，数据会从下层传输到上层，传输前会把下层的头部信息删除.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"8-计算机网络实践\"><a href=\"#8-计算机网络实践\" class=\"headerlink\" title=\"8.计算机网络实践\"></a>8.计算机网络实践</h2><h3 id=\"8-1-网络嗅探工具\"><a href=\"#8-1-网络嗅探工具\" class=\"headerlink\" title=\"8.1 网络嗅探工具\"></a>8.1 网络嗅探工具</h3><ul>\n<li><p>实现流程</p>\n<ul>\n<li>搭建服务基本框架</li>\n<li>Python操作字节序列<ul>\n<li>字节序<ul>\n<li>255 = 00000000,11111111</li>\n<li>大端字节序：高位在前，00000000,11111111<ul>\n<li>网络，易读</li>\n</ul>\n</li>\n<li>小端字节序：高位在后，11111111, 00000000<ul>\n<li>主机，CPU对小端字节序处理效率高效</li>\n</ul>\n</li>\n<li>计算机电路先处理低位字节效率比较高</li>\n<li>人类习惯读写大端字节序</li>\n</ul>\n</li>\n<li>格式字符<ul>\n<li>%s 字符串，%d 整数，%x 十六进制，%f 浮点数</li>\n<li>格式字符 C++/Python类型 标准大小（字节）</li>\n<li>B-unsigned char/整数 1</li>\n<li>H unsigned short/整数 2</li>\n<li>L unsigned long/整数 4</li>\n<li>s char[]/字节串 </li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实现IP报文解析器</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210801173224.jpg\" alt=\"\"></p>\n<ul>\n<li>实现UDP报文解析器</li>\n<li>实现TCP报文解析器</li>\n</ul>\n</li>\n<li><p>网卡模式</p>\n<ul>\n<li>混杂模式 <ul>\n<li>接受所有经过网卡设备的数据 </li>\n</ul>\n</li>\n<li>非混杂模式<ul>\n<li>只接受目的地址指向自己的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>IP报文解析</p>\n</li>\n<li><p>TCP报文解析</p>\n</li>\n<li><p>UDP报文解析</p>\n</li>\n<li><p>从零到一实现HTTP服务器开发</p>\n</li>\n</ul>\n<h2 id=\"9-关于我\"><a href=\"#9-关于我\" class=\"headerlink\" title=\"9.关于我\"></a>9.关于我</h2><p>一个专注基础知识的十二线小码农，本着 <strong>基础，体系，实践，分享</strong> 的学习理念，在自我提升的同时分享自己的心得体会，不断完善，周而复始。</p>\n<p><a href=\"http://basedev.cn/\" target=\"_blank\" rel=\"noopener\">个人网站 basedev.cn</a>  </p>\n<p><a href=\"https://github.com/jaydroid1024\" target=\"_blank\" rel=\"noopener\">Github</a></p>\n<p>BaseDev系列只整理点到为止的知识纲领，不求甚解；欲知其所以然者还得回归书本且付诸实践</p>\n<h2 id=\"10-参考\"><a href=\"#10-参考\" class=\"headerlink\" title=\"10.参考\"></a>10.参考</h2><p><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?sid=20-h5Url-0&courseId=478&lagoufrom=noapp&sharetype=wx_friend#/content\" target=\"_blank\" rel=\"noopener\">重学操作系统 | 拉钩教育</a></p>\n<p><a href=\"https://coding.imooc.com/class/package/355.html\" target=\"_blank\" rel=\"noopener\">编程必备基础 | 慕课网</a></p>\n"},{"title":"筑基系列-Android基础知识小抄版（更新中...）","date":"2021-07-31T06:16:55.000Z","cover":true,"summary":"Android/Java 基础知识小抄版提纲挈领，包括：Java（集合、并发、IO、语言特性）Android（四大组件原理、Handler、布局等）","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\nAndroid各版本对应JDK版本\n\n| 平台版本      | 版本名称           | SDK版本 | 市场占有率 | JDK版本 |\n| :------------ | :----------------- | :------ | :--------- | :------ |\n| 2.3.3 - 2.3.7 | Gingerbread        | 10      | 0.4%       | 6       |\n| 4.0.3 - 4.0.4 | Ice Cream Sandwich | 15      | 0.5%       | 6       |\n| 4.1.x         | Jelly Bean         | 16      | 2.0%       | 6       |\n| 4.2.x         | Jelly Bean         | 17      | 3.0%       | 6       |\n| 4.3           | Jelly Bean         | 18      | 0.9%       | 6       |\n| 4.4           | KitKat             | 19      | 13.4%      | 6       |\n| 5.0           | Lollipop           | 21      | 6.1%       | 7       |\n| 5.1           | Lollipop           | 22      | 20.2%      | 7       |\n| 6.0           | Marshmallow        | 23      | 29.7%      | 7       |\n| 7.0           | Nougat             | 24      | 19.3%      | 7       |\n| 7.1           | Nougat             | 25      | 4.0%       | 7       |\n| 8.0           | Oreo               | 26      | 0.5%       | 8       |\n\n\n\nAndroid Gradle 插件版本所需的 Gradle 版本。为了获得最佳性能，您应使用 Gradle 和插件这两者的最新版本。\n\n| 插件版本      | 所需的 Gradle 版本 |\n| :------------ | :----------------- |\n| 1.0.0 - 1.1.3 | 2.2.1 - 2.3        |\n| 1.2.0 - 1.3.1 | 2.2.1 - 2.9        |\n| 1.5.0         | 2.2.1 - 2.13       |\n| 2.0.0 - 2.1.2 | 2.10 - 2.13        |\n| 2.1.3 - 2.2.3 | 2.14.1 - 3.5       |\n| 2.3.0+        | 3.3+               |\n| 3.0.0+        | 4.1+               |\n| 3.1.0+        | 4.4+               |\n| 3.2.0 - 3.2.1 | 4.6+               |\n| 3.3.0 - 3.3.3 | 4.10.1+            |\n| 3.4.0 - 3.4.3 | 5.1.1+             |\n| 3.5.0 - 3.5.4 | 5.4.1+             |\n| 3.6.0 - 3.6.4 | 5.6.4+             |\n| 4.0.0+        | 6.1.1+             |\n| 4.1.0+        | 6.5+               |\n| 4.2.0+        | 6.7.1+             |\n| 7.0           | 7.0+               |\n\n\n\n# 1.Java\n\n## Java 基础\n\n### JDK/JRE/JVM\n\nJDK：Java Develpment Kit java 开发工具\nJRE：Java Runtime Environment java运行时环境\nJVM：java Virtual Machine java 虚拟机\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210805234734.png)\n\n### ==和equals比较\n\n**==：**对比的是栈中的值，基本数据类型是**变量值**，引用类型是堆中内存**对象的地址**\n\n**equals：**object中默认也是采用==比较，通常会重写，比如字符串类重写了equals比较的是每个char的值是否相等\n\n```java\n//Object.java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\n```java\n//String.java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n```java\n//test equals and ==\nString str1 = \"Hello\";\nString str2 = new String(\"Hello\");\nString str3 = str2; \nSystem.out.println(str1 == str2); // false\nSystem.out.println(str1 == str3); // false\nSystem.out.println(str2 == str3); // true\nSystem.out.println(str1.equals(str2)); // true\nSystem.out.println(str1.equals(str3)); // true\nSystem.out.println(str2.equals(str3)); // true\n```\n\n### hashCode与equals\n\nhashCode 是通过将对象的内部地址转换为整数来实现的，此内存地址不能通过 java sdk 获得，必须作为native方法实现。native 源码如下：\n\n```java\n//object.java\npublic native int hashCode();\n```\n\n```c\n//view src/share/native/java/lang/Object.c\nstatic JNINativeMethod methods[] = {\n    {\"hashCode\",    \"()I\",                    (void *)&JVM_IHashCode},\n    {\"wait\",        \"(J)V\",                   (void *)&JVM_MonitorWait},\n    {\"notify\",      \"()V\",                    (void *)&JVM_MonitorNotify},\n    {\"notifyAll\",   \"()V\",                    (void *)&JVM_MonitorNotifyAll},\n    {\"clone\",       \"()Ljava/lang/Object;\",   (void *)&JVM_Clone},\n};\nJNIEXPORT void JNICALL Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls){\n    (*env)->RegisterNatives(env, cls, methods, sizeof(methods)/sizeof(methods[0]));\n}\nJNIEXPORT jclass JNICALL Java_java_lang_Object_getClass(JNIEnv *env, jobject this){\n    if (this == NULL) {\n        JNU_ThrowNullPointerException(env, NULL);\n        return 0;\n    } else {\n        return (*env)->GetObjectClass(env, this);\n    }\n}\n```\n\n此源包含 getClass() 方法的实现。 hashCode 被定义为一个函数指针 JVM_IHashCode\n\n```c\n//view src/share/vm/prims/jvm.cpp\n// java.lang.Object ///////////////////////////////////////////////\nJVM_ENTRY(jint, JVM_IHashCode(JNIEnv* env, jobject handle))\n  JVMWrapper(\"JVM_IHashCode\");\n  // as implemented in the classic virtual machine; return 0 if object is NULL\n  return handle == NULL ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;\nJVM_END\n```\n\n```c\n//view src/share/vm/runtime/synchronizer.cpp\nintptr_t ObjectSynchronizer::FastHashCode (Thread * Self, oop obj) {\n  ....\n    if (mark->is_neutral()) {\n    hash = mark->hash();              // this is a normal header\n    if (hash) {                       // if it has hash, just return it\n      return hash;\n    }\n    hash = get_next_hash(Self, obj);  // allocate a new hash code\n    temp = mark->copy_set_hash(hash); // merge the hash code into header\n    // use (machine word version) atomic operation to install the hash\n    test = (markOop) Atomic::cmpxchg_ptr(temp, obj->mark_addr(), mark);\n    if (test == mark) {\n      return hash;\n    }\n    // If atomic operation failed, we must inflate the header\n    // into heavy weight monitor. We could add more code here\n    // for fast path, but it does not worth the complexity.\n  }\n  \n ...\n   \n  monitor = ObjectSynchronizer::inflate(Self, obj);\n  // Load displaced header and check it has hash code\n  mark = monitor->header();\n  assert (mark->is_neutral(), \"invariant\") ;\n  hash = mark->hash();\n  if (hash == 0) {\n    hash = get_next_hash(Self, obj);\n    temp = mark->copy_set_hash(hash); // merge hash code into header\n    assert (temp->is_neutral(), \"invariant\") ;\n    test = (markOop) Atomic::cmpxchg_ptr(temp, monitor, mark);\n    if (test != mark) {\n      // The only update to the header in the monitor (outside GC)\n      // is install the hash code. If someone add new usage of\n      // displaced header, please update this code\n      hash = test->hash();\n      assert (test->is_neutral(), \"invariant\") ;\n      assert (hash != 0, \"Trivial unexpected object/monitor header usage.\");\n    }\n  }\n  // We finally get the hash\n  return hash;\n}\n  \n  static inline intptr_t get_next_hash(Thread * Self, oop obj) {\n  intptr_t value = 0 ;\n  if (hashCode == 0) {\n     // This form uses an unguarded global Park-Miller RNG,\n     // so it's possible for two threads to race and generate the same RNG.\n     // On MP system we'll have lots of RW access to a global, so the\n     // mechanism induces lots of coherency traffic.\n     value = os::random() ;\n  } else\n  if (hashCode == 1) {\n     // This variation has the property of being stable (idempotent)\n     // between STW operations.  This can be useful in some of the 1-0\n     // synchronization schemes.\n     intptr_t addrBits = intptr_t(obj) >> 3 ;\n     value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ;\n  } else\n  if (hashCode == 2) {\n     value = 1 ;            // for sensitivity testing\n  } else\n  if (hashCode == 3) {\n     value = ++GVars.hcSequence ;\n  } else\n  if (hashCode == 4) {\n     value = intptr_t(obj) ;\n  } else {\n     // Marsaglia's xor-shift scheme with thread-specific state\n     // This is probably the best overall implementation -- we'll\n     // likely make this the default in future releases.\n     unsigned t = Self->_hashStateX ;\n     t ^= (t << 11) ;\n     Self->_hashStateX = Self->_hashStateY ;\n     Self->_hashStateY = Self->_hashStateZ ;\n     Self->_hashStateZ = Self->_hashStateW ;\n     unsigned v = Self->_hashStateW ;\n     v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ;\n     Self->_hashStateW = v ;\n     value = v ;\n  }\n```\n\nJVM_IHashCode 在 jvm.cpp 中定义。请参阅从第 504 行开始的代码。这又调用了在synchronizer.cpp 中定义的 ObjectSynchronizer::FastHashCode。请参阅第 576 行的 FastHashCode 和第 530 行的 get_next_hash 的实现。\n\n**HashCode 的作用是：**\n\n- hashCode 的作用是返回对象的哈希码值。支持此方法是为了有利于散列表，这个哈希码的作用是确定该对象在哈希表中的索引位\n\n置。\n\n- hashCode的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）\n\n **HashCode 的一般约定是：**\n\n- 在 Java 应用程序的执行过程中，只要在同一个对象上多次调用它,hashCode方法必须始终如一地返回相同的整数，前提是未修改对象的  equals比较中使用的信息。该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。\n\n- 如果两个对象根据 equals()方法相等，则对这两个对象中的每一个调用  hashCode}方法必须产生相同的整数结果。\n- 如果两个对象根据 equals()方法不相等，则调用 hashCode}方法这两个对象中的每一个都必须产生不同的整数结果。\n- 两个对象有相同的hashcode值，它们也不一定是相等的\n- 因此，equals方法被覆盖过，则hashCode方法也必须被覆盖\n- 为不相等的对象生成不同的整数结果可能会提高哈希表的性能。\n- 在合理可行的情况下，类 Object定义的 hashCode 方法确实为不同的对象返回不同的整数。\n\n\n\n### final 关键字\n\n- 修饰类：表示类不可被继承\n- 修饰方法：表示方法不可被子类覆盖，但是可以重载\n- 修饰变量：表示变量一旦被赋值就不可以更改它的值\n  - 如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。\n  - 如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。\n  - 如果final修饰的是局部变量,系统不会为局部变量进行初始化，局部变量必须由程序员显示初始化。因此使用final修饰局部变量时，即可以在定义时指定默认值也可以在后面的代码中对final变量赋初值。\n  - 如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；\n  - 如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。但是引用的值是可变的\n\n```java\nfinal Person p = new Person(25);\np.setAge(24);//合法\np=null;//非法\n```\n\n**为什么局部内部类和匿名内部类只能访问局部final变量？**\n\n首先需要知道的一点是: 内部类和外部类是处于同一个级别的，内部类不会因为定义在方法中就会随着方法的执行完毕就被销毁。\n这里就会产生问题：当外部类的方法结束时，局部变量就会被销毁了，但是内部类对象可能还存在(只有没有人再引用它时，才会死亡)。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的\"copy\"。这样就好像延长了局部变量的生命周期将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也得跟着改变，怎么解决问题呢？就将局部变量设置为final，对它初始化后，我就不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。这实际上也是一种妥协。使得局部变量与内部类内建立的拷贝保持一致。\n\n\n\n### String、StringBuffer、StringBuilder\n\n- String是final修饰的，不可变，每次操作都会产生新的String对象\n- StringBuffer和StringBuilder都是在原对象上操作\n- StringBuffer是线程安全的，StringBuilder线程不安全的\n- StringBuffer方法都是synchronized修饰的\n- 性能：StringBuilder > StringBuffer > String\n- 场景：经常需要改变字符串内容时使用后面两个\n- 优先使用StringBuilder，多线程使用共享变量时使用StringBuffer\n\n### 重载和重写的区别\n\n- 重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。\n- 重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。\n\n\n\n### 接口和抽象类的区别\n\n- 抽象类可以存在普通成员函数，而接口中只能存在public abstract 方法。\n- 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。\n- 抽象类只能继承一个，接口可以实现多个。\n- 接口的设计目的，是对类的行为进行约束（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行为进行限制。\n- 而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执行）。\n- 抽象类是对类本质的抽象，表达的是 is a 的关系，比如： BMW is a Car 。抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。\n- 而接口是对行为的抽象，表达的是 like a 的关系。比如： Bird like a Aircraft （像飞行器一样可以飞），但其本质上 is a Bird 。接口的核心是定义行为，即实现类可以做什么，至于实现类主体是谁、是如何实现的，接口并不关心。\n- 使用场景：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。\n- 抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度\n\n\n\n## Java 集合\n\n### List和Set的区别\n\n- List：有序，按对象进入的顺序保存对象，可重复，允许多个Null元素对象，可以使用Iterator取出所有元素，在逐一遍历，还可以使用get(int index)获取指定下标的元素\n- Set：无序，不可重复，最多允许有一个Null元素对象，取元素时只能用Iterator接口取得所有元素，在逐一遍历各个元素\n\n\n\n#### ArrayList和LinkedList区别\n\n- [ArrayList 源码](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/ArrayList.java)\n- [LinkedList 源码](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/LinkedList.java)\n\n- ⾸先，他们的底层数据结构不同，ArrayList底层是基于数组实现的，LinkedList底层是基于链表实现的\n\n- 由于底层数据结构不同，他们所适⽤的场景也不同，ArrayList更适合随机查找，LinkedList更适合删除和添加，查询、添加、删除的时间复杂度不同\n\n- 另外ArrayList和LinkedList都实现了List接⼝，但是LinkedList还额外实现了Deque接⼝，所以LinkedList还可以当做队列来使⽤\n\n- ArrayList：基于动态数组，连续内存存储，适合下标访问（随机访问），扩容机制：因为数组长度固定，超出长度存数据时需要新建数组，然后将老数组的数据拷贝到新数组，如果不是尾部插入数据还会涉及到元素的移动（往后复制一份，插入新元素），使用尾插法并指定初始容量可以极大提升性能、甚至超过linkedList（需要创建大量的node对象）\n- LinkedList：基于链表，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询：需要逐一遍历LinkedList必须使用iterator不能使用for循环，因为每次for循环体内通过get(i)取得某一元素时都需要对list重新进行遍历，性能消耗极大。另外不要试图使用indexOf等返回元素索引，并利用其进行遍历，使用indexlOf对list进行了遍历，当结果为空时会遍历整个列表。\n\n### HashMap和HashTable有什么区别？其底层实现是什么？\n\n\n\n- HashMap方法没有synchronized修饰，线程非安全，HashTable线程安全；\n- HashMap允许key和value为null，而HashTable不允许\n- jdk8开始链表高度到8、数组长度超过64，链表转变为红黑树，元素以内部类Node节点存在\n- 计算key的hash值，二次hash然后对数组长度取模，对应到数组下标，\n- 如果没有产生hash冲突(下标位置没有元素)，则直接创建Node存入数组，\n- 如果产生hash冲突，先进行equal比较，相同则取代该元素，不同，则判断链表高度插入链表，链\n- 表高度达到8，并且数组长度到64则转变为红黑树，长度低于6则将红黑树转回链表\n  \n\n####  HashMap的Put⽅法的⼤体流程\n\n- [HashMap 源码1.8](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/HashMap.java)\n- [HashMap 源码1.7](http://androidos.net.cn/android/7.1.1_r28/xref/libcore/ojluni/src/main/java/java/util/HashMap.java)\n- 根据Key通过哈希算法与与运算得出数组下标\n- 如果数组下标位置元素为空，则将key和value封装为Entry对象（JDK1.7中是Entry对象，JDK1.8中是Node对象）并放⼊该位置\n- 如果数组下标位置元素不为空，则要分情况讨论\n  - 如果是JDK1.7，则先判断是否需要扩容，如果要扩容就进⾏扩容，如果不⽤扩容就⽣成Entry对象，并使⽤头插法添加到当前位置的链表中\n  -  如果是JDK1.8，则会先判断当前位置上的Node的类型，看是红⿊树Node，还是链表Node\n    - 如果是红⿊树Node，则将key和value封装为⼀个红⿊树节点并添加到红⿊树中去，在这个过程中会判断红⿊树中是否存在当前key，如果存在则更新value\n    - 如果此位置上的Node对象是链表节点，则将key和value封装为⼀个链表Node并通过尾插法插⼊到链表的最后位置去，因为是尾插法，所以需要遍历链表，在遍历链表的过程中会判断是否存在当前key，如果存在则更新value，当遍历完链表后，将新链表Node插⼊到链表中，插⼊到链表后，会看当前链表的节点个数，如果⼤于等于8，那么则会将该链表转成红⿊树\n    - 将key和value封装为Node插⼊到链表或红⿊树中后，再判断是否需要进⾏扩容，如果需要就\n      扩容，如果不需要就结束PUT⽅法\n\n```java\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n\n\n\n\n## Java 多线程\n\n#### ThreadLocal 简述\n\n- [ThreadLocal 源码](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/lang/ThreadLocal.java)\n\n- ThreadLocal是Java中所提供的线程本地存储机制，可以利⽤该机制将数据缓存在某个线程内部，该线\n  程可以在任意时刻、任意⽅法中获取缓存的数据\n\n- ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在⼀个ThreadLocalMap，Map的key为ThreadLocal对象，Map的value为需要缓\n  存的值\n\n- 如果在线程池中使⽤ThreadLocal会造成内存泄漏，因为当ThreadLocal对象使⽤完之后，应该要把设置的key，value，也就是Entry对象进⾏回收，但线程池中的线程不会回收，⽽线程对象是通过强引⽤指向ThreadLocalMap，ThreadLocalMap也是通过强引⽤指向Entry对象，线程不被回收，Entry对象也就不会被回收，从⽽出现内存泄漏，解决办法是，在使⽤了ThreadLocal对象之后，⼿动调⽤ThreadLocal的remove⽅法，⼿动清楚Entry对象\n\n- ThreadLocal经典的应⽤场景就是连接管理（⼀个线程持有⼀个连接，该连接对象可以在不同的⽅法之间进⾏传递，线程之间不共享同⼀个连接）\n\n\n\n","source":"_posts/android_base.md","raw":"---\ntitle: 筑基系列-Android基础知识小抄版（更新中...）\ndate: 2021-07-31 14:16:55\ncover: true\ntags: \n    - Android\n    - Java\ncategory: \n\t- Android\nsummary: Android/Java 基础知识小抄版提纲挈领，包括：Java（集合、并发、IO、语言特性）Android（四大组件原理、Handler、布局等）\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\nAndroid各版本对应JDK版本\n\n| 平台版本      | 版本名称           | SDK版本 | 市场占有率 | JDK版本 |\n| :------------ | :----------------- | :------ | :--------- | :------ |\n| 2.3.3 - 2.3.7 | Gingerbread        | 10      | 0.4%       | 6       |\n| 4.0.3 - 4.0.4 | Ice Cream Sandwich | 15      | 0.5%       | 6       |\n| 4.1.x         | Jelly Bean         | 16      | 2.0%       | 6       |\n| 4.2.x         | Jelly Bean         | 17      | 3.0%       | 6       |\n| 4.3           | Jelly Bean         | 18      | 0.9%       | 6       |\n| 4.4           | KitKat             | 19      | 13.4%      | 6       |\n| 5.0           | Lollipop           | 21      | 6.1%       | 7       |\n| 5.1           | Lollipop           | 22      | 20.2%      | 7       |\n| 6.0           | Marshmallow        | 23      | 29.7%      | 7       |\n| 7.0           | Nougat             | 24      | 19.3%      | 7       |\n| 7.1           | Nougat             | 25      | 4.0%       | 7       |\n| 8.0           | Oreo               | 26      | 0.5%       | 8       |\n\n\n\nAndroid Gradle 插件版本所需的 Gradle 版本。为了获得最佳性能，您应使用 Gradle 和插件这两者的最新版本。\n\n| 插件版本      | 所需的 Gradle 版本 |\n| :------------ | :----------------- |\n| 1.0.0 - 1.1.3 | 2.2.1 - 2.3        |\n| 1.2.0 - 1.3.1 | 2.2.1 - 2.9        |\n| 1.5.0         | 2.2.1 - 2.13       |\n| 2.0.0 - 2.1.2 | 2.10 - 2.13        |\n| 2.1.3 - 2.2.3 | 2.14.1 - 3.5       |\n| 2.3.0+        | 3.3+               |\n| 3.0.0+        | 4.1+               |\n| 3.1.0+        | 4.4+               |\n| 3.2.0 - 3.2.1 | 4.6+               |\n| 3.3.0 - 3.3.3 | 4.10.1+            |\n| 3.4.0 - 3.4.3 | 5.1.1+             |\n| 3.5.0 - 3.5.4 | 5.4.1+             |\n| 3.6.0 - 3.6.4 | 5.6.4+             |\n| 4.0.0+        | 6.1.1+             |\n| 4.1.0+        | 6.5+               |\n| 4.2.0+        | 6.7.1+             |\n| 7.0           | 7.0+               |\n\n\n\n# 1.Java\n\n## Java 基础\n\n### JDK/JRE/JVM\n\nJDK：Java Develpment Kit java 开发工具\nJRE：Java Runtime Environment java运行时环境\nJVM：java Virtual Machine java 虚拟机\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210805234734.png)\n\n### ==和equals比较\n\n**==：**对比的是栈中的值，基本数据类型是**变量值**，引用类型是堆中内存**对象的地址**\n\n**equals：**object中默认也是采用==比较，通常会重写，比如字符串类重写了equals比较的是每个char的值是否相等\n\n```java\n//Object.java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\n```java\n//String.java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n\n```java\n//test equals and ==\nString str1 = \"Hello\";\nString str2 = new String(\"Hello\");\nString str3 = str2; \nSystem.out.println(str1 == str2); // false\nSystem.out.println(str1 == str3); // false\nSystem.out.println(str2 == str3); // true\nSystem.out.println(str1.equals(str2)); // true\nSystem.out.println(str1.equals(str3)); // true\nSystem.out.println(str2.equals(str3)); // true\n```\n\n### hashCode与equals\n\nhashCode 是通过将对象的内部地址转换为整数来实现的，此内存地址不能通过 java sdk 获得，必须作为native方法实现。native 源码如下：\n\n```java\n//object.java\npublic native int hashCode();\n```\n\n```c\n//view src/share/native/java/lang/Object.c\nstatic JNINativeMethod methods[] = {\n    {\"hashCode\",    \"()I\",                    (void *)&JVM_IHashCode},\n    {\"wait\",        \"(J)V\",                   (void *)&JVM_MonitorWait},\n    {\"notify\",      \"()V\",                    (void *)&JVM_MonitorNotify},\n    {\"notifyAll\",   \"()V\",                    (void *)&JVM_MonitorNotifyAll},\n    {\"clone\",       \"()Ljava/lang/Object;\",   (void *)&JVM_Clone},\n};\nJNIEXPORT void JNICALL Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls){\n    (*env)->RegisterNatives(env, cls, methods, sizeof(methods)/sizeof(methods[0]));\n}\nJNIEXPORT jclass JNICALL Java_java_lang_Object_getClass(JNIEnv *env, jobject this){\n    if (this == NULL) {\n        JNU_ThrowNullPointerException(env, NULL);\n        return 0;\n    } else {\n        return (*env)->GetObjectClass(env, this);\n    }\n}\n```\n\n此源包含 getClass() 方法的实现。 hashCode 被定义为一个函数指针 JVM_IHashCode\n\n```c\n//view src/share/vm/prims/jvm.cpp\n// java.lang.Object ///////////////////////////////////////////////\nJVM_ENTRY(jint, JVM_IHashCode(JNIEnv* env, jobject handle))\n  JVMWrapper(\"JVM_IHashCode\");\n  // as implemented in the classic virtual machine; return 0 if object is NULL\n  return handle == NULL ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;\nJVM_END\n```\n\n```c\n//view src/share/vm/runtime/synchronizer.cpp\nintptr_t ObjectSynchronizer::FastHashCode (Thread * Self, oop obj) {\n  ....\n    if (mark->is_neutral()) {\n    hash = mark->hash();              // this is a normal header\n    if (hash) {                       // if it has hash, just return it\n      return hash;\n    }\n    hash = get_next_hash(Self, obj);  // allocate a new hash code\n    temp = mark->copy_set_hash(hash); // merge the hash code into header\n    // use (machine word version) atomic operation to install the hash\n    test = (markOop) Atomic::cmpxchg_ptr(temp, obj->mark_addr(), mark);\n    if (test == mark) {\n      return hash;\n    }\n    // If atomic operation failed, we must inflate the header\n    // into heavy weight monitor. We could add more code here\n    // for fast path, but it does not worth the complexity.\n  }\n  \n ...\n   \n  monitor = ObjectSynchronizer::inflate(Self, obj);\n  // Load displaced header and check it has hash code\n  mark = monitor->header();\n  assert (mark->is_neutral(), \"invariant\") ;\n  hash = mark->hash();\n  if (hash == 0) {\n    hash = get_next_hash(Self, obj);\n    temp = mark->copy_set_hash(hash); // merge hash code into header\n    assert (temp->is_neutral(), \"invariant\") ;\n    test = (markOop) Atomic::cmpxchg_ptr(temp, monitor, mark);\n    if (test != mark) {\n      // The only update to the header in the monitor (outside GC)\n      // is install the hash code. If someone add new usage of\n      // displaced header, please update this code\n      hash = test->hash();\n      assert (test->is_neutral(), \"invariant\") ;\n      assert (hash != 0, \"Trivial unexpected object/monitor header usage.\");\n    }\n  }\n  // We finally get the hash\n  return hash;\n}\n  \n  static inline intptr_t get_next_hash(Thread * Self, oop obj) {\n  intptr_t value = 0 ;\n  if (hashCode == 0) {\n     // This form uses an unguarded global Park-Miller RNG,\n     // so it's possible for two threads to race and generate the same RNG.\n     // On MP system we'll have lots of RW access to a global, so the\n     // mechanism induces lots of coherency traffic.\n     value = os::random() ;\n  } else\n  if (hashCode == 1) {\n     // This variation has the property of being stable (idempotent)\n     // between STW operations.  This can be useful in some of the 1-0\n     // synchronization schemes.\n     intptr_t addrBits = intptr_t(obj) >> 3 ;\n     value = addrBits ^ (addrBits >> 5) ^ GVars.stwRandom ;\n  } else\n  if (hashCode == 2) {\n     value = 1 ;            // for sensitivity testing\n  } else\n  if (hashCode == 3) {\n     value = ++GVars.hcSequence ;\n  } else\n  if (hashCode == 4) {\n     value = intptr_t(obj) ;\n  } else {\n     // Marsaglia's xor-shift scheme with thread-specific state\n     // This is probably the best overall implementation -- we'll\n     // likely make this the default in future releases.\n     unsigned t = Self->_hashStateX ;\n     t ^= (t << 11) ;\n     Self->_hashStateX = Self->_hashStateY ;\n     Self->_hashStateY = Self->_hashStateZ ;\n     Self->_hashStateZ = Self->_hashStateW ;\n     unsigned v = Self->_hashStateW ;\n     v = (v ^ (v >> 19)) ^ (t ^ (t >> 8)) ;\n     Self->_hashStateW = v ;\n     value = v ;\n  }\n```\n\nJVM_IHashCode 在 jvm.cpp 中定义。请参阅从第 504 行开始的代码。这又调用了在synchronizer.cpp 中定义的 ObjectSynchronizer::FastHashCode。请参阅第 576 行的 FastHashCode 和第 530 行的 get_next_hash 的实现。\n\n**HashCode 的作用是：**\n\n- hashCode 的作用是返回对象的哈希码值。支持此方法是为了有利于散列表，这个哈希码的作用是确定该对象在哈希表中的索引位\n\n置。\n\n- hashCode的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）\n\n **HashCode 的一般约定是：**\n\n- 在 Java 应用程序的执行过程中，只要在同一个对象上多次调用它,hashCode方法必须始终如一地返回相同的整数，前提是未修改对象的  equals比较中使用的信息。该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。\n\n- 如果两个对象根据 equals()方法相等，则对这两个对象中的每一个调用  hashCode}方法必须产生相同的整数结果。\n- 如果两个对象根据 equals()方法不相等，则调用 hashCode}方法这两个对象中的每一个都必须产生不同的整数结果。\n- 两个对象有相同的hashcode值，它们也不一定是相等的\n- 因此，equals方法被覆盖过，则hashCode方法也必须被覆盖\n- 为不相等的对象生成不同的整数结果可能会提高哈希表的性能。\n- 在合理可行的情况下，类 Object定义的 hashCode 方法确实为不同的对象返回不同的整数。\n\n\n\n### final 关键字\n\n- 修饰类：表示类不可被继承\n- 修饰方法：表示方法不可被子类覆盖，但是可以重载\n- 修饰变量：表示变量一旦被赋值就不可以更改它的值\n  - 如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。\n  - 如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。\n  - 如果final修饰的是局部变量,系统不会为局部变量进行初始化，局部变量必须由程序员显示初始化。因此使用final修饰局部变量时，即可以在定义时指定默认值也可以在后面的代码中对final变量赋初值。\n  - 如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；\n  - 如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。但是引用的值是可变的\n\n```java\nfinal Person p = new Person(25);\np.setAge(24);//合法\np=null;//非法\n```\n\n**为什么局部内部类和匿名内部类只能访问局部final变量？**\n\n首先需要知道的一点是: 内部类和外部类是处于同一个级别的，内部类不会因为定义在方法中就会随着方法的执行完毕就被销毁。\n这里就会产生问题：当外部类的方法结束时，局部变量就会被销毁了，但是内部类对象可能还存在(只有没有人再引用它时，才会死亡)。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的\"copy\"。这样就好像延长了局部变量的生命周期将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也得跟着改变，怎么解决问题呢？就将局部变量设置为final，对它初始化后，我就不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。这实际上也是一种妥协。使得局部变量与内部类内建立的拷贝保持一致。\n\n\n\n### String、StringBuffer、StringBuilder\n\n- String是final修饰的，不可变，每次操作都会产生新的String对象\n- StringBuffer和StringBuilder都是在原对象上操作\n- StringBuffer是线程安全的，StringBuilder线程不安全的\n- StringBuffer方法都是synchronized修饰的\n- 性能：StringBuilder > StringBuffer > String\n- 场景：经常需要改变字符串内容时使用后面两个\n- 优先使用StringBuilder，多线程使用共享变量时使用StringBuffer\n\n### 重载和重写的区别\n\n- 重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。\n- 重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。\n\n\n\n### 接口和抽象类的区别\n\n- 抽象类可以存在普通成员函数，而接口中只能存在public abstract 方法。\n- 抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。\n- 抽象类只能继承一个，接口可以实现多个。\n- 接口的设计目的，是对类的行为进行约束（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行为进行限制。\n- 而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执行）。\n- 抽象类是对类本质的抽象，表达的是 is a 的关系，比如： BMW is a Car 。抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。\n- 而接口是对行为的抽象，表达的是 like a 的关系。比如： Bird like a Aircraft （像飞行器一样可以飞），但其本质上 is a Bird 。接口的核心是定义行为，即实现类可以做什么，至于实现类主体是谁、是如何实现的，接口并不关心。\n- 使用场景：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。\n- 抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度\n\n\n\n## Java 集合\n\n### List和Set的区别\n\n- List：有序，按对象进入的顺序保存对象，可重复，允许多个Null元素对象，可以使用Iterator取出所有元素，在逐一遍历，还可以使用get(int index)获取指定下标的元素\n- Set：无序，不可重复，最多允许有一个Null元素对象，取元素时只能用Iterator接口取得所有元素，在逐一遍历各个元素\n\n\n\n#### ArrayList和LinkedList区别\n\n- [ArrayList 源码](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/ArrayList.java)\n- [LinkedList 源码](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/LinkedList.java)\n\n- ⾸先，他们的底层数据结构不同，ArrayList底层是基于数组实现的，LinkedList底层是基于链表实现的\n\n- 由于底层数据结构不同，他们所适⽤的场景也不同，ArrayList更适合随机查找，LinkedList更适合删除和添加，查询、添加、删除的时间复杂度不同\n\n- 另外ArrayList和LinkedList都实现了List接⼝，但是LinkedList还额外实现了Deque接⼝，所以LinkedList还可以当做队列来使⽤\n\n- ArrayList：基于动态数组，连续内存存储，适合下标访问（随机访问），扩容机制：因为数组长度固定，超出长度存数据时需要新建数组，然后将老数组的数据拷贝到新数组，如果不是尾部插入数据还会涉及到元素的移动（往后复制一份，插入新元素），使用尾插法并指定初始容量可以极大提升性能、甚至超过linkedList（需要创建大量的node对象）\n- LinkedList：基于链表，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询：需要逐一遍历LinkedList必须使用iterator不能使用for循环，因为每次for循环体内通过get(i)取得某一元素时都需要对list重新进行遍历，性能消耗极大。另外不要试图使用indexOf等返回元素索引，并利用其进行遍历，使用indexlOf对list进行了遍历，当结果为空时会遍历整个列表。\n\n### HashMap和HashTable有什么区别？其底层实现是什么？\n\n\n\n- HashMap方法没有synchronized修饰，线程非安全，HashTable线程安全；\n- HashMap允许key和value为null，而HashTable不允许\n- jdk8开始链表高度到8、数组长度超过64，链表转变为红黑树，元素以内部类Node节点存在\n- 计算key的hash值，二次hash然后对数组长度取模，对应到数组下标，\n- 如果没有产生hash冲突(下标位置没有元素)，则直接创建Node存入数组，\n- 如果产生hash冲突，先进行equal比较，相同则取代该元素，不同，则判断链表高度插入链表，链\n- 表高度达到8，并且数组长度到64则转变为红黑树，长度低于6则将红黑树转回链表\n  \n\n####  HashMap的Put⽅法的⼤体流程\n\n- [HashMap 源码1.8](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/HashMap.java)\n- [HashMap 源码1.7](http://androidos.net.cn/android/7.1.1_r28/xref/libcore/ojluni/src/main/java/java/util/HashMap.java)\n- 根据Key通过哈希算法与与运算得出数组下标\n- 如果数组下标位置元素为空，则将key和value封装为Entry对象（JDK1.7中是Entry对象，JDK1.8中是Node对象）并放⼊该位置\n- 如果数组下标位置元素不为空，则要分情况讨论\n  - 如果是JDK1.7，则先判断是否需要扩容，如果要扩容就进⾏扩容，如果不⽤扩容就⽣成Entry对象，并使⽤头插法添加到当前位置的链表中\n  -  如果是JDK1.8，则会先判断当前位置上的Node的类型，看是红⿊树Node，还是链表Node\n    - 如果是红⿊树Node，则将key和value封装为⼀个红⿊树节点并添加到红⿊树中去，在这个过程中会判断红⿊树中是否存在当前key，如果存在则更新value\n    - 如果此位置上的Node对象是链表节点，则将key和value封装为⼀个链表Node并通过尾插法插⼊到链表的最后位置去，因为是尾插法，所以需要遍历链表，在遍历链表的过程中会判断是否存在当前key，如果存在则更新value，当遍历完链表后，将新链表Node插⼊到链表中，插⼊到链表后，会看当前链表的节点个数，如果⼤于等于8，那么则会将该链表转成红⿊树\n    - 将key和value封装为Node插⼊到链表或红⿊树中后，再判断是否需要进⾏扩容，如果需要就\n      扩容，如果不需要就结束PUT⽅法\n\n```java\n\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n\n\n\n\n## Java 多线程\n\n#### ThreadLocal 简述\n\n- [ThreadLocal 源码](http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/lang/ThreadLocal.java)\n\n- ThreadLocal是Java中所提供的线程本地存储机制，可以利⽤该机制将数据缓存在某个线程内部，该线\n  程可以在任意时刻、任意⽅法中获取缓存的数据\n\n- ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在⼀个ThreadLocalMap，Map的key为ThreadLocal对象，Map的value为需要缓\n  存的值\n\n- 如果在线程池中使⽤ThreadLocal会造成内存泄漏，因为当ThreadLocal对象使⽤完之后，应该要把设置的key，value，也就是Entry对象进⾏回收，但线程池中的线程不会回收，⽽线程对象是通过强引⽤指向ThreadLocalMap，ThreadLocalMap也是通过强引⽤指向Entry对象，线程不被回收，Entry对象也就不会被回收，从⽽出现内存泄漏，解决办法是，在使⽤了ThreadLocal对象之后，⼿动调⽤ThreadLocal的remove⽅法，⼿动清楚Entry对象\n\n- ThreadLocal经典的应⽤场景就是连接管理（⼀个线程持有⼀个连接，该连接对象可以在不同的⽅法之间进⾏传递，线程之间不共享同⼀个连接）\n\n\n\n","slug":"android_base","published":1,"updated":"2021-11-03T07:59:37.843Z","_id":"ckrtie1pq00009ixf2l7ac6tb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<p>Android各版本对应JDK版本</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">平台版本</th>\n<th align=\"left\">版本名称</th>\n<th align=\"left\">SDK版本</th>\n<th align=\"left\">市场占有率</th>\n<th align=\"left\">JDK版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2.3.3 - 2.3.7</td>\n<td align=\"left\">Gingerbread</td>\n<td align=\"left\">10</td>\n<td align=\"left\">0.4%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.0.3 - 4.0.4</td>\n<td align=\"left\">Ice Cream Sandwich</td>\n<td align=\"left\">15</td>\n<td align=\"left\">0.5%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.1.x</td>\n<td align=\"left\">Jelly Bean</td>\n<td align=\"left\">16</td>\n<td align=\"left\">2.0%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.2.x</td>\n<td align=\"left\">Jelly Bean</td>\n<td align=\"left\">17</td>\n<td align=\"left\">3.0%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.3</td>\n<td align=\"left\">Jelly Bean</td>\n<td align=\"left\">18</td>\n<td align=\"left\">0.9%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.4</td>\n<td align=\"left\">KitKat</td>\n<td align=\"left\">19</td>\n<td align=\"left\">13.4%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">5.0</td>\n<td align=\"left\">Lollipop</td>\n<td align=\"left\">21</td>\n<td align=\"left\">6.1%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">5.1</td>\n<td align=\"left\">Lollipop</td>\n<td align=\"left\">22</td>\n<td align=\"left\">20.2%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">6.0</td>\n<td align=\"left\">Marshmallow</td>\n<td align=\"left\">23</td>\n<td align=\"left\">29.7%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">7.0</td>\n<td align=\"left\">Nougat</td>\n<td align=\"left\">24</td>\n<td align=\"left\">19.3%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">7.1</td>\n<td align=\"left\">Nougat</td>\n<td align=\"left\">25</td>\n<td align=\"left\">4.0%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">8.0</td>\n<td align=\"left\">Oreo</td>\n<td align=\"left\">26</td>\n<td align=\"left\">0.5%</td>\n<td align=\"left\">8</td>\n</tr>\n</tbody></table>\n<p>Android Gradle 插件版本所需的 Gradle 版本。为了获得最佳性能，您应使用 Gradle 和插件这两者的最新版本。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">插件版本</th>\n<th align=\"left\">所需的 Gradle 版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1.0.0 - 1.1.3</td>\n<td align=\"left\">2.2.1 - 2.3</td>\n</tr>\n<tr>\n<td align=\"left\">1.2.0 - 1.3.1</td>\n<td align=\"left\">2.2.1 - 2.9</td>\n</tr>\n<tr>\n<td align=\"left\">1.5.0</td>\n<td align=\"left\">2.2.1 - 2.13</td>\n</tr>\n<tr>\n<td align=\"left\">2.0.0 - 2.1.2</td>\n<td align=\"left\">2.10 - 2.13</td>\n</tr>\n<tr>\n<td align=\"left\">2.1.3 - 2.2.3</td>\n<td align=\"left\">2.14.1 - 3.5</td>\n</tr>\n<tr>\n<td align=\"left\">2.3.0+</td>\n<td align=\"left\">3.3+</td>\n</tr>\n<tr>\n<td align=\"left\">3.0.0+</td>\n<td align=\"left\">4.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.1.0+</td>\n<td align=\"left\">4.4+</td>\n</tr>\n<tr>\n<td align=\"left\">3.2.0 - 3.2.1</td>\n<td align=\"left\">4.6+</td>\n</tr>\n<tr>\n<td align=\"left\">3.3.0 - 3.3.3</td>\n<td align=\"left\">4.10.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.4.0 - 3.4.3</td>\n<td align=\"left\">5.1.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.5.0 - 3.5.4</td>\n<td align=\"left\">5.4.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.6.0 - 3.6.4</td>\n<td align=\"left\">5.6.4+</td>\n</tr>\n<tr>\n<td align=\"left\">4.0.0+</td>\n<td align=\"left\">6.1.1+</td>\n</tr>\n<tr>\n<td align=\"left\">4.1.0+</td>\n<td align=\"left\">6.5+</td>\n</tr>\n<tr>\n<td align=\"left\">4.2.0+</td>\n<td align=\"left\">6.7.1+</td>\n</tr>\n<tr>\n<td align=\"left\">7.0</td>\n<td align=\"left\">7.0+</td>\n</tr>\n</tbody></table>\n<h1 id=\"1-Java\"><a href=\"#1-Java\" class=\"headerlink\" title=\"1.Java\"></a>1.Java</h1><h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h3 id=\"JDK-JRE-JVM\"><a href=\"#JDK-JRE-JVM\" class=\"headerlink\" title=\"JDK/JRE/JVM\"></a>JDK/JRE/JVM</h3><p>JDK：Java Develpment Kit java 开发工具<br>JRE：Java Runtime Environment java运行时环境<br>JVM：java Virtual Machine java 虚拟机</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210805234734.png\" alt=\"\"></p>\n<h3 id=\"和equals比较\"><a href=\"#和equals比较\" class=\"headerlink\" title=\"==和equals比较\"></a>==和equals比较</h3><p><strong>==：</strong>对比的是栈中的值，基本数据类型是<strong>变量值</strong>，引用类型是堆中内存<strong>对象的地址</strong></p>\n<p><strong>equals：</strong>object中默认也是采用==比较，通常会重写，比如字符串类重写了equals比较的是每个char的值是否相等</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//Object.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//String.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object anObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> anObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anObject <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String anotherString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>anObject<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> v1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">char</span> v2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> anotherString<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> v2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//test equals and ==</span>\nString str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\nString str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString str3 <span class=\"token operator\">=</span> str2<span class=\"token punctuation\">;</span> \nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// false</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1 <span class=\"token operator\">==</span> str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// false</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2 <span class=\"token operator\">==</span> str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span></code></pre>\n<h3 id=\"hashCode与equals\"><a href=\"#hashCode与equals\" class=\"headerlink\" title=\"hashCode与equals\"></a>hashCode与equals</h3><p>hashCode 是通过将对象的内部地址转换为整数来实现的，此内存地址不能通过 java sdk 获得，必须作为native方法实现。native 源码如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//object.java</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//view src/share/native/java/lang/Object.c</span>\n<span class=\"token keyword\">static</span> JNINativeMethod methods<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"hashCode\"</span><span class=\"token punctuation\">,</span>    <span class=\"token string\">\"()I\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>JVM_IHashCode<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"wait\"</span><span class=\"token punctuation\">,</span>        <span class=\"token string\">\"(J)V\"</span><span class=\"token punctuation\">,</span>                   <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>JVM_MonitorWait<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"notify\"</span><span class=\"token punctuation\">,</span>      <span class=\"token string\">\"()V\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>JVM_MonitorNotify<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"notifyAll\"</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">\"()V\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>JVM_MonitorNotifyAll<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">\"clone\"</span><span class=\"token punctuation\">,</span>       <span class=\"token string\">\"()Ljava/lang/Object;\"</span><span class=\"token punctuation\">,</span>   <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>JVM_Clone<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nJNIEXPORT <span class=\"token keyword\">void</span> JNICALL <span class=\"token function\">Java_java_lang_Object_registerNatives</span><span class=\"token punctuation\">(</span>JNIEnv <span class=\"token operator\">*</span>env<span class=\"token punctuation\">,</span> jclass cls<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">RegisterNatives</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nJNIEXPORT jclass JNICALL <span class=\"token function\">Java_java_lang_Object_getClass</span><span class=\"token punctuation\">(</span>JNIEnv <span class=\"token operator\">*</span>env<span class=\"token punctuation\">,</span> jobject this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>this <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">JNU_ThrowNullPointerException</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>env<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetObjectClass</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> this<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>此源包含 getClass() 方法的实现。 hashCode 被定义为一个函数指针 JVM_IHashCode</p>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//view src/share/vm/prims/jvm.cpp</span>\n<span class=\"token comment\" spellcheck=\"true\">// java.lang.Object ///////////////////////////////////////////////</span>\n<span class=\"token function\">JVM_ENTRY</span><span class=\"token punctuation\">(</span>jint<span class=\"token punctuation\">,</span> <span class=\"token function\">JVM_IHashCode</span><span class=\"token punctuation\">(</span>JNIEnv<span class=\"token operator\">*</span> env<span class=\"token punctuation\">,</span> jobject handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">JVMWrapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JVM_IHashCode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// as implemented in the classic virtual machine; return 0 if object is NULL</span>\n  <span class=\"token keyword\">return</span> handle <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> ObjectSynchronizer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">FastHashCode</span> <span class=\"token punctuation\">(</span>THREAD<span class=\"token punctuation\">,</span> JNIHandles<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">resolve_non_null</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\nJVM_END</code></pre>\n<pre class=\" language-c\"><code class=\"language-c\"><span class=\"token comment\" spellcheck=\"true\">//view src/share/vm/runtime/synchronizer.cpp</span>\nintptr_t ObjectSynchronizer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">FastHashCode</span> <span class=\"token punctuation\">(</span>Thread <span class=\"token operator\">*</span> Self<span class=\"token punctuation\">,</span> oop obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mark<span class=\"token operator\">-></span><span class=\"token function\">is_neutral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hash <span class=\"token operator\">=</span> mark<span class=\"token operator\">-></span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\" spellcheck=\"true\">// this is a normal header</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                       <span class=\"token comment\" spellcheck=\"true\">// if it has hash, just return it</span>\n      <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">get_next_hash</span><span class=\"token punctuation\">(</span>Self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// allocate a new hash code</span>\n    temp <span class=\"token operator\">=</span> mark<span class=\"token operator\">-></span><span class=\"token function\">copy_set_hash</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// merge the hash code into header</span>\n    <span class=\"token comment\" spellcheck=\"true\">// use (machine word version) atomic operation to install the hash</span>\n    test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>markOop<span class=\"token punctuation\">)</span> Atomic<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">cmpxchg_ptr</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> obj<span class=\"token operator\">-></span><span class=\"token function\">mark_addr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">==</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// If atomic operation failed, we must inflate the header</span>\n    <span class=\"token comment\" spellcheck=\"true\">// into heavy weight monitor. We could add more code here</span>\n    <span class=\"token comment\" spellcheck=\"true\">// for fast path, but it does not worth the complexity.</span>\n  <span class=\"token punctuation\">}</span>\n\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  monitor <span class=\"token operator\">=</span> ObjectSynchronizer<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>Self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// Load displaced header and check it has hash code</span>\n  mark <span class=\"token operator\">=</span> monitor<span class=\"token operator\">-></span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>mark<span class=\"token operator\">-></span><span class=\"token function\">is_neutral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invariant\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  hash <span class=\"token operator\">=</span> mark<span class=\"token operator\">-></span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    hash <span class=\"token operator\">=</span> <span class=\"token function\">get_next_hash</span><span class=\"token punctuation\">(</span>Self<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    temp <span class=\"token operator\">=</span> mark<span class=\"token operator\">-></span><span class=\"token function\">copy_set_hash</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// merge hash code into header</span>\n    <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>temp<span class=\"token operator\">-></span><span class=\"token function\">is_neutral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invariant\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>markOop<span class=\"token punctuation\">)</span> Atomic<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">cmpxchg_ptr</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> monitor<span class=\"token punctuation\">,</span> mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">!=</span> mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// The only update to the header in the monitor (outside GC)</span>\n      <span class=\"token comment\" spellcheck=\"true\">// is install the hash code. If someone add new usage of</span>\n      <span class=\"token comment\" spellcheck=\"true\">// displaced header, please update this code</span>\n      hash <span class=\"token operator\">=</span> test<span class=\"token operator\">-></span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>test<span class=\"token operator\">-></span><span class=\"token function\">is_neutral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invariant\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n      <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Trivial unexpected object/monitor header usage.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// We finally get the hash</span>\n  <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> intptr_t <span class=\"token function\">get_next_hash</span><span class=\"token punctuation\">(</span>Thread <span class=\"token operator\">*</span> Self<span class=\"token punctuation\">,</span> oop obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  intptr_t value <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\" spellcheck=\"true\">// This form uses an unguarded global Park-Miller RNG,</span>\n     <span class=\"token comment\" spellcheck=\"true\">// so it's possible for two threads to race and generate the same RNG.</span>\n     <span class=\"token comment\" spellcheck=\"true\">// On MP system we'll have lots of RW access to a global, so the</span>\n     <span class=\"token comment\" spellcheck=\"true\">// mechanism induces lots of coherency traffic.</span>\n     value <span class=\"token operator\">=</span> os<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\" spellcheck=\"true\">// This variation has the property of being stable (idempotent)</span>\n     <span class=\"token comment\" spellcheck=\"true\">// between STW operations.  This can be useful in some of the 1-0</span>\n     <span class=\"token comment\" spellcheck=\"true\">// synchronization schemes.</span>\n     intptr_t addrBits <span class=\"token operator\">=</span> <span class=\"token function\">intptr_t</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">3</span> <span class=\"token punctuation\">;</span>\n     value <span class=\"token operator\">=</span> addrBits <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>addrBits <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> GVars<span class=\"token punctuation\">.</span>stwRandom <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     value <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">// for sensitivity testing</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     value <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>GVars<span class=\"token punctuation\">.</span>hcSequence <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     value <span class=\"token operator\">=</span> <span class=\"token function\">intptr_t</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token comment\" spellcheck=\"true\">// Marsaglia's xor-shift scheme with thread-specific state</span>\n     <span class=\"token comment\" spellcheck=\"true\">// This is probably the best overall implementation -- we'll</span>\n     <span class=\"token comment\" spellcheck=\"true\">// likely make this the default in future releases.</span>\n     <span class=\"token keyword\">unsigned</span> t <span class=\"token operator\">=</span> Self<span class=\"token operator\">-></span>_hashStateX <span class=\"token punctuation\">;</span>\n     t <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n     Self<span class=\"token operator\">-></span>_hashStateX <span class=\"token operator\">=</span> Self<span class=\"token operator\">-></span>_hashStateY <span class=\"token punctuation\">;</span>\n     Self<span class=\"token operator\">-></span>_hashStateY <span class=\"token operator\">=</span> Self<span class=\"token operator\">-></span>_hashStateZ <span class=\"token punctuation\">;</span>\n     Self<span class=\"token operator\">-></span>_hashStateZ <span class=\"token operator\">=</span> Self<span class=\"token operator\">-></span>_hashStateW <span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">unsigned</span> v <span class=\"token operator\">=</span> Self<span class=\"token operator\">-></span>_hashStateW <span class=\"token punctuation\">;</span>\n     v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">>></span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n     Self<span class=\"token operator\">-></span>_hashStateW <span class=\"token operator\">=</span> v <span class=\"token punctuation\">;</span>\n     value <span class=\"token operator\">=</span> v <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>JVM_IHashCode 在 jvm.cpp 中定义。请参阅从第 504 行开始的代码。这又调用了在synchronizer.cpp 中定义的 ObjectSynchronizer::FastHashCode。请参阅第 576 行的 FastHashCode 和第 530 行的 get_next_hash 的实现。</p>\n<p><strong>HashCode 的作用是：</strong></p>\n<ul>\n<li>hashCode 的作用是返回对象的哈希码值。支持此方法是为了有利于散列表，这个哈希码的作用是确定该对象在哈希表中的索引位</li>\n</ul>\n<p>置。</p>\n<ul>\n<li><p>hashCode的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>\n<p><strong>HashCode 的一般约定是：</strong></p>\n</li>\n<li><p>在 Java 应用程序的执行过程中，只要在同一个对象上多次调用它,hashCode方法必须始终如一地返回相同的整数，前提是未修改对象的  equals比较中使用的信息。该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。</p>\n</li>\n<li><p>如果两个对象根据 equals()方法相等，则对这两个对象中的每一个调用  hashCode}方法必须产生相同的整数结果。</p>\n</li>\n<li><p>如果两个对象根据 equals()方法不相等，则调用 hashCode}方法这两个对象中的每一个都必须产生不同的整数结果。</p>\n</li>\n<li><p>两个对象有相同的hashcode值，它们也不一定是相等的</p>\n</li>\n<li><p>因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</p>\n</li>\n<li><p>为不相等的对象生成不同的整数结果可能会提高哈希表的性能。</p>\n</li>\n<li><p>在合理可行的情况下，类 Object定义的 hashCode 方法确实为不同的对象返回不同的整数。</p>\n</li>\n</ul>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><ul>\n<li>修饰类：表示类不可被继承</li>\n<li>修饰方法：表示方法不可被子类覆盖，但是可以重载</li>\n<li>修饰变量：表示变量一旦被赋值就不可以更改它的值<ul>\n<li>如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。</li>\n<li>如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。</li>\n<li>如果final修饰的是局部变量,系统不会为局部变量进行初始化，局部变量必须由程序员显示初始化。因此使用final修饰局部变量时，即可以在定义时指定默认值也可以在后面的代码中对final变量赋初值。</li>\n<li>如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；</li>\n<li>如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。但是引用的值是可变的</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> Person p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//合法</span>\np<span class=\"token operator\">=</span>null<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//非法</span></code></pre>\n<p><strong>为什么局部内部类和匿名内部类只能访问局部final变量？</strong></p>\n<p>首先需要知道的一点是: 内部类和外部类是处于同一个级别的，内部类不会因为定义在方法中就会随着方法的执行完毕就被销毁。<br>这里就会产生问题：当外部类的方法结束时，局部变量就会被销毁了，但是内部类对象可能还存在(只有没有人再引用它时，才会死亡)。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的”copy”。这样就好像延长了局部变量的生命周期将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也得跟着改变，怎么解决问题呢？就将局部变量设置为final，对它初始化后，我就不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。这实际上也是一种妥协。使得局部变量与内部类内建立的拷贝保持一致。</p>\n<h3 id=\"String、StringBuffer、StringBuilder\"><a href=\"#String、StringBuffer、StringBuilder\" class=\"headerlink\" title=\"String、StringBuffer、StringBuilder\"></a>String、StringBuffer、StringBuilder</h3><ul>\n<li>String是final修饰的，不可变，每次操作都会产生新的String对象</li>\n<li>StringBuffer和StringBuilder都是在原对象上操作</li>\n<li>StringBuffer是线程安全的，StringBuilder线程不安全的</li>\n<li>StringBuffer方法都是synchronized修饰的</li>\n<li>性能：StringBuilder &gt; StringBuffer &gt; String</li>\n<li>场景：经常需要改变字符串内容时使用后面两个</li>\n<li>优先使用StringBuilder，多线程使用共享变量时使用StringBuffer</li>\n</ul>\n<h3 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h3><ul>\n<li>重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。</li>\n<li>重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。</li>\n</ul>\n<h3 id=\"接口和抽象类的区别\"><a href=\"#接口和抽象类的区别\" class=\"headerlink\" title=\"接口和抽象类的区别\"></a>接口和抽象类的区别</h3><ul>\n<li>抽象类可以存在普通成员函数，而接口中只能存在public abstract 方法。</li>\n<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。</li>\n<li>抽象类只能继承一个，接口可以实现多个。</li>\n<li>接口的设计目的，是对类的行为进行约束（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行为进行限制。</li>\n<li>而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执行）。</li>\n<li>抽象类是对类本质的抽象，表达的是 is a 的关系，比如： BMW is a Car 。抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。</li>\n<li>而接口是对行为的抽象，表达的是 like a 的关系。比如： Bird like a Aircraft （像飞行器一样可以飞），但其本质上 is a Bird 。接口的核心是定义行为，即实现类可以做什么，至于实现类主体是谁、是如何实现的，接口并不关心。</li>\n<li>使用场景：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。</li>\n<li>抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度</li>\n</ul>\n<h2 id=\"Java-集合\"><a href=\"#Java-集合\" class=\"headerlink\" title=\"Java 集合\"></a>Java 集合</h2><h3 id=\"List和Set的区别\"><a href=\"#List和Set的区别\" class=\"headerlink\" title=\"List和Set的区别\"></a>List和Set的区别</h3><ul>\n<li>List：有序，按对象进入的顺序保存对象，可重复，允许多个Null元素对象，可以使用Iterator取出所有元素，在逐一遍历，还可以使用get(int index)获取指定下标的元素</li>\n<li>Set：无序，不可重复，最多允许有一个Null元素对象，取元素时只能用Iterator接口取得所有元素，在逐一遍历各个元素</li>\n</ul>\n<h4 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h4><ul>\n<li><p><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/ArrayList.java\" target=\"_blank\" rel=\"noopener\">ArrayList 源码</a></p>\n</li>\n<li><p><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/LinkedList.java\" target=\"_blank\" rel=\"noopener\">LinkedList 源码</a></p>\n</li>\n<li><p>⾸先，他们的底层数据结构不同，ArrayList底层是基于数组实现的，LinkedList底层是基于链表实现的</p>\n</li>\n<li><p>由于底层数据结构不同，他们所适⽤的场景也不同，ArrayList更适合随机查找，LinkedList更适合删除和添加，查询、添加、删除的时间复杂度不同</p>\n</li>\n<li><p>另外ArrayList和LinkedList都实现了List接⼝，但是LinkedList还额外实现了Deque接⼝，所以LinkedList还可以当做队列来使⽤</p>\n</li>\n<li><p>ArrayList：基于动态数组，连续内存存储，适合下标访问（随机访问），扩容机制：因为数组长度固定，超出长度存数据时需要新建数组，然后将老数组的数据拷贝到新数组，如果不是尾部插入数据还会涉及到元素的移动（往后复制一份，插入新元素），使用尾插法并指定初始容量可以极大提升性能、甚至超过linkedList（需要创建大量的node对象）</p>\n</li>\n<li><p>LinkedList：基于链表，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询：需要逐一遍历LinkedList必须使用iterator不能使用for循环，因为每次for循环体内通过get(i)取得某一元素时都需要对list重新进行遍历，性能消耗极大。另外不要试图使用indexOf等返回元素索引，并利用其进行遍历，使用indexlOf对list进行了遍历，当结果为空时会遍历整个列表。</p>\n</li>\n</ul>\n<h3 id=\"HashMap和HashTable有什么区别？其底层实现是什么？\"><a href=\"#HashMap和HashTable有什么区别？其底层实现是什么？\" class=\"headerlink\" title=\"HashMap和HashTable有什么区别？其底层实现是什么？\"></a>HashMap和HashTable有什么区别？其底层实现是什么？</h3><ul>\n<li>HashMap方法没有synchronized修饰，线程非安全，HashTable线程安全；</li>\n<li>HashMap允许key和value为null，而HashTable不允许</li>\n<li>jdk8开始链表高度到8、数组长度超过64，链表转变为红黑树，元素以内部类Node节点存在</li>\n<li>计算key的hash值，二次hash然后对数组长度取模，对应到数组下标，</li>\n<li>如果没有产生hash冲突(下标位置没有元素)，则直接创建Node存入数组，</li>\n<li>如果产生hash冲突，先进行equal比较，相同则取代该元素，不同，则判断链表高度插入链表，链</li>\n<li>表高度达到8，并且数组长度到64则转变为红黑树，长度低于6则将红黑树转回链表</li>\n</ul>\n<h4 id=\"HashMap的Put⽅法的⼤体流程\"><a href=\"#HashMap的Put⽅法的⼤体流程\" class=\"headerlink\" title=\"HashMap的Put⽅法的⼤体流程\"></a>HashMap的Put⽅法的⼤体流程</h4><ul>\n<li><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/HashMap.java\" target=\"_blank\" rel=\"noopener\">HashMap 源码1.8</a></li>\n<li><a href=\"http://androidos.net.cn/android/7.1.1_r28/xref/libcore/ojluni/src/main/java/java/util/HashMap.java\" target=\"_blank\" rel=\"noopener\">HashMap 源码1.7</a></li>\n<li>根据Key通过哈希算法与与运算得出数组下标</li>\n<li>如果数组下标位置元素为空，则将key和value封装为Entry对象（JDK1.7中是Entry对象，JDK1.8中是Node对象）并放⼊该位置</li>\n<li>如果数组下标位置元素不为空，则要分情况讨论<ul>\n<li>如果是JDK1.7，则先判断是否需要扩容，如果要扩容就进⾏扩容，如果不⽤扩容就⽣成Entry对象，并使⽤头插法添加到当前位置的链表中</li>\n<li>如果是JDK1.8，则会先判断当前位置上的Node的类型，看是红⿊树Node，还是链表Node<ul>\n<li>如果是红⿊树Node，则将key和value封装为⼀个红⿊树节点并添加到红⿊树中去，在这个过程中会判断红⿊树中是否存在当前key，如果存在则更新value</li>\n<li>如果此位置上的Node对象是链表节点，则将key和value封装为⼀个链表Node并通过尾插法插⼊到链表的最后位置去，因为是尾插法，所以需要遍历链表，在遍历链表的过程中会判断是否存在当前key，如果存在则更新value，当遍历完链表后，将新链表Node插⼊到链表中，插⼊到链表后，会看当前链表的节点个数，如果⼤于等于8，那么则会将该链表转成红⿊树</li>\n<li>将key和value封装为Node插⼊到链表或红⿊树中后，再判断是否需要进⾏扩容，如果需要就<br>扩容，如果不需要就结束PUT⽅法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">final</span> V <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span>\n               <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> p<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e<span class=\"token punctuation\">;</span> K k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n            e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> TREEIFY_THRESHOLD <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// -1 for 1st</span>\n                        <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// existing mapping for key</span>\n            V oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n                e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"Java-多线程\"><a href=\"#Java-多线程\" class=\"headerlink\" title=\"Java 多线程\"></a>Java 多线程</h2><h4 id=\"ThreadLocal-简述\"><a href=\"#ThreadLocal-简述\" class=\"headerlink\" title=\"ThreadLocal 简述\"></a>ThreadLocal 简述</h4><ul>\n<li><p><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/lang/ThreadLocal.java\" target=\"_blank\" rel=\"noopener\">ThreadLocal 源码</a></p>\n</li>\n<li><p>ThreadLocal是Java中所提供的线程本地存储机制，可以利⽤该机制将数据缓存在某个线程内部，该线<br>程可以在任意时刻、任意⽅法中获取缓存的数据</p>\n</li>\n<li><p>ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在⼀个ThreadLocalMap，Map的key为ThreadLocal对象，Map的value为需要缓<br>存的值</p>\n</li>\n<li><p>如果在线程池中使⽤ThreadLocal会造成内存泄漏，因为当ThreadLocal对象使⽤完之后，应该要把设置的key，value，也就是Entry对象进⾏回收，但线程池中的线程不会回收，⽽线程对象是通过强引⽤指向ThreadLocalMap，ThreadLocalMap也是通过强引⽤指向Entry对象，线程不被回收，Entry对象也就不会被回收，从⽽出现内存泄漏，解决办法是，在使⽤了ThreadLocal对象之后，⼿动调⽤ThreadLocal的remove⽅法，⼿动清楚Entry对象</p>\n</li>\n<li><p>ThreadLocal经典的应⽤场景就是连接管理（⼀个线程持有⼀个连接，该连接对象可以在不同的⽅法之间进⾏传递，线程之间不共享同⼀个连接）</p>\n</li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<p>Android各版本对应JDK版本</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">平台版本</th>\n<th align=\"left\">版本名称</th>\n<th align=\"left\">SDK版本</th>\n<th align=\"left\">市场占有率</th>\n<th align=\"left\">JDK版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2.3.3 - 2.3.7</td>\n<td align=\"left\">Gingerbread</td>\n<td align=\"left\">10</td>\n<td align=\"left\">0.4%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.0.3 - 4.0.4</td>\n<td align=\"left\">Ice Cream Sandwich</td>\n<td align=\"left\">15</td>\n<td align=\"left\">0.5%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.1.x</td>\n<td align=\"left\">Jelly Bean</td>\n<td align=\"left\">16</td>\n<td align=\"left\">2.0%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.2.x</td>\n<td align=\"left\">Jelly Bean</td>\n<td align=\"left\">17</td>\n<td align=\"left\">3.0%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.3</td>\n<td align=\"left\">Jelly Bean</td>\n<td align=\"left\">18</td>\n<td align=\"left\">0.9%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4.4</td>\n<td align=\"left\">KitKat</td>\n<td align=\"left\">19</td>\n<td align=\"left\">13.4%</td>\n<td align=\"left\">6</td>\n</tr>\n<tr>\n<td align=\"left\">5.0</td>\n<td align=\"left\">Lollipop</td>\n<td align=\"left\">21</td>\n<td align=\"left\">6.1%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">5.1</td>\n<td align=\"left\">Lollipop</td>\n<td align=\"left\">22</td>\n<td align=\"left\">20.2%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">6.0</td>\n<td align=\"left\">Marshmallow</td>\n<td align=\"left\">23</td>\n<td align=\"left\">29.7%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">7.0</td>\n<td align=\"left\">Nougat</td>\n<td align=\"left\">24</td>\n<td align=\"left\">19.3%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">7.1</td>\n<td align=\"left\">Nougat</td>\n<td align=\"left\">25</td>\n<td align=\"left\">4.0%</td>\n<td align=\"left\">7</td>\n</tr>\n<tr>\n<td align=\"left\">8.0</td>\n<td align=\"left\">Oreo</td>\n<td align=\"left\">26</td>\n<td align=\"left\">0.5%</td>\n<td align=\"left\">8</td>\n</tr>\n</tbody></table>\n<p>Android Gradle 插件版本所需的 Gradle 版本。为了获得最佳性能，您应使用 Gradle 和插件这两者的最新版本。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">插件版本</th>\n<th align=\"left\">所需的 Gradle 版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1.0.0 - 1.1.3</td>\n<td align=\"left\">2.2.1 - 2.3</td>\n</tr>\n<tr>\n<td align=\"left\">1.2.0 - 1.3.1</td>\n<td align=\"left\">2.2.1 - 2.9</td>\n</tr>\n<tr>\n<td align=\"left\">1.5.0</td>\n<td align=\"left\">2.2.1 - 2.13</td>\n</tr>\n<tr>\n<td align=\"left\">2.0.0 - 2.1.2</td>\n<td align=\"left\">2.10 - 2.13</td>\n</tr>\n<tr>\n<td align=\"left\">2.1.3 - 2.2.3</td>\n<td align=\"left\">2.14.1 - 3.5</td>\n</tr>\n<tr>\n<td align=\"left\">2.3.0+</td>\n<td align=\"left\">3.3+</td>\n</tr>\n<tr>\n<td align=\"left\">3.0.0+</td>\n<td align=\"left\">4.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.1.0+</td>\n<td align=\"left\">4.4+</td>\n</tr>\n<tr>\n<td align=\"left\">3.2.0 - 3.2.1</td>\n<td align=\"left\">4.6+</td>\n</tr>\n<tr>\n<td align=\"left\">3.3.0 - 3.3.3</td>\n<td align=\"left\">4.10.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.4.0 - 3.4.3</td>\n<td align=\"left\">5.1.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.5.0 - 3.5.4</td>\n<td align=\"left\">5.4.1+</td>\n</tr>\n<tr>\n<td align=\"left\">3.6.0 - 3.6.4</td>\n<td align=\"left\">5.6.4+</td>\n</tr>\n<tr>\n<td align=\"left\">4.0.0+</td>\n<td align=\"left\">6.1.1+</td>\n</tr>\n<tr>\n<td align=\"left\">4.1.0+</td>\n<td align=\"left\">6.5+</td>\n</tr>\n<tr>\n<td align=\"left\">4.2.0+</td>\n<td align=\"left\">6.7.1+</td>\n</tr>\n<tr>\n<td align=\"left\">7.0</td>\n<td align=\"left\">7.0+</td>\n</tr>\n</tbody></table>\n<h1 id=\"1-Java\"><a href=\"#1-Java\" class=\"headerlink\" title=\"1.Java\"></a>1.Java</h1><h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h3 id=\"JDK-JRE-JVM\"><a href=\"#JDK-JRE-JVM\" class=\"headerlink\" title=\"JDK/JRE/JVM\"></a>JDK/JRE/JVM</h3><p>JDK：Java Develpment Kit java 开发工具<br>JRE：Java Runtime Environment java运行时环境<br>JVM：java Virtual Machine java 虚拟机</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210805234734.png\" alt=\"\"></p>\n<h3 id=\"和equals比较\"><a href=\"#和equals比较\" class=\"headerlink\" title=\"==和equals比较\"></a>==和equals比较</h3><p><strong>==：</strong>对比的是栈中的值，基本数据类型是<strong>变量值</strong>，引用类型是堆中内存<strong>对象的地址</strong></p>\n<p><strong>equals：</strong>object中默认也是采用==比较，通常会重写，比如字符串类重写了equals比较的是每个char的值是否相等</p>\n<pre><code class=\"java\">//Object.java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}</code></pre>\n<pre><code class=\"java\">//String.java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}</code></pre>\n<pre><code class=\"java\">//test equals and ==\nString str1 = &quot;Hello&quot;;\nString str2 = new String(&quot;Hello&quot;);\nString str3 = str2; \nSystem.out.println(str1 == str2); // false\nSystem.out.println(str1 == str3); // false\nSystem.out.println(str2 == str3); // true\nSystem.out.println(str1.equals(str2)); // true\nSystem.out.println(str1.equals(str3)); // true\nSystem.out.println(str2.equals(str3)); // true</code></pre>\n<h3 id=\"hashCode与equals\"><a href=\"#hashCode与equals\" class=\"headerlink\" title=\"hashCode与equals\"></a>hashCode与equals</h3><p>hashCode 是通过将对象的内部地址转换为整数来实现的，此内存地址不能通过 java sdk 获得，必须作为native方法实现。native 源码如下：</p>\n<pre><code class=\"java\">//object.java\npublic native int hashCode();</code></pre>\n<pre><code class=\"c\">//view src/share/native/java/lang/Object.c\nstatic JNINativeMethod methods[] = {\n    {&quot;hashCode&quot;,    &quot;()I&quot;,                    (void *)&amp;JVM_IHashCode},\n    {&quot;wait&quot;,        &quot;(J)V&quot;,                   (void *)&amp;JVM_MonitorWait},\n    {&quot;notify&quot;,      &quot;()V&quot;,                    (void *)&amp;JVM_MonitorNotify},\n    {&quot;notifyAll&quot;,   &quot;()V&quot;,                    (void *)&amp;JVM_MonitorNotifyAll},\n    {&quot;clone&quot;,       &quot;()Ljava/lang/Object;&quot;,   (void *)&amp;JVM_Clone},\n};\nJNIEXPORT void JNICALL Java_java_lang_Object_registerNatives(JNIEnv *env, jclass cls){\n    (*env)-&gt;RegisterNatives(env, cls, methods, sizeof(methods)/sizeof(methods[0]));\n}\nJNIEXPORT jclass JNICALL Java_java_lang_Object_getClass(JNIEnv *env, jobject this){\n    if (this == NULL) {\n        JNU_ThrowNullPointerException(env, NULL);\n        return 0;\n    } else {\n        return (*env)-&gt;GetObjectClass(env, this);\n    }\n}</code></pre>\n<p>此源包含 getClass() 方法的实现。 hashCode 被定义为一个函数指针 JVM_IHashCode</p>\n<pre><code class=\"c\">//view src/share/vm/prims/jvm.cpp\n// java.lang.Object ///////////////////////////////////////////////\nJVM_ENTRY(jint, JVM_IHashCode(JNIEnv* env, jobject handle))\n  JVMWrapper(&quot;JVM_IHashCode&quot;);\n  // as implemented in the classic virtual machine; return 0 if object is NULL\n  return handle == NULL ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;\nJVM_END</code></pre>\n<pre><code class=\"c\">//view src/share/vm/runtime/synchronizer.cpp\nintptr_t ObjectSynchronizer::FastHashCode (Thread * Self, oop obj) {\n  ....\n    if (mark-&gt;is_neutral()) {\n    hash = mark-&gt;hash();              // this is a normal header\n    if (hash) {                       // if it has hash, just return it\n      return hash;\n    }\n    hash = get_next_hash(Self, obj);  // allocate a new hash code\n    temp = mark-&gt;copy_set_hash(hash); // merge the hash code into header\n    // use (machine word version) atomic operation to install the hash\n    test = (markOop) Atomic::cmpxchg_ptr(temp, obj-&gt;mark_addr(), mark);\n    if (test == mark) {\n      return hash;\n    }\n    // If atomic operation failed, we must inflate the header\n    // into heavy weight monitor. We could add more code here\n    // for fast path, but it does not worth the complexity.\n  }\n\n ...\n\n  monitor = ObjectSynchronizer::inflate(Self, obj);\n  // Load displaced header and check it has hash code\n  mark = monitor-&gt;header();\n  assert (mark-&gt;is_neutral(), &quot;invariant&quot;) ;\n  hash = mark-&gt;hash();\n  if (hash == 0) {\n    hash = get_next_hash(Self, obj);\n    temp = mark-&gt;copy_set_hash(hash); // merge hash code into header\n    assert (temp-&gt;is_neutral(), &quot;invariant&quot;) ;\n    test = (markOop) Atomic::cmpxchg_ptr(temp, monitor, mark);\n    if (test != mark) {\n      // The only update to the header in the monitor (outside GC)\n      // is install the hash code. If someone add new usage of\n      // displaced header, please update this code\n      hash = test-&gt;hash();\n      assert (test-&gt;is_neutral(), &quot;invariant&quot;) ;\n      assert (hash != 0, &quot;Trivial unexpected object/monitor header usage.&quot;);\n    }\n  }\n  // We finally get the hash\n  return hash;\n}\n\n  static inline intptr_t get_next_hash(Thread * Self, oop obj) {\n  intptr_t value = 0 ;\n  if (hashCode == 0) {\n     // This form uses an unguarded global Park-Miller RNG,\n     // so it&#39;s possible for two threads to race and generate the same RNG.\n     // On MP system we&#39;ll have lots of RW access to a global, so the\n     // mechanism induces lots of coherency traffic.\n     value = os::random() ;\n  } else\n  if (hashCode == 1) {\n     // This variation has the property of being stable (idempotent)\n     // between STW operations.  This can be useful in some of the 1-0\n     // synchronization schemes.\n     intptr_t addrBits = intptr_t(obj) &gt;&gt; 3 ;\n     value = addrBits ^ (addrBits &gt;&gt; 5) ^ GVars.stwRandom ;\n  } else\n  if (hashCode == 2) {\n     value = 1 ;            // for sensitivity testing\n  } else\n  if (hashCode == 3) {\n     value = ++GVars.hcSequence ;\n  } else\n  if (hashCode == 4) {\n     value = intptr_t(obj) ;\n  } else {\n     // Marsaglia&#39;s xor-shift scheme with thread-specific state\n     // This is probably the best overall implementation -- we&#39;ll\n     // likely make this the default in future releases.\n     unsigned t = Self-&gt;_hashStateX ;\n     t ^= (t &lt;&lt; 11) ;\n     Self-&gt;_hashStateX = Self-&gt;_hashStateY ;\n     Self-&gt;_hashStateY = Self-&gt;_hashStateZ ;\n     Self-&gt;_hashStateZ = Self-&gt;_hashStateW ;\n     unsigned v = Self-&gt;_hashStateW ;\n     v = (v ^ (v &gt;&gt; 19)) ^ (t ^ (t &gt;&gt; 8)) ;\n     Self-&gt;_hashStateW = v ;\n     value = v ;\n  }</code></pre>\n<p>JVM_IHashCode 在 jvm.cpp 中定义。请参阅从第 504 行开始的代码。这又调用了在synchronizer.cpp 中定义的 ObjectSynchronizer::FastHashCode。请参阅第 576 行的 FastHashCode 和第 530 行的 get_next_hash 的实现。</p>\n<p><strong>HashCode 的作用是：</strong></p>\n<ul>\n<li>hashCode 的作用是返回对象的哈希码值。支持此方法是为了有利于散列表，这个哈希码的作用是确定该对象在哈希表中的索引位</li>\n</ul>\n<p>置。</p>\n<ul>\n<li><p>hashCode的默认行为是对堆上的对象产生独特值。如果没有重写hashCode()，则该class的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）</p>\n<p><strong>HashCode 的一般约定是：</strong></p>\n</li>\n<li><p>在 Java 应用程序的执行过程中，只要在同一个对象上多次调用它,hashCode方法必须始终如一地返回相同的整数，前提是未修改对象的  equals比较中使用的信息。该整数不需要从应用程序的一次执行到同一应用程序的另一次执行保持一致。</p>\n</li>\n<li><p>如果两个对象根据 equals()方法相等，则对这两个对象中的每一个调用  hashCode}方法必须产生相同的整数结果。</p>\n</li>\n<li><p>如果两个对象根据 equals()方法不相等，则调用 hashCode}方法这两个对象中的每一个都必须产生不同的整数结果。</p>\n</li>\n<li><p>两个对象有相同的hashcode值，它们也不一定是相等的</p>\n</li>\n<li><p>因此，equals方法被覆盖过，则hashCode方法也必须被覆盖</p>\n</li>\n<li><p>为不相等的对象生成不同的整数结果可能会提高哈希表的性能。</p>\n</li>\n<li><p>在合理可行的情况下，类 Object定义的 hashCode 方法确实为不同的对象返回不同的整数。</p>\n</li>\n</ul>\n<h3 id=\"final-关键字\"><a href=\"#final-关键字\" class=\"headerlink\" title=\"final 关键字\"></a>final 关键字</h3><ul>\n<li>修饰类：表示类不可被继承</li>\n<li>修饰方法：表示方法不可被子类覆盖，但是可以重载</li>\n<li>修饰变量：表示变量一旦被赋值就不可以更改它的值<ul>\n<li>如果final修饰的是类变量，只能在静态初始化块中指定初始值或者声明该类变量时指定初始值。</li>\n<li>如果final修饰的是成员变量，可以在非静态初始化块、声明该变量或者构造器中执行初始值。</li>\n<li>如果final修饰的是局部变量,系统不会为局部变量进行初始化，局部变量必须由程序员显示初始化。因此使用final修饰局部变量时，即可以在定义时指定默认值也可以在后面的代码中对final变量赋初值。</li>\n<li>如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；</li>\n<li>如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。但是引用的值是可变的</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">final Person p = new Person(25);\np.setAge(24);//合法\np=null;//非法</code></pre>\n<p><strong>为什么局部内部类和匿名内部类只能访问局部final变量？</strong></p>\n<p>首先需要知道的一点是: 内部类和外部类是处于同一个级别的，内部类不会因为定义在方法中就会随着方法的执行完毕就被销毁。<br>这里就会产生问题：当外部类的方法结束时，局部变量就会被销毁了，但是内部类对象可能还存在(只有没有人再引用它时，才会死亡)。这里就出现了一个矛盾：内部类对象访问了一个不存在的变量。为了解决这个问题，就将局部变量复制了一份作为内部类的成员变量，这样当局部变量死亡后，内部类仍可以访问它，实际访问的是局部变量的”copy”。这样就好像延长了局部变量的生命周期将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的，也就是如果我们在内部类中修改了成员变量，方法中的局部变量也得跟着改变，怎么解决问题呢？就将局部变量设置为final，对它初始化后，我就不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。这实际上也是一种妥协。使得局部变量与内部类内建立的拷贝保持一致。</p>\n<h3 id=\"String、StringBuffer、StringBuilder\"><a href=\"#String、StringBuffer、StringBuilder\" class=\"headerlink\" title=\"String、StringBuffer、StringBuilder\"></a>String、StringBuffer、StringBuilder</h3><ul>\n<li>String是final修饰的，不可变，每次操作都会产生新的String对象</li>\n<li>StringBuffer和StringBuilder都是在原对象上操作</li>\n<li>StringBuffer是线程安全的，StringBuilder线程不安全的</li>\n<li>StringBuffer方法都是synchronized修饰的</li>\n<li>性能：StringBuilder &gt; StringBuffer &gt; String</li>\n<li>场景：经常需要改变字符串内容时使用后面两个</li>\n<li>优先使用StringBuilder，多线程使用共享变量时使用StringBuffer</li>\n</ul>\n<h3 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h3><ul>\n<li>重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同，发生在编译时。</li>\n<li>重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；如果父类方法访问修饰符为private则子类就不能重写该方法。</li>\n</ul>\n<h3 id=\"接口和抽象类的区别\"><a href=\"#接口和抽象类的区别\" class=\"headerlink\" title=\"接口和抽象类的区别\"></a>接口和抽象类的区别</h3><ul>\n<li>抽象类可以存在普通成员函数，而接口中只能存在public abstract 方法。</li>\n<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的。</li>\n<li>抽象类只能继承一个，接口可以实现多个。</li>\n<li>接口的设计目的，是对类的行为进行约束（更准确的说是一种“有”约束，因为接口不能规定类不可以有什么行为），也就是提供一种机制，可以强制要求不同的类具有相同的行为。它只约束了行为的有无，但不对如何实现行为进行限制。</li>\n<li>而抽象类的设计目的，是代码复用。当不同的类具有某些相同的行为(记为行为集合A)，且其中一部分行为的实现方式一致时（A的非真子集，记为B），可以让这些类都派生于一个抽象类。在这个抽象类中实现了B，避免让所有的子类来实现B，这就达到了代码复用的目的。而A减B的部分，留给各个子类自己实现。正是因为A-B在这里没有实现，所以抽象类不允许实例化出来（否则当调用到A-B时，无法执行）。</li>\n<li>抽象类是对类本质的抽象，表达的是 is a 的关系，比如： BMW is a Car 。抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。</li>\n<li>而接口是对行为的抽象，表达的是 like a 的关系。比如： Bird like a Aircraft （像飞行器一样可以飞），但其本质上 is a Bird 。接口的核心是定义行为，即实现类可以做什么，至于实现类主体是谁、是如何实现的，接口并不关心。</li>\n<li>使用场景：当你关注一个事物的本质的时候，用抽象类；当你关注一个操作的时候，用接口。</li>\n<li>抽象类的功能要远超过接口，但是，定义抽象类的代价高。因为高级语言来说（从实际设计上来说也是）每个类只能继承一个类。在这个类中，你必须继承或编写出其所有子类的所有共性。虽然接口在功能上会弱化许多，但是它只是针对一个动作的描述。而且你可以在一个类中同时实现多个接口。在设计阶段会降低难度</li>\n</ul>\n<h2 id=\"Java-集合\"><a href=\"#Java-集合\" class=\"headerlink\" title=\"Java 集合\"></a>Java 集合</h2><h3 id=\"List和Set的区别\"><a href=\"#List和Set的区别\" class=\"headerlink\" title=\"List和Set的区别\"></a>List和Set的区别</h3><ul>\n<li>List：有序，按对象进入的顺序保存对象，可重复，允许多个Null元素对象，可以使用Iterator取出所有元素，在逐一遍历，还可以使用get(int index)获取指定下标的元素</li>\n<li>Set：无序，不可重复，最多允许有一个Null元素对象，取元素时只能用Iterator接口取得所有元素，在逐一遍历各个元素</li>\n</ul>\n<h4 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h4><ul>\n<li><p><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/ArrayList.java\" target=\"_blank\" rel=\"noopener\">ArrayList 源码</a></p>\n</li>\n<li><p><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/LinkedList.java\" target=\"_blank\" rel=\"noopener\">LinkedList 源码</a></p>\n</li>\n<li><p>⾸先，他们的底层数据结构不同，ArrayList底层是基于数组实现的，LinkedList底层是基于链表实现的</p>\n</li>\n<li><p>由于底层数据结构不同，他们所适⽤的场景也不同，ArrayList更适合随机查找，LinkedList更适合删除和添加，查询、添加、删除的时间复杂度不同</p>\n</li>\n<li><p>另外ArrayList和LinkedList都实现了List接⼝，但是LinkedList还额外实现了Deque接⼝，所以LinkedList还可以当做队列来使⽤</p>\n</li>\n<li><p>ArrayList：基于动态数组，连续内存存储，适合下标访问（随机访问），扩容机制：因为数组长度固定，超出长度存数据时需要新建数组，然后将老数组的数据拷贝到新数组，如果不是尾部插入数据还会涉及到元素的移动（往后复制一份，插入新元素），使用尾插法并指定初始容量可以极大提升性能、甚至超过linkedList（需要创建大量的node对象）</p>\n</li>\n<li><p>LinkedList：基于链表，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询：需要逐一遍历LinkedList必须使用iterator不能使用for循环，因为每次for循环体内通过get(i)取得某一元素时都需要对list重新进行遍历，性能消耗极大。另外不要试图使用indexOf等返回元素索引，并利用其进行遍历，使用indexlOf对list进行了遍历，当结果为空时会遍历整个列表。</p>\n</li>\n</ul>\n<h3 id=\"HashMap和HashTable有什么区别？其底层实现是什么？\"><a href=\"#HashMap和HashTable有什么区别？其底层实现是什么？\" class=\"headerlink\" title=\"HashMap和HashTable有什么区别？其底层实现是什么？\"></a>HashMap和HashTable有什么区别？其底层实现是什么？</h3><ul>\n<li>HashMap方法没有synchronized修饰，线程非安全，HashTable线程安全；</li>\n<li>HashMap允许key和value为null，而HashTable不允许</li>\n<li>jdk8开始链表高度到8、数组长度超过64，链表转变为红黑树，元素以内部类Node节点存在</li>\n<li>计算key的hash值，二次hash然后对数组长度取模，对应到数组下标，</li>\n<li>如果没有产生hash冲突(下标位置没有元素)，则直接创建Node存入数组，</li>\n<li>如果产生hash冲突，先进行equal比较，相同则取代该元素，不同，则判断链表高度插入链表，链</li>\n<li>表高度达到8，并且数组长度到64则转变为红黑树，长度低于6则将红黑树转回链表</li>\n</ul>\n<h4 id=\"HashMap的Put⽅法的⼤体流程\"><a href=\"#HashMap的Put⽅法的⼤体流程\" class=\"headerlink\" title=\"HashMap的Put⽅法的⼤体流程\"></a>HashMap的Put⽅法的⼤体流程</h4><ul>\n<li><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/util/HashMap.java\" target=\"_blank\" rel=\"noopener\">HashMap 源码1.8</a></li>\n<li><a href=\"http://androidos.net.cn/android/7.1.1_r28/xref/libcore/ojluni/src/main/java/java/util/HashMap.java\" target=\"_blank\" rel=\"noopener\">HashMap 源码1.7</a></li>\n<li>根据Key通过哈希算法与与运算得出数组下标</li>\n<li>如果数组下标位置元素为空，则将key和value封装为Entry对象（JDK1.7中是Entry对象，JDK1.8中是Node对象）并放⼊该位置</li>\n<li>如果数组下标位置元素不为空，则要分情况讨论<ul>\n<li>如果是JDK1.7，则先判断是否需要扩容，如果要扩容就进⾏扩容，如果不⽤扩容就⽣成Entry对象，并使⽤头插法添加到当前位置的链表中</li>\n<li>如果是JDK1.8，则会先判断当前位置上的Node的类型，看是红⿊树Node，还是链表Node<ul>\n<li>如果是红⿊树Node，则将key和value封装为⼀个红⿊树节点并添加到红⿊树中去，在这个过程中会判断红⿊树中是否存在当前key，如果存在则更新value</li>\n<li>如果此位置上的Node对象是链表节点，则将key和value封装为⼀个链表Node并通过尾插法插⼊到链表的最后位置去，因为是尾插法，所以需要遍历链表，在遍历链表的过程中会判断是否存在当前key，如果存在则更新value，当遍历完链表后，将新链表Node插⼊到链表中，插⼊到链表后，会看当前链表的节点个数，如果⼤于等于8，那么则会将该链表转成红⿊树</li>\n<li>将key和value封装为Node插⼊到链表或红⿊树中后，再判断是否需要进⾏扩容，如果需要就<br>扩容，如果不需要就结束PUT⽅法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n               boolean evict) {\n    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) &amp; hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node&lt;K,V&gt; e; K k;\n        if (p.hash == hash &amp;&amp;\n            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n            e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &amp;&amp;\n                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size &gt; threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}</code></pre>\n<h2 id=\"Java-多线程\"><a href=\"#Java-多线程\" class=\"headerlink\" title=\"Java 多线程\"></a>Java 多线程</h2><h4 id=\"ThreadLocal-简述\"><a href=\"#ThreadLocal-简述\" class=\"headerlink\" title=\"ThreadLocal 简述\"></a>ThreadLocal 简述</h4><ul>\n<li><p><a href=\"http://androidos.net.cn/android/9.0.0_r8/xref/libcore/ojluni/src/main/java/java/lang/ThreadLocal.java\" target=\"_blank\" rel=\"noopener\">ThreadLocal 源码</a></p>\n</li>\n<li><p>ThreadLocal是Java中所提供的线程本地存储机制，可以利⽤该机制将数据缓存在某个线程内部，该线<br>程可以在任意时刻、任意⽅法中获取缓存的数据</p>\n</li>\n<li><p>ThreadLocal底层是通过ThreadLocalMap来实现的，每个Thread对象（注意不是ThreadLocal对象）中都存在⼀个ThreadLocalMap，Map的key为ThreadLocal对象，Map的value为需要缓<br>存的值</p>\n</li>\n<li><p>如果在线程池中使⽤ThreadLocal会造成内存泄漏，因为当ThreadLocal对象使⽤完之后，应该要把设置的key，value，也就是Entry对象进⾏回收，但线程池中的线程不会回收，⽽线程对象是通过强引⽤指向ThreadLocalMap，ThreadLocalMap也是通过强引⽤指向Entry对象，线程不被回收，Entry对象也就不会被回收，从⽽出现内存泄漏，解决办法是，在使⽤了ThreadLocal对象之后，⼿动调⽤ThreadLocal的remove⽅法，⼿动清楚Entry对象</p>\n</li>\n<li><p>ThreadLocal经典的应⽤场景就是连接管理（⼀个线程持有⼀个连接，该连接对象可以在不同的⽅法之间进⾏传递，线程之间不共享同⼀个连接）</p>\n</li>\n</ul>\n"},{"title":"实战系列-设计模式总则篇","date":"2021-05-31T06:16:55.000Z","cover":true,"summary":"设计模式概述与24种设计模式简要概述，六种创建型模式，五种结构型模式，11中行为型模式","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# 实战系列-设计模式总则篇\n\n![image-20210812012737030](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210812012744.png)\n\n## 1.设计模式概述\n\n- 设计模式是什么\n  - **设计模式**是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。\n\n- 设计模式的主要目的\n  - 设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。\n\n- 设计模式与设计原则\n  - 从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行\n- 设计模式与方法或库\n  - 设计模式与方法或库的使用方式不同， 你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码， 而是解决特定问题的一般性概念。 你可以根据模式来实现符合自己程序实际所需的解决方案。\n- 设计模式与算法\n  - 设计模式模式和算法两者在概念上都是已知特定问题的典型解决方案。 但算法总是明确定义达成特定目标所需的一系列步骤， 而模式则是对解决方案的更高层次描述。 同一模式在两个不同程序中的实现代码可能会不一样。\n  - 算法更像是菜谱： 提供达成目标的明确步骤。 而模式更像是蓝图： 你可以看到最终的结果和模式的功能， 但需要自己确定实现步骤。\n- 设计模式的历史\n  - 模式的概念是由克里斯托佛·亚历山大在其著作 《[建筑模式语言](https://refactoringguru.cn/pattern-language-book)》 中首次提出的。此后，由埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊和理查德·赫尔姆这四位作者接受了模式的概念。 1994 年， 他们出版了 《[设计模式： 可复用面向对象软件的基础](https://refactoringguru.cn/gof-book)》 一书， 将设计模式的概念应用到程序开发领域中。 该书提供了 23 个模式来解决面向对象程序设计中的各种问题， 很快便成为了畅销书。 由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书”。\n\n- 为什么要学习设计模式\n  - 设计模式是针对软件设计中常见问题的工具箱， 其中的工具就是各种**经过实践验证的解决方案**。 即使你从未遇到过这些问题， 了解模式仍然非常有用， 因为它能指导你如何使用面向对象的设计原则来解决各种问题。\n  - 设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。 你只需说 “哦， 这里用单例就可以了”， 所有人都会理解这条建议背后的想法。 只要知晓模式及其名称， 你就无需解释什么是单例。\n- 关于模式的争议\n  - 低效的解决方案：模式试图将已经广泛使用的方式系统化。 许多人会将这样的统一化认为是某种教条， 他们会 “全心全意” 地实施这样的模式， 而不会根据项目的实际情况对其进行调整。\n  - 不当使用：如果你只有一把铁锤， 那么任何东西看上去都像是钉子。这个问题常常会给初学模式的人们带来困扰： 在学习了某个模式后， 他们会在所有地方使用该模式， 即便是在较为简单的代码也能胜任的地方也是如此。\n- 设计模式分类\n  - 所有模式可以根据其意图或目的来分类。\n  - **创建型模式：**提供创建对象的机制， 增加已有代码的灵活性和可复用性。\n    - 常用的有：单例模式、简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式。\n    - 不常用的有：原型模式。\n  - **结构型模式：**介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。\n    - 常用的有：代理模式、桥接模式、装饰者模式、门面模式、适配器模式。\n    - 不常用的有：组合模式、享元模式。\n  - **行为型模式：**负责对象间的高效沟通和职责委派。\n    - 常用的有：观察者模式、模板方法模式、策略模式、责任链模式、迭代器模式、状态模式。\n    - 不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、 中介者模式。\n      \n\n\n\n## 2.设计模式目录\n\n\n\n| 名称                                | 实现要点                                                     | 实战                                             |\n| ----------------------------------- | :----------------------------------------------------------- | ------------------------------------------------ |\n| **创建型模式**                      | **创建型设计模式主要解决对象的创建问题，<br/>封装复杂的创建过程，解耦对象的创建和使用<br />创建型设计模式包括：单例模式、工厂模式、建造者模式、<br />原型模式。** |                                                  |\n| 01. 单例\\|Singleton                 | 保证一个类仅有一个实例，并提供一个<br/>访问它的全局访问点。单例有几种经典的实现方式，它们分别<br/>是：饿汉式、懒汉式、双重检测、静态内部类、枚举。 |                                                  |\n| 02. 简单工厂\\|Sample Factory        | 当每个对象的创建逻辑都比较简单的时候，<br />推荐使用简单工厂模式，将多个对象的创建逻<br/>辑放到一个工厂类中 |                                                  |\n| 03. 工厂方法\\|Factory Method        | 定义一个创建对象的接口，让其子类自<br/>己决定实例化哪一个工厂类，<br/>工厂模式使其创建过程延迟到子类进行。 |                                                  |\n| 04. 抽象工厂\\|Abstract Factory      | 提供一个创建一系列列相关或相互依赖对<br/>象的接口，而无需指定它们具体的类。 |                                                  |\n| 05. 建造者\\|Builder                 | 建造者模式用来创建复杂对象，<br />可以通过设置不同的可选参数，定制化地创建不同的对象。<br/>建造者模式的原理和实现比较简单，<br />重点是掌握应用场景，避免过度使用。 | Dialog                                           |\n| 06. 原型\\|Prototype                 | 如果对象的创建成本比较大，<br />而同一个类的不同对象之间差别不大(大部分字段都相同)，<br/>在这种情况下，我们可以利用对已有对象（原型）<br />进行复制（或者叫拷贝）的方式，来创建新对象，<br/>以达到节省创建时间的目的。<br />原型模式有两种实现方法，深拷贝和浅拷贝。 |                                                  |\n|                                     |                                                              |                                                  |\n| **结构型模式**                      | **结构型模式主要总结了一些类或对象组合在一起的经典结构，<br />这些经典的结构可以解决特定应用场景的问题，<br />结构型模式包括：代理模式、桥接模式、装饰器模式、适配器模式、<br />门面模式、组合模式、享元模式。** |                                                  |\n| 01. 适配器\\|Adapter                 | 适配器模式是一种事后的补救策略，用来补救设计上的缺陷。<br />适配器提供跟原始类不同的接口。<br />它将不兼容的接口转换为可兼容的接口让原本由于接口<br/>不兼容而不能一起工作的类可以一起工作。<br />适配器模式有两种实现方式：类适配器和对象适配器。<br />类适配器使用继承关系来实现，<br />对象适配器使用组合关系来实现。 | RecyclerView                                     |\n| 02. 桥接\\|Bridge                    | 桥接模式有两种理解方式。<br />第一种理解方式是“将抽象和实现解耦，让它们能独立开发”。<br />抽象”和“实现”独立开发，<br />通过对象之间的组合关系组装在一起。<br />另一种理解方式更加简单，等同于“组合优于继承”设计原则，<br />不管是哪种理解方式，它们的代码结构都是相同的，<br />都是一种类之间的组合关系。 |                                                  |\n| 03. 组合\\|Composite                 | 将对象组合成树形结构以表示\"部分-整体\"的层次结构。<br />组合模式使得用户对<br/>单个对象和组合对象的使用具有一致性。 |                                                  |\n| 04. 装饰\\|Decorator                 | 装饰器模式主要解决继承关系过于复杂的问题，<br />通过组合来替代继承，给原始类添加增强功能。<br />这也是判断是否该用装饰器模式的一个重要的依据。 | Java IO                                          |\n| 05. 门面\\|Facade                    | 通过封装细粒度的接口，<br />向外提供组合各个细粒度接口的高层次接口，<br />来提高接口的易用性。 |                                                  |\n| 06. 享元\\|Flyweight                 | 当一个系统中存在大量重复对象的时候，<br />我们就可以利用享元模式，将对象设计成享元，<br />在内存中只保留一份实例，<br />供多处代码引用，这样可以减少内存中对象的数量，<br />以起到节省内存的目的 |                                                  |\n| 07. 代理\\|Proxy                     | 代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，<br />主要目的是控制访问，而非加强功能，<br />这是它跟装饰器模式最大的不同。<br />一般情况下，我们让代理类和原始类实现同样的接口，<br />或者让代理类继承原始类来实现代理模式。<br />代理模式分为静态代理和动态代理。 | Retrofit 动态代理                                |\n|                                     |                                                              |                                                  |\n| **行为模式**                        | **型设计模式主要解决的就是“类或对象之间的交互”问题。<br />行为型模式包括：观察者模式、模板模式、策略模式、职责链模式、<br/>迭代器模式、状态模式、访问者模式、备忘录模式、<br />命令模式、解释器模式、中介模式。** |                                                  |\n| 01. 责任链\\|Chain of Responsibility | 避免请求发送者与接收者耦合在一起，让多<br/>个对象都有可能接收请求，将这些对象连接<br/>成一条链，并且沿着这条链传递请求，直到<br/>有对象处理理它为止。<br />职责链模式常用在框架开发中，<br />用来实现过滤器、拦截器功能，<br />让框架的使用者在不需要修改框架源码的情况下，<br />添加新的过滤、拦截功能。<br />这也体现了之前讲到的对扩展开放、<br />对修改关闭的设计原则。 | OkHttp 拦截器                                    |\n| 02. 命令\\|Command                   | 命令模式用到最核心的实现手段，<br />就是将函数封装成对象命令模式的主要作用和应用场景，<br />是用来控制命令的执行，比如，异步、延迟、排队执行命令、<br />撤销重做命令、存储命令、给命令记录日志等 |                                                  |\n| 03. 迭代器\\|Iterator                | 迭代器模式提供一种方法顺序访问一个容器对象中各元素, <br />而又无须暴暴露该对象的内部表示。<br />迭代器模式主要作用是解耦容器代码和遍历代码。<br />大部分编程语言都提供了现成的迭代器可以使用<br />在通过迭代器来遍历集合元素的同时，<br />增加或者删除集合中的元素，<br />有可能会导致某个元素被重复遍历或遍历不到。<br />解决方案是增删元素之后让遍历报错(fail-fast) | List<br />Map                                    |\n| 04. 中介者\\|Mediator                | 中介模式的设计思想跟中间层很像，<br />通过引入中介这个中间层，将一组对象之间的交互关系<br/>（或者说依赖关系）从多对多（网状关系）<br />转换为一对多（星状关系）.<br />在中介模式的应用场景中，<br/>参与者之间的交互关系错综复杂，<br />既可以是消息的发送者、也可以同时是消息的接收者。 |                                                  |\n| 05. 备忘录\\|Memento                 | 备忘录模式也叫快照模式，具体来说，<br />就是在不违背封装原则的前提下，<br />捕获一个对象的内部状态，<br />并在该对象之外保存这个状态，<br />以便之后恢复对象为先前的状态。 |                                                  |\n| 06. 观察者\\|Observer                | 定义对象间的一种一对多的依赖关系，<br />当一个对象的状态发生改变时，<br />所有依赖于它的对象都得到通知并被自动更新。<br />同步阻塞是最经典的实现方式，主要是为了代码解耦；<br />异步非阻塞除了能实现代码解耦之外，<br />还能提高代码的执行效率；<br />进程间的观察者模式解耦更加彻底，<br />一般是基于消息队列来实现，<br />用来实现不同进程间的被观察者和观察者之间的交互。 | EventBus<br />RxJava                             |\n| 07. 状态\\|State                     | 允许对象在内部状态发生改变时改变它的行为<br />状态模式建议为对象的所有可能状态新建一个类， <br />然后将所有状态的对应行为抽取到这些类中。<br />所有状态类都必须遵循同样的接口，<br /> 而且上下文必须仅通过接口与这些对象进行交互。 | 音乐播放器                                       |\n| 08. 策略\\|Strategy                  | 策略模式用来解耦策略的定义、创建、使用。<br />策略类的定义比较简单，包含一个策略接口<br />和一组实现这个接口的策略类。<br />策略的创建由工厂类来完成，封装策略创建的细节。<br />策略模式包含一组策略可选，客户端代码选择使用哪个策略，<br />有两种确定方法：编译时静态确定和运行时动态确定。<br />其中，“运行时动态确定”才是策略模式最典型的应用场景。<br />最常见的应用场景是，利用它来避免冗长的<br/>if-else 或 switch 分支判断。 | 支付方式                                         |\n| 09. 模板方法\\|Template Method       | 模板方法模式在一个方法中定义一个算法骨架，<br />并将某些步骤推迟到子类中实现。<br />模板方法模式可以让子类在不改变算法整体结构的情况下，<br />重新定义算法中的某些步骤。<br />模板模式有两大作用：复用和扩展。<br />回调跟模板模式具有相同的作用<br />回调基于组合关系来实现，模板模式基于继承关系来实现。<br />回调比模板模式更加灵活。 | BaseActivity<br />BaseViewModel<br />BaseNetwork |\n| 10. 访问者\\|Visitor                 | 访问者模式允许一个或者多个操作应用到一组对象上，<br />设计意图是解耦操作和对象本身，<br />保持类职责单一、<br />满足开闭原则以及应对代码的复杂性 | ASM                                              |\n| 11. 解释器\\|Interpreter             | 用来实现根据语法规则解读“句子”的解释器。<br />核心思想将语法解析的工作拆分到各个小类中，<br />以此来避免大而全的解析类。一般的做法是，<br />将语法规则拆分一些小的独立的单元，<br />然后对每个单元进行解析，最终合并为对整个语法规则的解析。 |                                                  |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 参考\n\n- [极客时间| 设计模式之美](https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D)\n\n- [慕课网 | java设计模式精讲 Debug 方式+内存分析](https://coding.imooc.com/class/270.html?mc_marking=6eab7b8c9bc28db4f23571353f1a9fe5&mc_channel=banner)\n\n- [在线书籍 | 深入设计模式](https://refactoringguru.cn/design-patterns)\n\n- [bugstack虫洞栈 | 实战设计模式](https://bugstack.cn/itstack/itstack-demo-design.html)\n\n- [菜鸟教程 | 设计模式](https://www.runoob.com/design-pattern/design-pattern-tutorial.html)\n\n  \n\n","source":"_posts/pattern_all.md","raw":"---\ntitle: 实战系列-设计模式总则篇\ndate: 2021-05-31 14:16:55\ncover: true\ntags: \n    - 设计模式\ncategory: \n\t- 设计模式\nsummary: 设计模式概述与24种设计模式简要概述，六种创建型模式，五种结构型模式，11中行为型模式\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# 实战系列-设计模式总则篇\n\n![image-20210812012737030](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210812012744.png)\n\n## 1.设计模式概述\n\n- 设计模式是什么\n  - **设计模式**是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。\n\n- 设计模式的主要目的\n  - 设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。\n\n- 设计模式与设计原则\n  - 从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行\n- 设计模式与方法或库\n  - 设计模式与方法或库的使用方式不同， 你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码， 而是解决特定问题的一般性概念。 你可以根据模式来实现符合自己程序实际所需的解决方案。\n- 设计模式与算法\n  - 设计模式模式和算法两者在概念上都是已知特定问题的典型解决方案。 但算法总是明确定义达成特定目标所需的一系列步骤， 而模式则是对解决方案的更高层次描述。 同一模式在两个不同程序中的实现代码可能会不一样。\n  - 算法更像是菜谱： 提供达成目标的明确步骤。 而模式更像是蓝图： 你可以看到最终的结果和模式的功能， 但需要自己确定实现步骤。\n- 设计模式的历史\n  - 模式的概念是由克里斯托佛·亚历山大在其著作 《[建筑模式语言](https://refactoringguru.cn/pattern-language-book)》 中首次提出的。此后，由埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊和理查德·赫尔姆这四位作者接受了模式的概念。 1994 年， 他们出版了 《[设计模式： 可复用面向对象软件的基础](https://refactoringguru.cn/gof-book)》 一书， 将设计模式的概念应用到程序开发领域中。 该书提供了 23 个模式来解决面向对象程序设计中的各种问题， 很快便成为了畅销书。 由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书”。\n\n- 为什么要学习设计模式\n  - 设计模式是针对软件设计中常见问题的工具箱， 其中的工具就是各种**经过实践验证的解决方案**。 即使你从未遇到过这些问题， 了解模式仍然非常有用， 因为它能指导你如何使用面向对象的设计原则来解决各种问题。\n  - 设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。 你只需说 “哦， 这里用单例就可以了”， 所有人都会理解这条建议背后的想法。 只要知晓模式及其名称， 你就无需解释什么是单例。\n- 关于模式的争议\n  - 低效的解决方案：模式试图将已经广泛使用的方式系统化。 许多人会将这样的统一化认为是某种教条， 他们会 “全心全意” 地实施这样的模式， 而不会根据项目的实际情况对其进行调整。\n  - 不当使用：如果你只有一把铁锤， 那么任何东西看上去都像是钉子。这个问题常常会给初学模式的人们带来困扰： 在学习了某个模式后， 他们会在所有地方使用该模式， 即便是在较为简单的代码也能胜任的地方也是如此。\n- 设计模式分类\n  - 所有模式可以根据其意图或目的来分类。\n  - **创建型模式：**提供创建对象的机制， 增加已有代码的灵活性和可复用性。\n    - 常用的有：单例模式、简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式。\n    - 不常用的有：原型模式。\n  - **结构型模式：**介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。\n    - 常用的有：代理模式、桥接模式、装饰者模式、门面模式、适配器模式。\n    - 不常用的有：组合模式、享元模式。\n  - **行为型模式：**负责对象间的高效沟通和职责委派。\n    - 常用的有：观察者模式、模板方法模式、策略模式、责任链模式、迭代器模式、状态模式。\n    - 不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、 中介者模式。\n      \n\n\n\n## 2.设计模式目录\n\n\n\n| 名称                                | 实现要点                                                     | 实战                                             |\n| ----------------------------------- | :----------------------------------------------------------- | ------------------------------------------------ |\n| **创建型模式**                      | **创建型设计模式主要解决对象的创建问题，<br/>封装复杂的创建过程，解耦对象的创建和使用<br />创建型设计模式包括：单例模式、工厂模式、建造者模式、<br />原型模式。** |                                                  |\n| 01. 单例\\|Singleton                 | 保证一个类仅有一个实例，并提供一个<br/>访问它的全局访问点。单例有几种经典的实现方式，它们分别<br/>是：饿汉式、懒汉式、双重检测、静态内部类、枚举。 |                                                  |\n| 02. 简单工厂\\|Sample Factory        | 当每个对象的创建逻辑都比较简单的时候，<br />推荐使用简单工厂模式，将多个对象的创建逻<br/>辑放到一个工厂类中 |                                                  |\n| 03. 工厂方法\\|Factory Method        | 定义一个创建对象的接口，让其子类自<br/>己决定实例化哪一个工厂类，<br/>工厂模式使其创建过程延迟到子类进行。 |                                                  |\n| 04. 抽象工厂\\|Abstract Factory      | 提供一个创建一系列列相关或相互依赖对<br/>象的接口，而无需指定它们具体的类。 |                                                  |\n| 05. 建造者\\|Builder                 | 建造者模式用来创建复杂对象，<br />可以通过设置不同的可选参数，定制化地创建不同的对象。<br/>建造者模式的原理和实现比较简单，<br />重点是掌握应用场景，避免过度使用。 | Dialog                                           |\n| 06. 原型\\|Prototype                 | 如果对象的创建成本比较大，<br />而同一个类的不同对象之间差别不大(大部分字段都相同)，<br/>在这种情况下，我们可以利用对已有对象（原型）<br />进行复制（或者叫拷贝）的方式，来创建新对象，<br/>以达到节省创建时间的目的。<br />原型模式有两种实现方法，深拷贝和浅拷贝。 |                                                  |\n|                                     |                                                              |                                                  |\n| **结构型模式**                      | **结构型模式主要总结了一些类或对象组合在一起的经典结构，<br />这些经典的结构可以解决特定应用场景的问题，<br />结构型模式包括：代理模式、桥接模式、装饰器模式、适配器模式、<br />门面模式、组合模式、享元模式。** |                                                  |\n| 01. 适配器\\|Adapter                 | 适配器模式是一种事后的补救策略，用来补救设计上的缺陷。<br />适配器提供跟原始类不同的接口。<br />它将不兼容的接口转换为可兼容的接口让原本由于接口<br/>不兼容而不能一起工作的类可以一起工作。<br />适配器模式有两种实现方式：类适配器和对象适配器。<br />类适配器使用继承关系来实现，<br />对象适配器使用组合关系来实现。 | RecyclerView                                     |\n| 02. 桥接\\|Bridge                    | 桥接模式有两种理解方式。<br />第一种理解方式是“将抽象和实现解耦，让它们能独立开发”。<br />抽象”和“实现”独立开发，<br />通过对象之间的组合关系组装在一起。<br />另一种理解方式更加简单，等同于“组合优于继承”设计原则，<br />不管是哪种理解方式，它们的代码结构都是相同的，<br />都是一种类之间的组合关系。 |                                                  |\n| 03. 组合\\|Composite                 | 将对象组合成树形结构以表示\"部分-整体\"的层次结构。<br />组合模式使得用户对<br/>单个对象和组合对象的使用具有一致性。 |                                                  |\n| 04. 装饰\\|Decorator                 | 装饰器模式主要解决继承关系过于复杂的问题，<br />通过组合来替代继承，给原始类添加增强功能。<br />这也是判断是否该用装饰器模式的一个重要的依据。 | Java IO                                          |\n| 05. 门面\\|Facade                    | 通过封装细粒度的接口，<br />向外提供组合各个细粒度接口的高层次接口，<br />来提高接口的易用性。 |                                                  |\n| 06. 享元\\|Flyweight                 | 当一个系统中存在大量重复对象的时候，<br />我们就可以利用享元模式，将对象设计成享元，<br />在内存中只保留一份实例，<br />供多处代码引用，这样可以减少内存中对象的数量，<br />以起到节省内存的目的 |                                                  |\n| 07. 代理\\|Proxy                     | 代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，<br />主要目的是控制访问，而非加强功能，<br />这是它跟装饰器模式最大的不同。<br />一般情况下，我们让代理类和原始类实现同样的接口，<br />或者让代理类继承原始类来实现代理模式。<br />代理模式分为静态代理和动态代理。 | Retrofit 动态代理                                |\n|                                     |                                                              |                                                  |\n| **行为模式**                        | **型设计模式主要解决的就是“类或对象之间的交互”问题。<br />行为型模式包括：观察者模式、模板模式、策略模式、职责链模式、<br/>迭代器模式、状态模式、访问者模式、备忘录模式、<br />命令模式、解释器模式、中介模式。** |                                                  |\n| 01. 责任链\\|Chain of Responsibility | 避免请求发送者与接收者耦合在一起，让多<br/>个对象都有可能接收请求，将这些对象连接<br/>成一条链，并且沿着这条链传递请求，直到<br/>有对象处理理它为止。<br />职责链模式常用在框架开发中，<br />用来实现过滤器、拦截器功能，<br />让框架的使用者在不需要修改框架源码的情况下，<br />添加新的过滤、拦截功能。<br />这也体现了之前讲到的对扩展开放、<br />对修改关闭的设计原则。 | OkHttp 拦截器                                    |\n| 02. 命令\\|Command                   | 命令模式用到最核心的实现手段，<br />就是将函数封装成对象命令模式的主要作用和应用场景，<br />是用来控制命令的执行，比如，异步、延迟、排队执行命令、<br />撤销重做命令、存储命令、给命令记录日志等 |                                                  |\n| 03. 迭代器\\|Iterator                | 迭代器模式提供一种方法顺序访问一个容器对象中各元素, <br />而又无须暴暴露该对象的内部表示。<br />迭代器模式主要作用是解耦容器代码和遍历代码。<br />大部分编程语言都提供了现成的迭代器可以使用<br />在通过迭代器来遍历集合元素的同时，<br />增加或者删除集合中的元素，<br />有可能会导致某个元素被重复遍历或遍历不到。<br />解决方案是增删元素之后让遍历报错(fail-fast) | List<br />Map                                    |\n| 04. 中介者\\|Mediator                | 中介模式的设计思想跟中间层很像，<br />通过引入中介这个中间层，将一组对象之间的交互关系<br/>（或者说依赖关系）从多对多（网状关系）<br />转换为一对多（星状关系）.<br />在中介模式的应用场景中，<br/>参与者之间的交互关系错综复杂，<br />既可以是消息的发送者、也可以同时是消息的接收者。 |                                                  |\n| 05. 备忘录\\|Memento                 | 备忘录模式也叫快照模式，具体来说，<br />就是在不违背封装原则的前提下，<br />捕获一个对象的内部状态，<br />并在该对象之外保存这个状态，<br />以便之后恢复对象为先前的状态。 |                                                  |\n| 06. 观察者\\|Observer                | 定义对象间的一种一对多的依赖关系，<br />当一个对象的状态发生改变时，<br />所有依赖于它的对象都得到通知并被自动更新。<br />同步阻塞是最经典的实现方式，主要是为了代码解耦；<br />异步非阻塞除了能实现代码解耦之外，<br />还能提高代码的执行效率；<br />进程间的观察者模式解耦更加彻底，<br />一般是基于消息队列来实现，<br />用来实现不同进程间的被观察者和观察者之间的交互。 | EventBus<br />RxJava                             |\n| 07. 状态\\|State                     | 允许对象在内部状态发生改变时改变它的行为<br />状态模式建议为对象的所有可能状态新建一个类， <br />然后将所有状态的对应行为抽取到这些类中。<br />所有状态类都必须遵循同样的接口，<br /> 而且上下文必须仅通过接口与这些对象进行交互。 | 音乐播放器                                       |\n| 08. 策略\\|Strategy                  | 策略模式用来解耦策略的定义、创建、使用。<br />策略类的定义比较简单，包含一个策略接口<br />和一组实现这个接口的策略类。<br />策略的创建由工厂类来完成，封装策略创建的细节。<br />策略模式包含一组策略可选，客户端代码选择使用哪个策略，<br />有两种确定方法：编译时静态确定和运行时动态确定。<br />其中，“运行时动态确定”才是策略模式最典型的应用场景。<br />最常见的应用场景是，利用它来避免冗长的<br/>if-else 或 switch 分支判断。 | 支付方式                                         |\n| 09. 模板方法\\|Template Method       | 模板方法模式在一个方法中定义一个算法骨架，<br />并将某些步骤推迟到子类中实现。<br />模板方法模式可以让子类在不改变算法整体结构的情况下，<br />重新定义算法中的某些步骤。<br />模板模式有两大作用：复用和扩展。<br />回调跟模板模式具有相同的作用<br />回调基于组合关系来实现，模板模式基于继承关系来实现。<br />回调比模板模式更加灵活。 | BaseActivity<br />BaseViewModel<br />BaseNetwork |\n| 10. 访问者\\|Visitor                 | 访问者模式允许一个或者多个操作应用到一组对象上，<br />设计意图是解耦操作和对象本身，<br />保持类职责单一、<br />满足开闭原则以及应对代码的复杂性 | ASM                                              |\n| 11. 解释器\\|Interpreter             | 用来实现根据语法规则解读“句子”的解释器。<br />核心思想将语法解析的工作拆分到各个小类中，<br />以此来避免大而全的解析类。一般的做法是，<br />将语法规则拆分一些小的独立的单元，<br />然后对每个单元进行解析，最终合并为对整个语法规则的解析。 |                                                  |\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 参考\n\n- [极客时间| 设计模式之美](https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D)\n\n- [慕课网 | java设计模式精讲 Debug 方式+内存分析](https://coding.imooc.com/class/270.html?mc_marking=6eab7b8c9bc28db4f23571353f1a9fe5&mc_channel=banner)\n\n- [在线书籍 | 深入设计模式](https://refactoringguru.cn/design-patterns)\n\n- [bugstack虫洞栈 | 实战设计模式](https://bugstack.cn/itstack/itstack-demo-design.html)\n\n- [菜鸟教程 | 设计模式](https://www.runoob.com/design-pattern/design-pattern-tutorial.html)\n\n  \n\n","slug":"pattern_all","published":1,"updated":"2021-08-12T17:12:33.969Z","_id":"cks96doyj0000kcxf9uvzcjrt","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"实战系列-设计模式总则篇\"><a href=\"#实战系列-设计模式总则篇\" class=\"headerlink\" title=\"实战系列-设计模式总则篇\"></a>实战系列-设计模式总则篇</h1><p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210812012744.png\" alt=\"image-20210812012737030\"></p>\n<h2 id=\"1-设计模式概述\"><a href=\"#1-设计模式概述\" class=\"headerlink\" title=\"1.设计模式概述\"></a>1.设计模式概述</h2><ul>\n<li><p>设计模式是什么</p>\n<ul>\n<li><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。</li>\n</ul>\n</li>\n<li><p>设计模式的主要目的</p>\n<ul>\n<li>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。</li>\n</ul>\n</li>\n<li><p>设计模式与设计原则</p>\n<ul>\n<li>从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行</li>\n</ul>\n</li>\n<li><p>设计模式与方法或库</p>\n<ul>\n<li>设计模式与方法或库的使用方式不同， 你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码， 而是解决特定问题的一般性概念。 你可以根据模式来实现符合自己程序实际所需的解决方案。</li>\n</ul>\n</li>\n<li><p>设计模式与算法</p>\n<ul>\n<li>设计模式模式和算法两者在概念上都是已知特定问题的典型解决方案。 但算法总是明确定义达成特定目标所需的一系列步骤， 而模式则是对解决方案的更高层次描述。 同一模式在两个不同程序中的实现代码可能会不一样。</li>\n<li>算法更像是菜谱： 提供达成目标的明确步骤。 而模式更像是蓝图： 你可以看到最终的结果和模式的功能， 但需要自己确定实现步骤。</li>\n</ul>\n</li>\n<li><p>设计模式的历史</p>\n<ul>\n<li>模式的概念是由克里斯托佛·亚历山大在其著作 《<a href=\"https://refactoringguru.cn/pattern-language-book\" target=\"_blank\" rel=\"noopener\">建筑模式语言</a>》 中首次提出的。此后，由埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊和理查德·赫尔姆这四位作者接受了模式的概念。 1994 年， 他们出版了 《<a href=\"https://refactoringguru.cn/gof-book\" target=\"_blank\" rel=\"noopener\">设计模式： 可复用面向对象软件的基础</a>》 一书， 将设计模式的概念应用到程序开发领域中。 该书提供了 23 个模式来解决面向对象程序设计中的各种问题， 很快便成为了畅销书。 由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书”。</li>\n</ul>\n</li>\n<li><p>为什么要学习设计模式</p>\n<ul>\n<li>设计模式是针对软件设计中常见问题的工具箱， 其中的工具就是各种<strong>经过实践验证的解决方案</strong>。 即使你从未遇到过这些问题， 了解模式仍然非常有用， 因为它能指导你如何使用面向对象的设计原则来解决各种问题。</li>\n<li>设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。 你只需说 “哦， 这里用单例就可以了”， 所有人都会理解这条建议背后的想法。 只要知晓模式及其名称， 你就无需解释什么是单例。</li>\n</ul>\n</li>\n<li><p>关于模式的争议</p>\n<ul>\n<li>低效的解决方案：模式试图将已经广泛使用的方式系统化。 许多人会将这样的统一化认为是某种教条， 他们会 “全心全意” 地实施这样的模式， 而不会根据项目的实际情况对其进行调整。</li>\n<li>不当使用：如果你只有一把铁锤， 那么任何东西看上去都像是钉子。这个问题常常会给初学模式的人们带来困扰： 在学习了某个模式后， 他们会在所有地方使用该模式， 即便是在较为简单的代码也能胜任的地方也是如此。</li>\n</ul>\n</li>\n<li><p>设计模式分类</p>\n<ul>\n<li>所有模式可以根据其意图或目的来分类。</li>\n<li><strong>创建型模式：</strong>提供创建对象的机制， 增加已有代码的灵活性和可复用性。<ul>\n<li>常用的有：单例模式、简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式。</li>\n<li>不常用的有：原型模式。</li>\n</ul>\n</li>\n<li><strong>结构型模式：</strong>介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。<ul>\n<li>常用的有：代理模式、桥接模式、装饰者模式、门面模式、适配器模式。</li>\n<li>不常用的有：组合模式、享元模式。</li>\n</ul>\n</li>\n<li><strong>行为型模式：</strong>负责对象间的高效沟通和职责委派。<ul>\n<li>常用的有：观察者模式、模板方法模式、策略模式、责任链模式、迭代器模式、状态模式。</li>\n<li>不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、 中介者模式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-设计模式目录\"><a href=\"#2-设计模式目录\" class=\"headerlink\" title=\"2.设计模式目录\"></a>2.设计模式目录</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th align=\"left\">实现要点</th>\n<th>实战</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>创建型模式</strong></td>\n<td align=\"left\"><strong>创建型设计模式主要解决对象的创建问题，<br>封装复杂的创建过程，解耦对象的创建和使用<br>创建型设计模式包括：单例模式、工厂模式、建造者模式、<br>原型模式。</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>01. 单例|Singleton</td>\n<td align=\"left\">保证一个类仅有一个实例，并提供一个<br>访问它的全局访问点。单例有几种经典的实现方式，它们分别<br>是：饿汉式、懒汉式、双重检测、静态内部类、枚举。</td>\n<td></td>\n</tr>\n<tr>\n<td>02. 简单工厂|Sample Factory</td>\n<td align=\"left\">当每个对象的创建逻辑都比较简单的时候，<br>推荐使用简单工厂模式，将多个对象的创建逻<br>辑放到一个工厂类中</td>\n<td></td>\n</tr>\n<tr>\n<td>03. 工厂方法|Factory Method</td>\n<td align=\"left\">定义一个创建对象的接口，让其子类自<br>己决定实例化哪一个工厂类，<br>工厂模式使其创建过程延迟到子类进行。</td>\n<td></td>\n</tr>\n<tr>\n<td>04. 抽象工厂|Abstract Factory</td>\n<td align=\"left\">提供一个创建一系列列相关或相互依赖对<br>象的接口，而无需指定它们具体的类。</td>\n<td></td>\n</tr>\n<tr>\n<td>05. 建造者|Builder</td>\n<td align=\"left\">建造者模式用来创建复杂对象，<br>可以通过设置不同的可选参数，定制化地创建不同的对象。<br>建造者模式的原理和实现比较简单，<br>重点是掌握应用场景，避免过度使用。</td>\n<td>Dialog</td>\n</tr>\n<tr>\n<td>06. 原型|Prototype</td>\n<td align=\"left\">如果对象的创建成本比较大，<br>而同一个类的不同对象之间差别不大(大部分字段都相同)，<br>在这种情况下，我们可以利用对已有对象（原型）<br>进行复制（或者叫拷贝）的方式，来创建新对象，<br>以达到节省创建时间的目的。<br>原型模式有两种实现方法，深拷贝和浅拷贝。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>结构型模式</strong></td>\n<td align=\"left\"><strong>结构型模式主要总结了一些类或对象组合在一起的经典结构，<br>这些经典的结构可以解决特定应用场景的问题，<br>结构型模式包括：代理模式、桥接模式、装饰器模式、适配器模式、<br>门面模式、组合模式、享元模式。</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>01. 适配器|Adapter</td>\n<td align=\"left\">适配器模式是一种事后的补救策略，用来补救设计上的缺陷。<br>适配器提供跟原始类不同的接口。<br>它将不兼容的接口转换为可兼容的接口让原本由于接口<br>不兼容而不能一起工作的类可以一起工作。<br>适配器模式有两种实现方式：类适配器和对象适配器。<br>类适配器使用继承关系来实现，<br>对象适配器使用组合关系来实现。</td>\n<td>RecyclerView</td>\n</tr>\n<tr>\n<td>02. 桥接|Bridge</td>\n<td align=\"left\">桥接模式有两种理解方式。<br>第一种理解方式是“将抽象和实现解耦，让它们能独立开发”。<br>抽象”和“实现”独立开发，<br>通过对象之间的组合关系组装在一起。<br>另一种理解方式更加简单，等同于“组合优于继承”设计原则，<br>不管是哪种理解方式，它们的代码结构都是相同的，<br>都是一种类之间的组合关系。</td>\n<td></td>\n</tr>\n<tr>\n<td>03. 组合|Composite</td>\n<td align=\"left\">将对象组合成树形结构以表示”部分-整体”的层次结构。<br>组合模式使得用户对<br>单个对象和组合对象的使用具有一致性。</td>\n<td></td>\n</tr>\n<tr>\n<td>04. 装饰|Decorator</td>\n<td align=\"left\">装饰器模式主要解决继承关系过于复杂的问题，<br>通过组合来替代继承，给原始类添加增强功能。<br>这也是判断是否该用装饰器模式的一个重要的依据。</td>\n<td>Java IO</td>\n</tr>\n<tr>\n<td>05. 门面|Facade</td>\n<td align=\"left\">通过封装细粒度的接口，<br>向外提供组合各个细粒度接口的高层次接口，<br>来提高接口的易用性。</td>\n<td></td>\n</tr>\n<tr>\n<td>06. 享元|Flyweight</td>\n<td align=\"left\">当一个系统中存在大量重复对象的时候，<br>我们就可以利用享元模式，将对象设计成享元，<br>在内存中只保留一份实例，<br>供多处代码引用，这样可以减少内存中对象的数量，<br>以起到节省内存的目的</td>\n<td></td>\n</tr>\n<tr>\n<td>07. 代理|Proxy</td>\n<td align=\"left\">代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，<br>主要目的是控制访问，而非加强功能，<br>这是它跟装饰器模式最大的不同。<br>一般情况下，我们让代理类和原始类实现同样的接口，<br>或者让代理类继承原始类来实现代理模式。<br>代理模式分为静态代理和动态代理。</td>\n<td>Retrofit 动态代理</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>行为模式</strong></td>\n<td align=\"left\"><strong>型设计模式主要解决的就是“类或对象之间的交互”问题。<br>行为型模式包括：观察者模式、模板模式、策略模式、职责链模式、<br>迭代器模式、状态模式、访问者模式、备忘录模式、<br>命令模式、解释器模式、中介模式。</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>01. 责任链|Chain of Responsibility</td>\n<td align=\"left\">避免请求发送者与接收者耦合在一起，让多<br>个对象都有可能接收请求，将这些对象连接<br>成一条链，并且沿着这条链传递请求，直到<br>有对象处理理它为止。<br>职责链模式常用在框架开发中，<br>用来实现过滤器、拦截器功能，<br>让框架的使用者在不需要修改框架源码的情况下，<br>添加新的过滤、拦截功能。<br>这也体现了之前讲到的对扩展开放、<br>对修改关闭的设计原则。</td>\n<td>OkHttp 拦截器</td>\n</tr>\n<tr>\n<td>02. 命令|Command</td>\n<td align=\"left\">命令模式用到最核心的实现手段，<br>就是将函数封装成对象命令模式的主要作用和应用场景，<br>是用来控制命令的执行，比如，异步、延迟、排队执行命令、<br>撤销重做命令、存储命令、给命令记录日志等</td>\n<td></td>\n</tr>\n<tr>\n<td>03. 迭代器|Iterator</td>\n<td align=\"left\">迭代器模式提供一种方法顺序访问一个容器对象中各元素, <br>而又无须暴暴露该对象的内部表示。<br>迭代器模式主要作用是解耦容器代码和遍历代码。<br>大部分编程语言都提供了现成的迭代器可以使用<br>在通过迭代器来遍历集合元素的同时，<br>增加或者删除集合中的元素，<br>有可能会导致某个元素被重复遍历或遍历不到。<br>解决方案是增删元素之后让遍历报错(fail-fast)</td>\n<td>List<br>Map</td>\n</tr>\n<tr>\n<td>04. 中介者|Mediator</td>\n<td align=\"left\">中介模式的设计思想跟中间层很像，<br>通过引入中介这个中间层，将一组对象之间的交互关系<br>（或者说依赖关系）从多对多（网状关系）<br>转换为一对多（星状关系）.<br>在中介模式的应用场景中，<br>参与者之间的交互关系错综复杂，<br>既可以是消息的发送者、也可以同时是消息的接收者。</td>\n<td></td>\n</tr>\n<tr>\n<td>05. 备忘录|Memento</td>\n<td align=\"left\">备忘录模式也叫快照模式，具体来说，<br>就是在不违背封装原则的前提下，<br>捕获一个对象的内部状态，<br>并在该对象之外保存这个状态，<br>以便之后恢复对象为先前的状态。</td>\n<td></td>\n</tr>\n<tr>\n<td>06. 观察者|Observer</td>\n<td align=\"left\">定义对象间的一种一对多的依赖关系，<br>当一个对象的状态发生改变时，<br>所有依赖于它的对象都得到通知并被自动更新。<br>同步阻塞是最经典的实现方式，主要是为了代码解耦；<br>异步非阻塞除了能实现代码解耦之外，<br>还能提高代码的执行效率；<br>进程间的观察者模式解耦更加彻底，<br>一般是基于消息队列来实现，<br>用来实现不同进程间的被观察者和观察者之间的交互。</td>\n<td>EventBus<br>RxJava</td>\n</tr>\n<tr>\n<td>07. 状态|State</td>\n<td align=\"left\">允许对象在内部状态发生改变时改变它的行为<br>状态模式建议为对象的所有可能状态新建一个类， <br>然后将所有状态的对应行为抽取到这些类中。<br>所有状态类都必须遵循同样的接口，<br> 而且上下文必须仅通过接口与这些对象进行交互。</td>\n<td>音乐播放器</td>\n</tr>\n<tr>\n<td>08. 策略|Strategy</td>\n<td align=\"left\">策略模式用来解耦策略的定义、创建、使用。<br>策略类的定义比较简单，包含一个策略接口<br>和一组实现这个接口的策略类。<br>策略的创建由工厂类来完成，封装策略创建的细节。<br>策略模式包含一组策略可选，客户端代码选择使用哪个策略，<br>有两种确定方法：编译时静态确定和运行时动态确定。<br>其中，“运行时动态确定”才是策略模式最典型的应用场景。<br>最常见的应用场景是，利用它来避免冗长的<br>if-else 或 switch 分支判断。</td>\n<td>支付方式</td>\n</tr>\n<tr>\n<td>09. 模板方法|Template Method</td>\n<td align=\"left\">模板方法模式在一个方法中定义一个算法骨架，<br>并将某些步骤推迟到子类中实现。<br>模板方法模式可以让子类在不改变算法整体结构的情况下，<br>重新定义算法中的某些步骤。<br>模板模式有两大作用：复用和扩展。<br>回调跟模板模式具有相同的作用<br>回调基于组合关系来实现，模板模式基于继承关系来实现。<br>回调比模板模式更加灵活。</td>\n<td>BaseActivity<br>BaseViewModel<br>BaseNetwork</td>\n</tr>\n<tr>\n<td>10. 访问者|Visitor</td>\n<td align=\"left\">访问者模式允许一个或者多个操作应用到一组对象上，<br>设计意图是解耦操作和对象本身，<br>保持类职责单一、<br>满足开闭原则以及应对代码的复杂性</td>\n<td>ASM</td>\n</tr>\n<tr>\n<td>11. 解释器|Interpreter</td>\n<td align=\"left\">用来实现根据语法规则解读“句子”的解释器。<br>核心思想将语法解析的工作拆分到各个小类中，<br>以此来避免大而全的解析类。一般的做法是，<br>将语法规则拆分一些小的独立的单元，<br>然后对每个单元进行解析，最终合并为对整个语法规则的解析。</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D\" target=\"_blank\" rel=\"noopener\">极客时间| 设计模式之美</a></p>\n</li>\n<li><p><a href=\"https://coding.imooc.com/class/270.html?mc_marking=6eab7b8c9bc28db4f23571353f1a9fe5&amp;mc_channel=banner\" target=\"_blank\" rel=\"noopener\">慕课网 | java设计模式精讲 Debug 方式+内存分析</a></p>\n</li>\n<li><p><a href=\"https://refactoringguru.cn/design-patterns\" target=\"_blank\" rel=\"noopener\">在线书籍 | 深入设计模式</a></p>\n</li>\n<li><p><a href=\"https://bugstack.cn/itstack/itstack-demo-design.html\" target=\"_blank\" rel=\"noopener\">bugstack虫洞栈 | 实战设计模式</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/design-pattern/design-pattern-tutorial.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程 | 设计模式</a></p>\n</li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"实战系列-设计模式总则篇\"><a href=\"#实战系列-设计模式总则篇\" class=\"headerlink\" title=\"实战系列-设计模式总则篇\"></a>实战系列-设计模式总则篇</h1><p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20210812012744.png\" alt=\"image-20210812012737030\"></p>\n<h2 id=\"1-设计模式概述\"><a href=\"#1-设计模式概述\" class=\"headerlink\" title=\"1.设计模式概述\"></a>1.设计模式概述</h2><ul>\n<li><p>设计模式是什么</p>\n<ul>\n<li><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。 它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。</li>\n</ul>\n</li>\n<li><p>设计模式的主要目的</p>\n<ul>\n<li>设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。应用设计模式的主要目的是提高代码的可扩展性。</li>\n</ul>\n</li>\n<li><p>设计模式与设计原则</p>\n<ul>\n<li>从抽象程度上来讲，设计原则比设计模式更抽象。设计模式更加具体、更加可执行</li>\n</ul>\n</li>\n<li><p>设计模式与方法或库</p>\n<ul>\n<li>设计模式与方法或库的使用方式不同， 你很难直接在自己的程序中套用某个设计模式。 模式并不是一段特定的代码， 而是解决特定问题的一般性概念。 你可以根据模式来实现符合自己程序实际所需的解决方案。</li>\n</ul>\n</li>\n<li><p>设计模式与算法</p>\n<ul>\n<li>设计模式模式和算法两者在概念上都是已知特定问题的典型解决方案。 但算法总是明确定义达成特定目标所需的一系列步骤， 而模式则是对解决方案的更高层次描述。 同一模式在两个不同程序中的实现代码可能会不一样。</li>\n<li>算法更像是菜谱： 提供达成目标的明确步骤。 而模式更像是蓝图： 你可以看到最终的结果和模式的功能， 但需要自己确定实现步骤。</li>\n</ul>\n</li>\n<li><p>设计模式的历史</p>\n<ul>\n<li>模式的概念是由克里斯托佛·亚历山大在其著作 《<a href=\"https://refactoringguru.cn/pattern-language-book\" target=\"_blank\" rel=\"noopener\">建筑模式语言</a>》 中首次提出的。此后，由埃里希·伽玛、 约翰·弗利赛德斯、 拉尔夫·约翰逊和理查德·赫尔姆这四位作者接受了模式的概念。 1994 年， 他们出版了 《<a href=\"https://refactoringguru.cn/gof-book\" target=\"_blank\" rel=\"noopener\">设计模式： 可复用面向对象软件的基础</a>》 一书， 将设计模式的概念应用到程序开发领域中。 该书提供了 23 个模式来解决面向对象程序设计中的各种问题， 很快便成为了畅销书。 由于书名太长， 人们将其简称为 “四人组 （Gang of Four， GoF） 的书”， 并且很快进一步简化为 “GoF 的书”。</li>\n</ul>\n</li>\n<li><p>为什么要学习设计模式</p>\n<ul>\n<li>设计模式是针对软件设计中常见问题的工具箱， 其中的工具就是各种<strong>经过实践验证的解决方案</strong>。 即使你从未遇到过这些问题， 了解模式仍然非常有用， 因为它能指导你如何使用面向对象的设计原则来解决各种问题。</li>\n<li>设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。 你只需说 “哦， 这里用单例就可以了”， 所有人都会理解这条建议背后的想法。 只要知晓模式及其名称， 你就无需解释什么是单例。</li>\n</ul>\n</li>\n<li><p>关于模式的争议</p>\n<ul>\n<li>低效的解决方案：模式试图将已经广泛使用的方式系统化。 许多人会将这样的统一化认为是某种教条， 他们会 “全心全意” 地实施这样的模式， 而不会根据项目的实际情况对其进行调整。</li>\n<li>不当使用：如果你只有一把铁锤， 那么任何东西看上去都像是钉子。这个问题常常会给初学模式的人们带来困扰： 在学习了某个模式后， 他们会在所有地方使用该模式， 即便是在较为简单的代码也能胜任的地方也是如此。</li>\n</ul>\n</li>\n<li><p>设计模式分类</p>\n<ul>\n<li>所有模式可以根据其意图或目的来分类。</li>\n<li><strong>创建型模式：</strong>提供创建对象的机制， 增加已有代码的灵活性和可复用性。<ul>\n<li>常用的有：单例模式、简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式。</li>\n<li>不常用的有：原型模式。</li>\n</ul>\n</li>\n<li><strong>结构型模式：</strong>介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。<ul>\n<li>常用的有：代理模式、桥接模式、装饰者模式、门面模式、适配器模式。</li>\n<li>不常用的有：组合模式、享元模式。</li>\n</ul>\n</li>\n<li><strong>行为型模式：</strong>负责对象间的高效沟通和职责委派。<ul>\n<li>常用的有：观察者模式、模板方法模式、策略模式、责任链模式、迭代器模式、状态模式。</li>\n<li>不常用的有：访问者模式、备忘录模式、命令模式、解释器模式、 中介者模式。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-设计模式目录\"><a href=\"#2-设计模式目录\" class=\"headerlink\" title=\"2.设计模式目录\"></a>2.设计模式目录</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th align=\"left\">实现要点</th>\n<th>实战</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>创建型模式</strong></td>\n<td align=\"left\"><strong>创建型设计模式主要解决对象的创建问题，<br/>封装复杂的创建过程，解耦对象的创建和使用<br />创建型设计模式包括：单例模式、工厂模式、建造者模式、<br />原型模式。</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>01. 单例|Singleton</td>\n<td align=\"left\">保证一个类仅有一个实例，并提供一个<br/>访问它的全局访问点。单例有几种经典的实现方式，它们分别<br/>是：饿汉式、懒汉式、双重检测、静态内部类、枚举。</td>\n<td></td>\n</tr>\n<tr>\n<td>02. 简单工厂|Sample Factory</td>\n<td align=\"left\">当每个对象的创建逻辑都比较简单的时候，<br />推荐使用简单工厂模式，将多个对象的创建逻<br/>辑放到一个工厂类中</td>\n<td></td>\n</tr>\n<tr>\n<td>03. 工厂方法|Factory Method</td>\n<td align=\"left\">定义一个创建对象的接口，让其子类自<br/>己决定实例化哪一个工厂类，<br/>工厂模式使其创建过程延迟到子类进行。</td>\n<td></td>\n</tr>\n<tr>\n<td>04. 抽象工厂|Abstract Factory</td>\n<td align=\"left\">提供一个创建一系列列相关或相互依赖对<br/>象的接口，而无需指定它们具体的类。</td>\n<td></td>\n</tr>\n<tr>\n<td>05. 建造者|Builder</td>\n<td align=\"left\">建造者模式用来创建复杂对象，<br />可以通过设置不同的可选参数，定制化地创建不同的对象。<br/>建造者模式的原理和实现比较简单，<br />重点是掌握应用场景，避免过度使用。</td>\n<td>Dialog</td>\n</tr>\n<tr>\n<td>06. 原型|Prototype</td>\n<td align=\"left\">如果对象的创建成本比较大，<br />而同一个类的不同对象之间差别不大(大部分字段都相同)，<br/>在这种情况下，我们可以利用对已有对象（原型）<br />进行复制（或者叫拷贝）的方式，来创建新对象，<br/>以达到节省创建时间的目的。<br />原型模式有两种实现方法，深拷贝和浅拷贝。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>结构型模式</strong></td>\n<td align=\"left\"><strong>结构型模式主要总结了一些类或对象组合在一起的经典结构，<br />这些经典的结构可以解决特定应用场景的问题，<br />结构型模式包括：代理模式、桥接模式、装饰器模式、适配器模式、<br />门面模式、组合模式、享元模式。</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>01. 适配器|Adapter</td>\n<td align=\"left\">适配器模式是一种事后的补救策略，用来补救设计上的缺陷。<br />适配器提供跟原始类不同的接口。<br />它将不兼容的接口转换为可兼容的接口让原本由于接口<br/>不兼容而不能一起工作的类可以一起工作。<br />适配器模式有两种实现方式：类适配器和对象适配器。<br />类适配器使用继承关系来实现，<br />对象适配器使用组合关系来实现。</td>\n<td>RecyclerView</td>\n</tr>\n<tr>\n<td>02. 桥接|Bridge</td>\n<td align=\"left\">桥接模式有两种理解方式。<br />第一种理解方式是“将抽象和实现解耦，让它们能独立开发”。<br />抽象”和“实现”独立开发，<br />通过对象之间的组合关系组装在一起。<br />另一种理解方式更加简单，等同于“组合优于继承”设计原则，<br />不管是哪种理解方式，它们的代码结构都是相同的，<br />都是一种类之间的组合关系。</td>\n<td></td>\n</tr>\n<tr>\n<td>03. 组合|Composite</td>\n<td align=\"left\">将对象组合成树形结构以表示”部分-整体”的层次结构。<br />组合模式使得用户对<br/>单个对象和组合对象的使用具有一致性。</td>\n<td></td>\n</tr>\n<tr>\n<td>04. 装饰|Decorator</td>\n<td align=\"left\">装饰器模式主要解决继承关系过于复杂的问题，<br />通过组合来替代继承，给原始类添加增强功能。<br />这也是判断是否该用装饰器模式的一个重要的依据。</td>\n<td>Java IO</td>\n</tr>\n<tr>\n<td>05. 门面|Facade</td>\n<td align=\"left\">通过封装细粒度的接口，<br />向外提供组合各个细粒度接口的高层次接口，<br />来提高接口的易用性。</td>\n<td></td>\n</tr>\n<tr>\n<td>06. 享元|Flyweight</td>\n<td align=\"left\">当一个系统中存在大量重复对象的时候，<br />我们就可以利用享元模式，将对象设计成享元，<br />在内存中只保留一份实例，<br />供多处代码引用，这样可以减少内存中对象的数量，<br />以起到节省内存的目的</td>\n<td></td>\n</tr>\n<tr>\n<td>07. 代理|Proxy</td>\n<td align=\"left\">代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，<br />主要目的是控制访问，而非加强功能，<br />这是它跟装饰器模式最大的不同。<br />一般情况下，我们让代理类和原始类实现同样的接口，<br />或者让代理类继承原始类来实现代理模式。<br />代理模式分为静态代理和动态代理。</td>\n<td>Retrofit 动态代理</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n</tr>\n<tr>\n<td><strong>行为模式</strong></td>\n<td align=\"left\"><strong>型设计模式主要解决的就是“类或对象之间的交互”问题。<br />行为型模式包括：观察者模式、模板模式、策略模式、职责链模式、<br/>迭代器模式、状态模式、访问者模式、备忘录模式、<br />命令模式、解释器模式、中介模式。</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>01. 责任链|Chain of Responsibility</td>\n<td align=\"left\">避免请求发送者与接收者耦合在一起，让多<br/>个对象都有可能接收请求，将这些对象连接<br/>成一条链，并且沿着这条链传递请求，直到<br/>有对象处理理它为止。<br />职责链模式常用在框架开发中，<br />用来实现过滤器、拦截器功能，<br />让框架的使用者在不需要修改框架源码的情况下，<br />添加新的过滤、拦截功能。<br />这也体现了之前讲到的对扩展开放、<br />对修改关闭的设计原则。</td>\n<td>OkHttp 拦截器</td>\n</tr>\n<tr>\n<td>02. 命令|Command</td>\n<td align=\"left\">命令模式用到最核心的实现手段，<br />就是将函数封装成对象命令模式的主要作用和应用场景，<br />是用来控制命令的执行，比如，异步、延迟、排队执行命令、<br />撤销重做命令、存储命令、给命令记录日志等</td>\n<td></td>\n</tr>\n<tr>\n<td>03. 迭代器|Iterator</td>\n<td align=\"left\">迭代器模式提供一种方法顺序访问一个容器对象中各元素, <br />而又无须暴暴露该对象的内部表示。<br />迭代器模式主要作用是解耦容器代码和遍历代码。<br />大部分编程语言都提供了现成的迭代器可以使用<br />在通过迭代器来遍历集合元素的同时，<br />增加或者删除集合中的元素，<br />有可能会导致某个元素被重复遍历或遍历不到。<br />解决方案是增删元素之后让遍历报错(fail-fast)</td>\n<td>List<br />Map</td>\n</tr>\n<tr>\n<td>04. 中介者|Mediator</td>\n<td align=\"left\">中介模式的设计思想跟中间层很像，<br />通过引入中介这个中间层，将一组对象之间的交互关系<br/>（或者说依赖关系）从多对多（网状关系）<br />转换为一对多（星状关系）.<br />在中介模式的应用场景中，<br/>参与者之间的交互关系错综复杂，<br />既可以是消息的发送者、也可以同时是消息的接收者。</td>\n<td></td>\n</tr>\n<tr>\n<td>05. 备忘录|Memento</td>\n<td align=\"left\">备忘录模式也叫快照模式，具体来说，<br />就是在不违背封装原则的前提下，<br />捕获一个对象的内部状态，<br />并在该对象之外保存这个状态，<br />以便之后恢复对象为先前的状态。</td>\n<td></td>\n</tr>\n<tr>\n<td>06. 观察者|Observer</td>\n<td align=\"left\">定义对象间的一种一对多的依赖关系，<br />当一个对象的状态发生改变时，<br />所有依赖于它的对象都得到通知并被自动更新。<br />同步阻塞是最经典的实现方式，主要是为了代码解耦；<br />异步非阻塞除了能实现代码解耦之外，<br />还能提高代码的执行效率；<br />进程间的观察者模式解耦更加彻底，<br />一般是基于消息队列来实现，<br />用来实现不同进程间的被观察者和观察者之间的交互。</td>\n<td>EventBus<br />RxJava</td>\n</tr>\n<tr>\n<td>07. 状态|State</td>\n<td align=\"left\">允许对象在内部状态发生改变时改变它的行为<br />状态模式建议为对象的所有可能状态新建一个类， <br />然后将所有状态的对应行为抽取到这些类中。<br />所有状态类都必须遵循同样的接口，<br /> 而且上下文必须仅通过接口与这些对象进行交互。</td>\n<td>音乐播放器</td>\n</tr>\n<tr>\n<td>08. 策略|Strategy</td>\n<td align=\"left\">策略模式用来解耦策略的定义、创建、使用。<br />策略类的定义比较简单，包含一个策略接口<br />和一组实现这个接口的策略类。<br />策略的创建由工厂类来完成，封装策略创建的细节。<br />策略模式包含一组策略可选，客户端代码选择使用哪个策略，<br />有两种确定方法：编译时静态确定和运行时动态确定。<br />其中，“运行时动态确定”才是策略模式最典型的应用场景。<br />最常见的应用场景是，利用它来避免冗长的<br/>if-else 或 switch 分支判断。</td>\n<td>支付方式</td>\n</tr>\n<tr>\n<td>09. 模板方法|Template Method</td>\n<td align=\"left\">模板方法模式在一个方法中定义一个算法骨架，<br />并将某些步骤推迟到子类中实现。<br />模板方法模式可以让子类在不改变算法整体结构的情况下，<br />重新定义算法中的某些步骤。<br />模板模式有两大作用：复用和扩展。<br />回调跟模板模式具有相同的作用<br />回调基于组合关系来实现，模板模式基于继承关系来实现。<br />回调比模板模式更加灵活。</td>\n<td>BaseActivity<br />BaseViewModel<br />BaseNetwork</td>\n</tr>\n<tr>\n<td>10. 访问者|Visitor</td>\n<td align=\"left\">访问者模式允许一个或者多个操作应用到一组对象上，<br />设计意图是解耦操作和对象本身，<br />保持类职责单一、<br />满足开闭原则以及应对代码的复杂性</td>\n<td>ASM</td>\n</tr>\n<tr>\n<td>11. 解释器|Interpreter</td>\n<td align=\"left\">用来实现根据语法规则解读“句子”的解释器。<br />核心思想将语法解析的工作拆分到各个小类中，<br />以此来避免大而全的解析类。一般的做法是，<br />将语法规则拆分一些小的独立的单元，<br />然后对每个单元进行解析，最终合并为对整个语法规则的解析。</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D\" target=\"_blank\" rel=\"noopener\">极客时间| 设计模式之美</a></p>\n</li>\n<li><p><a href=\"https://coding.imooc.com/class/270.html?mc_marking=6eab7b8c9bc28db4f23571353f1a9fe5&mc_channel=banner\" target=\"_blank\" rel=\"noopener\">慕课网 | java设计模式精讲 Debug 方式+内存分析</a></p>\n</li>\n<li><p><a href=\"https://refactoringguru.cn/design-patterns\" target=\"_blank\" rel=\"noopener\">在线书籍 | 深入设计模式</a></p>\n</li>\n<li><p><a href=\"https://bugstack.cn/itstack/itstack-demo-design.html\" target=\"_blank\" rel=\"noopener\">bugstack虫洞栈 | 实战设计模式</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/design-pattern/design-pattern-tutorial.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程 | 设计模式</a></p>\n</li>\n</ul>\n"},{"title":"筑基系列-JVM基础知识小抄版","date":"2020-07-31T06:16:55.000Z","cover":true,"summary":"JVM 内存结构/HotSpot 虚拟机对象探秘/垃圾收集策略与算法/HotSpot 垃圾收集器/内存分配与回收策略/JVM 性能调优/类文件结构/类加载的时机/类加载的过程/类加载器","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n# 筑基系列-JVM基础知识小抄版\n\n## 目录\n\n[toc]\n\n## 1.JVM 内存结构\n\nJava 虚拟机的内存空间分为 5 个部分：\n\n- 程序计数器\n- Java 虚拟机栈\n- 本地方法栈\n- 堆\n- 方法区\n\n![jvm-memory-structure](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-memory-structure.jpg)\n\nJDK 1.8 同 JDK 1.7 比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元数据空间并不在虚拟机中，而是使用本地内存。\n\n### 1.1 程序计数器（PC 寄存器）\n\n#### 程序计数器的定义\n\n程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为`Undefined`。\n\n#### 程序计数器的作用\n\n- 字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制。\n- 在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。\n\n#### 程序计数器的特点\n\n- 是一块较小的内存空间。\n- 线程私有，每条线程都有自己的程序计数器。\n- 生命周期：随着线程的创建而创建，随着线程的结束而销毁。\n- 是唯一一个不会出现`OutOfMemoryError`的内存区域。\n\n### 1.2 Java 虚拟机栈（Java 栈）\n\n#### Java 虚拟机栈的定义\n\nJava 虚拟机栈是描述 Java 方法运行过程的内存模型。\n\nJava 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做“栈帧”的区域，用于存放该方法运行过程中的一些信息，如：\n\n- 局部变量表\n- 操作数栈\n- 动态链接\n- 方法出口信息\n- ......\n\n![jvm-stack](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-stack.jpg)\n\n#### 压栈出栈过程\n\n当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。\n\nJava 虚拟机栈的栈顶的栈帧是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。\n\n方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。\n\n> 由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。\n\n#### Java 虚拟机栈的特点\n\n- 局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可。在方法运行过程中，局部变量表的大小不会发生改变。\n- Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。\n  - StackOverFlowError 若 Java 虚拟机栈的大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。\n  - OutOfMemoryError 若允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展时，抛出 OutOfMemoryError 异常。\n- Java 虚拟机栈也是线程私有，随着线程创建而创建，随着线程的结束而销毁。\n\n> 出现 StackOverFlowError 时，内存空间可能还有很多。\n\n### 1.3 本地方法栈（C 栈）\n\n#### 本地方法栈的定义\n\n本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。\n\n#### 栈帧变化过程\n\n本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、动态链接、方法出口信息等。\n\n方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMemoryError 异常。\n\n> 如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。\n\n### 1.4 堆\n\n#### 堆的定义\n\n堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。\n\n#### 堆的特点\n\n- 线程共享，整个 Java 虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。\n- 在虚拟机启动时创建。\n- 是垃圾回收的主要场所。\n- 进一步可分为：新生代（Eden 区：`From Survior`，`To Survivor`）、老年代。\n\n不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。\n\n堆的大小既可以固定也可以扩展，但对于主流的虚拟机，堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已无法再扩展时，就抛出 OutOfMemoryError 异常。\n\n> Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。\n\n### 1.5 方法区\n\n#### 方法区的定义\n\nJava 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：\n\n- 已经被虚拟机加载的类信息\n- 常量\n- 静态变量\n- 即时编译器编译后的代码\n\n#### 方法区的特点\n\n- 线程共享。 方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。\n- 永久代。 方法区中的信息一般需要长期存在，而且它又是堆的逻辑分区，因此用堆的划分方法，把方法区称为“永久代”。\n- 内存回收效率低。 方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。\n- Java 虚拟机规范对方法区的要求比较宽松。 和堆一样，允许固定大小，也允许动态扩展，还允许不实现垃圾回收。\n\n#### 运行时常量池\n\n方法区中存放：类信息、常量、静态变量、即时编译器编译后的代码。常量就存放在运行时常量池中。\n\n当类被 Java 虚拟机加载后， .class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的 `intern()` 方法就能在运行期间向常量池中添加字符串常量。\n\n### 1.6 直接内存（堆外内存）\n\n直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。\n\n#### 操作直接内存\n\n在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的`DirectByteBuffer`对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提高了数据操作的效率。\n\n直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。\n\n#### 直接内存与堆内存比较\n\n- 直接内存申请空间耗费更高的性能\n- 直接内存读取 IO 的性能要优于普通的堆内存。\n- 直接内存作用链： 本地 IO -&gt; 直接内存 -&gt; 本地 IO\n- 堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO\n\n> 服务器管理员在配置虚拟机参数时，会根据实际内存设置`-Xmx`等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现`OutOfMemoryError`异常。\n\n\n## 2.HotSpot 虚拟机对象探秘\n\n### 2.1 对象的内存布局\n\n在 HotSpot 虚拟机中，对象的内存布局分为以下 3 块区域：\n\n- 对象头（Header）\n- 实例数据（Instance Data）\n- 对齐填充（Padding）\n\n![object-memory-layout.png](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/object-memory-layout.png)\n\n#### 对象头\n\n对象头记录了对象在运行过程中所需要使用的一些数据：\n\n- 哈希码\n- GC 分代年龄\n- 锁状态标志\n- 线程持有的锁\n- 偏向线程 ID\n- 偏向时间戳\n\n对象头可能包含类型指针，通过该指针能确定对象属于哪个类。如果对象是一个数组，那么对象头还会包括数组长度。\n\n#### 实例数据\n\n实例数据部分就是成员变量的值，其中包括父类成员变量和本类成员变量。\n\n#### 对齐填充\n\n用于确保对象的总长度为 8 字节的整数倍。\n\nHotSpot VM 的自动内存管理系统要求对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\n\n> 对齐填充并不是必然存在，也没有特别的含义，它仅仅起着占位符的作用。\n\n### 2.2 对象的创建过程\n\n#### 类加载检查\n\n虚拟机在解析`.class`文件时，若遇到一条 new 指令，首先它会去检查常量池中是否有这个类的符号引用，并且检查这个符号引用所代表的类是否已被加载、解析和初始化过。如果没有，那么必须先执行相应的类加载过程。\n\n#### 为新生对象分配内存\n\n对象所需内存的大小在类加载完成后便可完全确定，接下来从堆中划分一块对应大小的内存空间给新的对象。分配堆中内存有两种方式：\n\n- **指针碰撞**<br>\n  如果 Java **堆中内存绝对规整**（说明采用的是“**复制算法**”或“**标记整理法**”），空闲内存和已使用内存中间放着一个指针作为分界点指示器，那么分配内存时只需要把指针向空闲内存挪动一段与对象大小一样的距离，这种分配方式称为“**指针碰撞**”。\n\n- **空闲列表**<br>\n  如果 Java **堆中内存并不规整**，已使用的内存和空闲内存交错（说明采用的是**标记-清除法**，有碎片），此时没法简单进行指针碰撞， VM 必须维护一个列表，记录其中哪些内存块空闲可用。分配之时从空闲列表中找到一块足够大的内存空间划分给对象实例。这种方式称为“**空闲列表**”。\n\n#### 初始化\n\n分配完内存后，为对象中的成员变量赋上初始值，设置对象头信息，调用对象的构造函数方法进行初始化。\n\n至此，整个对象的创建过程就完成了。\n\n### 2.3 对象的访问方式\n\n所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配的。也就是说在建立一个对象时两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针（引用）而已。 那么根据引用存放的地址类型的不同，对象有不同的访问方式。\n\n#### 句柄访问方式\n\n堆中需要有一块叫做“句柄池”的内存空间，句柄中包含了对象实例数据与类型数据各自的具体地址信息。\n\n引用类型的变量存放的是该对象的句柄地址（reference）。访问对象时，首先需要通过引用类型的变量找到该对象的句柄，然后根据句柄中对象的地址找到对象。\n\n![handle-access](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/handle-access.jpg)\n\n#### 直接指针访问方式\n\n引用类型的变量直接存放对象的地址，从而不需要句柄池，通过引用能够直接访问对象。但对象所在的内存空间需要额外的策略存储对象所属的类信息的地址。\n\n![direct-pointer](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/direct-pointer.jpg)\n\n需要说明的是，HotSpot 采用第二种方式，即直接指针方式来访问对象，只需要一次寻址操作，所以在性能上比句柄访问方式快一倍。但像上面所说，它需要**额外的策略**来存储对象在方法区中类信息的地址。\n\n\n\n## 3.垃圾收集策略与算法\n\n程序计数器、虚拟机栈、本地方法栈随线程而生，也随线程而灭；栈帧随着方法的开始而入栈，随着方法的结束而出栈。这几个区域的内存分配和回收都具有确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。\n\n而对于 Java 堆和方法区，我们只有在程序运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的正是这部分内存。\n\n### 3.1 判定对象是否存活\n\n若一个对象不被任何对象或变量引用，那么它就是无效对象，需要被回收。\n\n#### 引用计数法\n\n在对象头维护着一个 counter 计数器，对象被引用一次则计数器 +1；若引用失效则计数器 -1。当计数器为 0 时，就认为该对象无效了。\n\n引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。但是主流的 Java 虚拟机里没有选用引用计数算法来管理内存，主要是因为它很难解决对象之间循环引用的问题。\n\n> 举个栗子 👉 对象 objA 和 objB 都有字段 instance，令 objA.instance = objB 并且 objB.instance = objA，由于它们互相引用着对方，导致它们的引用计数都不为 0，于是引用计数算法无法通知 GC 收集器回收它们。\n\n#### 可达性分析法\n\n所有和 GC Roots 直接或间接关联的对象都是有效对象，和 GC Roots 没有关联的对象就是无效对象。\n\nGC Roots 是指：\n\n- Java 虚拟机栈（栈帧中的本地变量表）中引用的对象\n- 本地方法栈中引用的对象\n- 方法区中常量引用的对象\n- 方法区中类静态属性引用的对象\n\nGC Roots 并不包括堆中对象所引用的对象，这样就不会有循环引用的问题。\n\n### 3.2 引用的种类\n\n判定对象是否存活与“引用”有关。在 JDK 1.2 以前，Java 中的引用定义很传统，一个对象只有被引用或者没有被引用两种状态，我们希望能描述这一类对象：当内存空间还足够时，则保留在内存中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。\n\n在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为了以下四种。不同的引用类型，主要体现的是对象不同的可达性状态`reachable`和垃圾收集的影响。\n\n#### 强引用（Strong Reference）\n\n类似 \"`Object obj = new Object()`\" 这类的引用，就是强引用，只要强引用存在，垃圾收集器永远不会回收被引用的对象。但是，如果我们**错误地保持了强引用**，比如：赋值给了 static 变量，那么对象在很长一段时间内不会被回收，会产生内存泄漏。\n\n#### 软引用（Soft Reference）\n\n软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来**实现内存敏感的缓存**，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。\n\n#### 弱引用（Weak Reference）\n\n弱引用的**强度比软引用更弱**一些。当 JVM 进行垃圾回收时，**无论内存是否充足，都会回收**只被弱引用关联的对象。\n\n#### 虚引用（Phantom Reference）\n\n虚引用也称幽灵引用或者幻影引用，它是**最弱**的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。它仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制。\n\n### 3.3 回收堆中无效对象\n\n对于可达性分析中不可达的对象，也并不是没有存活的可能。\n\n#### 判定 finalize() 是否有必要执行\n\nJVM 会判断此对象是否有必要执行 finalize() 方法，如果对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，那么视为“没有必要执行”。那么对象基本上就真的被回收了。\n\n如果对象被判定为有必要执行 finalize() 方法，那么对象会被放入一个 F-Queue 队列中，虚拟机会以较低的优先级执行这些 finalize()方法，但不会确保所有的 finalize() 方法都会执行结束。如果 finalize() 方法出现耗时操作，虚拟机就直接停止指向该方法，将对象清除。\n\n#### 对象重生或死亡\n\n如果在执行 finalize() 方法时，将 this 赋给了某一个引用，那么该对象就重生了。如果没有，那么就会被垃圾收集器清除。\n\n> 任何一个对象的 finalize() 方法只会被系统自动调用一次，如果对象面临下一次回收，它的 finalize() 方法不会被再次执行，想继续在 finalize() 中自救就失效了。\n\n### 3.3 回收方法区内存\n\n方法区中存放生命周期较长的类信息、常量、静态变量，每次垃圾收集只有少量的垃圾被清除。方法区中主要清除两种垃圾：\n\n- 废弃常量\n- 无用的类\n\n#### 判定废弃常量\n\n只要常量池中的常量不被任何变量或对象引用，那么这些常量就会被清除掉。比如，一个字符串 \"bingo\" 进入了常量池，但是当前系统没有任何一个 String 对象引用常量池中的 \"bingo\" 常量，也没有其它地方引用这个字面量，必要的话，\"bingo\"常量会被清理出常量池。\n\n#### 判定无用的类\n\n判定一个类是否是“无用的类”，条件较为苛刻。\n\n- 该类的所有对象都已经被清除\n- 加载该类的 ClassLoader 已经被回收\n- 该类的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。\n\n> 一个类被虚拟机加载进方法区，那么在堆中就会有一个代表该类的对象：java.lang.Class。这个对象在类被加载进方法区时创建，在方法区该类被删除时清除。\n\n\n\n### 3,4 垃圾收集算法\n\n学会了如何判定无效对象、无用类、废弃常量之后，剩余工作就是回收这些垃圾。常见的垃圾收集算法有以下几个：\n\n#### 标记-清除算法\n\n**标记**的过程是：遍历所有的 `GC Roots`，然后将所有 `GC Roots` 可达的对象**标记为存活的对象**。\n\n**清除**的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。与此同时，清除那些被标记过的对象的标记，以便下次的垃圾回收。\n\n这种方法有两个**不足**：\n\n- 效率问题：标记和清除两个过程的效率都不高。\n- 空间问题：标记清除之后会产生大量不连续的内存碎片，碎片太多可能导致以后需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n#### 复制算法（新生代）\n\n为了解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完，需要进行垃圾收集时，就将存活者的对象复制到另一块上面，然后将第一块内存全部清除。这种算法有优有劣：\n\n- 优点：不会有内存碎片的问题。\n- 缺点：内存缩小为原来的一半，浪费空间。\n\n为了解决空间利用率问题，可以将内存分为三块： Eden、From Survivor、To Survivor，比例是 8:1:1，每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。\n\n但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。\n\n#### 分配担保\n\n为对象分配内存空间时，如果 Eden+Survivor 中空闲区域无法装下该对象，会触发 MinorGC 进行垃圾收集。但如果 Minor GC 过后依然有超过 10% 的对象存活，这样存活的对象直接通过分配担保机制进入老年代，然后再将新对象存入 Eden 区。\n\n#### 标记-整理算法（老年代）\n\n**标记**：它的第一个阶段与**标记/清除算法**是一模一样的，均是遍历 `GC Roots`，然后将存活的对象标记。\n\n**整理**：移动所有**存活的对象**，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。\n\n这是一种老年代的垃圾收集算法。老年代的对象一般寿命比较长，因此每次垃圾回收会有大量对象存活，如果采用复制算法，每次需要复制大量存活的对象，效率很低。\n\n#### 分代收集算法\n\n根据对象存活周期的不同，将内存划分为几块。一般是把 Java 堆分为新生代和老年代，针对各个年代的特点采用最适当的收集算法。\n\n- 新生代：复制算法\n- 老年代：标记-清除算法、标记-整理算法\n\n\n\n## 4.HotSpot 垃圾收集器\n\nHotSpot 虚拟机提供了多种垃圾收集器，每种收集器都有各自的特点，虽然我们要对各个收集器进行比较，但并非为了挑选出一个最好的收集器。我们选择的只是对具体应用最合适的收集器。\n\n### 4.1 新生代垃圾收集器\n\n#### Serial 垃圾收集器（单线程）\n\n只开启**一条** GC 线程进行垃圾回收，并且在垃圾收集过程中停止一切用户线程\\(Stop The World\\)。\n\n一般客户端应用所需内存较小，不会创建太多对象，而且堆内存不大，因此垃圾收集器回收时间短，即使在这段时间停止一切用户线程，也不会感觉明显卡顿。因此 Serial 垃圾收集器**适合客户端**使用。\n\n由于 Serial 收集器只使用一条 GC 线程，避免了线程切换的开销，从而简单高效。\n\n![Serial](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/serial.png)\n\n#### ParNew 垃圾收集器（多线程）\n\nParNew 是 Serial 的多线程版本。由多条 GC 线程并行地进行垃圾清理。但清理过程依然需要 Stop The World。\n\nParNew 追求“**低停顿时间**”,与 Serial 唯一区别就是使用了多线程进行垃圾收集，在多 CPU 环境下性能比 Serial 会有一定程度的提升；但**线程切换需要额外的开销**，因此在单 CPU 环境中表现不如 Serial。\n\n![ParNew](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/parnew.png)\n\n#### Parallel Scavenge 垃圾收集器（多线程）\n\nParallel Scavenge 和 ParNew 一样，都是多线程、新生代垃圾收集器。但是两者有巨大的不同点：\n\n- Parallel Scavenge：追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。\n- ParNew：追求降低用户停顿时间，适合交互式应用。\n\n吞吐量 = 运行用户代码时间 / \\(运行用户代码时间 + 垃圾收集时间\\)\n\n追求高吞吐量，可以通过减少 GC 执行实际工作的时间，然而，仅仅偶尔运行 GC 意味着每当 GC 运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。单个 GC 需要花更多的时间来完成，从而导致更高的暂停时间。而考虑到低暂停时间，最好频繁运行 GC 以便更快速完成，反过来又导致吞吐量下降。\n\n- 通过参数 -XX:GCTimeRadio 设置垃圾回收时间占总 CPU 时间的百分比。\n- 通过参数 -XX:MaxGCPauseMillis 设置垃圾处理过程最久停顿时间。\n- 通过命令 -XX:+UseAdaptiveSizePolicy 开启自适应策略。我们只要设置好堆的大小和 MaxGCPauseMillis 或 GCTimeRadio，收集器会自动调整新生代的大小、Eden 和 Survivor 的比例、对象进入老年代的年龄，以最大程度上接近我们设置的 MaxGCPauseMillis 或 GCTimeRadio。\n\n### 4.2 老年代垃圾收集器\n\n#### Serial Old 垃圾收集器（单线程）\n\nSerial Old 收集器是 Serial 的老年代版本，都是单线程收集器，只启用一条 GC 线程，都适合客户端应用。它们唯一的区别就是：Serial Old 工作在老年代，使用“标记-整理”算法；Serial 工作在新生代，使用“复制”算法。\n\n#### Parallel Old 垃圾收集器（多线程）\n\nParallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 CPU 吞吐量。\n\n#### CMS 垃圾收集器\n\nCMS\\(Concurrent Mark Sweep，并发标记清除\\)收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。\n\n- 初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。\n- 并发标记：使用**多条**标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。\n- 重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。\n- 并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。\n\n并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，**总体上说**，CMS 收集器的内存回收过程是与用户线程**一起并发执行**的。\n\n![CMS](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/cms.png)\n\nCMS 的缺点：\n\n- 吞吐量低\n- 无法处理浮动垃圾，导致频繁 Full GC\n- 使用“标记-清除”算法产生碎片空间\n\n对于产生碎片空间的问题，可以通过开启 -XX:+UseCMSCompactAtFullCollection，在每次 Full GC 完成后都会进行一次内存压缩整理，将零散在各处的对象整理到一块。设置参数 -XX:CMSFullGCsBeforeCompaction 告诉 CMS，经过了 N 次 Full GC 之后再进行一次内存整理。\n\n### 4.3 G1 通用垃圾收集器\n\nG1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，因此可以获得最大的回收效率。\n\n从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\n\n这里抛个问题 👇<br>\n一个对象和它内部所引用的对象可能不在同一个 Region 中，那么当垃圾回收时，是否需要扫描整个堆内存才能完整地进行一次可达性分析？\n\n并不！每个 Region 都有一个 Remembered Set，用于记录本区域中所有对象引用的对象所在的区域，进行可达性分析时，只要在 GC Roots 中再加上 Remembered Set 即可防止对整个堆内存进行遍历。\n\n如果不计算维护 Remembered Set 的操作，G1 收集器的工作过程分为以下几个步骤：\n\n- 初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。\n- 并发标记：使用**一条**标记线程与用户线程并发执行。此过程进行可达性分析，速度很慢。\n- 最终标记：Stop The World，使用多条标记线程并发执行。\n- 筛选回收：回收废弃对象，此时也要 Stop The World，并使用多条筛选回收线程并发执行。\n\n\n\n## 5.内存分配与回收策略\n\n对象的内存分配，就是在堆上分配（也可能经过 JIT 编译后被拆散为标量类型并间接在栈上分配），对象主要分配在新生代的 Eden 区上，少数情况下可能直接分配在老年代，**分配规则不固定**，取决于当前使用的垃圾收集器组合以及相关的参数配置。\n\n以下列举几条最普遍的内存分配规则，供大家学习。\n\n### 5.1 对象优先在 Eden 分配\n\n大多数情况下，对象在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。\n\n👇**Minor GC** vs **Major GC**/**Full GC**：\n\n- Minor GC：回收新生代（包括 Eden 和 Survivor 区域），因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。\n- Major GC / Full GC: 回收老年代，出现了 Major GC，经常会伴随至少一次的 Minor GC，但这并非绝对。Major GC 的速度一般会比 Minor GC 慢 10 倍 以上。\n\n> 在 JVM 规范中，Major GC 和 Full GC 都没有一个正式的定义，所以有人也简单地认为 Major GC 清理老年代，而 Full GC 清理整个内存堆。\n\n### 5.2 大对象直接进入老年代\n\n大对象是指需要大量连续内存空间的 Java 对象，如很长的字符串或数据。\n\n一个大对象能够存入 Eden 区的概率比较小，发生分配担保的概率比较大，而分配担保需要涉及大量的复制，就会造成效率低下。\n\n虚拟机提供了一个 -XX:PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配，这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制。（还记得吗，新生代采用复制算法回收垃圾）\n\n### 5.3 长期存活的对象将进入老年代\n\nJVM 给每个对象定义了一个对象年龄计数器。当新生代发生一次 Minor GC 后，存活下来的对象年龄 +1，当年龄超过一定值时，就将超过该值的所有对象转移到老年代中去。\n\n使用 `-XXMaxTenuringThreshold` 设置新生代的最大年龄，只要超过该参数的新生代对象都会被转移到老年代中去。\n\n### 5.4 动态对象年龄判定\n\n如果当前新生代的 Survivor 中，相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄 &gt;= 该年龄的对象就可以直接进入老年代，无须等到 `MaxTenuringThreshold` 中要求的年龄。\n\n### 5.5 空间分配担保\n\nJDK 6 Update 24 之前的规则是这样的：  \n 在发生 Minor GC 之前，虚拟机会先检查**老年代最大可用的连续空间是否大于新生代所有对象总空间**， 如果这个条件成立，Minor GC 可以确保是安全的； 如果不成立，则虚拟机会查看 `HandlePromotionFailure` 值是否设置为允许担保失败， 如果是，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小， 如果大于，将尝试进行一次 Minor GC,尽管这次 Minor GC 是有风险的； 如果小于，或者 `HandlePromotionFailure` 设置不允许冒险，那此时也要改为进行一次 Full GC。\n\nJDK 6 Update 24 之后的规则变为：  \n 只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。\n\n通过清除老年代中废弃数据来扩大老年代空闲空间，以便给新生代作担保。\n\n这个过程就是分配担保。\n\n---\n\n👇 总结一下有哪些情况可能会触发 JVM 进行 Full GC。\n\n1. **`System.gc()` 方法的调用**\n   此方法的调用是建议 JVM 进行 Full GC，注意这**只是建议而非一定**，但在很多情况下它会触发 Full GC，从而增加 Full GC 的频率。通常情况下我们只需要让虚拟机自己去管理内存即可，我们可以通过 -XX:+ DisableExplicitGC 来禁止调用 `System.gc()`。\n1. **老年代空间不足**\n   老年代空间不足会触发 Full GC 操作，若进行该操作后空间依然不足，则会抛出如下错误：`java.lang.OutOfMemoryError: Java heap space`\n1. **永久代空间不足**\n   JVM 规范中运行时数据区域中的方法区，在 HotSpot 虚拟机中也称为永久代（Permanet Generation），存放一些类信息、常量、静态变量等数据，当系统要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，会触发 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：`java.lang.OutOfMemoryError: PermGen space `\n1. **CMS GC 时出现 `promotion failed` 和 `concurrent mode failure`**\n   promotion failed，就是上文所说的担保失败，而 concurrent mode failure 是在执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足造成的。\n1. **统计得到的 Minor GC 晋升到旧生代的平均大小大于老年代的剩余空间。**# JVM 性能调优\n\n在高性能硬件上部署程序，目前主要有两种方式：\n\n- 通过 64 位 JDK 来使用大内存；\n- 使用若干个 32 位虚拟机建立逻辑集群来利用硬件资源。\n\n### 5.6 使用 64 位 JDK 管理大内存\n\n堆内存变大后，虽然垃圾收集的频率减少了，但每次垃圾回收的时间变长。 如果堆内存为 14 G，那么每次 Full GC 将长达数十秒。如果 Full GC 频繁发生，那么对于一个网站来说是无法忍受的。\n\n对于用户交互性强、对停顿时间敏感的系统，可以给 Java 虚拟机分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，至少要低到不会影响用户使用。\n\n可能面临的问题：\n\n- 内存回收导致的长时间停顿；\n- 现阶段，64 位 JDK 的性能普遍比 32 位 JDK 低；\n- 需要保证程序足够稳定，因为这种应用要是产生堆溢出几乎就无法产生堆转储快照（因为要产生超过 10GB 的 Dump 文件），哪怕产生了快照也几乎无法进行分析；\n- 相同程序在 64 位 JDK 消耗的内存一般比 32 位 JDK 大，这是由于指针膨胀，以及数据类型对齐补白等因素导致的。\n\n### 5.7 使用 32 位 JVM 建立逻辑集群\n\n在一台物理机器上启动多个应用服务器进程，每个服务器进程分配不同端口， 然后在前端搭建一个负载均衡器，以反向代理的方式来分配访问请求。\n\n考虑到在一台物理机器上建立逻辑集群的目的仅仅是为了尽可能利用硬件资源，并不需要关心状态保留、热转移之类的高可用性能需求， 也不需要保证每个虚拟机进程有绝对的均衡负载，因此使用无 Session 复制的亲合式集群是一个不错的选择。 我们仅仅需要保障集群具备亲合性，也就是均衡器按一定的规则算法（一般根据 SessionID 分配） 将一个固定的用户请求永远分配到固定的一个集群节点进行处理即可。\n\n可能遇到的问题：\n\n- 尽量避免节点竞争全局资源，如磁盘竞争，各个节点如果同时访问某个磁盘文件的话，很可能导致 IO 异常；\n- 很难高效利用资源池，如连接池，一般都是在节点建立自己独立的连接池，这样有可能导致一些节点池满了而另外一些节点仍有较多空余；\n- 各个节点受到 32 位的内存限制；\n- 大量使用本地缓存的应用，在逻辑集群中会造成较大的内存浪费，因为每个逻辑节点都有一份缓存，这时候可以考虑把本地缓存改成集中式缓存。\n\n### 5.8 调优案例分析与实战\n\n#### 场景描述\n\n一个小型系统，使用 32 位 JDK，4G 内存，测试期间发现服务端不定时抛出内存溢出异常。 加入 -XX:+HeapDumpOnOutOfMemoryError（添加这个参数后，堆内存溢出时就会输出异常日志）， 但再次发生内存溢出时，没有生成相关异常日志。\n\n#### 分析\n\n在 32 位 JDK 上，1.6G 分配给堆，还有一部分分配给 JVM 的其他内存，直接内存最大也只能在剩余的 0.4G 空间中分出一部分， 如果使用了 NIO，JVM 会在 JVM 内存之外分配内存空间，那么就要小心“直接内存”不足时发生内存溢出异常了。\n\n#### 直接内存的回收过程\n\n直接内存虽然不是 JVM 内存空间，但它的垃圾回收也由 JVM 负责。\n\n垃圾收集进行时，虚拟机虽然会对直接内存进行回收， 但是直接内存却不能像新生代、老年代那样，发现空间不足了就通知收集器进行垃圾回收， 它只能等老年代满了后 Full GC，然后“顺便”帮它清理掉内存的废弃对象。 否则只能一直等到抛出内存溢出异常时，先 catch 掉，再在 catch 块里大喊 “`System.gc()`”。 要是虚拟机还是不听，那就只能眼睁睁看着堆中还有许多空闲内存，自己却不得不抛出内存溢出异常了。\n\n\n\n## 6.类文件结构\n\n### 6.1 JVM 的“无关性”\n\n谈论 JVM 的无关性，主要有以下两个：\n\n- 平台无关性：任何操作系统都能运行 Java 代码\n- 语言无关性： JVM 能运行除 Java 以外的其他代码\n\nJava 源代码首先需要使用 Javac 编译器编译成 .class 文件，然后由 JVM 执行 .class 文件，从而程序开始运行。\n\nJVM 只认识 .class 文件，它不关心是何种语言生成了 .class 文件，只要 .class 文件符合 JVM 的规范就能运行。 目前已经有 JRuby、Jython、Scala 等语言能够在 JVM 上运行。它们有各自的语法规则，不过它们的编译器 都能将各自的源码编译成符合 JVM 规范的 .class 文件，从而能够借助 JVM 运行它们。\n\n> Java 语言中的各种变量、关键字和运算符号的语义最终都是由多条字节码命令组合而成的， 因此字节码命令所能提供的语义描述能力肯定会比 Java 语言本身更加强大。 因此，有一些 Java 语言本身无法有效支持的语言特性，不代表字节码本身无法有效支持。\n\n### 6.2 Class 文件结构\n\nClass 文件是二进制文件，它的内容具有严格的规范，文件中没有任何空格，全都是连续的 0/1。Class 文件 中的所有内容被分为两种类型：无符号数、表。\n\n- 无符号数 无符号数表示 Class 文件中的值，这些值没有任何类型，但有不同的长度。u1、u2、u4、u8 分别代表 1/2/4/8 字节的无符号数。\n- 表 由多个无符号数或者其他表作为数据项构成的复合数据类型。\n\nClass 文件具体由以下几个构成:\n\n- 魔数\n- 版本信息\n- 常量池\n- 访问标志\n- 类索引、父类索引、接口索引集合\n- 字段表集合\n- 方法表集合\n- 属性表集合\n\n#### 魔数\n\nClass 文件的头 4 个字节称为魔数，用来表示这个 Class 文件的类型。\n\nClass 文件的魔数是用 16 进制表示的“CAFE BABE”，是不是很具有浪漫色彩？\n\n> 魔数相当于文件后缀名，只不过后缀名容易被修改，不安全，因此在 Class 文件中标识文件类型比较合适。\n\n#### 版本信息\n\n紧接着魔数的 4 个字节是版本信息，5-6 字节表示次版本号，7-8 字节表示主版本号，它们表示当前 Class 文件中使用的是哪个版本的 JDK。\n\n高版本的 JDK 能向下兼容以前版本的 Class 文件，但不能运行以后版本的 Class 文件，即使文件格式并未发生任何变化，虚拟机也必需拒绝执行超过其版本号的 Class 文件。\n\n#### 常量池\n\n版本信息之后就是常量池，常量池中存放两种类型的常量：\n\n- 字面值常量\n\n  字面值常量就是我们在程序中定义的字符串、被 final 修饰的值。\n\n- 符号引用\n\n  符号引用就是我们定义的各种名字：类和接口的全限定名、字段的名字和描述符、方法的名字和描述符。\n\n##### 常量池的特点\n\n- 常量池中常量数量不固定，因此常量池开头放置一个 u2 类型的无符号数，用来存储当前常量池的容量。\n- 常量池的每一项常量都是一个表，表开始的第一位是一个 u1 类型的标志位（tag），代表当前这个常量属于哪种常量类型。\n\n##### 常量池中常量类型\n\n| 类型                             | tag | 描述　                 |\n| -------------------------------- | --- | ---------------------- |\n| CONSTANT_utf8_info               | 1   | UTF-8 编码的字符串     |\n| CONSTANT_Integer_info            | 3   | 整型字面量             |\n| CONSTANT_Float_info              | 4   | 浮点型字面量           |\n| CONSTANT_Long_info               | 5   | 长整型字面量           |\n| CONSTANT_Double_info             | 6   | 双精度浮点型字面量     |\n| CONSTANT_Class_info              | 7   | 类或接口的符号引用     |\n| CONSTANT_String_info             | 8   | 字符串类型字面量       |\n| CONSTANT_Fieldref_info           | 9   | 字段的符号引用         |\n| CONSTANT_Methodref_info          | 10  | 类中方法的符号引用     |\n| CONSTANT_InterfaceMethodref_info | 11  | 接口中方法的符号引用   |\n| CONSTANT_NameAndType_info        | 12  | 字段或方法的符号引用   |\n| CONSTANT_MethodHandle_info       | 15  | 表示方法句柄           |\n| CONSTANT_MethodType_info         | 16  | 标识方法类型           |\n| CONSTANT_InvokeDynamic_info      | 18  | 表示一个动态方法调用点 |\n\n对于 CONSTANT_Class_info（此类型的常量代表一个类或者接口的符号引用），它的二维表结构如下：\n\n| 类型 | 名称       | 数量 |\n| ---- | ---------- | ---- |\n| u1   | tag        | 1    |\n| u2   | name_index | 1    |\n\ntag 是标志位，用于区分常量类型；name_index 是一个索引值，它指向常量池中一个 CONSTANT_Utf8_info 类型常量，此常量代表这个类（或接口）的全限定名，这里 name_index 值若为 0x0002，也即是指向了常量池中的第二项常量。\n\nCONSTANT_Utf8_info 型常量的结构如下：\n\n| 类型 | 名称   | 数量   |\n| ---- | ------ | ------ |\n| u1   | tag    | 1      |\n| u2   | length | 1      |\n| u1   | bytes  | length |\n\ntag 是当前常量的类型；length 表示这个字符串的长度；bytes 是这个字符串的内容（采用缩略的 UTF8 编码）\n\n#### 访问标志\n\n在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否被 abstract/final 修饰。\n\n#### 类索引、父类索引、接口索引集合\n\n类索引和父类索引都是一个 u2 类型的数据，而接口索引集合是一组 u2 类型的数据的集合，Class 文件中由这三项数据来确定类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。\n\n由于 Java 不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。一个类可能实现了多个接口，因此用接口索引集合来描述。这个集合第一项为 u2 类型的数据，表示索引表的容量，接下来就是接口的名字索引。\n\n类索引和父类索引用两个 u2 类型的索引值表示，它们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过该常量总的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。\n\n#### 字段表集合\n\n字段表集合存储本类涉及到的成员变量，包括实例变量和类变量，但不包括方法中的局部变量。\n\n每一个字段表只表示一个成员变量，本类中的所有成员变量构成了字段表集合。字段表结构如下：\n\n| 类型 | 名称             | 数量             | 说明                                                                                                 |\n| ---- | ---------------- | ---------------- | ---------------------------------------------------------------------------------------------------- |\n| u2   | access_flags     | 1                | 字段的访问标志，与类稍有不同                                                                         |\n| u2   | name_index       | 1                | 字段名字的索引                                                                                       |\n| u2   | descriptor_index | 1                | 描述符，用于描述字段的数据类型。 基本数据类型用大写字母表示； 对象类型用“L 对象类型的全限定名”表示。 |\n| u2   | attributes_count | 1                | 属性表集合的长度                                                                                     |\n| u2   | attributes       | attributes_count | 属性表集合，用于存放属性的额外信息，如属性的值。                                                     |\n\n> 字段表集合中不会出现从父类（或接口）中继承而来的字段，但有可能出现原本 Java 代码中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。\n\n#### 方法表集合\n\n方法表结构与属性表类似。\n\nvolatile 关键字 和 transient 关键字不能修饰方法，所以方法表的访问标志中没有 ACC_VOLATILE 和 ACC_TRANSIENT 标志。\n\n方法表的属性表集合中有一张 Code 属性表，用于存储当前方法经编译器编译后的字节码指令。\n\n#### 属性表集合\n\n每个属性对应一张属性表，属性表的结构如下：\n\n| 类型 | 名称                 | 数量             |\n| ---- | -------------------- | ---------------- |\n| u2   | attribute_name_index | 1                |\n| u4   | attribute_length     | 1                |\n| u1   | info                 | attribute_length |\n\n\n## 7.类加载的时机\n\n### 7.1 类的生命周期\n\n类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括以下 7 个阶段：\n\n- 加载\n- 验证\n- 准备\n- 解析\n- 初始化\n- 使用\n- 卸载\n\n验证、准备、解析 3 个阶段统称为连接。\n\n![Load Class](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/loadclass.png)\n\n加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始（注意是“开始”，而不是“进行”或“完成”），而解析阶段则不一定：它在某些情况下可以在初始化后再开始，这是为了支持 Java 语言的运行时绑定。\n\n### 7.2 类加载过程中“初始化”开始的时机\n\nJava 虚拟机规范没有强制约束类加载过程的第一阶段（即：加载）什么时候开始，但对于“初始化”阶段，有着严格的规定。有且仅有 5 种情况必须立即对类进行“初始化”：\n\n- 在遇到 new、putstatic、getstatic、invokestatic 字节码指令时，如果类尚未初始化，则需要先触发其初始化。\n- 对类进行反射调用时，如果类还没有初始化，则需要先触发其初始化。\n- 初始化一个类时，如果其父类还没有初始化，则需要先初始化父类。\n- 虚拟机启动时，用于需要指定一个包含 `main()` 方法的主类，虚拟机会先初始化这个主类。\n- 当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类还没初始化，则需要先触发其初始化。\n\n这 5 种场景中的行为称为对一个类进行**主动引用**，除此之外，其它所有引用类的方式都不会触发初始化，称为**被动引用**。\n\n### 7.3 被动引用演示 Demo\n\n#### Demo1\n\n```java\n/**\n * 被动引用 Demo1:\n * 通过子类引用父类的静态字段，不会导致子类初始化。\n *\n * @author ylb\n *\n */\nclass SuperClass {\n    static {\n        System.out.println(\"SuperClass init!\");\n    }\n\n    public static int value = 123;\n}\n\nclass SubClass extends SuperClass {\n    static {\n        System.out.println(\"SubClass init!\");\n    }\n}\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        System.out.println(SubClass.value);\n        // SuperClass init!\n    }\n\n}\n```\n\n对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。\n\n#### Demo2\n\n```java\n/**\n * 被动引用 Demo2:\n * 通过数组定义来引用类，不会触发此类的初始化。\n *\n * @author ylb\n *\n */\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        SuperClass[] superClasses = new SuperClass[10];\n    }\n\n}\n```\n\n这段代码不会触发父类的初始化，但会触发“\\[L 全类名”这个类的初始化，它由虚拟机自动生成，直接继承自 java.lang.Object，创建动作由字节码指令 newarray 触发。\n\n#### Demo3\n\n```java\n/**\n * 被动引用 Demo3:\n * 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。\n *\n * @author ylb\n *\n */\nclass ConstClass {\n    static {\n        System.out.println(\"ConstClass init!\");\n    }\n\n    public static final String HELLO_BINGO = \"Hello Bingo\";\n\n}\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        System.out.println(ConstClass.HELLO_BINGO);\n    }\n\n}\n```\n\n编译通过之后，常量存储到 NotInitialization 类的常量池中，NotInitialization 的 Class 文件中并没有 ConstClass 类的符号引用入口，这两个类在编译成 Class 之后就没有任何联系了。\n\n### 7.4 接口的加载过程\n\n接口加载过程与类加载过程稍有不同。\n\n当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，当真正用到父接口的时候才会初始化。\n### 7.5 类加载的过程\n\n类加载过程包括 5 个阶段：加载、验证、准备、解析和初始化。\n\n### 7.6 加载\n\n#### 加载的过程\n\n“加载”是“类加载”过程的一个阶段，不能混淆这两个名词。在加载阶段，虚拟机需要完成 3 件事：\n\n- 通过类的全限定名获取该类的二进制字节流。\n- 将二进制字节流所代表的静态结构转化为方法区的运行时数据结构。\n- 在内存中创建一个代表该类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。\n\n#### 获取二进制字节流\n\n对于 Class 文件，虚拟机没有指明要从哪里获取、怎样获取。除了直接从编译好的 .class 文件中读取，还有以下几种方式：\n\n- 从 zip 包中读取，如 jar、war 等\n- 从网络中获取，如 Applet\n- 通过动态代理技术生成代理类的二进制字节流\n- 由 JSP 文件生成对应的 Class 类\n- 从数据库中读取，如 有些中间件服务器可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n#### “非数组类”与“数组类”加载比较\n\n- 非数组类加载阶段可以使用系统提供的引导类加载器，也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器控制字节流的获取方式（如重写一个类加载器的 `loadClass()` 方法）\n- 数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的，再由类加载器创建数组中的元素类。\n\n#### 注意事项\n\n- 虚拟机规范未规定 Class 对象的存储位置，对于 HotSpot 虚拟机而言，Class 对象比较特殊，它虽然是对象，但存放在方法区中。\n- 加载阶段与连接阶段的部分内容交叉进行，加载阶段尚未完成，连接阶段可能已经开始了。但这两个阶段的开始时间仍然保持着固定的先后顺序。\n\n### 7.7 验证\n\n#### 验证的重要性\n\n验证阶段确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n\n#### 验证的过程\n\n- 文件格式验证 验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，验证点如下：\n  - 是否以魔数 0XCAFEBABE 开头\n  - 主次版本号是否在当前虚拟机处理范围内\n  - 常量池是否有不被支持的常量类型\n  - 指向常量的索引值是否指向了不存在的常量\n  - CONSTANT_Utf8_info 型的常量是否有不符合 UTF8 编码的数据\n  - ......\n- 元数据验证 对字节码描述信息进行语义分析，确保其符合 Java 语法规范。\n- 字节码验证 本阶段是验证过程中最复杂的一个阶段，是对方法体进行语义分析，保证方法在运行时不会出现危害虚拟机的事件。\n- 符号引用验证 本阶段发生在解析阶段，确保解析正常执行。\n\n### 7.8 准备\n\n准备阶段是正式为类变量（或称“静态成员变量”）分配内存并设置初始值的阶段。这些变量（不包括实例变量）所使用的内存都在方法区中进行分配。\n\n初始值“通常情况下”是数据类型的零值（0, null...），假设一个类变量的定义为：\n\n```java\npublic static int value = 123;\n```\n\n那么变量 value 在准备阶段过后的初始值为 0 而不是 123，因为这时候尚未开始执行任何 Java 方法。\n\n存在“特殊情况”：如果类字段的字段属性表中存在 ConstantValue 属性，那么在准备阶段 value 就会被初始化为 ConstantValue 属性所指定的值，假设上面类变量 value 的定义变为：\n\n```java\npublic static final int value = 123;\n```\n\n那么在准备阶段虚拟机会根据 ConstantValue 的设置将 value 赋值为 123。\n\n### 7.9 解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n### 7.10 初始化\n\n类初始化阶段是类加载过程的最后一步，是执行类构造器 `<clinit>()` 方法的过程。\n\n`<clinit>()` 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {} 块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。\n\n静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但不能访问。如下方代码所示：\n\n```java\npublic class Test {\n    static {\n        i = 0;  // 给变量赋值可以正常编译通过\n        System.out.println(i);  // 这句编译器会提示“非法向前引用”\n    }\n    static int i = 1;\n}\n```\n\n`<clinit>()` 方法不需要显式调用父类构造器，虚拟机会保证在子类的 `<clinit>()` 方法执行之前，父类的 `<clinit>()` 方法已经执行完毕。\n\n由于父类的 `<clinit>()` 方法先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。如下方代码所示：\n\n```java\nstatic class Parent {\n    public static int A = 1;\n    static {\n        A = 2;\n    }\n}\n\nstatic class Sub extends Parent {\n    public static int B = A;\n}\n\npublic static void main(String[] args) {\n    System.out.println(Sub.B); // 输出 2\n}\n```\n\n`<clinit>()` 方法不是必需的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成 `<clinit>()` 方法。\n\n接口中不能使用静态代码块，但接口也需要通过 `<clinit>()` 方法为接口中定义的静态成员变量显式初始化。但接口与类不同，接口的 `<clinit>()` 方法不需要先执行父类的 `<clinit>()` 方法，只有当父接口中定义的变量使用时，父接口才会初始化。\n\n虚拟机会保证一个类的 `<clinit>()` 方法在多线程环境中被正确加锁、同步。如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 `<clinit>()` 方法。\n\n\n\n## 8.类加载器\n\n### 8.1 类与类加载器\n\n#### 判断类是否“相等”\n\n任意一个类，都由**加载它的类加载器**和这个**类本身**一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都有一个独立的类名称空间。\n\n因此，比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必定不相等。\n\n这里的“相等”，包括代表类的 Class 对象的 `equals()` 方法、`isInstance()` 方法的返回结果，也包括使用 instanceof 关键字做对象所属关系判定等情况。\n\n#### 加载器种类\n\n系统提供了 3 种类加载器：\n\n- 启动类加载器（Bootstrap ClassLoader）： 负责将存放在 `<JAVA_HOME>\\lib` 目录中的，并且能被虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。\n- 扩展类加载器（Extension ClassLoader）： 负责加载 `<JAVA_HOME>\\lib\\ext` 目录中的所有类库，开发者可以直接使用扩展类加载器。\n- 应用程序类加载器（Application ClassLoader）： 由于这个类加载器是 ClassLoader 中的 `getSystemClassLoader()` 方法的返回值，所以一般也称它为“系统类加载器”。它负责加载用户类路径（classpath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n![ClassLoader](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/classloader.png)\n\n当然，如果有必要，还可以加入自己定义的类加载器。\n\n### 8.2 双亲委派模型\n\n#### 什么是双亲委派模型\n\n双亲委派模型是描述类加载器之间的层次关系。它要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。（父子关系一般不会以继承的关系实现，而是以组合关系来复用父加载器的代码）\n\n#### 工作过程\n\n如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（找不到所需的类）时，子加载器才会尝试自己去加载。\n\n在 java.lang.ClassLoader 中的 `loadClass` 方法中实现该过程。\n\n#### 为什么使用双亲委派模型\n\n像 java.lang.Object 这些存放在 rt.jar 中的类，无论使用哪个类加载器加载，最终都会委派给最顶端的启动类加载器加载，从而使得不同加载器加载的 Object 类都是同一个。\n\n相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为 java.lang.Object 的类，并放在 classpath 下，那么系统将会出现多个不同的 Object 类，Java 类型体系中最基础的行为也就无法保证。\n","source":"_posts/java_jvm.md","raw":"---\ntitle: 筑基系列-JVM基础知识小抄版\ndate: 2020-07-31 14:16:55\ncover: true\ntags: \n    - JVM\ncategory: \n\t- 框架\nsummary: JVM 内存结构/HotSpot 虚拟机对象探秘/垃圾收集策略与算法/HotSpot 垃圾收集器/内存分配与回收策略/JVM 性能调优/类文件结构/类加载的时机/类加载的过程/类加载器\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n# 筑基系列-JVM基础知识小抄版\n\n## 目录\n\n[toc]\n\n## 1.JVM 内存结构\n\nJava 虚拟机的内存空间分为 5 个部分：\n\n- 程序计数器\n- Java 虚拟机栈\n- 本地方法栈\n- 堆\n- 方法区\n\n![jvm-memory-structure](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-memory-structure.jpg)\n\nJDK 1.8 同 JDK 1.7 比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元数据空间并不在虚拟机中，而是使用本地内存。\n\n### 1.1 程序计数器（PC 寄存器）\n\n#### 程序计数器的定义\n\n程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为`Undefined`。\n\n#### 程序计数器的作用\n\n- 字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制。\n- 在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。\n\n#### 程序计数器的特点\n\n- 是一块较小的内存空间。\n- 线程私有，每条线程都有自己的程序计数器。\n- 生命周期：随着线程的创建而创建，随着线程的结束而销毁。\n- 是唯一一个不会出现`OutOfMemoryError`的内存区域。\n\n### 1.2 Java 虚拟机栈（Java 栈）\n\n#### Java 虚拟机栈的定义\n\nJava 虚拟机栈是描述 Java 方法运行过程的内存模型。\n\nJava 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做“栈帧”的区域，用于存放该方法运行过程中的一些信息，如：\n\n- 局部变量表\n- 操作数栈\n- 动态链接\n- 方法出口信息\n- ......\n\n![jvm-stack](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-stack.jpg)\n\n#### 压栈出栈过程\n\n当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。\n\nJava 虚拟机栈的栈顶的栈帧是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。\n\n方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。\n\n> 由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。\n\n#### Java 虚拟机栈的特点\n\n- 局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可。在方法运行过程中，局部变量表的大小不会发生改变。\n- Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。\n  - StackOverFlowError 若 Java 虚拟机栈的大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。\n  - OutOfMemoryError 若允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展时，抛出 OutOfMemoryError 异常。\n- Java 虚拟机栈也是线程私有，随着线程创建而创建，随着线程的结束而销毁。\n\n> 出现 StackOverFlowError 时，内存空间可能还有很多。\n\n### 1.3 本地方法栈（C 栈）\n\n#### 本地方法栈的定义\n\n本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。\n\n#### 栈帧变化过程\n\n本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、动态链接、方法出口信息等。\n\n方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMemoryError 异常。\n\n> 如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。\n\n### 1.4 堆\n\n#### 堆的定义\n\n堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。\n\n#### 堆的特点\n\n- 线程共享，整个 Java 虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。\n- 在虚拟机启动时创建。\n- 是垃圾回收的主要场所。\n- 进一步可分为：新生代（Eden 区：`From Survior`，`To Survivor`）、老年代。\n\n不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。\n\n堆的大小既可以固定也可以扩展，但对于主流的虚拟机，堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已无法再扩展时，就抛出 OutOfMemoryError 异常。\n\n> Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。\n\n### 1.5 方法区\n\n#### 方法区的定义\n\nJava 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：\n\n- 已经被虚拟机加载的类信息\n- 常量\n- 静态变量\n- 即时编译器编译后的代码\n\n#### 方法区的特点\n\n- 线程共享。 方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。\n- 永久代。 方法区中的信息一般需要长期存在，而且它又是堆的逻辑分区，因此用堆的划分方法，把方法区称为“永久代”。\n- 内存回收效率低。 方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。\n- Java 虚拟机规范对方法区的要求比较宽松。 和堆一样，允许固定大小，也允许动态扩展，还允许不实现垃圾回收。\n\n#### 运行时常量池\n\n方法区中存放：类信息、常量、静态变量、即时编译器编译后的代码。常量就存放在运行时常量池中。\n\n当类被 Java 虚拟机加载后， .class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的 `intern()` 方法就能在运行期间向常量池中添加字符串常量。\n\n### 1.6 直接内存（堆外内存）\n\n直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。\n\n#### 操作直接内存\n\n在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的`DirectByteBuffer`对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提高了数据操作的效率。\n\n直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。\n\n#### 直接内存与堆内存比较\n\n- 直接内存申请空间耗费更高的性能\n- 直接内存读取 IO 的性能要优于普通的堆内存。\n- 直接内存作用链： 本地 IO -&gt; 直接内存 -&gt; 本地 IO\n- 堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO\n\n> 服务器管理员在配置虚拟机参数时，会根据实际内存设置`-Xmx`等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现`OutOfMemoryError`异常。\n\n\n## 2.HotSpot 虚拟机对象探秘\n\n### 2.1 对象的内存布局\n\n在 HotSpot 虚拟机中，对象的内存布局分为以下 3 块区域：\n\n- 对象头（Header）\n- 实例数据（Instance Data）\n- 对齐填充（Padding）\n\n![object-memory-layout.png](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/object-memory-layout.png)\n\n#### 对象头\n\n对象头记录了对象在运行过程中所需要使用的一些数据：\n\n- 哈希码\n- GC 分代年龄\n- 锁状态标志\n- 线程持有的锁\n- 偏向线程 ID\n- 偏向时间戳\n\n对象头可能包含类型指针，通过该指针能确定对象属于哪个类。如果对象是一个数组，那么对象头还会包括数组长度。\n\n#### 实例数据\n\n实例数据部分就是成员变量的值，其中包括父类成员变量和本类成员变量。\n\n#### 对齐填充\n\n用于确保对象的总长度为 8 字节的整数倍。\n\nHotSpot VM 的自动内存管理系统要求对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。\n\n> 对齐填充并不是必然存在，也没有特别的含义，它仅仅起着占位符的作用。\n\n### 2.2 对象的创建过程\n\n#### 类加载检查\n\n虚拟机在解析`.class`文件时，若遇到一条 new 指令，首先它会去检查常量池中是否有这个类的符号引用，并且检查这个符号引用所代表的类是否已被加载、解析和初始化过。如果没有，那么必须先执行相应的类加载过程。\n\n#### 为新生对象分配内存\n\n对象所需内存的大小在类加载完成后便可完全确定，接下来从堆中划分一块对应大小的内存空间给新的对象。分配堆中内存有两种方式：\n\n- **指针碰撞**<br>\n  如果 Java **堆中内存绝对规整**（说明采用的是“**复制算法**”或“**标记整理法**”），空闲内存和已使用内存中间放着一个指针作为分界点指示器，那么分配内存时只需要把指针向空闲内存挪动一段与对象大小一样的距离，这种分配方式称为“**指针碰撞**”。\n\n- **空闲列表**<br>\n  如果 Java **堆中内存并不规整**，已使用的内存和空闲内存交错（说明采用的是**标记-清除法**，有碎片），此时没法简单进行指针碰撞， VM 必须维护一个列表，记录其中哪些内存块空闲可用。分配之时从空闲列表中找到一块足够大的内存空间划分给对象实例。这种方式称为“**空闲列表**”。\n\n#### 初始化\n\n分配完内存后，为对象中的成员变量赋上初始值，设置对象头信息，调用对象的构造函数方法进行初始化。\n\n至此，整个对象的创建过程就完成了。\n\n### 2.3 对象的访问方式\n\n所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配的。也就是说在建立一个对象时两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针（引用）而已。 那么根据引用存放的地址类型的不同，对象有不同的访问方式。\n\n#### 句柄访问方式\n\n堆中需要有一块叫做“句柄池”的内存空间，句柄中包含了对象实例数据与类型数据各自的具体地址信息。\n\n引用类型的变量存放的是该对象的句柄地址（reference）。访问对象时，首先需要通过引用类型的变量找到该对象的句柄，然后根据句柄中对象的地址找到对象。\n\n![handle-access](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/handle-access.jpg)\n\n#### 直接指针访问方式\n\n引用类型的变量直接存放对象的地址，从而不需要句柄池，通过引用能够直接访问对象。但对象所在的内存空间需要额外的策略存储对象所属的类信息的地址。\n\n![direct-pointer](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/direct-pointer.jpg)\n\n需要说明的是，HotSpot 采用第二种方式，即直接指针方式来访问对象，只需要一次寻址操作，所以在性能上比句柄访问方式快一倍。但像上面所说，它需要**额外的策略**来存储对象在方法区中类信息的地址。\n\n\n\n## 3.垃圾收集策略与算法\n\n程序计数器、虚拟机栈、本地方法栈随线程而生，也随线程而灭；栈帧随着方法的开始而入栈，随着方法的结束而出栈。这几个区域的内存分配和回收都具有确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。\n\n而对于 Java 堆和方法区，我们只有在程序运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的正是这部分内存。\n\n### 3.1 判定对象是否存活\n\n若一个对象不被任何对象或变量引用，那么它就是无效对象，需要被回收。\n\n#### 引用计数法\n\n在对象头维护着一个 counter 计数器，对象被引用一次则计数器 +1；若引用失效则计数器 -1。当计数器为 0 时，就认为该对象无效了。\n\n引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。但是主流的 Java 虚拟机里没有选用引用计数算法来管理内存，主要是因为它很难解决对象之间循环引用的问题。\n\n> 举个栗子 👉 对象 objA 和 objB 都有字段 instance，令 objA.instance = objB 并且 objB.instance = objA，由于它们互相引用着对方，导致它们的引用计数都不为 0，于是引用计数算法无法通知 GC 收集器回收它们。\n\n#### 可达性分析法\n\n所有和 GC Roots 直接或间接关联的对象都是有效对象，和 GC Roots 没有关联的对象就是无效对象。\n\nGC Roots 是指：\n\n- Java 虚拟机栈（栈帧中的本地变量表）中引用的对象\n- 本地方法栈中引用的对象\n- 方法区中常量引用的对象\n- 方法区中类静态属性引用的对象\n\nGC Roots 并不包括堆中对象所引用的对象，这样就不会有循环引用的问题。\n\n### 3.2 引用的种类\n\n判定对象是否存活与“引用”有关。在 JDK 1.2 以前，Java 中的引用定义很传统，一个对象只有被引用或者没有被引用两种状态，我们希望能描述这一类对象：当内存空间还足够时，则保留在内存中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。\n\n在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为了以下四种。不同的引用类型，主要体现的是对象不同的可达性状态`reachable`和垃圾收集的影响。\n\n#### 强引用（Strong Reference）\n\n类似 \"`Object obj = new Object()`\" 这类的引用，就是强引用，只要强引用存在，垃圾收集器永远不会回收被引用的对象。但是，如果我们**错误地保持了强引用**，比如：赋值给了 static 变量，那么对象在很长一段时间内不会被回收，会产生内存泄漏。\n\n#### 软引用（Soft Reference）\n\n软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来**实现内存敏感的缓存**，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。\n\n#### 弱引用（Weak Reference）\n\n弱引用的**强度比软引用更弱**一些。当 JVM 进行垃圾回收时，**无论内存是否充足，都会回收**只被弱引用关联的对象。\n\n#### 虚引用（Phantom Reference）\n\n虚引用也称幽灵引用或者幻影引用，它是**最弱**的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。它仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制。\n\n### 3.3 回收堆中无效对象\n\n对于可达性分析中不可达的对象，也并不是没有存活的可能。\n\n#### 判定 finalize() 是否有必要执行\n\nJVM 会判断此对象是否有必要执行 finalize() 方法，如果对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，那么视为“没有必要执行”。那么对象基本上就真的被回收了。\n\n如果对象被判定为有必要执行 finalize() 方法，那么对象会被放入一个 F-Queue 队列中，虚拟机会以较低的优先级执行这些 finalize()方法，但不会确保所有的 finalize() 方法都会执行结束。如果 finalize() 方法出现耗时操作，虚拟机就直接停止指向该方法，将对象清除。\n\n#### 对象重生或死亡\n\n如果在执行 finalize() 方法时，将 this 赋给了某一个引用，那么该对象就重生了。如果没有，那么就会被垃圾收集器清除。\n\n> 任何一个对象的 finalize() 方法只会被系统自动调用一次，如果对象面临下一次回收，它的 finalize() 方法不会被再次执行，想继续在 finalize() 中自救就失效了。\n\n### 3.3 回收方法区内存\n\n方法区中存放生命周期较长的类信息、常量、静态变量，每次垃圾收集只有少量的垃圾被清除。方法区中主要清除两种垃圾：\n\n- 废弃常量\n- 无用的类\n\n#### 判定废弃常量\n\n只要常量池中的常量不被任何变量或对象引用，那么这些常量就会被清除掉。比如，一个字符串 \"bingo\" 进入了常量池，但是当前系统没有任何一个 String 对象引用常量池中的 \"bingo\" 常量，也没有其它地方引用这个字面量，必要的话，\"bingo\"常量会被清理出常量池。\n\n#### 判定无用的类\n\n判定一个类是否是“无用的类”，条件较为苛刻。\n\n- 该类的所有对象都已经被清除\n- 加载该类的 ClassLoader 已经被回收\n- 该类的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。\n\n> 一个类被虚拟机加载进方法区，那么在堆中就会有一个代表该类的对象：java.lang.Class。这个对象在类被加载进方法区时创建，在方法区该类被删除时清除。\n\n\n\n### 3,4 垃圾收集算法\n\n学会了如何判定无效对象、无用类、废弃常量之后，剩余工作就是回收这些垃圾。常见的垃圾收集算法有以下几个：\n\n#### 标记-清除算法\n\n**标记**的过程是：遍历所有的 `GC Roots`，然后将所有 `GC Roots` 可达的对象**标记为存活的对象**。\n\n**清除**的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。与此同时，清除那些被标记过的对象的标记，以便下次的垃圾回收。\n\n这种方法有两个**不足**：\n\n- 效率问题：标记和清除两个过程的效率都不高。\n- 空间问题：标记清除之后会产生大量不连续的内存碎片，碎片太多可能导致以后需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。\n\n#### 复制算法（新生代）\n\n为了解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完，需要进行垃圾收集时，就将存活者的对象复制到另一块上面，然后将第一块内存全部清除。这种算法有优有劣：\n\n- 优点：不会有内存碎片的问题。\n- 缺点：内存缩小为原来的一半，浪费空间。\n\n为了解决空间利用率问题，可以将内存分为三块： Eden、From Survivor、To Survivor，比例是 8:1:1，每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。\n\n但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。\n\n#### 分配担保\n\n为对象分配内存空间时，如果 Eden+Survivor 中空闲区域无法装下该对象，会触发 MinorGC 进行垃圾收集。但如果 Minor GC 过后依然有超过 10% 的对象存活，这样存活的对象直接通过分配担保机制进入老年代，然后再将新对象存入 Eden 区。\n\n#### 标记-整理算法（老年代）\n\n**标记**：它的第一个阶段与**标记/清除算法**是一模一样的，均是遍历 `GC Roots`，然后将存活的对象标记。\n\n**整理**：移动所有**存活的对象**，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。\n\n这是一种老年代的垃圾收集算法。老年代的对象一般寿命比较长，因此每次垃圾回收会有大量对象存活，如果采用复制算法，每次需要复制大量存活的对象，效率很低。\n\n#### 分代收集算法\n\n根据对象存活周期的不同，将内存划分为几块。一般是把 Java 堆分为新生代和老年代，针对各个年代的特点采用最适当的收集算法。\n\n- 新生代：复制算法\n- 老年代：标记-清除算法、标记-整理算法\n\n\n\n## 4.HotSpot 垃圾收集器\n\nHotSpot 虚拟机提供了多种垃圾收集器，每种收集器都有各自的特点，虽然我们要对各个收集器进行比较，但并非为了挑选出一个最好的收集器。我们选择的只是对具体应用最合适的收集器。\n\n### 4.1 新生代垃圾收集器\n\n#### Serial 垃圾收集器（单线程）\n\n只开启**一条** GC 线程进行垃圾回收，并且在垃圾收集过程中停止一切用户线程\\(Stop The World\\)。\n\n一般客户端应用所需内存较小，不会创建太多对象，而且堆内存不大，因此垃圾收集器回收时间短，即使在这段时间停止一切用户线程，也不会感觉明显卡顿。因此 Serial 垃圾收集器**适合客户端**使用。\n\n由于 Serial 收集器只使用一条 GC 线程，避免了线程切换的开销，从而简单高效。\n\n![Serial](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/serial.png)\n\n#### ParNew 垃圾收集器（多线程）\n\nParNew 是 Serial 的多线程版本。由多条 GC 线程并行地进行垃圾清理。但清理过程依然需要 Stop The World。\n\nParNew 追求“**低停顿时间**”,与 Serial 唯一区别就是使用了多线程进行垃圾收集，在多 CPU 环境下性能比 Serial 会有一定程度的提升；但**线程切换需要额外的开销**，因此在单 CPU 环境中表现不如 Serial。\n\n![ParNew](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/parnew.png)\n\n#### Parallel Scavenge 垃圾收集器（多线程）\n\nParallel Scavenge 和 ParNew 一样，都是多线程、新生代垃圾收集器。但是两者有巨大的不同点：\n\n- Parallel Scavenge：追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。\n- ParNew：追求降低用户停顿时间，适合交互式应用。\n\n吞吐量 = 运行用户代码时间 / \\(运行用户代码时间 + 垃圾收集时间\\)\n\n追求高吞吐量，可以通过减少 GC 执行实际工作的时间，然而，仅仅偶尔运行 GC 意味着每当 GC 运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。单个 GC 需要花更多的时间来完成，从而导致更高的暂停时间。而考虑到低暂停时间，最好频繁运行 GC 以便更快速完成，反过来又导致吞吐量下降。\n\n- 通过参数 -XX:GCTimeRadio 设置垃圾回收时间占总 CPU 时间的百分比。\n- 通过参数 -XX:MaxGCPauseMillis 设置垃圾处理过程最久停顿时间。\n- 通过命令 -XX:+UseAdaptiveSizePolicy 开启自适应策略。我们只要设置好堆的大小和 MaxGCPauseMillis 或 GCTimeRadio，收集器会自动调整新生代的大小、Eden 和 Survivor 的比例、对象进入老年代的年龄，以最大程度上接近我们设置的 MaxGCPauseMillis 或 GCTimeRadio。\n\n### 4.2 老年代垃圾收集器\n\n#### Serial Old 垃圾收集器（单线程）\n\nSerial Old 收集器是 Serial 的老年代版本，都是单线程收集器，只启用一条 GC 线程，都适合客户端应用。它们唯一的区别就是：Serial Old 工作在老年代，使用“标记-整理”算法；Serial 工作在新生代，使用“复制”算法。\n\n#### Parallel Old 垃圾收集器（多线程）\n\nParallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 CPU 吞吐量。\n\n#### CMS 垃圾收集器\n\nCMS\\(Concurrent Mark Sweep，并发标记清除\\)收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。\n\n- 初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。\n- 并发标记：使用**多条**标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。\n- 重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。\n- 并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。\n\n并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，**总体上说**，CMS 收集器的内存回收过程是与用户线程**一起并发执行**的。\n\n![CMS](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/cms.png)\n\nCMS 的缺点：\n\n- 吞吐量低\n- 无法处理浮动垃圾，导致频繁 Full GC\n- 使用“标记-清除”算法产生碎片空间\n\n对于产生碎片空间的问题，可以通过开启 -XX:+UseCMSCompactAtFullCollection，在每次 Full GC 完成后都会进行一次内存压缩整理，将零散在各处的对象整理到一块。设置参数 -XX:CMSFullGCsBeforeCompaction 告诉 CMS，经过了 N 次 Full GC 之后再进行一次内存整理。\n\n### 4.3 G1 通用垃圾收集器\n\nG1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，因此可以获得最大的回收效率。\n\n从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\n\n这里抛个问题 👇<br>\n一个对象和它内部所引用的对象可能不在同一个 Region 中，那么当垃圾回收时，是否需要扫描整个堆内存才能完整地进行一次可达性分析？\n\n并不！每个 Region 都有一个 Remembered Set，用于记录本区域中所有对象引用的对象所在的区域，进行可达性分析时，只要在 GC Roots 中再加上 Remembered Set 即可防止对整个堆内存进行遍历。\n\n如果不计算维护 Remembered Set 的操作，G1 收集器的工作过程分为以下几个步骤：\n\n- 初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。\n- 并发标记：使用**一条**标记线程与用户线程并发执行。此过程进行可达性分析，速度很慢。\n- 最终标记：Stop The World，使用多条标记线程并发执行。\n- 筛选回收：回收废弃对象，此时也要 Stop The World，并使用多条筛选回收线程并发执行。\n\n\n\n## 5.内存分配与回收策略\n\n对象的内存分配，就是在堆上分配（也可能经过 JIT 编译后被拆散为标量类型并间接在栈上分配），对象主要分配在新生代的 Eden 区上，少数情况下可能直接分配在老年代，**分配规则不固定**，取决于当前使用的垃圾收集器组合以及相关的参数配置。\n\n以下列举几条最普遍的内存分配规则，供大家学习。\n\n### 5.1 对象优先在 Eden 分配\n\n大多数情况下，对象在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。\n\n👇**Minor GC** vs **Major GC**/**Full GC**：\n\n- Minor GC：回收新生代（包括 Eden 和 Survivor 区域），因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。\n- Major GC / Full GC: 回收老年代，出现了 Major GC，经常会伴随至少一次的 Minor GC，但这并非绝对。Major GC 的速度一般会比 Minor GC 慢 10 倍 以上。\n\n> 在 JVM 规范中，Major GC 和 Full GC 都没有一个正式的定义，所以有人也简单地认为 Major GC 清理老年代，而 Full GC 清理整个内存堆。\n\n### 5.2 大对象直接进入老年代\n\n大对象是指需要大量连续内存空间的 Java 对象，如很长的字符串或数据。\n\n一个大对象能够存入 Eden 区的概率比较小，发生分配担保的概率比较大，而分配担保需要涉及大量的复制，就会造成效率低下。\n\n虚拟机提供了一个 -XX:PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配，这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制。（还记得吗，新生代采用复制算法回收垃圾）\n\n### 5.3 长期存活的对象将进入老年代\n\nJVM 给每个对象定义了一个对象年龄计数器。当新生代发生一次 Minor GC 后，存活下来的对象年龄 +1，当年龄超过一定值时，就将超过该值的所有对象转移到老年代中去。\n\n使用 `-XXMaxTenuringThreshold` 设置新生代的最大年龄，只要超过该参数的新生代对象都会被转移到老年代中去。\n\n### 5.4 动态对象年龄判定\n\n如果当前新生代的 Survivor 中，相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄 &gt;= 该年龄的对象就可以直接进入老年代，无须等到 `MaxTenuringThreshold` 中要求的年龄。\n\n### 5.5 空间分配担保\n\nJDK 6 Update 24 之前的规则是这样的：  \n 在发生 Minor GC 之前，虚拟机会先检查**老年代最大可用的连续空间是否大于新生代所有对象总空间**， 如果这个条件成立，Minor GC 可以确保是安全的； 如果不成立，则虚拟机会查看 `HandlePromotionFailure` 值是否设置为允许担保失败， 如果是，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小， 如果大于，将尝试进行一次 Minor GC,尽管这次 Minor GC 是有风险的； 如果小于，或者 `HandlePromotionFailure` 设置不允许冒险，那此时也要改为进行一次 Full GC。\n\nJDK 6 Update 24 之后的规则变为：  \n 只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。\n\n通过清除老年代中废弃数据来扩大老年代空闲空间，以便给新生代作担保。\n\n这个过程就是分配担保。\n\n---\n\n👇 总结一下有哪些情况可能会触发 JVM 进行 Full GC。\n\n1. **`System.gc()` 方法的调用**\n   此方法的调用是建议 JVM 进行 Full GC，注意这**只是建议而非一定**，但在很多情况下它会触发 Full GC，从而增加 Full GC 的频率。通常情况下我们只需要让虚拟机自己去管理内存即可，我们可以通过 -XX:+ DisableExplicitGC 来禁止调用 `System.gc()`。\n1. **老年代空间不足**\n   老年代空间不足会触发 Full GC 操作，若进行该操作后空间依然不足，则会抛出如下错误：`java.lang.OutOfMemoryError: Java heap space`\n1. **永久代空间不足**\n   JVM 规范中运行时数据区域中的方法区，在 HotSpot 虚拟机中也称为永久代（Permanet Generation），存放一些类信息、常量、静态变量等数据，当系统要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，会触发 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：`java.lang.OutOfMemoryError: PermGen space `\n1. **CMS GC 时出现 `promotion failed` 和 `concurrent mode failure`**\n   promotion failed，就是上文所说的担保失败，而 concurrent mode failure 是在执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足造成的。\n1. **统计得到的 Minor GC 晋升到旧生代的平均大小大于老年代的剩余空间。**# JVM 性能调优\n\n在高性能硬件上部署程序，目前主要有两种方式：\n\n- 通过 64 位 JDK 来使用大内存；\n- 使用若干个 32 位虚拟机建立逻辑集群来利用硬件资源。\n\n### 5.6 使用 64 位 JDK 管理大内存\n\n堆内存变大后，虽然垃圾收集的频率减少了，但每次垃圾回收的时间变长。 如果堆内存为 14 G，那么每次 Full GC 将长达数十秒。如果 Full GC 频繁发生，那么对于一个网站来说是无法忍受的。\n\n对于用户交互性强、对停顿时间敏感的系统，可以给 Java 虚拟机分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，至少要低到不会影响用户使用。\n\n可能面临的问题：\n\n- 内存回收导致的长时间停顿；\n- 现阶段，64 位 JDK 的性能普遍比 32 位 JDK 低；\n- 需要保证程序足够稳定，因为这种应用要是产生堆溢出几乎就无法产生堆转储快照（因为要产生超过 10GB 的 Dump 文件），哪怕产生了快照也几乎无法进行分析；\n- 相同程序在 64 位 JDK 消耗的内存一般比 32 位 JDK 大，这是由于指针膨胀，以及数据类型对齐补白等因素导致的。\n\n### 5.7 使用 32 位 JVM 建立逻辑集群\n\n在一台物理机器上启动多个应用服务器进程，每个服务器进程分配不同端口， 然后在前端搭建一个负载均衡器，以反向代理的方式来分配访问请求。\n\n考虑到在一台物理机器上建立逻辑集群的目的仅仅是为了尽可能利用硬件资源，并不需要关心状态保留、热转移之类的高可用性能需求， 也不需要保证每个虚拟机进程有绝对的均衡负载，因此使用无 Session 复制的亲合式集群是一个不错的选择。 我们仅仅需要保障集群具备亲合性，也就是均衡器按一定的规则算法（一般根据 SessionID 分配） 将一个固定的用户请求永远分配到固定的一个集群节点进行处理即可。\n\n可能遇到的问题：\n\n- 尽量避免节点竞争全局资源，如磁盘竞争，各个节点如果同时访问某个磁盘文件的话，很可能导致 IO 异常；\n- 很难高效利用资源池，如连接池，一般都是在节点建立自己独立的连接池，这样有可能导致一些节点池满了而另外一些节点仍有较多空余；\n- 各个节点受到 32 位的内存限制；\n- 大量使用本地缓存的应用，在逻辑集群中会造成较大的内存浪费，因为每个逻辑节点都有一份缓存，这时候可以考虑把本地缓存改成集中式缓存。\n\n### 5.8 调优案例分析与实战\n\n#### 场景描述\n\n一个小型系统，使用 32 位 JDK，4G 内存，测试期间发现服务端不定时抛出内存溢出异常。 加入 -XX:+HeapDumpOnOutOfMemoryError（添加这个参数后，堆内存溢出时就会输出异常日志）， 但再次发生内存溢出时，没有生成相关异常日志。\n\n#### 分析\n\n在 32 位 JDK 上，1.6G 分配给堆，还有一部分分配给 JVM 的其他内存，直接内存最大也只能在剩余的 0.4G 空间中分出一部分， 如果使用了 NIO，JVM 会在 JVM 内存之外分配内存空间，那么就要小心“直接内存”不足时发生内存溢出异常了。\n\n#### 直接内存的回收过程\n\n直接内存虽然不是 JVM 内存空间，但它的垃圾回收也由 JVM 负责。\n\n垃圾收集进行时，虚拟机虽然会对直接内存进行回收， 但是直接内存却不能像新生代、老年代那样，发现空间不足了就通知收集器进行垃圾回收， 它只能等老年代满了后 Full GC，然后“顺便”帮它清理掉内存的废弃对象。 否则只能一直等到抛出内存溢出异常时，先 catch 掉，再在 catch 块里大喊 “`System.gc()`”。 要是虚拟机还是不听，那就只能眼睁睁看着堆中还有许多空闲内存，自己却不得不抛出内存溢出异常了。\n\n\n\n## 6.类文件结构\n\n### 6.1 JVM 的“无关性”\n\n谈论 JVM 的无关性，主要有以下两个：\n\n- 平台无关性：任何操作系统都能运行 Java 代码\n- 语言无关性： JVM 能运行除 Java 以外的其他代码\n\nJava 源代码首先需要使用 Javac 编译器编译成 .class 文件，然后由 JVM 执行 .class 文件，从而程序开始运行。\n\nJVM 只认识 .class 文件，它不关心是何种语言生成了 .class 文件，只要 .class 文件符合 JVM 的规范就能运行。 目前已经有 JRuby、Jython、Scala 等语言能够在 JVM 上运行。它们有各自的语法规则，不过它们的编译器 都能将各自的源码编译成符合 JVM 规范的 .class 文件，从而能够借助 JVM 运行它们。\n\n> Java 语言中的各种变量、关键字和运算符号的语义最终都是由多条字节码命令组合而成的， 因此字节码命令所能提供的语义描述能力肯定会比 Java 语言本身更加强大。 因此，有一些 Java 语言本身无法有效支持的语言特性，不代表字节码本身无法有效支持。\n\n### 6.2 Class 文件结构\n\nClass 文件是二进制文件，它的内容具有严格的规范，文件中没有任何空格，全都是连续的 0/1。Class 文件 中的所有内容被分为两种类型：无符号数、表。\n\n- 无符号数 无符号数表示 Class 文件中的值，这些值没有任何类型，但有不同的长度。u1、u2、u4、u8 分别代表 1/2/4/8 字节的无符号数。\n- 表 由多个无符号数或者其他表作为数据项构成的复合数据类型。\n\nClass 文件具体由以下几个构成:\n\n- 魔数\n- 版本信息\n- 常量池\n- 访问标志\n- 类索引、父类索引、接口索引集合\n- 字段表集合\n- 方法表集合\n- 属性表集合\n\n#### 魔数\n\nClass 文件的头 4 个字节称为魔数，用来表示这个 Class 文件的类型。\n\nClass 文件的魔数是用 16 进制表示的“CAFE BABE”，是不是很具有浪漫色彩？\n\n> 魔数相当于文件后缀名，只不过后缀名容易被修改，不安全，因此在 Class 文件中标识文件类型比较合适。\n\n#### 版本信息\n\n紧接着魔数的 4 个字节是版本信息，5-6 字节表示次版本号，7-8 字节表示主版本号，它们表示当前 Class 文件中使用的是哪个版本的 JDK。\n\n高版本的 JDK 能向下兼容以前版本的 Class 文件，但不能运行以后版本的 Class 文件，即使文件格式并未发生任何变化，虚拟机也必需拒绝执行超过其版本号的 Class 文件。\n\n#### 常量池\n\n版本信息之后就是常量池，常量池中存放两种类型的常量：\n\n- 字面值常量\n\n  字面值常量就是我们在程序中定义的字符串、被 final 修饰的值。\n\n- 符号引用\n\n  符号引用就是我们定义的各种名字：类和接口的全限定名、字段的名字和描述符、方法的名字和描述符。\n\n##### 常量池的特点\n\n- 常量池中常量数量不固定，因此常量池开头放置一个 u2 类型的无符号数，用来存储当前常量池的容量。\n- 常量池的每一项常量都是一个表，表开始的第一位是一个 u1 类型的标志位（tag），代表当前这个常量属于哪种常量类型。\n\n##### 常量池中常量类型\n\n| 类型                             | tag | 描述　                 |\n| -------------------------------- | --- | ---------------------- |\n| CONSTANT_utf8_info               | 1   | UTF-8 编码的字符串     |\n| CONSTANT_Integer_info            | 3   | 整型字面量             |\n| CONSTANT_Float_info              | 4   | 浮点型字面量           |\n| CONSTANT_Long_info               | 5   | 长整型字面量           |\n| CONSTANT_Double_info             | 6   | 双精度浮点型字面量     |\n| CONSTANT_Class_info              | 7   | 类或接口的符号引用     |\n| CONSTANT_String_info             | 8   | 字符串类型字面量       |\n| CONSTANT_Fieldref_info           | 9   | 字段的符号引用         |\n| CONSTANT_Methodref_info          | 10  | 类中方法的符号引用     |\n| CONSTANT_InterfaceMethodref_info | 11  | 接口中方法的符号引用   |\n| CONSTANT_NameAndType_info        | 12  | 字段或方法的符号引用   |\n| CONSTANT_MethodHandle_info       | 15  | 表示方法句柄           |\n| CONSTANT_MethodType_info         | 16  | 标识方法类型           |\n| CONSTANT_InvokeDynamic_info      | 18  | 表示一个动态方法调用点 |\n\n对于 CONSTANT_Class_info（此类型的常量代表一个类或者接口的符号引用），它的二维表结构如下：\n\n| 类型 | 名称       | 数量 |\n| ---- | ---------- | ---- |\n| u1   | tag        | 1    |\n| u2   | name_index | 1    |\n\ntag 是标志位，用于区分常量类型；name_index 是一个索引值，它指向常量池中一个 CONSTANT_Utf8_info 类型常量，此常量代表这个类（或接口）的全限定名，这里 name_index 值若为 0x0002，也即是指向了常量池中的第二项常量。\n\nCONSTANT_Utf8_info 型常量的结构如下：\n\n| 类型 | 名称   | 数量   |\n| ---- | ------ | ------ |\n| u1   | tag    | 1      |\n| u2   | length | 1      |\n| u1   | bytes  | length |\n\ntag 是当前常量的类型；length 表示这个字符串的长度；bytes 是这个字符串的内容（采用缩略的 UTF8 编码）\n\n#### 访问标志\n\n在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否被 abstract/final 修饰。\n\n#### 类索引、父类索引、接口索引集合\n\n类索引和父类索引都是一个 u2 类型的数据，而接口索引集合是一组 u2 类型的数据的集合，Class 文件中由这三项数据来确定类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。\n\n由于 Java 不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。一个类可能实现了多个接口，因此用接口索引集合来描述。这个集合第一项为 u2 类型的数据，表示索引表的容量，接下来就是接口的名字索引。\n\n类索引和父类索引用两个 u2 类型的索引值表示，它们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过该常量总的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。\n\n#### 字段表集合\n\n字段表集合存储本类涉及到的成员变量，包括实例变量和类变量，但不包括方法中的局部变量。\n\n每一个字段表只表示一个成员变量，本类中的所有成员变量构成了字段表集合。字段表结构如下：\n\n| 类型 | 名称             | 数量             | 说明                                                                                                 |\n| ---- | ---------------- | ---------------- | ---------------------------------------------------------------------------------------------------- |\n| u2   | access_flags     | 1                | 字段的访问标志，与类稍有不同                                                                         |\n| u2   | name_index       | 1                | 字段名字的索引                                                                                       |\n| u2   | descriptor_index | 1                | 描述符，用于描述字段的数据类型。 基本数据类型用大写字母表示； 对象类型用“L 对象类型的全限定名”表示。 |\n| u2   | attributes_count | 1                | 属性表集合的长度                                                                                     |\n| u2   | attributes       | attributes_count | 属性表集合，用于存放属性的额外信息，如属性的值。                                                     |\n\n> 字段表集合中不会出现从父类（或接口）中继承而来的字段，但有可能出现原本 Java 代码中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。\n\n#### 方法表集合\n\n方法表结构与属性表类似。\n\nvolatile 关键字 和 transient 关键字不能修饰方法，所以方法表的访问标志中没有 ACC_VOLATILE 和 ACC_TRANSIENT 标志。\n\n方法表的属性表集合中有一张 Code 属性表，用于存储当前方法经编译器编译后的字节码指令。\n\n#### 属性表集合\n\n每个属性对应一张属性表，属性表的结构如下：\n\n| 类型 | 名称                 | 数量             |\n| ---- | -------------------- | ---------------- |\n| u2   | attribute_name_index | 1                |\n| u4   | attribute_length     | 1                |\n| u1   | info                 | attribute_length |\n\n\n## 7.类加载的时机\n\n### 7.1 类的生命周期\n\n类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括以下 7 个阶段：\n\n- 加载\n- 验证\n- 准备\n- 解析\n- 初始化\n- 使用\n- 卸载\n\n验证、准备、解析 3 个阶段统称为连接。\n\n![Load Class](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/loadclass.png)\n\n加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始（注意是“开始”，而不是“进行”或“完成”），而解析阶段则不一定：它在某些情况下可以在初始化后再开始，这是为了支持 Java 语言的运行时绑定。\n\n### 7.2 类加载过程中“初始化”开始的时机\n\nJava 虚拟机规范没有强制约束类加载过程的第一阶段（即：加载）什么时候开始，但对于“初始化”阶段，有着严格的规定。有且仅有 5 种情况必须立即对类进行“初始化”：\n\n- 在遇到 new、putstatic、getstatic、invokestatic 字节码指令时，如果类尚未初始化，则需要先触发其初始化。\n- 对类进行反射调用时，如果类还没有初始化，则需要先触发其初始化。\n- 初始化一个类时，如果其父类还没有初始化，则需要先初始化父类。\n- 虚拟机启动时，用于需要指定一个包含 `main()` 方法的主类，虚拟机会先初始化这个主类。\n- 当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类还没初始化，则需要先触发其初始化。\n\n这 5 种场景中的行为称为对一个类进行**主动引用**，除此之外，其它所有引用类的方式都不会触发初始化，称为**被动引用**。\n\n### 7.3 被动引用演示 Demo\n\n#### Demo1\n\n```java\n/**\n * 被动引用 Demo1:\n * 通过子类引用父类的静态字段，不会导致子类初始化。\n *\n * @author ylb\n *\n */\nclass SuperClass {\n    static {\n        System.out.println(\"SuperClass init!\");\n    }\n\n    public static int value = 123;\n}\n\nclass SubClass extends SuperClass {\n    static {\n        System.out.println(\"SubClass init!\");\n    }\n}\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        System.out.println(SubClass.value);\n        // SuperClass init!\n    }\n\n}\n```\n\n对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。\n\n#### Demo2\n\n```java\n/**\n * 被动引用 Demo2:\n * 通过数组定义来引用类，不会触发此类的初始化。\n *\n * @author ylb\n *\n */\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        SuperClass[] superClasses = new SuperClass[10];\n    }\n\n}\n```\n\n这段代码不会触发父类的初始化，但会触发“\\[L 全类名”这个类的初始化，它由虚拟机自动生成，直接继承自 java.lang.Object，创建动作由字节码指令 newarray 触发。\n\n#### Demo3\n\n```java\n/**\n * 被动引用 Demo3:\n * 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。\n *\n * @author ylb\n *\n */\nclass ConstClass {\n    static {\n        System.out.println(\"ConstClass init!\");\n    }\n\n    public static final String HELLO_BINGO = \"Hello Bingo\";\n\n}\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        System.out.println(ConstClass.HELLO_BINGO);\n    }\n\n}\n```\n\n编译通过之后，常量存储到 NotInitialization 类的常量池中，NotInitialization 的 Class 文件中并没有 ConstClass 类的符号引用入口，这两个类在编译成 Class 之后就没有任何联系了。\n\n### 7.4 接口的加载过程\n\n接口加载过程与类加载过程稍有不同。\n\n当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，当真正用到父接口的时候才会初始化。\n### 7.5 类加载的过程\n\n类加载过程包括 5 个阶段：加载、验证、准备、解析和初始化。\n\n### 7.6 加载\n\n#### 加载的过程\n\n“加载”是“类加载”过程的一个阶段，不能混淆这两个名词。在加载阶段，虚拟机需要完成 3 件事：\n\n- 通过类的全限定名获取该类的二进制字节流。\n- 将二进制字节流所代表的静态结构转化为方法区的运行时数据结构。\n- 在内存中创建一个代表该类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。\n\n#### 获取二进制字节流\n\n对于 Class 文件，虚拟机没有指明要从哪里获取、怎样获取。除了直接从编译好的 .class 文件中读取，还有以下几种方式：\n\n- 从 zip 包中读取，如 jar、war 等\n- 从网络中获取，如 Applet\n- 通过动态代理技术生成代理类的二进制字节流\n- 由 JSP 文件生成对应的 Class 类\n- 从数据库中读取，如 有些中间件服务器可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n#### “非数组类”与“数组类”加载比较\n\n- 非数组类加载阶段可以使用系统提供的引导类加载器，也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器控制字节流的获取方式（如重写一个类加载器的 `loadClass()` 方法）\n- 数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的，再由类加载器创建数组中的元素类。\n\n#### 注意事项\n\n- 虚拟机规范未规定 Class 对象的存储位置，对于 HotSpot 虚拟机而言，Class 对象比较特殊，它虽然是对象，但存放在方法区中。\n- 加载阶段与连接阶段的部分内容交叉进行，加载阶段尚未完成，连接阶段可能已经开始了。但这两个阶段的开始时间仍然保持着固定的先后顺序。\n\n### 7.7 验证\n\n#### 验证的重要性\n\n验证阶段确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n\n#### 验证的过程\n\n- 文件格式验证 验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，验证点如下：\n  - 是否以魔数 0XCAFEBABE 开头\n  - 主次版本号是否在当前虚拟机处理范围内\n  - 常量池是否有不被支持的常量类型\n  - 指向常量的索引值是否指向了不存在的常量\n  - CONSTANT_Utf8_info 型的常量是否有不符合 UTF8 编码的数据\n  - ......\n- 元数据验证 对字节码描述信息进行语义分析，确保其符合 Java 语法规范。\n- 字节码验证 本阶段是验证过程中最复杂的一个阶段，是对方法体进行语义分析，保证方法在运行时不会出现危害虚拟机的事件。\n- 符号引用验证 本阶段发生在解析阶段，确保解析正常执行。\n\n### 7.8 准备\n\n准备阶段是正式为类变量（或称“静态成员变量”）分配内存并设置初始值的阶段。这些变量（不包括实例变量）所使用的内存都在方法区中进行分配。\n\n初始值“通常情况下”是数据类型的零值（0, null...），假设一个类变量的定义为：\n\n```java\npublic static int value = 123;\n```\n\n那么变量 value 在准备阶段过后的初始值为 0 而不是 123，因为这时候尚未开始执行任何 Java 方法。\n\n存在“特殊情况”：如果类字段的字段属性表中存在 ConstantValue 属性，那么在准备阶段 value 就会被初始化为 ConstantValue 属性所指定的值，假设上面类变量 value 的定义变为：\n\n```java\npublic static final int value = 123;\n```\n\n那么在准备阶段虚拟机会根据 ConstantValue 的设置将 value 赋值为 123。\n\n### 7.9 解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n### 7.10 初始化\n\n类初始化阶段是类加载过程的最后一步，是执行类构造器 `<clinit>()` 方法的过程。\n\n`<clinit>()` 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {} 块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。\n\n静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但不能访问。如下方代码所示：\n\n```java\npublic class Test {\n    static {\n        i = 0;  // 给变量赋值可以正常编译通过\n        System.out.println(i);  // 这句编译器会提示“非法向前引用”\n    }\n    static int i = 1;\n}\n```\n\n`<clinit>()` 方法不需要显式调用父类构造器，虚拟机会保证在子类的 `<clinit>()` 方法执行之前，父类的 `<clinit>()` 方法已经执行完毕。\n\n由于父类的 `<clinit>()` 方法先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。如下方代码所示：\n\n```java\nstatic class Parent {\n    public static int A = 1;\n    static {\n        A = 2;\n    }\n}\n\nstatic class Sub extends Parent {\n    public static int B = A;\n}\n\npublic static void main(String[] args) {\n    System.out.println(Sub.B); // 输出 2\n}\n```\n\n`<clinit>()` 方法不是必需的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成 `<clinit>()` 方法。\n\n接口中不能使用静态代码块，但接口也需要通过 `<clinit>()` 方法为接口中定义的静态成员变量显式初始化。但接口与类不同，接口的 `<clinit>()` 方法不需要先执行父类的 `<clinit>()` 方法，只有当父接口中定义的变量使用时，父接口才会初始化。\n\n虚拟机会保证一个类的 `<clinit>()` 方法在多线程环境中被正确加锁、同步。如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 `<clinit>()` 方法。\n\n\n\n## 8.类加载器\n\n### 8.1 类与类加载器\n\n#### 判断类是否“相等”\n\n任意一个类，都由**加载它的类加载器**和这个**类本身**一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都有一个独立的类名称空间。\n\n因此，比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必定不相等。\n\n这里的“相等”，包括代表类的 Class 对象的 `equals()` 方法、`isInstance()` 方法的返回结果，也包括使用 instanceof 关键字做对象所属关系判定等情况。\n\n#### 加载器种类\n\n系统提供了 3 种类加载器：\n\n- 启动类加载器（Bootstrap ClassLoader）： 负责将存放在 `<JAVA_HOME>\\lib` 目录中的，并且能被虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。\n- 扩展类加载器（Extension ClassLoader）： 负责加载 `<JAVA_HOME>\\lib\\ext` 目录中的所有类库，开发者可以直接使用扩展类加载器。\n- 应用程序类加载器（Application ClassLoader）： 由于这个类加载器是 ClassLoader 中的 `getSystemClassLoader()` 方法的返回值，所以一般也称它为“系统类加载器”。它负责加载用户类路径（classpath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n![ClassLoader](https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/classloader.png)\n\n当然，如果有必要，还可以加入自己定义的类加载器。\n\n### 8.2 双亲委派模型\n\n#### 什么是双亲委派模型\n\n双亲委派模型是描述类加载器之间的层次关系。它要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。（父子关系一般不会以继承的关系实现，而是以组合关系来复用父加载器的代码）\n\n#### 工作过程\n\n如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（找不到所需的类）时，子加载器才会尝试自己去加载。\n\n在 java.lang.ClassLoader 中的 `loadClass` 方法中实现该过程。\n\n#### 为什么使用双亲委派模型\n\n像 java.lang.Object 这些存放在 rt.jar 中的类，无论使用哪个类加载器加载，最终都会委派给最顶端的启动类加载器加载，从而使得不同加载器加载的 Object 类都是同一个。\n\n相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为 java.lang.Object 的类，并放在 classpath 下，那么系统将会出现多个不同的 Object 类，Java 类型体系中最基础的行为也就无法保证。\n","slug":"java_jvm","published":1,"updated":"2021-08-24T00:23:44.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckspbsrbw0000pxxf5qum639j","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-JVM基础知识小抄版\"><a href=\"#筑基系列-JVM基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-JVM基础知识小抄版\"></a>筑基系列-JVM基础知识小抄版</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>[toc]</p>\n<h2 id=\"1-JVM-内存结构\"><a href=\"#1-JVM-内存结构\" class=\"headerlink\" title=\"1.JVM 内存结构\"></a>1.JVM 内存结构</h2><p>Java 虚拟机的内存空间分为 5 个部分：</p>\n<ul>\n<li>程序计数器</li>\n<li>Java 虚拟机栈</li>\n<li>本地方法栈</li>\n<li>堆</li>\n<li>方法区</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-memory-structure.jpg\" alt=\"jvm-memory-structure\"></p>\n<p>JDK 1.8 同 JDK 1.7 比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元数据空间并不在虚拟机中，而是使用本地内存。</p>\n<h3 id=\"1-1-程序计数器（PC-寄存器）\"><a href=\"#1-1-程序计数器（PC-寄存器）\" class=\"headerlink\" title=\"1.1 程序计数器（PC 寄存器）\"></a>1.1 程序计数器（PC 寄存器）</h3><h4 id=\"程序计数器的定义\"><a href=\"#程序计数器的定义\" class=\"headerlink\" title=\"程序计数器的定义\"></a>程序计数器的定义</h4><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为<code>Undefined</code>。</p>\n<h4 id=\"程序计数器的作用\"><a href=\"#程序计数器的作用\" class=\"headerlink\" title=\"程序计数器的作用\"></a>程序计数器的作用</h4><ul>\n<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制。</li>\n<li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li>\n</ul>\n<h4 id=\"程序计数器的特点\"><a href=\"#程序计数器的特点\" class=\"headerlink\" title=\"程序计数器的特点\"></a>程序计数器的特点</h4><ul>\n<li>是一块较小的内存空间。</li>\n<li>线程私有，每条线程都有自己的程序计数器。</li>\n<li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li>\n<li>是唯一一个不会出现<code>OutOfMemoryError</code>的内存区域。</li>\n</ul>\n<h3 id=\"1-2-Java-虚拟机栈（Java-栈）\"><a href=\"#1-2-Java-虚拟机栈（Java-栈）\" class=\"headerlink\" title=\"1.2 Java 虚拟机栈（Java 栈）\"></a>1.2 Java 虚拟机栈（Java 栈）</h3><h4 id=\"Java-虚拟机栈的定义\"><a href=\"#Java-虚拟机栈的定义\" class=\"headerlink\" title=\"Java 虚拟机栈的定义\"></a>Java 虚拟机栈的定义</h4><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p>\n<p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做“栈帧”的区域，用于存放该方法运行过程中的一些信息，如：</p>\n<ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口信息</li>\n<li>……</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-stack.jpg\" alt=\"jvm-stack\"></p>\n<h4 id=\"压栈出栈过程\"><a href=\"#压栈出栈过程\" class=\"headerlink\" title=\"压栈出栈过程\"></a>压栈出栈过程</h4><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p>\n<p>Java 虚拟机栈的栈顶的栈帧是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p>\n<p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p>\n<blockquote>\n<p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p>\n</blockquote>\n<h4 id=\"Java-虚拟机栈的特点\"><a href=\"#Java-虚拟机栈的特点\" class=\"headerlink\" title=\"Java 虚拟机栈的特点\"></a>Java 虚拟机栈的特点</h4><ul>\n<li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可。在方法运行过程中，局部变量表的大小不会发生改变。</li>\n<li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul>\n<li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li>\n<li>OutOfMemoryError 若允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展时，抛出 OutOfMemoryError 异常。</li>\n</ul>\n</li>\n<li>Java 虚拟机栈也是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li>\n</ul>\n<blockquote>\n<p>出现 StackOverFlowError 时，内存空间可能还有很多。</p>\n</blockquote>\n<h3 id=\"1-3-本地方法栈（C-栈）\"><a href=\"#1-3-本地方法栈（C-栈）\" class=\"headerlink\" title=\"1.3 本地方法栈（C 栈）\"></a>1.3 本地方法栈（C 栈）</h3><h4 id=\"本地方法栈的定义\"><a href=\"#本地方法栈的定义\" class=\"headerlink\" title=\"本地方法栈的定义\"></a>本地方法栈的定义</h4><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<h4 id=\"栈帧变化过程\"><a href=\"#栈帧变化过程\" class=\"headerlink\" title=\"栈帧变化过程\"></a>栈帧变化过程</h4><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、动态链接、方法出口信息等。</p>\n<p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMemoryError 异常。</p>\n<blockquote>\n<p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p>\n</blockquote>\n<h3 id=\"1-4-堆\"><a href=\"#1-4-堆\" class=\"headerlink\" title=\"1.4 堆\"></a>1.4 堆</h3><h4 id=\"堆的定义\"><a href=\"#堆的定义\" class=\"headerlink\" title=\"堆的定义\"></a>堆的定义</h4><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p>\n<h4 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h4><ul>\n<li>线程共享，整个 Java 虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li>\n<li>在虚拟机启动时创建。</li>\n<li>是垃圾回收的主要场所。</li>\n<li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survivor</code>）、老年代。</li>\n</ul>\n<p>不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p>\n<p>堆的大小既可以固定也可以扩展，但对于主流的虚拟机，堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已无法再扩展时，就抛出 OutOfMemoryError 异常。</p>\n<blockquote>\n<p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p>\n</blockquote>\n<h3 id=\"1-5-方法区\"><a href=\"#1-5-方法区\" class=\"headerlink\" title=\"1.5 方法区\"></a>1.5 方法区</h3><h4 id=\"方法区的定义\"><a href=\"#方法区的定义\" class=\"headerlink\" title=\"方法区的定义\"></a>方法区的定义</h4><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：</p>\n<ul>\n<li>已经被虚拟机加载的类信息</li>\n<li>常量</li>\n<li>静态变量</li>\n<li>即时编译器编译后的代码</li>\n</ul>\n<h4 id=\"方法区的特点\"><a href=\"#方法区的特点\" class=\"headerlink\" title=\"方法区的特点\"></a>方法区的特点</h4><ul>\n<li>线程共享。 方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。</li>\n<li>永久代。 方法区中的信息一般需要长期存在，而且它又是堆的逻辑分区，因此用堆的划分方法，把方法区称为“永久代”。</li>\n<li>内存回收效率低。 方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li>\n<li>Java 虚拟机规范对方法区的要求比较宽松。 和堆一样，允许固定大小，也允许动态扩展，还允许不实现垃圾回收。</li>\n</ul>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>方法区中存放：类信息、常量、静态变量、即时编译器编译后的代码。常量就存放在运行时常量池中。</p>\n<p>当类被 Java 虚拟机加载后， .class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的 <code>intern()</code> 方法就能在运行期间向常量池中添加字符串常量。</p>\n<h3 id=\"1-6-直接内存（堆外内存）\"><a href=\"#1-6-直接内存（堆外内存）\" class=\"headerlink\" title=\"1.6 直接内存（堆外内存）\"></a>1.6 直接内存（堆外内存）</h3><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p>\n<h4 id=\"操作直接内存\"><a href=\"#操作直接内存\" class=\"headerlink\" title=\"操作直接内存\"></a>操作直接内存</h4><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提高了数据操作的效率。</p>\n<p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p>\n<h4 id=\"直接内存与堆内存比较\"><a href=\"#直接内存与堆内存比较\" class=\"headerlink\" title=\"直接内存与堆内存比较\"></a>直接内存与堆内存比较</h4><ul>\n<li>直接内存申请空间耗费更高的性能</li>\n<li>直接内存读取 IO 的性能要优于普通的堆内存。</li>\n<li>直接内存作用链： 本地 IO -&gt; 直接内存 -&gt; 本地 IO</li>\n<li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li>\n</ul>\n<blockquote>\n<p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现<code>OutOfMemoryError</code>异常。</p>\n</blockquote>\n<h2 id=\"2-HotSpot-虚拟机对象探秘\"><a href=\"#2-HotSpot-虚拟机对象探秘\" class=\"headerlink\" title=\"2.HotSpot 虚拟机对象探秘\"></a>2.HotSpot 虚拟机对象探秘</h2><h3 id=\"2-1-对象的内存布局\"><a href=\"#2-1-对象的内存布局\" class=\"headerlink\" title=\"2.1 对象的内存布局\"></a>2.1 对象的内存布局</h3><p>在 HotSpot 虚拟机中，对象的内存布局分为以下 3 块区域：</p>\n<ul>\n<li>对象头（Header）</li>\n<li>实例数据（Instance Data）</li>\n<li>对齐填充（Padding）</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/object-memory-layout.png\" alt=\"object-memory-layout.png\"></p>\n<h4 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h4><p>对象头记录了对象在运行过程中所需要使用的一些数据：</p>\n<ul>\n<li>哈希码</li>\n<li>GC 分代年龄</li>\n<li>锁状态标志</li>\n<li>线程持有的锁</li>\n<li>偏向线程 ID</li>\n<li>偏向时间戳</li>\n</ul>\n<p>对象头可能包含类型指针，通过该指针能确定对象属于哪个类。如果对象是一个数组，那么对象头还会包括数组长度。</p>\n<h4 id=\"实例数据\"><a href=\"#实例数据\" class=\"headerlink\" title=\"实例数据\"></a>实例数据</h4><p>实例数据部分就是成员变量的值，其中包括父类成员变量和本类成员变量。</p>\n<h4 id=\"对齐填充\"><a href=\"#对齐填充\" class=\"headerlink\" title=\"对齐填充\"></a>对齐填充</h4><p>用于确保对象的总长度为 8 字节的整数倍。</p>\n<p>HotSpot VM 的自动内存管理系统要求对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n<blockquote>\n<p>对齐填充并不是必然存在，也没有特别的含义，它仅仅起着占位符的作用。</p>\n</blockquote>\n<h3 id=\"2-2-对象的创建过程\"><a href=\"#2-2-对象的创建过程\" class=\"headerlink\" title=\"2.2 对象的创建过程\"></a>2.2 对象的创建过程</h3><h4 id=\"类加载检查\"><a href=\"#类加载检查\" class=\"headerlink\" title=\"类加载检查\"></a>类加载检查</h4><p>虚拟机在解析<code>.class</code>文件时，若遇到一条 new 指令，首先它会去检查常量池中是否有这个类的符号引用，并且检查这个符号引用所代表的类是否已被加载、解析和初始化过。如果没有，那么必须先执行相应的类加载过程。</p>\n<h4 id=\"为新生对象分配内存\"><a href=\"#为新生对象分配内存\" class=\"headerlink\" title=\"为新生对象分配内存\"></a>为新生对象分配内存</h4><p>对象所需内存的大小在类加载完成后便可完全确定，接下来从堆中划分一块对应大小的内存空间给新的对象。分配堆中内存有两种方式：</p>\n<ul>\n<li><p><strong>指针碰撞</strong><br><br>如果 Java <strong>堆中内存绝对规整</strong>（说明采用的是“<strong>复制算法</strong>”或“<strong>标记整理法</strong>”），空闲内存和已使用内存中间放着一个指针作为分界点指示器，那么分配内存时只需要把指针向空闲内存挪动一段与对象大小一样的距离，这种分配方式称为“<strong>指针碰撞</strong>”。</p>\n</li>\n<li><p><strong>空闲列表</strong><br><br>如果 Java <strong>堆中内存并不规整</strong>，已使用的内存和空闲内存交错（说明采用的是<strong>标记-清除法</strong>，有碎片），此时没法简单进行指针碰撞， VM 必须维护一个列表，记录其中哪些内存块空闲可用。分配之时从空闲列表中找到一块足够大的内存空间划分给对象实例。这种方式称为“<strong>空闲列表</strong>”。</p>\n</li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>分配完内存后，为对象中的成员变量赋上初始值，设置对象头信息，调用对象的构造函数方法进行初始化。</p>\n<p>至此，整个对象的创建过程就完成了。</p>\n<h3 id=\"2-3-对象的访问方式\"><a href=\"#2-3-对象的访问方式\" class=\"headerlink\" title=\"2.3 对象的访问方式\"></a>2.3 对象的访问方式</h3><p>所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配的。也就是说在建立一个对象时两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针（引用）而已。 那么根据引用存放的地址类型的不同，对象有不同的访问方式。</p>\n<h4 id=\"句柄访问方式\"><a href=\"#句柄访问方式\" class=\"headerlink\" title=\"句柄访问方式\"></a>句柄访问方式</h4><p>堆中需要有一块叫做“句柄池”的内存空间，句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p>\n<p>引用类型的变量存放的是该对象的句柄地址（reference）。访问对象时，首先需要通过引用类型的变量找到该对象的句柄，然后根据句柄中对象的地址找到对象。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/handle-access.jpg\" alt=\"handle-access\"></p>\n<h4 id=\"直接指针访问方式\"><a href=\"#直接指针访问方式\" class=\"headerlink\" title=\"直接指针访问方式\"></a>直接指针访问方式</h4><p>引用类型的变量直接存放对象的地址，从而不需要句柄池，通过引用能够直接访问对象。但对象所在的内存空间需要额外的策略存储对象所属的类信息的地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/direct-pointer.jpg\" alt=\"direct-pointer\"></p>\n<p>需要说明的是，HotSpot 采用第二种方式，即直接指针方式来访问对象，只需要一次寻址操作，所以在性能上比句柄访问方式快一倍。但像上面所说，它需要<strong>额外的策略</strong>来存储对象在方法区中类信息的地址。</p>\n<h2 id=\"3-垃圾收集策略与算法\"><a href=\"#3-垃圾收集策略与算法\" class=\"headerlink\" title=\"3.垃圾收集策略与算法\"></a>3.垃圾收集策略与算法</h2><p>程序计数器、虚拟机栈、本地方法栈随线程而生，也随线程而灭；栈帧随着方法的开始而入栈，随着方法的结束而出栈。这几个区域的内存分配和回收都具有确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。</p>\n<p>而对于 Java 堆和方法区，我们只有在程序运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的正是这部分内存。</p>\n<h3 id=\"3-1-判定对象是否存活\"><a href=\"#3-1-判定对象是否存活\" class=\"headerlink\" title=\"3.1 判定对象是否存活\"></a>3.1 判定对象是否存活</h3><p>若一个对象不被任何对象或变量引用，那么它就是无效对象，需要被回收。</p>\n<h4 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h4><p>在对象头维护着一个 counter 计数器，对象被引用一次则计数器 +1；若引用失效则计数器 -1。当计数器为 0 时，就认为该对象无效了。</p>\n<p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。但是主流的 Java 虚拟机里没有选用引用计数算法来管理内存，主要是因为它很难解决对象之间循环引用的问题。</p>\n<blockquote>\n<p>举个栗子 👉 对象 objA 和 objB 都有字段 instance，令 objA.instance = objB 并且 objB.instance = objA，由于它们互相引用着对方，导致它们的引用计数都不为 0，于是引用计数算法无法通知 GC 收集器回收它们。</p>\n</blockquote>\n<h4 id=\"可达性分析法\"><a href=\"#可达性分析法\" class=\"headerlink\" title=\"可达性分析法\"></a>可达性分析法</h4><p>所有和 GC Roots 直接或间接关联的对象都是有效对象，和 GC Roots 没有关联的对象就是无效对象。</p>\n<p>GC Roots 是指：</p>\n<ul>\n<li>Java 虚拟机栈（栈帧中的本地变量表）中引用的对象</li>\n<li>本地方法栈中引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n</ul>\n<p>GC Roots 并不包括堆中对象所引用的对象，这样就不会有循环引用的问题。</p>\n<h3 id=\"3-2-引用的种类\"><a href=\"#3-2-引用的种类\" class=\"headerlink\" title=\"3.2 引用的种类\"></a>3.2 引用的种类</h3><p>判定对象是否存活与“引用”有关。在 JDK 1.2 以前，Java 中的引用定义很传统，一个对象只有被引用或者没有被引用两种状态，我们希望能描述这一类对象：当内存空间还足够时，则保留在内存中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。</p>\n<p>在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为了以下四种。不同的引用类型，主要体现的是对象不同的可达性状态<code>reachable</code>和垃圾收集的影响。</p>\n<h4 id=\"强引用（Strong-Reference）\"><a href=\"#强引用（Strong-Reference）\" class=\"headerlink\" title=\"强引用（Strong Reference）\"></a>强引用（Strong Reference）</h4><p>类似 “<code>Object obj = new Object()</code>“ 这类的引用，就是强引用，只要强引用存在，垃圾收集器永远不会回收被引用的对象。但是，如果我们<strong>错误地保持了强引用</strong>，比如：赋值给了 static 变量，那么对象在很长一段时间内不会被回收，会产生内存泄漏。</p>\n<h4 id=\"软引用（Soft-Reference）\"><a href=\"#软引用（Soft-Reference）\" class=\"headerlink\" title=\"软引用（Soft Reference）\"></a>软引用（Soft Reference）</h4><p>软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来<strong>实现内存敏感的缓存</strong>，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p>\n<h4 id=\"弱引用（Weak-Reference）\"><a href=\"#弱引用（Weak-Reference）\" class=\"headerlink\" title=\"弱引用（Weak Reference）\"></a>弱引用（Weak Reference）</h4><p>弱引用的<strong>强度比软引用更弱</strong>一些。当 JVM 进行垃圾回收时，<strong>无论内存是否充足，都会回收</strong>只被弱引用关联的对象。</p>\n<h4 id=\"虚引用（Phantom-Reference）\"><a href=\"#虚引用（Phantom-Reference）\" class=\"headerlink\" title=\"虚引用（Phantom Reference）\"></a>虚引用（Phantom Reference）</h4><p>虚引用也称幽灵引用或者幻影引用，它是<strong>最弱</strong>的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。它仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制。</p>\n<h3 id=\"3-3-回收堆中无效对象\"><a href=\"#3-3-回收堆中无效对象\" class=\"headerlink\" title=\"3.3 回收堆中无效对象\"></a>3.3 回收堆中无效对象</h3><p>对于可达性分析中不可达的对象，也并不是没有存活的可能。</p>\n<h4 id=\"判定-finalize-是否有必要执行\"><a href=\"#判定-finalize-是否有必要执行\" class=\"headerlink\" title=\"判定 finalize() 是否有必要执行\"></a>判定 finalize() 是否有必要执行</h4><p>JVM 会判断此对象是否有必要执行 finalize() 方法，如果对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，那么视为“没有必要执行”。那么对象基本上就真的被回收了。</p>\n<p>如果对象被判定为有必要执行 finalize() 方法，那么对象会被放入一个 F-Queue 队列中，虚拟机会以较低的优先级执行这些 finalize()方法，但不会确保所有的 finalize() 方法都会执行结束。如果 finalize() 方法出现耗时操作，虚拟机就直接停止指向该方法，将对象清除。</p>\n<h4 id=\"对象重生或死亡\"><a href=\"#对象重生或死亡\" class=\"headerlink\" title=\"对象重生或死亡\"></a>对象重生或死亡</h4><p>如果在执行 finalize() 方法时，将 this 赋给了某一个引用，那么该对象就重生了。如果没有，那么就会被垃圾收集器清除。</p>\n<blockquote>\n<p>任何一个对象的 finalize() 方法只会被系统自动调用一次，如果对象面临下一次回收，它的 finalize() 方法不会被再次执行，想继续在 finalize() 中自救就失效了。</p>\n</blockquote>\n<h3 id=\"3-3-回收方法区内存\"><a href=\"#3-3-回收方法区内存\" class=\"headerlink\" title=\"3.3 回收方法区内存\"></a>3.3 回收方法区内存</h3><p>方法区中存放生命周期较长的类信息、常量、静态变量，每次垃圾收集只有少量的垃圾被清除。方法区中主要清除两种垃圾：</p>\n<ul>\n<li>废弃常量</li>\n<li>无用的类</li>\n</ul>\n<h4 id=\"判定废弃常量\"><a href=\"#判定废弃常量\" class=\"headerlink\" title=\"判定废弃常量\"></a>判定废弃常量</h4><p>只要常量池中的常量不被任何变量或对象引用，那么这些常量就会被清除掉。比如，一个字符串 “bingo” 进入了常量池，但是当前系统没有任何一个 String 对象引用常量池中的 “bingo” 常量，也没有其它地方引用这个字面量，必要的话，”bingo”常量会被清理出常量池。</p>\n<h4 id=\"判定无用的类\"><a href=\"#判定无用的类\" class=\"headerlink\" title=\"判定无用的类\"></a>判定无用的类</h4><p>判定一个类是否是“无用的类”，条件较为苛刻。</p>\n<ul>\n<li>该类的所有对象都已经被清除</li>\n<li>加载该类的 ClassLoader 已经被回收</li>\n<li>该类的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n<blockquote>\n<p>一个类被虚拟机加载进方法区，那么在堆中就会有一个代表该类的对象：java.lang.Class。这个对象在类被加载进方法区时创建，在方法区该类被删除时清除。</p>\n</blockquote>\n<h3 id=\"3-4-垃圾收集算法\"><a href=\"#3-4-垃圾收集算法\" class=\"headerlink\" title=\"3,4 垃圾收集算法\"></a>3,4 垃圾收集算法</h3><p>学会了如何判定无效对象、无用类、废弃常量之后，剩余工作就是回收这些垃圾。常见的垃圾收集算法有以下几个：</p>\n<h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p><strong>标记</strong>的过程是：遍历所有的 <code>GC Roots</code>，然后将所有 <code>GC Roots</code> 可达的对象<strong>标记为存活的对象</strong>。</p>\n<p><strong>清除</strong>的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。与此同时，清除那些被标记过的对象的标记，以便下次的垃圾回收。</p>\n<p>这种方法有两个<strong>不足</strong>：</p>\n<ul>\n<li>效率问题：标记和清除两个过程的效率都不高。</li>\n<li>空间问题：标记清除之后会产生大量不连续的内存碎片，碎片太多可能导致以后需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ul>\n<h4 id=\"复制算法（新生代）\"><a href=\"#复制算法（新生代）\" class=\"headerlink\" title=\"复制算法（新生代）\"></a>复制算法（新生代）</h4><p>为了解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完，需要进行垃圾收集时，就将存活者的对象复制到另一块上面，然后将第一块内存全部清除。这种算法有优有劣：</p>\n<ul>\n<li>优点：不会有内存碎片的问题。</li>\n<li>缺点：内存缩小为原来的一半，浪费空间。</li>\n</ul>\n<p>为了解决空间利用率问题，可以将内存分为三块： Eden、From Survivor、To Survivor，比例是 8:1:1，每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。</p>\n<p>但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。</p>\n<h4 id=\"分配担保\"><a href=\"#分配担保\" class=\"headerlink\" title=\"分配担保\"></a>分配担保</h4><p>为对象分配内存空间时，如果 Eden+Survivor 中空闲区域无法装下该对象，会触发 MinorGC 进行垃圾收集。但如果 Minor GC 过后依然有超过 10% 的对象存活，这样存活的对象直接通过分配担保机制进入老年代，然后再将新对象存入 Eden 区。</p>\n<h4 id=\"标记-整理算法（老年代）\"><a href=\"#标记-整理算法（老年代）\" class=\"headerlink\" title=\"标记-整理算法（老年代）\"></a>标记-整理算法（老年代）</h4><p><strong>标记</strong>：它的第一个阶段与<strong>标记/清除算法</strong>是一模一样的，均是遍历 <code>GC Roots</code>，然后将存活的对象标记。</p>\n<p><strong>整理</strong>：移动所有<strong>存活的对象</strong>，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。</p>\n<p>这是一种老年代的垃圾收集算法。老年代的对象一般寿命比较长，因此每次垃圾回收会有大量对象存活，如果采用复制算法，每次需要复制大量存活的对象，效率很低。</p>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>根据对象存活周期的不同，将内存划分为几块。一般是把 Java 堆分为新生代和老年代，针对各个年代的特点采用最适当的收集算法。</p>\n<ul>\n<li>新生代：复制算法</li>\n<li>老年代：标记-清除算法、标记-整理算法</li>\n</ul>\n<h2 id=\"4-HotSpot-垃圾收集器\"><a href=\"#4-HotSpot-垃圾收集器\" class=\"headerlink\" title=\"4.HotSpot 垃圾收集器\"></a>4.HotSpot 垃圾收集器</h2><p>HotSpot 虚拟机提供了多种垃圾收集器，每种收集器都有各自的特点，虽然我们要对各个收集器进行比较，但并非为了挑选出一个最好的收集器。我们选择的只是对具体应用最合适的收集器。</p>\n<h3 id=\"4-1-新生代垃圾收集器\"><a href=\"#4-1-新生代垃圾收集器\" class=\"headerlink\" title=\"4.1 新生代垃圾收集器\"></a>4.1 新生代垃圾收集器</h3><h4 id=\"Serial-垃圾收集器（单线程）\"><a href=\"#Serial-垃圾收集器（单线程）\" class=\"headerlink\" title=\"Serial 垃圾收集器（单线程）\"></a>Serial 垃圾收集器（单线程）</h4><p>只开启<strong>一条</strong> GC 线程进行垃圾回收，并且在垃圾收集过程中停止一切用户线程(Stop The World)。</p>\n<p>一般客户端应用所需内存较小，不会创建太多对象，而且堆内存不大，因此垃圾收集器回收时间短，即使在这段时间停止一切用户线程，也不会感觉明显卡顿。因此 Serial 垃圾收集器<strong>适合客户端</strong>使用。</p>\n<p>由于 Serial 收集器只使用一条 GC 线程，避免了线程切换的开销，从而简单高效。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/serial.png\" alt=\"Serial\"></p>\n<h4 id=\"ParNew-垃圾收集器（多线程）\"><a href=\"#ParNew-垃圾收集器（多线程）\" class=\"headerlink\" title=\"ParNew 垃圾收集器（多线程）\"></a>ParNew 垃圾收集器（多线程）</h4><p>ParNew 是 Serial 的多线程版本。由多条 GC 线程并行地进行垃圾清理。但清理过程依然需要 Stop The World。</p>\n<p>ParNew 追求“<strong>低停顿时间</strong>”,与 Serial 唯一区别就是使用了多线程进行垃圾收集，在多 CPU 环境下性能比 Serial 会有一定程度的提升；但<strong>线程切换需要额外的开销</strong>，因此在单 CPU 环境中表现不如 Serial。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/parnew.png\" alt=\"ParNew\"></p>\n<h4 id=\"Parallel-Scavenge-垃圾收集器（多线程）\"><a href=\"#Parallel-Scavenge-垃圾收集器（多线程）\" class=\"headerlink\" title=\"Parallel Scavenge 垃圾收集器（多线程）\"></a>Parallel Scavenge 垃圾收集器（多线程）</h4><p>Parallel Scavenge 和 ParNew 一样，都是多线程、新生代垃圾收集器。但是两者有巨大的不同点：</p>\n<ul>\n<li>Parallel Scavenge：追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。</li>\n<li>ParNew：追求降低用户停顿时间，适合交互式应用。</li>\n</ul>\n<p>吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)</p>\n<p>追求高吞吐量，可以通过减少 GC 执行实际工作的时间，然而，仅仅偶尔运行 GC 意味着每当 GC 运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。单个 GC 需要花更多的时间来完成，从而导致更高的暂停时间。而考虑到低暂停时间，最好频繁运行 GC 以便更快速完成，反过来又导致吞吐量下降。</p>\n<ul>\n<li>通过参数 -XX:GCTimeRadio 设置垃圾回收时间占总 CPU 时间的百分比。</li>\n<li>通过参数 -XX:MaxGCPauseMillis 设置垃圾处理过程最久停顿时间。</li>\n<li>通过命令 -XX:+UseAdaptiveSizePolicy 开启自适应策略。我们只要设置好堆的大小和 MaxGCPauseMillis 或 GCTimeRadio，收集器会自动调整新生代的大小、Eden 和 Survivor 的比例、对象进入老年代的年龄，以最大程度上接近我们设置的 MaxGCPauseMillis 或 GCTimeRadio。</li>\n</ul>\n<h3 id=\"4-2-老年代垃圾收集器\"><a href=\"#4-2-老年代垃圾收集器\" class=\"headerlink\" title=\"4.2 老年代垃圾收集器\"></a>4.2 老年代垃圾收集器</h3><h4 id=\"Serial-Old-垃圾收集器（单线程）\"><a href=\"#Serial-Old-垃圾收集器（单线程）\" class=\"headerlink\" title=\"Serial Old 垃圾收集器（单线程）\"></a>Serial Old 垃圾收集器（单线程）</h4><p>Serial Old 收集器是 Serial 的老年代版本，都是单线程收集器，只启用一条 GC 线程，都适合客户端应用。它们唯一的区别就是：Serial Old 工作在老年代，使用“标记-整理”算法；Serial 工作在新生代，使用“复制”算法。</p>\n<h4 id=\"Parallel-Old-垃圾收集器（多线程）\"><a href=\"#Parallel-Old-垃圾收集器（多线程）\" class=\"headerlink\" title=\"Parallel Old 垃圾收集器（多线程）\"></a>Parallel Old 垃圾收集器（多线程）</h4><p>Parallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 CPU 吞吐量。</p>\n<h4 id=\"CMS-垃圾收集器\"><a href=\"#CMS-垃圾收集器\" class=\"headerlink\" title=\"CMS 垃圾收集器\"></a>CMS 垃圾收集器</h4><p>CMS(Concurrent Mark Sweep，并发标记清除)收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。</p>\n<ul>\n<li>初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。</li>\n<li>并发标记：使用<strong>多条</strong>标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。</li>\n<li>重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。</li>\n<li>并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。</li>\n</ul>\n<p>并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，<strong>总体上说</strong>，CMS 收集器的内存回收过程是与用户线程<strong>一起并发执行</strong>的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/cms.png\" alt=\"CMS\"></p>\n<p>CMS 的缺点：</p>\n<ul>\n<li>吞吐量低</li>\n<li>无法处理浮动垃圾，导致频繁 Full GC</li>\n<li>使用“标记-清除”算法产生碎片空间</li>\n</ul>\n<p>对于产生碎片空间的问题，可以通过开启 -XX:+UseCMSCompactAtFullCollection，在每次 Full GC 完成后都会进行一次内存压缩整理，将零散在各处的对象整理到一块。设置参数 -XX:CMSFullGCsBeforeCompaction 告诉 CMS，经过了 N 次 Full GC 之后再进行一次内存整理。</p>\n<h3 id=\"4-3-G1-通用垃圾收集器\"><a href=\"#4-3-G1-通用垃圾收集器\" class=\"headerlink\" title=\"4.3 G1 通用垃圾收集器\"></a>4.3 G1 通用垃圾收集器</h3><p>G1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，因此可以获得最大的回收效率。</p>\n<p>从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</p>\n<p>这里抛个问题 👇<br><br>一个对象和它内部所引用的对象可能不在同一个 Region 中，那么当垃圾回收时，是否需要扫描整个堆内存才能完整地进行一次可达性分析？</p>\n<p>并不！每个 Region 都有一个 Remembered Set，用于记录本区域中所有对象引用的对象所在的区域，进行可达性分析时，只要在 GC Roots 中再加上 Remembered Set 即可防止对整个堆内存进行遍历。</p>\n<p>如果不计算维护 Remembered Set 的操作，G1 收集器的工作过程分为以下几个步骤：</p>\n<ul>\n<li>初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。</li>\n<li>并发标记：使用<strong>一条</strong>标记线程与用户线程并发执行。此过程进行可达性分析，速度很慢。</li>\n<li>最终标记：Stop The World，使用多条标记线程并发执行。</li>\n<li>筛选回收：回收废弃对象，此时也要 Stop The World，并使用多条筛选回收线程并发执行。</li>\n</ul>\n<h2 id=\"5-内存分配与回收策略\"><a href=\"#5-内存分配与回收策略\" class=\"headerlink\" title=\"5.内存分配与回收策略\"></a>5.内存分配与回收策略</h2><p>对象的内存分配，就是在堆上分配（也可能经过 JIT 编译后被拆散为标量类型并间接在栈上分配），对象主要分配在新生代的 Eden 区上，少数情况下可能直接分配在老年代，<strong>分配规则不固定</strong>，取决于当前使用的垃圾收集器组合以及相关的参数配置。</p>\n<p>以下列举几条最普遍的内存分配规则，供大家学习。</p>\n<h3 id=\"5-1-对象优先在-Eden-分配\"><a href=\"#5-1-对象优先在-Eden-分配\" class=\"headerlink\" title=\"5.1 对象优先在 Eden 分配\"></a>5.1 对象优先在 Eden 分配</h3><p>大多数情况下，对象在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p>\n<p>👇<strong>Minor GC</strong> vs <strong>Major GC</strong>/<strong>Full GC</strong>：</p>\n<ul>\n<li>Minor GC：回收新生代（包括 Eden 和 Survivor 区域），因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</li>\n<li>Major GC / Full GC: 回收老年代，出现了 Major GC，经常会伴随至少一次的 Minor GC，但这并非绝对。Major GC 的速度一般会比 Minor GC 慢 10 倍 以上。</li>\n</ul>\n<blockquote>\n<p>在 JVM 规范中，Major GC 和 Full GC 都没有一个正式的定义，所以有人也简单地认为 Major GC 清理老年代，而 Full GC 清理整个内存堆。</p>\n</blockquote>\n<h3 id=\"5-2-大对象直接进入老年代\"><a href=\"#5-2-大对象直接进入老年代\" class=\"headerlink\" title=\"5.2 大对象直接进入老年代\"></a>5.2 大对象直接进入老年代</h3><p>大对象是指需要大量连续内存空间的 Java 对象，如很长的字符串或数据。</p>\n<p>一个大对象能够存入 Eden 区的概率比较小，发生分配担保的概率比较大，而分配担保需要涉及大量的复制，就会造成效率低下。</p>\n<p>虚拟机提供了一个 -XX:PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配，这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制。（还记得吗，新生代采用复制算法回收垃圾）</p>\n<h3 id=\"5-3-长期存活的对象将进入老年代\"><a href=\"#5-3-长期存活的对象将进入老年代\" class=\"headerlink\" title=\"5.3 长期存活的对象将进入老年代\"></a>5.3 长期存活的对象将进入老年代</h3><p>JVM 给每个对象定义了一个对象年龄计数器。当新生代发生一次 Minor GC 后，存活下来的对象年龄 +1，当年龄超过一定值时，就将超过该值的所有对象转移到老年代中去。</p>\n<p>使用 <code>-XXMaxTenuringThreshold</code> 设置新生代的最大年龄，只要超过该参数的新生代对象都会被转移到老年代中去。</p>\n<h3 id=\"5-4-动态对象年龄判定\"><a href=\"#5-4-动态对象年龄判定\" class=\"headerlink\" title=\"5.4 动态对象年龄判定\"></a>5.4 动态对象年龄判定</h3><p>如果当前新生代的 Survivor 中，相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄 &gt;= 该年龄的对象就可以直接进入老年代，无须等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</p>\n<h3 id=\"5-5-空间分配担保\"><a href=\"#5-5-空间分配担保\" class=\"headerlink\" title=\"5.5 空间分配担保\"></a>5.5 空间分配担保</h3><p>JDK 6 Update 24 之前的规则是这样的：<br> 在发生 Minor GC 之前，虚拟机会先检查<strong>老年代最大可用的连续空间是否大于新生代所有对象总空间</strong>， 如果这个条件成立，Minor GC 可以确保是安全的； 如果不成立，则虚拟机会查看 <code>HandlePromotionFailure</code> 值是否设置为允许担保失败， 如果是，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小， 如果大于，将尝试进行一次 Minor GC,尽管这次 Minor GC 是有风险的； 如果小于，或者 <code>HandlePromotionFailure</code> 设置不允许冒险，那此时也要改为进行一次 Full GC。</p>\n<p>JDK 6 Update 24 之后的规则变为：<br> 只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</p>\n<p>通过清除老年代中废弃数据来扩大老年代空闲空间，以便给新生代作担保。</p>\n<p>这个过程就是分配担保。</p>\n<hr>\n<p>👇 总结一下有哪些情况可能会触发 JVM 进行 Full GC。</p>\n<ol>\n<li><strong><code>System.gc()</code> 方法的调用</strong><br>此方法的调用是建议 JVM 进行 Full GC，注意这<strong>只是建议而非一定</strong>，但在很多情况下它会触发 Full GC，从而增加 Full GC 的频率。通常情况下我们只需要让虚拟机自己去管理内存即可，我们可以通过 -XX:+ DisableExplicitGC 来禁止调用 <code>System.gc()</code>。</li>\n<li><strong>老年代空间不足</strong><br>老年代空间不足会触发 Full GC 操作，若进行该操作后空间依然不足，则会抛出如下错误：<code>java.lang.OutOfMemoryError: Java heap space</code></li>\n<li><strong>永久代空间不足</strong><br>JVM 规范中运行时数据区域中的方法区，在 HotSpot 虚拟机中也称为永久代（Permanet Generation），存放一些类信息、常量、静态变量等数据，当系统要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，会触发 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：<code>java.lang.OutOfMemoryError: PermGen space</code></li>\n<li><strong>CMS GC 时出现 <code>promotion failed</code> 和 <code>concurrent mode failure</code></strong><br>promotion failed，就是上文所说的担保失败，而 concurrent mode failure 是在执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足造成的。</li>\n<li><strong>统计得到的 Minor GC 晋升到旧生代的平均大小大于老年代的剩余空间。</strong># JVM 性能调优</li>\n</ol>\n<p>在高性能硬件上部署程序，目前主要有两种方式：</p>\n<ul>\n<li>通过 64 位 JDK 来使用大内存；</li>\n<li>使用若干个 32 位虚拟机建立逻辑集群来利用硬件资源。</li>\n</ul>\n<h3 id=\"5-6-使用-64-位-JDK-管理大内存\"><a href=\"#5-6-使用-64-位-JDK-管理大内存\" class=\"headerlink\" title=\"5.6 使用 64 位 JDK 管理大内存\"></a>5.6 使用 64 位 JDK 管理大内存</h3><p>堆内存变大后，虽然垃圾收集的频率减少了，但每次垃圾回收的时间变长。 如果堆内存为 14 G，那么每次 Full GC 将长达数十秒。如果 Full GC 频繁发生，那么对于一个网站来说是无法忍受的。</p>\n<p>对于用户交互性强、对停顿时间敏感的系统，可以给 Java 虚拟机分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，至少要低到不会影响用户使用。</p>\n<p>可能面临的问题：</p>\n<ul>\n<li>内存回收导致的长时间停顿；</li>\n<li>现阶段，64 位 JDK 的性能普遍比 32 位 JDK 低；</li>\n<li>需要保证程序足够稳定，因为这种应用要是产生堆溢出几乎就无法产生堆转储快照（因为要产生超过 10GB 的 Dump 文件），哪怕产生了快照也几乎无法进行分析；</li>\n<li>相同程序在 64 位 JDK 消耗的内存一般比 32 位 JDK 大，这是由于指针膨胀，以及数据类型对齐补白等因素导致的。</li>\n</ul>\n<h3 id=\"5-7-使用-32-位-JVM-建立逻辑集群\"><a href=\"#5-7-使用-32-位-JVM-建立逻辑集群\" class=\"headerlink\" title=\"5.7 使用 32 位 JVM 建立逻辑集群\"></a>5.7 使用 32 位 JVM 建立逻辑集群</h3><p>在一台物理机器上启动多个应用服务器进程，每个服务器进程分配不同端口， 然后在前端搭建一个负载均衡器，以反向代理的方式来分配访问请求。</p>\n<p>考虑到在一台物理机器上建立逻辑集群的目的仅仅是为了尽可能利用硬件资源，并不需要关心状态保留、热转移之类的高可用性能需求， 也不需要保证每个虚拟机进程有绝对的均衡负载，因此使用无 Session 复制的亲合式集群是一个不错的选择。 我们仅仅需要保障集群具备亲合性，也就是均衡器按一定的规则算法（一般根据 SessionID 分配） 将一个固定的用户请求永远分配到固定的一个集群节点进行处理即可。</p>\n<p>可能遇到的问题：</p>\n<ul>\n<li>尽量避免节点竞争全局资源，如磁盘竞争，各个节点如果同时访问某个磁盘文件的话，很可能导致 IO 异常；</li>\n<li>很难高效利用资源池，如连接池，一般都是在节点建立自己独立的连接池，这样有可能导致一些节点池满了而另外一些节点仍有较多空余；</li>\n<li>各个节点受到 32 位的内存限制；</li>\n<li>大量使用本地缓存的应用，在逻辑集群中会造成较大的内存浪费，因为每个逻辑节点都有一份缓存，这时候可以考虑把本地缓存改成集中式缓存。</li>\n</ul>\n<h3 id=\"5-8-调优案例分析与实战\"><a href=\"#5-8-调优案例分析与实战\" class=\"headerlink\" title=\"5.8 调优案例分析与实战\"></a>5.8 调优案例分析与实战</h3><h4 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h4><p>一个小型系统，使用 32 位 JDK，4G 内存，测试期间发现服务端不定时抛出内存溢出异常。 加入 -XX:+HeapDumpOnOutOfMemoryError（添加这个参数后，堆内存溢出时就会输出异常日志）， 但再次发生内存溢出时，没有生成相关异常日志。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>在 32 位 JDK 上，1.6G 分配给堆，还有一部分分配给 JVM 的其他内存，直接内存最大也只能在剩余的 0.4G 空间中分出一部分， 如果使用了 NIO，JVM 会在 JVM 内存之外分配内存空间，那么就要小心“直接内存”不足时发生内存溢出异常了。</p>\n<h4 id=\"直接内存的回收过程\"><a href=\"#直接内存的回收过程\" class=\"headerlink\" title=\"直接内存的回收过程\"></a>直接内存的回收过程</h4><p>直接内存虽然不是 JVM 内存空间，但它的垃圾回收也由 JVM 负责。</p>\n<p>垃圾收集进行时，虚拟机虽然会对直接内存进行回收， 但是直接内存却不能像新生代、老年代那样，发现空间不足了就通知收集器进行垃圾回收， 它只能等老年代满了后 Full GC，然后“顺便”帮它清理掉内存的废弃对象。 否则只能一直等到抛出内存溢出异常时，先 catch 掉，再在 catch 块里大喊 “<code>System.gc()</code>”。 要是虚拟机还是不听，那就只能眼睁睁看着堆中还有许多空闲内存，自己却不得不抛出内存溢出异常了。</p>\n<h2 id=\"6-类文件结构\"><a href=\"#6-类文件结构\" class=\"headerlink\" title=\"6.类文件结构\"></a>6.类文件结构</h2><h3 id=\"6-1-JVM-的“无关性”\"><a href=\"#6-1-JVM-的“无关性”\" class=\"headerlink\" title=\"6.1 JVM 的“无关性”\"></a>6.1 JVM 的“无关性”</h3><p>谈论 JVM 的无关性，主要有以下两个：</p>\n<ul>\n<li>平台无关性：任何操作系统都能运行 Java 代码</li>\n<li>语言无关性： JVM 能运行除 Java 以外的其他代码</li>\n</ul>\n<p>Java 源代码首先需要使用 Javac 编译器编译成 .class 文件，然后由 JVM 执行 .class 文件，从而程序开始运行。</p>\n<p>JVM 只认识 .class 文件，它不关心是何种语言生成了 .class 文件，只要 .class 文件符合 JVM 的规范就能运行。 目前已经有 JRuby、Jython、Scala 等语言能够在 JVM 上运行。它们有各自的语法规则，不过它们的编译器 都能将各自的源码编译成符合 JVM 规范的 .class 文件，从而能够借助 JVM 运行它们。</p>\n<blockquote>\n<p>Java 语言中的各种变量、关键字和运算符号的语义最终都是由多条字节码命令组合而成的， 因此字节码命令所能提供的语义描述能力肯定会比 Java 语言本身更加强大。 因此，有一些 Java 语言本身无法有效支持的语言特性，不代表字节码本身无法有效支持。</p>\n</blockquote>\n<h3 id=\"6-2-Class-文件结构\"><a href=\"#6-2-Class-文件结构\" class=\"headerlink\" title=\"6.2 Class 文件结构\"></a>6.2 Class 文件结构</h3><p>Class 文件是二进制文件，它的内容具有严格的规范，文件中没有任何空格，全都是连续的 0/1。Class 文件 中的所有内容被分为两种类型：无符号数、表。</p>\n<ul>\n<li>无符号数 无符号数表示 Class 文件中的值，这些值没有任何类型，但有不同的长度。u1、u2、u4、u8 分别代表 1/2/4/8 字节的无符号数。</li>\n<li>表 由多个无符号数或者其他表作为数据项构成的复合数据类型。</li>\n</ul>\n<p>Class 文件具体由以下几个构成:</p>\n<ul>\n<li>魔数</li>\n<li>版本信息</li>\n<li>常量池</li>\n<li>访问标志</li>\n<li>类索引、父类索引、接口索引集合</li>\n<li>字段表集合</li>\n<li>方法表集合</li>\n<li>属性表集合</li>\n</ul>\n<h4 id=\"魔数\"><a href=\"#魔数\" class=\"headerlink\" title=\"魔数\"></a>魔数</h4><p>Class 文件的头 4 个字节称为魔数，用来表示这个 Class 文件的类型。</p>\n<p>Class 文件的魔数是用 16 进制表示的“CAFE BABE”，是不是很具有浪漫色彩？</p>\n<blockquote>\n<p>魔数相当于文件后缀名，只不过后缀名容易被修改，不安全，因此在 Class 文件中标识文件类型比较合适。</p>\n</blockquote>\n<h4 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h4><p>紧接着魔数的 4 个字节是版本信息，5-6 字节表示次版本号，7-8 字节表示主版本号，它们表示当前 Class 文件中使用的是哪个版本的 JDK。</p>\n<p>高版本的 JDK 能向下兼容以前版本的 Class 文件，但不能运行以后版本的 Class 文件，即使文件格式并未发生任何变化，虚拟机也必需拒绝执行超过其版本号的 Class 文件。</p>\n<h4 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h4><p>版本信息之后就是常量池，常量池中存放两种类型的常量：</p>\n<ul>\n<li><p>字面值常量</p>\n<p>字面值常量就是我们在程序中定义的字符串、被 final 修饰的值。</p>\n</li>\n<li><p>符号引用</p>\n<p>符号引用就是我们定义的各种名字：类和接口的全限定名、字段的名字和描述符、方法的名字和描述符。</p>\n</li>\n</ul>\n<h5 id=\"常量池的特点\"><a href=\"#常量池的特点\" class=\"headerlink\" title=\"常量池的特点\"></a>常量池的特点</h5><ul>\n<li>常量池中常量数量不固定，因此常量池开头放置一个 u2 类型的无符号数，用来存储当前常量池的容量。</li>\n<li>常量池的每一项常量都是一个表，表开始的第一位是一个 u1 类型的标志位（tag），代表当前这个常量属于哪种常量类型。</li>\n</ul>\n<h5 id=\"常量池中常量类型\"><a href=\"#常量池中常量类型\" class=\"headerlink\" title=\"常量池中常量类型\"></a>常量池中常量类型</h5><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>tag</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONSTANT_utf8_info</td>\n<td>1</td>\n<td>UTF-8 编码的字符串</td>\n</tr>\n<tr>\n<td>CONSTANT_Integer_info</td>\n<td>3</td>\n<td>整型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Float_info</td>\n<td>4</td>\n<td>浮点型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Long_info</td>\n<td>5</td>\n<td>长整型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Double_info</td>\n<td>6</td>\n<td>双精度浮点型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Class_info</td>\n<td>7</td>\n<td>类或接口的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_String_info</td>\n<td>8</td>\n<td>字符串类型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Fieldref_info</td>\n<td>9</td>\n<td>字段的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_Methodref_info</td>\n<td>10</td>\n<td>类中方法的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_InterfaceMethodref_info</td>\n<td>11</td>\n<td>接口中方法的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_NameAndType_info</td>\n<td>12</td>\n<td>字段或方法的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodHandle_info</td>\n<td>15</td>\n<td>表示方法句柄</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodType_info</td>\n<td>16</td>\n<td>标识方法类型</td>\n</tr>\n<tr>\n<td>CONSTANT_InvokeDynamic_info</td>\n<td>18</td>\n<td>表示一个动态方法调用点</td>\n</tr>\n</tbody></table>\n<p>对于 CONSTANT_Class_info（此类型的常量代表一个类或者接口的符号引用），它的二维表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u1</td>\n<td>tag</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>name_index</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>tag 是标志位，用于区分常量类型；name_index 是一个索引值，它指向常量池中一个 CONSTANT_Utf8_info 类型常量，此常量代表这个类（或接口）的全限定名，这里 name_index 值若为 0x0002，也即是指向了常量池中的第二项常量。</p>\n<p>CONSTANT_Utf8_info 型常量的结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u1</td>\n<td>tag</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>length</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u1</td>\n<td>bytes</td>\n<td>length</td>\n</tr>\n</tbody></table>\n<p>tag 是当前常量的类型；length 表示这个字符串的长度；bytes 是这个字符串的内容（采用缩略的 UTF8 编码）</p>\n<h4 id=\"访问标志\"><a href=\"#访问标志\" class=\"headerlink\" title=\"访问标志\"></a>访问标志</h4><p>在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否被 abstract/final 修饰。</p>\n<h4 id=\"类索引、父类索引、接口索引集合\"><a href=\"#类索引、父类索引、接口索引集合\" class=\"headerlink\" title=\"类索引、父类索引、接口索引集合\"></a>类索引、父类索引、接口索引集合</h4><p>类索引和父类索引都是一个 u2 类型的数据，而接口索引集合是一组 u2 类型的数据的集合，Class 文件中由这三项数据来确定类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。</p>\n<p>由于 Java 不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。一个类可能实现了多个接口，因此用接口索引集合来描述。这个集合第一项为 u2 类型的数据，表示索引表的容量，接下来就是接口的名字索引。</p>\n<p>类索引和父类索引用两个 u2 类型的索引值表示，它们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过该常量总的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。</p>\n<h4 id=\"字段表集合\"><a href=\"#字段表集合\" class=\"headerlink\" title=\"字段表集合\"></a>字段表集合</h4><p>字段表集合存储本类涉及到的成员变量，包括实例变量和类变量，但不包括方法中的局部变量。</p>\n<p>每一个字段表只表示一个成员变量，本类中的所有成员变量构成了字段表集合。字段表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u2</td>\n<td>access_flags</td>\n<td>1</td>\n<td>字段的访问标志，与类稍有不同</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>name_index</td>\n<td>1</td>\n<td>字段名字的索引</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>descriptor_index</td>\n<td>1</td>\n<td>描述符，用于描述字段的数据类型。 基本数据类型用大写字母表示； 对象类型用“L 对象类型的全限定名”表示。</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>attributes_count</td>\n<td>1</td>\n<td>属性表集合的长度</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>attributes</td>\n<td>attributes_count</td>\n<td>属性表集合，用于存放属性的额外信息，如属性的值。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>字段表集合中不会出现从父类（或接口）中继承而来的字段，但有可能出现原本 Java 代码中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</p>\n</blockquote>\n<h4 id=\"方法表集合\"><a href=\"#方法表集合\" class=\"headerlink\" title=\"方法表集合\"></a>方法表集合</h4><p>方法表结构与属性表类似。</p>\n<p>volatile 关键字 和 transient 关键字不能修饰方法，所以方法表的访问标志中没有 ACC_VOLATILE 和 ACC_TRANSIENT 标志。</p>\n<p>方法表的属性表集合中有一张 Code 属性表，用于存储当前方法经编译器编译后的字节码指令。</p>\n<h4 id=\"属性表集合\"><a href=\"#属性表集合\" class=\"headerlink\" title=\"属性表集合\"></a>属性表集合</h4><p>每个属性对应一张属性表，属性表的结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u2</td>\n<td>attribute_name_index</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u4</td>\n<td>attribute_length</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u1</td>\n<td>info</td>\n<td>attribute_length</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-类加载的时机\"><a href=\"#7-类加载的时机\" class=\"headerlink\" title=\"7.类加载的时机\"></a>7.类加载的时机</h2><h3 id=\"7-1-类的生命周期\"><a href=\"#7-1-类的生命周期\" class=\"headerlink\" title=\"7.1 类的生命周期\"></a>7.1 类的生命周期</h3><p>类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括以下 7 个阶段：</p>\n<ul>\n<li>加载</li>\n<li>验证</li>\n<li>准备</li>\n<li>解析</li>\n<li>初始化</li>\n<li>使用</li>\n<li>卸载</li>\n</ul>\n<p>验证、准备、解析 3 个阶段统称为连接。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/loadclass.png\" alt=\"Load Class\"></p>\n<p>加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始（注意是“开始”，而不是“进行”或“完成”），而解析阶段则不一定：它在某些情况下可以在初始化后再开始，这是为了支持 Java 语言的运行时绑定。</p>\n<h3 id=\"7-2-类加载过程中“初始化”开始的时机\"><a href=\"#7-2-类加载过程中“初始化”开始的时机\" class=\"headerlink\" title=\"7.2 类加载过程中“初始化”开始的时机\"></a>7.2 类加载过程中“初始化”开始的时机</h3><p>Java 虚拟机规范没有强制约束类加载过程的第一阶段（即：加载）什么时候开始，但对于“初始化”阶段，有着严格的规定。有且仅有 5 种情况必须立即对类进行“初始化”：</p>\n<ul>\n<li>在遇到 new、putstatic、getstatic、invokestatic 字节码指令时，如果类尚未初始化，则需要先触发其初始化。</li>\n<li>对类进行反射调用时，如果类还没有初始化，则需要先触发其初始化。</li>\n<li>初始化一个类时，如果其父类还没有初始化，则需要先初始化父类。</li>\n<li>虚拟机启动时，用于需要指定一个包含 <code>main()</code> 方法的主类，虚拟机会先初始化这个主类。</li>\n<li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类还没初始化，则需要先触发其初始化。</li>\n</ul>\n<p>这 5 种场景中的行为称为对一个类进行<strong>主动引用</strong>，除此之外，其它所有引用类的方式都不会触发初始化，称为<strong>被动引用</strong>。</p>\n<h3 id=\"7-3-被动引用演示-Demo\"><a href=\"#7-3-被动引用演示-Demo\" class=\"headerlink\" title=\"7.3 被动引用演示 Demo\"></a>7.3 被动引用演示 Demo</h3><h4 id=\"Demo1\"><a href=\"#Demo1\" class=\"headerlink\" title=\"Demo1\"></a>Demo1</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 被动引用 Demo1:\n * 通过子类引用父类的静态字段，不会导致子类初始化。\n *\n * @author ylb\n *\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SuperClass init!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SubClass init!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotInitialization</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>SubClass<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// SuperClass init!</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>\n<h4 id=\"Demo2\"><a href=\"#Demo2\" class=\"headerlink\" title=\"Demo2\"></a>Demo2</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 被动引用 Demo2:\n * 通过数组定义来引用类，不会触发此类的初始化。\n *\n * @author ylb\n *\n */</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotInitialization</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        SuperClass<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> superClasses <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SuperClass</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>这段代码不会触发父类的初始化，但会触发“[L 全类名”这个类的初始化，它由虚拟机自动生成，直接继承自 java.lang.Object，创建动作由字节码指令 newarray 触发。</p>\n<h4 id=\"Demo3\"><a href=\"#Demo3\" class=\"headerlink\" title=\"Demo3\"></a>Demo3</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 被动引用 Demo3:\n * 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。\n *\n * @author ylb\n *\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstClass</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConstClass init!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String HELLO_BINGO <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Bingo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NotInitialization</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ConstClass<span class=\"token punctuation\">.</span>HELLO_BINGO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>编译通过之后，常量存储到 NotInitialization 类的常量池中，NotInitialization 的 Class 文件中并没有 ConstClass 类的符号引用入口，这两个类在编译成 Class 之后就没有任何联系了。</p>\n<h3 id=\"7-4-接口的加载过程\"><a href=\"#7-4-接口的加载过程\" class=\"headerlink\" title=\"7.4 接口的加载过程\"></a>7.4 接口的加载过程</h3><p>接口加载过程与类加载过程稍有不同。</p>\n<p>当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，当真正用到父接口的时候才会初始化。</p>\n<h3 id=\"7-5-类加载的过程\"><a href=\"#7-5-类加载的过程\" class=\"headerlink\" title=\"7.5 类加载的过程\"></a>7.5 类加载的过程</h3><p>类加载过程包括 5 个阶段：加载、验证、准备、解析和初始化。</p>\n<h3 id=\"7-6-加载\"><a href=\"#7-6-加载\" class=\"headerlink\" title=\"7.6 加载\"></a>7.6 加载</h3><h4 id=\"加载的过程\"><a href=\"#加载的过程\" class=\"headerlink\" title=\"加载的过程\"></a>加载的过程</h4><p>“加载”是“类加载”过程的一个阶段，不能混淆这两个名词。在加载阶段，虚拟机需要完成 3 件事：</p>\n<ul>\n<li>通过类的全限定名获取该类的二进制字节流。</li>\n<li>将二进制字节流所代表的静态结构转化为方法区的运行时数据结构。</li>\n<li>在内存中创建一个代表该类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li>\n</ul>\n<h4 id=\"获取二进制字节流\"><a href=\"#获取二进制字节流\" class=\"headerlink\" title=\"获取二进制字节流\"></a>获取二进制字节流</h4><p>对于 Class 文件，虚拟机没有指明要从哪里获取、怎样获取。除了直接从编译好的 .class 文件中读取，还有以下几种方式：</p>\n<ul>\n<li>从 zip 包中读取，如 jar、war 等</li>\n<li>从网络中获取，如 Applet</li>\n<li>通过动态代理技术生成代理类的二进制字节流</li>\n<li>由 JSP 文件生成对应的 Class 类</li>\n<li>从数据库中读取，如 有些中间件服务器可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</li>\n</ul>\n<h4 id=\"“非数组类”与“数组类”加载比较\"><a href=\"#“非数组类”与“数组类”加载比较\" class=\"headerlink\" title=\"“非数组类”与“数组类”加载比较\"></a>“非数组类”与“数组类”加载比较</h4><ul>\n<li>非数组类加载阶段可以使用系统提供的引导类加载器，也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器控制字节流的获取方式（如重写一个类加载器的 <code>loadClass()</code> 方法）</li>\n<li>数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的，再由类加载器创建数组中的元素类。</li>\n</ul>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>虚拟机规范未规定 Class 对象的存储位置，对于 HotSpot 虚拟机而言，Class 对象比较特殊，它虽然是对象，但存放在方法区中。</li>\n<li>加载阶段与连接阶段的部分内容交叉进行，加载阶段尚未完成，连接阶段可能已经开始了。但这两个阶段的开始时间仍然保持着固定的先后顺序。</li>\n</ul>\n<h3 id=\"7-7-验证\"><a href=\"#7-7-验证\" class=\"headerlink\" title=\"7.7 验证\"></a>7.7 验证</h3><h4 id=\"验证的重要性\"><a href=\"#验证的重要性\" class=\"headerlink\" title=\"验证的重要性\"></a>验证的重要性</h4><p>验证阶段确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n<h4 id=\"验证的过程\"><a href=\"#验证的过程\" class=\"headerlink\" title=\"验证的过程\"></a>验证的过程</h4><ul>\n<li>文件格式验证 验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，验证点如下：<ul>\n<li>是否以魔数 0XCAFEBABE 开头</li>\n<li>主次版本号是否在当前虚拟机处理范围内</li>\n<li>常量池是否有不被支持的常量类型</li>\n<li>指向常量的索引值是否指向了不存在的常量</li>\n<li>CONSTANT_Utf8_info 型的常量是否有不符合 UTF8 编码的数据</li>\n<li>……</li>\n</ul>\n</li>\n<li>元数据验证 对字节码描述信息进行语义分析，确保其符合 Java 语法规范。</li>\n<li>字节码验证 本阶段是验证过程中最复杂的一个阶段，是对方法体进行语义分析，保证方法在运行时不会出现危害虚拟机的事件。</li>\n<li>符号引用验证 本阶段发生在解析阶段，确保解析正常执行。</li>\n</ul>\n<h3 id=\"7-8-准备\"><a href=\"#7-8-准备\" class=\"headerlink\" title=\"7.8 准备\"></a>7.8 准备</h3><p>准备阶段是正式为类变量（或称“静态成员变量”）分配内存并设置初始值的阶段。这些变量（不包括实例变量）所使用的内存都在方法区中进行分配。</p>\n<p>初始值“通常情况下”是数据类型的零值（0, null…），假设一个类变量的定义为：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></code></pre>\n<p>那么变量 value 在准备阶段过后的初始值为 0 而不是 123，因为这时候尚未开始执行任何 Java 方法。</p>\n<p>存在“特殊情况”：如果类字段的字段属性表中存在 ConstantValue 属性，那么在准备阶段 value 就会被初始化为 ConstantValue 属性所指定的值，假设上面类变量 value 的定义变为：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></code></pre>\n<p>那么在准备阶段虚拟机会根据 ConstantValue 的设置将 value 赋值为 123。</p>\n<h3 id=\"7-9-解析\"><a href=\"#7-9-解析\" class=\"headerlink\" title=\"7.9 解析\"></a>7.9 解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<h3 id=\"7-10-初始化\"><a href=\"#7-10-初始化\" class=\"headerlink\" title=\"7.10 初始化\"></a>7.10 初始化</h3><p>类初始化阶段是类加载过程的最后一步，是执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p>\n<p><code>&lt;clinit&gt;()</code> 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {} 块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。</p>\n<p>静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但不能访问。如下方代码所示：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 给变量赋值可以正常编译通过</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 这句编译器会提示“非法向前引用”</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>&lt;clinit&gt;()</code> 方法不需要显式调用父类构造器，虚拟机会保证在子类的 <code>&lt;clinit&gt;()</code> 方法执行之前，父类的 <code>&lt;clinit&gt;()</code> 方法已经执行完毕。</p>\n<p>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。如下方代码所示：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> A <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        A <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> B <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Sub<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 输出 2</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><code>&lt;clinit&gt;()</code> 方法不是必需的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成 <code>&lt;clinit&gt;()</code> 方法。</p>\n<p>接口中不能使用静态代码块，但接口也需要通过 <code>&lt;clinit&gt;()</code> 方法为接口中定义的静态成员变量显式初始化。但接口与类不同，接口的 <code>&lt;clinit&gt;()</code> 方法不需要先执行父类的 <code>&lt;clinit&gt;()</code> 方法，只有当父接口中定义的变量使用时，父接口才会初始化。</p>\n<p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确加锁、同步。如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法。</p>\n<h2 id=\"8-类加载器\"><a href=\"#8-类加载器\" class=\"headerlink\" title=\"8.类加载器\"></a>8.类加载器</h2><h3 id=\"8-1-类与类加载器\"><a href=\"#8-1-类与类加载器\" class=\"headerlink\" title=\"8.1 类与类加载器\"></a>8.1 类与类加载器</h3><h4 id=\"判断类是否“相等”\"><a href=\"#判断类是否“相等”\" class=\"headerlink\" title=\"判断类是否“相等”\"></a>判断类是否“相等”</h4><p>任意一个类，都由<strong>加载它的类加载器</strong>和这个<strong>类本身</strong>一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都有一个独立的类名称空间。</p>\n<p>因此，比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必定不相等。</p>\n<p>这里的“相等”，包括代表类的 Class 对象的 <code>equals()</code> 方法、<code>isInstance()</code> 方法的返回结果，也包括使用 instanceof 关键字做对象所属关系判定等情况。</p>\n<h4 id=\"加载器种类\"><a href=\"#加载器种类\" class=\"headerlink\" title=\"加载器种类\"></a>加载器种类</h4><p>系统提供了 3 种类加载器：</p>\n<ul>\n<li>启动类加载器（Bootstrap ClassLoader）： 负责将存放在 <code>&lt;JAVA_HOME&gt;\\lib</code> 目录中的，并且能被虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。</li>\n<li>扩展类加载器（Extension ClassLoader）： 负责加载 <code>&lt;JAVA_HOME&gt;\\lib\\ext</code> 目录中的所有类库，开发者可以直接使用扩展类加载器。</li>\n<li>应用程序类加载器（Application ClassLoader）： 由于这个类加载器是 ClassLoader 中的 <code>getSystemClassLoader()</code> 方法的返回值，所以一般也称它为“系统类加载器”。它负责加载用户类路径（classpath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/classloader.png\" alt=\"ClassLoader\"></p>\n<p>当然，如果有必要，还可以加入自己定义的类加载器。</p>\n<h3 id=\"8-2-双亲委派模型\"><a href=\"#8-2-双亲委派模型\" class=\"headerlink\" title=\"8.2 双亲委派模型\"></a>8.2 双亲委派模型</h3><h4 id=\"什么是双亲委派模型\"><a href=\"#什么是双亲委派模型\" class=\"headerlink\" title=\"什么是双亲委派模型\"></a>什么是双亲委派模型</h4><p>双亲委派模型是描述类加载器之间的层次关系。它要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。（父子关系一般不会以继承的关系实现，而是以组合关系来复用父加载器的代码）</p>\n<h4 id=\"工作过程\"><a href=\"#工作过程\" class=\"headerlink\" title=\"工作过程\"></a>工作过程</h4><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（找不到所需的类）时，子加载器才会尝试自己去加载。</p>\n<p>在 java.lang.ClassLoader 中的 <code>loadClass</code> 方法中实现该过程。</p>\n<h4 id=\"为什么使用双亲委派模型\"><a href=\"#为什么使用双亲委派模型\" class=\"headerlink\" title=\"为什么使用双亲委派模型\"></a>为什么使用双亲委派模型</h4><p>像 java.lang.Object 这些存放在 rt.jar 中的类，无论使用哪个类加载器加载，最终都会委派给最顶端的启动类加载器加载，从而使得不同加载器加载的 Object 类都是同一个。</p>\n<p>相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为 java.lang.Object 的类，并放在 classpath 下，那么系统将会出现多个不同的 Object 类，Java 类型体系中最基础的行为也就无法保证。</p>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"筑基系列-JVM基础知识小抄版\"><a href=\"#筑基系列-JVM基础知识小抄版\" class=\"headerlink\" title=\"筑基系列-JVM基础知识小抄版\"></a>筑基系列-JVM基础知识小抄版</h1><h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>[toc]</p>\n<h2 id=\"1-JVM-内存结构\"><a href=\"#1-JVM-内存结构\" class=\"headerlink\" title=\"1.JVM 内存结构\"></a>1.JVM 内存结构</h2><p>Java 虚拟机的内存空间分为 5 个部分：</p>\n<ul>\n<li>程序计数器</li>\n<li>Java 虚拟机栈</li>\n<li>本地方法栈</li>\n<li>堆</li>\n<li>方法区</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-memory-structure.jpg\" alt=\"jvm-memory-structure\"></p>\n<p>JDK 1.8 同 JDK 1.7 比，最大的差别就是：元数据区取代了永久代。元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元数据空间并不在虚拟机中，而是使用本地内存。</p>\n<h3 id=\"1-1-程序计数器（PC-寄存器）\"><a href=\"#1-1-程序计数器（PC-寄存器）\" class=\"headerlink\" title=\"1.1 程序计数器（PC 寄存器）\"></a>1.1 程序计数器（PC 寄存器）</h3><h4 id=\"程序计数器的定义\"><a href=\"#程序计数器的定义\" class=\"headerlink\" title=\"程序计数器的定义\"></a>程序计数器的定义</h4><p>程序计数器是一块较小的内存空间，是当前线程正在执行的那条字节码指令的地址。若当前线程正在执行的是一个本地方法，那么此时程序计数器为<code>Undefined</code>。</p>\n<h4 id=\"程序计数器的作用\"><a href=\"#程序计数器的作用\" class=\"headerlink\" title=\"程序计数器的作用\"></a>程序计数器的作用</h4><ul>\n<li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制。</li>\n<li>在多线程情况下，程序计数器记录的是当前线程执行的位置，从而当线程切换回来时，就知道上次线程执行到哪了。</li>\n</ul>\n<h4 id=\"程序计数器的特点\"><a href=\"#程序计数器的特点\" class=\"headerlink\" title=\"程序计数器的特点\"></a>程序计数器的特点</h4><ul>\n<li>是一块较小的内存空间。</li>\n<li>线程私有，每条线程都有自己的程序计数器。</li>\n<li>生命周期：随着线程的创建而创建，随着线程的结束而销毁。</li>\n<li>是唯一一个不会出现<code>OutOfMemoryError</code>的内存区域。</li>\n</ul>\n<h3 id=\"1-2-Java-虚拟机栈（Java-栈）\"><a href=\"#1-2-Java-虚拟机栈（Java-栈）\" class=\"headerlink\" title=\"1.2 Java 虚拟机栈（Java 栈）\"></a>1.2 Java 虚拟机栈（Java 栈）</h3><h4 id=\"Java-虚拟机栈的定义\"><a href=\"#Java-虚拟机栈的定义\" class=\"headerlink\" title=\"Java 虚拟机栈的定义\"></a>Java 虚拟机栈的定义</h4><p>Java 虚拟机栈是描述 Java 方法运行过程的内存模型。</p>\n<p>Java 虚拟机栈会为每一个即将运行的 Java 方法创建一块叫做“栈帧”的区域，用于存放该方法运行过程中的一些信息，如：</p>\n<ul>\n<li>局部变量表</li>\n<li>操作数栈</li>\n<li>动态链接</li>\n<li>方法出口信息</li>\n<li>……</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/jvm-stack.jpg\" alt=\"jvm-stack\"></p>\n<h4 id=\"压栈出栈过程\"><a href=\"#压栈出栈过程\" class=\"headerlink\" title=\"压栈出栈过程\"></a>压栈出栈过程</h4><p>当方法运行过程中需要创建局部变量时，就将局部变量的值存入栈帧中的局部变量表中。</p>\n<p>Java 虚拟机栈的栈顶的栈帧是当前正在执行的活动栈，也就是当前正在执行的方法，PC 寄存器也会指向这个地址。只有这个活动的栈帧的本地变量可以被操作数栈使用，当在这个栈帧中调用另一个方法，与之对应的栈帧又会被创建，新创建的栈帧压入栈顶，变为当前的活动栈帧。</p>\n<p>方法结束后，当前栈帧被移出，栈帧的返回值变成新的活动栈帧中操作数栈的一个操作数。如果没有返回值，那么新的活动栈帧中操作数栈的操作数没有变化。</p>\n<blockquote>\n<p>由于 Java 虚拟机栈是与线程对应的，数据不是线程共享的，因此不用关心数据一致性问题，也不会存在同步锁的问题。</p>\n</blockquote>\n<h4 id=\"Java-虚拟机栈的特点\"><a href=\"#Java-虚拟机栈的特点\" class=\"headerlink\" title=\"Java 虚拟机栈的特点\"></a>Java 虚拟机栈的特点</h4><ul>\n<li>局部变量表随着栈帧的创建而创建，它的大小在编译时确定，创建时只需分配事先规定的大小即可。在方法运行过程中，局部变量表的大小不会发生改变。</li>\n<li>Java 虚拟机栈会出现两种异常：StackOverFlowError 和 OutOfMemoryError。<ul>\n<li>StackOverFlowError 若 Java 虚拟机栈的大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度时，抛出 StackOverFlowError 异常。</li>\n<li>OutOfMemoryError 若允许动态扩展，那么当线程请求栈时内存用完了，无法再动态扩展时，抛出 OutOfMemoryError 异常。</li>\n</ul>\n</li>\n<li>Java 虚拟机栈也是线程私有，随着线程创建而创建，随着线程的结束而销毁。</li>\n</ul>\n<blockquote>\n<p>出现 StackOverFlowError 时，内存空间可能还有很多。</p>\n</blockquote>\n<h3 id=\"1-3-本地方法栈（C-栈）\"><a href=\"#1-3-本地方法栈（C-栈）\" class=\"headerlink\" title=\"1.3 本地方法栈（C 栈）\"></a>1.3 本地方法栈（C 栈）</h3><h4 id=\"本地方法栈的定义\"><a href=\"#本地方法栈的定义\" class=\"headerlink\" title=\"本地方法栈的定义\"></a>本地方法栈的定义</h4><p>本地方法栈是为 JVM 运行 Native 方法准备的空间，由于很多 Native 方法都是用 C 语言实现的，所以它通常又叫 C 栈。它与 Java 虚拟机栈实现的功能类似，只不过本地方法栈是描述本地方法运行过程的内存模型。</p>\n<h4 id=\"栈帧变化过程\"><a href=\"#栈帧变化过程\" class=\"headerlink\" title=\"栈帧变化过程\"></a>栈帧变化过程</h4><p>本地方法被执行时，在本地方法栈也会创建一块栈帧，用于存放该方法的局部变量表、操作数栈、动态链接、方法出口信息等。</p>\n<p>方法执行结束后，相应的栈帧也会出栈，并释放内存空间。也会抛出 StackOverFlowError 和 OutOfMemoryError 异常。</p>\n<blockquote>\n<p>如果 Java 虚拟机本身不支持 Native 方法，或是本身不依赖于传统栈，那么可以不提供本地方法栈。如果支持本地方法栈，那么这个栈一般会在线程创建的时候按线程分配。</p>\n</blockquote>\n<h3 id=\"1-4-堆\"><a href=\"#1-4-堆\" class=\"headerlink\" title=\"1.4 堆\"></a>1.4 堆</h3><h4 id=\"堆的定义\"><a href=\"#堆的定义\" class=\"headerlink\" title=\"堆的定义\"></a>堆的定义</h4><p>堆是用来存放对象的内存空间，几乎所有的对象都存储在堆中。</p>\n<h4 id=\"堆的特点\"><a href=\"#堆的特点\" class=\"headerlink\" title=\"堆的特点\"></a>堆的特点</h4><ul>\n<li>线程共享，整个 Java 虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java 虚拟机栈、本地方法栈都是一个线程对应一个。</li>\n<li>在虚拟机启动时创建。</li>\n<li>是垃圾回收的主要场所。</li>\n<li>进一步可分为：新生代（Eden 区：<code>From Survior</code>，<code>To Survivor</code>）、老年代。</li>\n</ul>\n<p>不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。</p>\n<p>堆的大小既可以固定也可以扩展，但对于主流的虚拟机，堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已无法再扩展时，就抛出 OutOfMemoryError 异常。</p>\n<blockquote>\n<p>Java 堆所使用的内存不需要保证是连续的。而由于堆是被所有线程共享的，所以对它的访问需要注意同步问题，方法和对应的属性都需要保证一致性。</p>\n</blockquote>\n<h3 id=\"1-5-方法区\"><a href=\"#1-5-方法区\" class=\"headerlink\" title=\"1.5 方法区\"></a>1.5 方法区</h3><h4 id=\"方法区的定义\"><a href=\"#方法区的定义\" class=\"headerlink\" title=\"方法区的定义\"></a>方法区的定义</h4><p>Java 虚拟机规范中定义方法区是堆的一个逻辑部分。方法区存放以下信息：</p>\n<ul>\n<li>已经被虚拟机加载的类信息</li>\n<li>常量</li>\n<li>静态变量</li>\n<li>即时编译器编译后的代码</li>\n</ul>\n<h4 id=\"方法区的特点\"><a href=\"#方法区的特点\" class=\"headerlink\" title=\"方法区的特点\"></a>方法区的特点</h4><ul>\n<li>线程共享。 方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。</li>\n<li>永久代。 方法区中的信息一般需要长期存在，而且它又是堆的逻辑分区，因此用堆的划分方法，把方法区称为“永久代”。</li>\n<li>内存回收效率低。 方法区中的信息一般需要长期存在，回收一遍之后可能只有少量信息无效。主要回收目标是：对常量池的回收；对类型的卸载。</li>\n<li>Java 虚拟机规范对方法区的要求比较宽松。 和堆一样，允许固定大小，也允许动态扩展，还允许不实现垃圾回收。</li>\n</ul>\n<h4 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h4><p>方法区中存放：类信息、常量、静态变量、即时编译器编译后的代码。常量就存放在运行时常量池中。</p>\n<p>当类被 Java 虚拟机加载后， .class 文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如 String 类的 <code>intern()</code> 方法就能在运行期间向常量池中添加字符串常量。</p>\n<h3 id=\"1-6-直接内存（堆外内存）\"><a href=\"#1-6-直接内存（堆外内存）\" class=\"headerlink\" title=\"1.6 直接内存（堆外内存）\"></a>1.6 直接内存（堆外内存）</h3><p>直接内存是除 Java 虚拟机之外的内存，但也可能被 Java 使用。</p>\n<h4 id=\"操作直接内存\"><a href=\"#操作直接内存\" class=\"headerlink\" title=\"操作直接内存\"></a>操作直接内存</h4><p>在 NIO 中引入了一种基于通道和缓冲的 IO 方式。它可以通过调用本地方法直接分配 Java 虚拟机之外的内存，然后通过一个存储在堆中的<code>DirectByteBuffer</code>对象直接操作该内存，而无须先将外部内存中的数据复制到堆中再进行操作，从而提高了数据操作的效率。</p>\n<p>直接内存的大小不受 Java 虚拟机控制，但既然是内存，当内存不足时就会抛出 OutOfMemoryError 异常。</p>\n<h4 id=\"直接内存与堆内存比较\"><a href=\"#直接内存与堆内存比较\" class=\"headerlink\" title=\"直接内存与堆内存比较\"></a>直接内存与堆内存比较</h4><ul>\n<li>直接内存申请空间耗费更高的性能</li>\n<li>直接内存读取 IO 的性能要优于普通的堆内存。</li>\n<li>直接内存作用链： 本地 IO -&gt; 直接内存 -&gt; 本地 IO</li>\n<li>堆内存作用链：本地 IO -&gt; 直接内存 -&gt; 非直接内存 -&gt; 直接内存 -&gt; 本地 IO</li>\n</ul>\n<blockquote>\n<p>服务器管理员在配置虚拟机参数时，会根据实际内存设置<code>-Xmx</code>等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制，从而导致动态扩展时出现<code>OutOfMemoryError</code>异常。</p>\n</blockquote>\n<h2 id=\"2-HotSpot-虚拟机对象探秘\"><a href=\"#2-HotSpot-虚拟机对象探秘\" class=\"headerlink\" title=\"2.HotSpot 虚拟机对象探秘\"></a>2.HotSpot 虚拟机对象探秘</h2><h3 id=\"2-1-对象的内存布局\"><a href=\"#2-1-对象的内存布局\" class=\"headerlink\" title=\"2.1 对象的内存布局\"></a>2.1 对象的内存布局</h3><p>在 HotSpot 虚拟机中，对象的内存布局分为以下 3 块区域：</p>\n<ul>\n<li>对象头（Header）</li>\n<li>实例数据（Instance Data）</li>\n<li>对齐填充（Padding）</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/object-memory-layout.png\" alt=\"object-memory-layout.png\"></p>\n<h4 id=\"对象头\"><a href=\"#对象头\" class=\"headerlink\" title=\"对象头\"></a>对象头</h4><p>对象头记录了对象在运行过程中所需要使用的一些数据：</p>\n<ul>\n<li>哈希码</li>\n<li>GC 分代年龄</li>\n<li>锁状态标志</li>\n<li>线程持有的锁</li>\n<li>偏向线程 ID</li>\n<li>偏向时间戳</li>\n</ul>\n<p>对象头可能包含类型指针，通过该指针能确定对象属于哪个类。如果对象是一个数组，那么对象头还会包括数组长度。</p>\n<h4 id=\"实例数据\"><a href=\"#实例数据\" class=\"headerlink\" title=\"实例数据\"></a>实例数据</h4><p>实例数据部分就是成员变量的值，其中包括父类成员变量和本类成员变量。</p>\n<h4 id=\"对齐填充\"><a href=\"#对齐填充\" class=\"headerlink\" title=\"对齐填充\"></a>对齐填充</h4><p>用于确保对象的总长度为 8 字节的整数倍。</p>\n<p>HotSpot VM 的自动内存管理系统要求对象的大小必须是 8 字节的整数倍。而对象头部分正好是 8 字节的倍数（1 倍或 2 倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p>\n<blockquote>\n<p>对齐填充并不是必然存在，也没有特别的含义，它仅仅起着占位符的作用。</p>\n</blockquote>\n<h3 id=\"2-2-对象的创建过程\"><a href=\"#2-2-对象的创建过程\" class=\"headerlink\" title=\"2.2 对象的创建过程\"></a>2.2 对象的创建过程</h3><h4 id=\"类加载检查\"><a href=\"#类加载检查\" class=\"headerlink\" title=\"类加载检查\"></a>类加载检查</h4><p>虚拟机在解析<code>.class</code>文件时，若遇到一条 new 指令，首先它会去检查常量池中是否有这个类的符号引用，并且检查这个符号引用所代表的类是否已被加载、解析和初始化过。如果没有，那么必须先执行相应的类加载过程。</p>\n<h4 id=\"为新生对象分配内存\"><a href=\"#为新生对象分配内存\" class=\"headerlink\" title=\"为新生对象分配内存\"></a>为新生对象分配内存</h4><p>对象所需内存的大小在类加载完成后便可完全确定，接下来从堆中划分一块对应大小的内存空间给新的对象。分配堆中内存有两种方式：</p>\n<ul>\n<li><p><strong>指针碰撞</strong><br><br>如果 Java <strong>堆中内存绝对规整</strong>（说明采用的是“<strong>复制算法</strong>”或“<strong>标记整理法</strong>”），空闲内存和已使用内存中间放着一个指针作为分界点指示器，那么分配内存时只需要把指针向空闲内存挪动一段与对象大小一样的距离，这种分配方式称为“<strong>指针碰撞</strong>”。</p>\n</li>\n<li><p><strong>空闲列表</strong><br><br>如果 Java <strong>堆中内存并不规整</strong>，已使用的内存和空闲内存交错（说明采用的是<strong>标记-清除法</strong>，有碎片），此时没法简单进行指针碰撞， VM 必须维护一个列表，记录其中哪些内存块空闲可用。分配之时从空闲列表中找到一块足够大的内存空间划分给对象实例。这种方式称为“<strong>空闲列表</strong>”。</p>\n</li>\n</ul>\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>分配完内存后，为对象中的成员变量赋上初始值，设置对象头信息，调用对象的构造函数方法进行初始化。</p>\n<p>至此，整个对象的创建过程就完成了。</p>\n<h3 id=\"2-3-对象的访问方式\"><a href=\"#2-3-对象的访问方式\" class=\"headerlink\" title=\"2.3 对象的访问方式\"></a>2.3 对象的访问方式</h3><p>所有对象的存储空间都是在堆中分配的，但是这个对象的引用却是在堆栈中分配的。也就是说在建立一个对象时两个地方都分配内存，在堆中分配的内存实际建立这个对象，而在堆栈中分配的内存只是一个指向这个堆对象的指针（引用）而已。 那么根据引用存放的地址类型的不同，对象有不同的访问方式。</p>\n<h4 id=\"句柄访问方式\"><a href=\"#句柄访问方式\" class=\"headerlink\" title=\"句柄访问方式\"></a>句柄访问方式</h4><p>堆中需要有一块叫做“句柄池”的内存空间，句柄中包含了对象实例数据与类型数据各自的具体地址信息。</p>\n<p>引用类型的变量存放的是该对象的句柄地址（reference）。访问对象时，首先需要通过引用类型的变量找到该对象的句柄，然后根据句柄中对象的地址找到对象。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/handle-access.jpg\" alt=\"handle-access\"></p>\n<h4 id=\"直接指针访问方式\"><a href=\"#直接指针访问方式\" class=\"headerlink\" title=\"直接指针访问方式\"></a>直接指针访问方式</h4><p>引用类型的变量直接存放对象的地址，从而不需要句柄池，通过引用能够直接访问对象。但对象所在的内存空间需要额外的策略存储对象所属的类信息的地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/direct-pointer.jpg\" alt=\"direct-pointer\"></p>\n<p>需要说明的是，HotSpot 采用第二种方式，即直接指针方式来访问对象，只需要一次寻址操作，所以在性能上比句柄访问方式快一倍。但像上面所说，它需要<strong>额外的策略</strong>来存储对象在方法区中类信息的地址。</p>\n<h2 id=\"3-垃圾收集策略与算法\"><a href=\"#3-垃圾收集策略与算法\" class=\"headerlink\" title=\"3.垃圾收集策略与算法\"></a>3.垃圾收集策略与算法</h2><p>程序计数器、虚拟机栈、本地方法栈随线程而生，也随线程而灭；栈帧随着方法的开始而入栈，随着方法的结束而出栈。这几个区域的内存分配和回收都具有确定性，在这几个区域内不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。</p>\n<p>而对于 Java 堆和方法区，我们只有在程序运行期间才能知道会创建哪些对象，这部分内存的分配和回收都是动态的，垃圾收集器所关注的正是这部分内存。</p>\n<h3 id=\"3-1-判定对象是否存活\"><a href=\"#3-1-判定对象是否存活\" class=\"headerlink\" title=\"3.1 判定对象是否存活\"></a>3.1 判定对象是否存活</h3><p>若一个对象不被任何对象或变量引用，那么它就是无效对象，需要被回收。</p>\n<h4 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h4><p>在对象头维护着一个 counter 计数器，对象被引用一次则计数器 +1；若引用失效则计数器 -1。当计数器为 0 时，就认为该对象无效了。</p>\n<p>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法。但是主流的 Java 虚拟机里没有选用引用计数算法来管理内存，主要是因为它很难解决对象之间循环引用的问题。</p>\n<blockquote>\n<p>举个栗子 👉 对象 objA 和 objB 都有字段 instance，令 objA.instance = objB 并且 objB.instance = objA，由于它们互相引用着对方，导致它们的引用计数都不为 0，于是引用计数算法无法通知 GC 收集器回收它们。</p>\n</blockquote>\n<h4 id=\"可达性分析法\"><a href=\"#可达性分析法\" class=\"headerlink\" title=\"可达性分析法\"></a>可达性分析法</h4><p>所有和 GC Roots 直接或间接关联的对象都是有效对象，和 GC Roots 没有关联的对象就是无效对象。</p>\n<p>GC Roots 是指：</p>\n<ul>\n<li>Java 虚拟机栈（栈帧中的本地变量表）中引用的对象</li>\n<li>本地方法栈中引用的对象</li>\n<li>方法区中常量引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n</ul>\n<p>GC Roots 并不包括堆中对象所引用的对象，这样就不会有循环引用的问题。</p>\n<h3 id=\"3-2-引用的种类\"><a href=\"#3-2-引用的种类\" class=\"headerlink\" title=\"3.2 引用的种类\"></a>3.2 引用的种类</h3><p>判定对象是否存活与“引用”有关。在 JDK 1.2 以前，Java 中的引用定义很传统，一个对象只有被引用或者没有被引用两种状态，我们希望能描述这一类对象：当内存空间还足够时，则保留在内存中；如果内存空间在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。</p>\n<p>在 JDK 1.2 之后，Java 对引用的概念进行了扩充，将引用分为了以下四种。不同的引用类型，主要体现的是对象不同的可达性状态<code>reachable</code>和垃圾收集的影响。</p>\n<h4 id=\"强引用（Strong-Reference）\"><a href=\"#强引用（Strong-Reference）\" class=\"headerlink\" title=\"强引用（Strong Reference）\"></a>强引用（Strong Reference）</h4><p>类似 “<code>Object obj = new Object()</code>“ 这类的引用，就是强引用，只要强引用存在，垃圾收集器永远不会回收被引用的对象。但是，如果我们<strong>错误地保持了强引用</strong>，比如：赋值给了 static 变量，那么对象在很长一段时间内不会被回收，会产生内存泄漏。</p>\n<h4 id=\"软引用（Soft-Reference）\"><a href=\"#软引用（Soft-Reference）\" class=\"headerlink\" title=\"软引用（Soft Reference）\"></a>软引用（Soft Reference）</h4><p>软引用是一种相对强引用弱化一些的引用，可以让对象豁免一些垃圾收集，只有当 JVM 认为内存不足时，才会去试图回收软引用指向的对象。JVM 会确保在抛出 OutOfMemoryError 之前，清理软引用指向的对象。软引用通常用来<strong>实现内存敏感的缓存</strong>，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p>\n<h4 id=\"弱引用（Weak-Reference）\"><a href=\"#弱引用（Weak-Reference）\" class=\"headerlink\" title=\"弱引用（Weak Reference）\"></a>弱引用（Weak Reference）</h4><p>弱引用的<strong>强度比软引用更弱</strong>一些。当 JVM 进行垃圾回收时，<strong>无论内存是否充足，都会回收</strong>只被弱引用关联的对象。</p>\n<h4 id=\"虚引用（Phantom-Reference）\"><a href=\"#虚引用（Phantom-Reference）\" class=\"headerlink\" title=\"虚引用（Phantom Reference）\"></a>虚引用（Phantom Reference）</h4><p>虚引用也称幽灵引用或者幻影引用，它是<strong>最弱</strong>的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响。它仅仅是提供了一种确保对象被 finalize 以后，做某些事情的机制，比如，通常用来做所谓的 Post-Mortem 清理机制。</p>\n<h3 id=\"3-3-回收堆中无效对象\"><a href=\"#3-3-回收堆中无效对象\" class=\"headerlink\" title=\"3.3 回收堆中无效对象\"></a>3.3 回收堆中无效对象</h3><p>对于可达性分析中不可达的对象，也并不是没有存活的可能。</p>\n<h4 id=\"判定-finalize-是否有必要执行\"><a href=\"#判定-finalize-是否有必要执行\" class=\"headerlink\" title=\"判定 finalize() 是否有必要执行\"></a>判定 finalize() 是否有必要执行</h4><p>JVM 会判断此对象是否有必要执行 finalize() 方法，如果对象没有覆盖 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，那么视为“没有必要执行”。那么对象基本上就真的被回收了。</p>\n<p>如果对象被判定为有必要执行 finalize() 方法，那么对象会被放入一个 F-Queue 队列中，虚拟机会以较低的优先级执行这些 finalize()方法，但不会确保所有的 finalize() 方法都会执行结束。如果 finalize() 方法出现耗时操作，虚拟机就直接停止指向该方法，将对象清除。</p>\n<h4 id=\"对象重生或死亡\"><a href=\"#对象重生或死亡\" class=\"headerlink\" title=\"对象重生或死亡\"></a>对象重生或死亡</h4><p>如果在执行 finalize() 方法时，将 this 赋给了某一个引用，那么该对象就重生了。如果没有，那么就会被垃圾收集器清除。</p>\n<blockquote>\n<p>任何一个对象的 finalize() 方法只会被系统自动调用一次，如果对象面临下一次回收，它的 finalize() 方法不会被再次执行，想继续在 finalize() 中自救就失效了。</p>\n</blockquote>\n<h3 id=\"3-3-回收方法区内存\"><a href=\"#3-3-回收方法区内存\" class=\"headerlink\" title=\"3.3 回收方法区内存\"></a>3.3 回收方法区内存</h3><p>方法区中存放生命周期较长的类信息、常量、静态变量，每次垃圾收集只有少量的垃圾被清除。方法区中主要清除两种垃圾：</p>\n<ul>\n<li>废弃常量</li>\n<li>无用的类</li>\n</ul>\n<h4 id=\"判定废弃常量\"><a href=\"#判定废弃常量\" class=\"headerlink\" title=\"判定废弃常量\"></a>判定废弃常量</h4><p>只要常量池中的常量不被任何变量或对象引用，那么这些常量就会被清除掉。比如，一个字符串 “bingo” 进入了常量池，但是当前系统没有任何一个 String 对象引用常量池中的 “bingo” 常量，也没有其它地方引用这个字面量，必要的话，”bingo”常量会被清理出常量池。</p>\n<h4 id=\"判定无用的类\"><a href=\"#判定无用的类\" class=\"headerlink\" title=\"判定无用的类\"></a>判定无用的类</h4><p>判定一个类是否是“无用的类”，条件较为苛刻。</p>\n<ul>\n<li>该类的所有对象都已经被清除</li>\n<li>加载该类的 ClassLoader 已经被回收</li>\n<li>该类的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>\n</ul>\n<blockquote>\n<p>一个类被虚拟机加载进方法区，那么在堆中就会有一个代表该类的对象：java.lang.Class。这个对象在类被加载进方法区时创建，在方法区该类被删除时清除。</p>\n</blockquote>\n<h3 id=\"3-4-垃圾收集算法\"><a href=\"#3-4-垃圾收集算法\" class=\"headerlink\" title=\"3,4 垃圾收集算法\"></a>3,4 垃圾收集算法</h3><p>学会了如何判定无效对象、无用类、废弃常量之后，剩余工作就是回收这些垃圾。常见的垃圾收集算法有以下几个：</p>\n<h4 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h4><p><strong>标记</strong>的过程是：遍历所有的 <code>GC Roots</code>，然后将所有 <code>GC Roots</code> 可达的对象<strong>标记为存活的对象</strong>。</p>\n<p><strong>清除</strong>的过程将遍历堆中所有的对象，将没有标记的对象全部清除掉。与此同时，清除那些被标记过的对象的标记，以便下次的垃圾回收。</p>\n<p>这种方法有两个<strong>不足</strong>：</p>\n<ul>\n<li>效率问题：标记和清除两个过程的效率都不高。</li>\n<li>空间问题：标记清除之后会产生大量不连续的内存碎片，碎片太多可能导致以后需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</li>\n</ul>\n<h4 id=\"复制算法（新生代）\"><a href=\"#复制算法（新生代）\" class=\"headerlink\" title=\"复制算法（新生代）\"></a>复制算法（新生代）</h4><p>为了解决效率问题，“复制”收集算法出现了。它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块内存用完，需要进行垃圾收集时，就将存活者的对象复制到另一块上面，然后将第一块内存全部清除。这种算法有优有劣：</p>\n<ul>\n<li>优点：不会有内存碎片的问题。</li>\n<li>缺点：内存缩小为原来的一半，浪费空间。</li>\n</ul>\n<p>为了解决空间利用率问题，可以将内存分为三块： Eden、From Survivor、To Survivor，比例是 8:1:1，每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。</p>\n<p>但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。</p>\n<h4 id=\"分配担保\"><a href=\"#分配担保\" class=\"headerlink\" title=\"分配担保\"></a>分配担保</h4><p>为对象分配内存空间时，如果 Eden+Survivor 中空闲区域无法装下该对象，会触发 MinorGC 进行垃圾收集。但如果 Minor GC 过后依然有超过 10% 的对象存活，这样存活的对象直接通过分配担保机制进入老年代，然后再将新对象存入 Eden 区。</p>\n<h4 id=\"标记-整理算法（老年代）\"><a href=\"#标记-整理算法（老年代）\" class=\"headerlink\" title=\"标记-整理算法（老年代）\"></a>标记-整理算法（老年代）</h4><p><strong>标记</strong>：它的第一个阶段与<strong>标记/清除算法</strong>是一模一样的，均是遍历 <code>GC Roots</code>，然后将存活的对象标记。</p>\n<p><strong>整理</strong>：移动所有<strong>存活的对象</strong>，且按照内存地址次序依次排列，然后将末端内存地址以后的内存全部回收。因此，第二阶段才称为整理阶段。</p>\n<p>这是一种老年代的垃圾收集算法。老年代的对象一般寿命比较长，因此每次垃圾回收会有大量对象存活，如果采用复制算法，每次需要复制大量存活的对象，效率很低。</p>\n<h4 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h4><p>根据对象存活周期的不同，将内存划分为几块。一般是把 Java 堆分为新生代和老年代，针对各个年代的特点采用最适当的收集算法。</p>\n<ul>\n<li>新生代：复制算法</li>\n<li>老年代：标记-清除算法、标记-整理算法</li>\n</ul>\n<h2 id=\"4-HotSpot-垃圾收集器\"><a href=\"#4-HotSpot-垃圾收集器\" class=\"headerlink\" title=\"4.HotSpot 垃圾收集器\"></a>4.HotSpot 垃圾收集器</h2><p>HotSpot 虚拟机提供了多种垃圾收集器，每种收集器都有各自的特点，虽然我们要对各个收集器进行比较，但并非为了挑选出一个最好的收集器。我们选择的只是对具体应用最合适的收集器。</p>\n<h3 id=\"4-1-新生代垃圾收集器\"><a href=\"#4-1-新生代垃圾收集器\" class=\"headerlink\" title=\"4.1 新生代垃圾收集器\"></a>4.1 新生代垃圾收集器</h3><h4 id=\"Serial-垃圾收集器（单线程）\"><a href=\"#Serial-垃圾收集器（单线程）\" class=\"headerlink\" title=\"Serial 垃圾收集器（单线程）\"></a>Serial 垃圾收集器（单线程）</h4><p>只开启<strong>一条</strong> GC 线程进行垃圾回收，并且在垃圾收集过程中停止一切用户线程(Stop The World)。</p>\n<p>一般客户端应用所需内存较小，不会创建太多对象，而且堆内存不大，因此垃圾收集器回收时间短，即使在这段时间停止一切用户线程，也不会感觉明显卡顿。因此 Serial 垃圾收集器<strong>适合客户端</strong>使用。</p>\n<p>由于 Serial 收集器只使用一条 GC 线程，避免了线程切换的开销，从而简单高效。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/serial.png\" alt=\"Serial\"></p>\n<h4 id=\"ParNew-垃圾收集器（多线程）\"><a href=\"#ParNew-垃圾收集器（多线程）\" class=\"headerlink\" title=\"ParNew 垃圾收集器（多线程）\"></a>ParNew 垃圾收集器（多线程）</h4><p>ParNew 是 Serial 的多线程版本。由多条 GC 线程并行地进行垃圾清理。但清理过程依然需要 Stop The World。</p>\n<p>ParNew 追求“<strong>低停顿时间</strong>”,与 Serial 唯一区别就是使用了多线程进行垃圾收集，在多 CPU 环境下性能比 Serial 会有一定程度的提升；但<strong>线程切换需要额外的开销</strong>，因此在单 CPU 环境中表现不如 Serial。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/parnew.png\" alt=\"ParNew\"></p>\n<h4 id=\"Parallel-Scavenge-垃圾收集器（多线程）\"><a href=\"#Parallel-Scavenge-垃圾收集器（多线程）\" class=\"headerlink\" title=\"Parallel Scavenge 垃圾收集器（多线程）\"></a>Parallel Scavenge 垃圾收集器（多线程）</h4><p>Parallel Scavenge 和 ParNew 一样，都是多线程、新生代垃圾收集器。但是两者有巨大的不同点：</p>\n<ul>\n<li>Parallel Scavenge：追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。</li>\n<li>ParNew：追求降低用户停顿时间，适合交互式应用。</li>\n</ul>\n<p>吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)</p>\n<p>追求高吞吐量，可以通过减少 GC 执行实际工作的时间，然而，仅仅偶尔运行 GC 意味着每当 GC 运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。单个 GC 需要花更多的时间来完成，从而导致更高的暂停时间。而考虑到低暂停时间，最好频繁运行 GC 以便更快速完成，反过来又导致吞吐量下降。</p>\n<ul>\n<li>通过参数 -XX:GCTimeRadio 设置垃圾回收时间占总 CPU 时间的百分比。</li>\n<li>通过参数 -XX:MaxGCPauseMillis 设置垃圾处理过程最久停顿时间。</li>\n<li>通过命令 -XX:+UseAdaptiveSizePolicy 开启自适应策略。我们只要设置好堆的大小和 MaxGCPauseMillis 或 GCTimeRadio，收集器会自动调整新生代的大小、Eden 和 Survivor 的比例、对象进入老年代的年龄，以最大程度上接近我们设置的 MaxGCPauseMillis 或 GCTimeRadio。</li>\n</ul>\n<h3 id=\"4-2-老年代垃圾收集器\"><a href=\"#4-2-老年代垃圾收集器\" class=\"headerlink\" title=\"4.2 老年代垃圾收集器\"></a>4.2 老年代垃圾收集器</h3><h4 id=\"Serial-Old-垃圾收集器（单线程）\"><a href=\"#Serial-Old-垃圾收集器（单线程）\" class=\"headerlink\" title=\"Serial Old 垃圾收集器（单线程）\"></a>Serial Old 垃圾收集器（单线程）</h4><p>Serial Old 收集器是 Serial 的老年代版本，都是单线程收集器，只启用一条 GC 线程，都适合客户端应用。它们唯一的区别就是：Serial Old 工作在老年代，使用“标记-整理”算法；Serial 工作在新生代，使用“复制”算法。</p>\n<h4 id=\"Parallel-Old-垃圾收集器（多线程）\"><a href=\"#Parallel-Old-垃圾收集器（多线程）\" class=\"headerlink\" title=\"Parallel Old 垃圾收集器（多线程）\"></a>Parallel Old 垃圾收集器（多线程）</h4><p>Parallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 CPU 吞吐量。</p>\n<h4 id=\"CMS-垃圾收集器\"><a href=\"#CMS-垃圾收集器\" class=\"headerlink\" title=\"CMS 垃圾收集器\"></a>CMS 垃圾收集器</h4><p>CMS(Concurrent Mark Sweep，并发标记清除)收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。</p>\n<ul>\n<li>初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。</li>\n<li>并发标记：使用<strong>多条</strong>标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。</li>\n<li>重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。</li>\n<li>并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。</li>\n</ul>\n<p>并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，<strong>总体上说</strong>，CMS 收集器的内存回收过程是与用户线程<strong>一起并发执行</strong>的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/cms.png\" alt=\"CMS\"></p>\n<p>CMS 的缺点：</p>\n<ul>\n<li>吞吐量低</li>\n<li>无法处理浮动垃圾，导致频繁 Full GC</li>\n<li>使用“标记-清除”算法产生碎片空间</li>\n</ul>\n<p>对于产生碎片空间的问题，可以通过开启 -XX:+UseCMSCompactAtFullCollection，在每次 Full GC 完成后都会进行一次内存压缩整理，将零散在各处的对象整理到一块。设置参数 -XX:CMSFullGCsBeforeCompaction 告诉 CMS，经过了 N 次 Full GC 之后再进行一次内存整理。</p>\n<h3 id=\"4-3-G1-通用垃圾收集器\"><a href=\"#4-3-G1-通用垃圾收集器\" class=\"headerlink\" title=\"4.3 G1 通用垃圾收集器\"></a>4.3 G1 通用垃圾收集器</h3><p>G1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，因此可以获得最大的回收效率。</p>\n<p>从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</p>\n<p>这里抛个问题 👇<br><br>一个对象和它内部所引用的对象可能不在同一个 Region 中，那么当垃圾回收时，是否需要扫描整个堆内存才能完整地进行一次可达性分析？</p>\n<p>并不！每个 Region 都有一个 Remembered Set，用于记录本区域中所有对象引用的对象所在的区域，进行可达性分析时，只要在 GC Roots 中再加上 Remembered Set 即可防止对整个堆内存进行遍历。</p>\n<p>如果不计算维护 Remembered Set 的操作，G1 收集器的工作过程分为以下几个步骤：</p>\n<ul>\n<li>初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。</li>\n<li>并发标记：使用<strong>一条</strong>标记线程与用户线程并发执行。此过程进行可达性分析，速度很慢。</li>\n<li>最终标记：Stop The World，使用多条标记线程并发执行。</li>\n<li>筛选回收：回收废弃对象，此时也要 Stop The World，并使用多条筛选回收线程并发执行。</li>\n</ul>\n<h2 id=\"5-内存分配与回收策略\"><a href=\"#5-内存分配与回收策略\" class=\"headerlink\" title=\"5.内存分配与回收策略\"></a>5.内存分配与回收策略</h2><p>对象的内存分配，就是在堆上分配（也可能经过 JIT 编译后被拆散为标量类型并间接在栈上分配），对象主要分配在新生代的 Eden 区上，少数情况下可能直接分配在老年代，<strong>分配规则不固定</strong>，取决于当前使用的垃圾收集器组合以及相关的参数配置。</p>\n<p>以下列举几条最普遍的内存分配规则，供大家学习。</p>\n<h3 id=\"5-1-对象优先在-Eden-分配\"><a href=\"#5-1-对象优先在-Eden-分配\" class=\"headerlink\" title=\"5.1 对象优先在 Eden 分配\"></a>5.1 对象优先在 Eden 分配</h3><p>大多数情况下，对象在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p>\n<p>👇<strong>Minor GC</strong> vs <strong>Major GC</strong>/<strong>Full GC</strong>：</p>\n<ul>\n<li>Minor GC：回收新生代（包括 Eden 和 Survivor 区域），因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</li>\n<li>Major GC / Full GC: 回收老年代，出现了 Major GC，经常会伴随至少一次的 Minor GC，但这并非绝对。Major GC 的速度一般会比 Minor GC 慢 10 倍 以上。</li>\n</ul>\n<blockquote>\n<p>在 JVM 规范中，Major GC 和 Full GC 都没有一个正式的定义，所以有人也简单地认为 Major GC 清理老年代，而 Full GC 清理整个内存堆。</p>\n</blockquote>\n<h3 id=\"5-2-大对象直接进入老年代\"><a href=\"#5-2-大对象直接进入老年代\" class=\"headerlink\" title=\"5.2 大对象直接进入老年代\"></a>5.2 大对象直接进入老年代</h3><p>大对象是指需要大量连续内存空间的 Java 对象，如很长的字符串或数据。</p>\n<p>一个大对象能够存入 Eden 区的概率比较小，发生分配担保的概率比较大，而分配担保需要涉及大量的复制，就会造成效率低下。</p>\n<p>虚拟机提供了一个 -XX:PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配，这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制。（还记得吗，新生代采用复制算法回收垃圾）</p>\n<h3 id=\"5-3-长期存活的对象将进入老年代\"><a href=\"#5-3-长期存活的对象将进入老年代\" class=\"headerlink\" title=\"5.3 长期存活的对象将进入老年代\"></a>5.3 长期存活的对象将进入老年代</h3><p>JVM 给每个对象定义了一个对象年龄计数器。当新生代发生一次 Minor GC 后，存活下来的对象年龄 +1，当年龄超过一定值时，就将超过该值的所有对象转移到老年代中去。</p>\n<p>使用 <code>-XXMaxTenuringThreshold</code> 设置新生代的最大年龄，只要超过该参数的新生代对象都会被转移到老年代中去。</p>\n<h3 id=\"5-4-动态对象年龄判定\"><a href=\"#5-4-动态对象年龄判定\" class=\"headerlink\" title=\"5.4 动态对象年龄判定\"></a>5.4 动态对象年龄判定</h3><p>如果当前新生代的 Survivor 中，相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄 &gt;= 该年龄的对象就可以直接进入老年代，无须等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</p>\n<h3 id=\"5-5-空间分配担保\"><a href=\"#5-5-空间分配担保\" class=\"headerlink\" title=\"5.5 空间分配担保\"></a>5.5 空间分配担保</h3><p>JDK 6 Update 24 之前的规则是这样的：<br> 在发生 Minor GC 之前，虚拟机会先检查<strong>老年代最大可用的连续空间是否大于新生代所有对象总空间</strong>， 如果这个条件成立，Minor GC 可以确保是安全的； 如果不成立，则虚拟机会查看 <code>HandlePromotionFailure</code> 值是否设置为允许担保失败， 如果是，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小， 如果大于，将尝试进行一次 Minor GC,尽管这次 Minor GC 是有风险的； 如果小于，或者 <code>HandlePromotionFailure</code> 设置不允许冒险，那此时也要改为进行一次 Full GC。</p>\n<p>JDK 6 Update 24 之后的规则变为：<br> 只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</p>\n<p>通过清除老年代中废弃数据来扩大老年代空闲空间，以便给新生代作担保。</p>\n<p>这个过程就是分配担保。</p>\n<hr>\n<p>👇 总结一下有哪些情况可能会触发 JVM 进行 Full GC。</p>\n<ol>\n<li><strong><code>System.gc()</code> 方法的调用</strong><br>此方法的调用是建议 JVM 进行 Full GC，注意这<strong>只是建议而非一定</strong>，但在很多情况下它会触发 Full GC，从而增加 Full GC 的频率。通常情况下我们只需要让虚拟机自己去管理内存即可，我们可以通过 -XX:+ DisableExplicitGC 来禁止调用 <code>System.gc()</code>。</li>\n<li><strong>老年代空间不足</strong><br>老年代空间不足会触发 Full GC 操作，若进行该操作后空间依然不足，则会抛出如下错误：<code>java.lang.OutOfMemoryError: Java heap space</code></li>\n<li><strong>永久代空间不足</strong><br>JVM 规范中运行时数据区域中的方法区，在 HotSpot 虚拟机中也称为永久代（Permanet Generation），存放一些类信息、常量、静态变量等数据，当系统要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，会触发 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：<code>java.lang.OutOfMemoryError: PermGen space</code></li>\n<li><strong>CMS GC 时出现 <code>promotion failed</code> 和 <code>concurrent mode failure</code></strong><br>promotion failed，就是上文所说的担保失败，而 concurrent mode failure 是在执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足造成的。</li>\n<li><strong>统计得到的 Minor GC 晋升到旧生代的平均大小大于老年代的剩余空间。</strong># JVM 性能调优</li>\n</ol>\n<p>在高性能硬件上部署程序，目前主要有两种方式：</p>\n<ul>\n<li>通过 64 位 JDK 来使用大内存；</li>\n<li>使用若干个 32 位虚拟机建立逻辑集群来利用硬件资源。</li>\n</ul>\n<h3 id=\"5-6-使用-64-位-JDK-管理大内存\"><a href=\"#5-6-使用-64-位-JDK-管理大内存\" class=\"headerlink\" title=\"5.6 使用 64 位 JDK 管理大内存\"></a>5.6 使用 64 位 JDK 管理大内存</h3><p>堆内存变大后，虽然垃圾收集的频率减少了，但每次垃圾回收的时间变长。 如果堆内存为 14 G，那么每次 Full GC 将长达数十秒。如果 Full GC 频繁发生，那么对于一个网站来说是无法忍受的。</p>\n<p>对于用户交互性强、对停顿时间敏感的系统，可以给 Java 虚拟机分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，至少要低到不会影响用户使用。</p>\n<p>可能面临的问题：</p>\n<ul>\n<li>内存回收导致的长时间停顿；</li>\n<li>现阶段，64 位 JDK 的性能普遍比 32 位 JDK 低；</li>\n<li>需要保证程序足够稳定，因为这种应用要是产生堆溢出几乎就无法产生堆转储快照（因为要产生超过 10GB 的 Dump 文件），哪怕产生了快照也几乎无法进行分析；</li>\n<li>相同程序在 64 位 JDK 消耗的内存一般比 32 位 JDK 大，这是由于指针膨胀，以及数据类型对齐补白等因素导致的。</li>\n</ul>\n<h3 id=\"5-7-使用-32-位-JVM-建立逻辑集群\"><a href=\"#5-7-使用-32-位-JVM-建立逻辑集群\" class=\"headerlink\" title=\"5.7 使用 32 位 JVM 建立逻辑集群\"></a>5.7 使用 32 位 JVM 建立逻辑集群</h3><p>在一台物理机器上启动多个应用服务器进程，每个服务器进程分配不同端口， 然后在前端搭建一个负载均衡器，以反向代理的方式来分配访问请求。</p>\n<p>考虑到在一台物理机器上建立逻辑集群的目的仅仅是为了尽可能利用硬件资源，并不需要关心状态保留、热转移之类的高可用性能需求， 也不需要保证每个虚拟机进程有绝对的均衡负载，因此使用无 Session 复制的亲合式集群是一个不错的选择。 我们仅仅需要保障集群具备亲合性，也就是均衡器按一定的规则算法（一般根据 SessionID 分配） 将一个固定的用户请求永远分配到固定的一个集群节点进行处理即可。</p>\n<p>可能遇到的问题：</p>\n<ul>\n<li>尽量避免节点竞争全局资源，如磁盘竞争，各个节点如果同时访问某个磁盘文件的话，很可能导致 IO 异常；</li>\n<li>很难高效利用资源池，如连接池，一般都是在节点建立自己独立的连接池，这样有可能导致一些节点池满了而另外一些节点仍有较多空余；</li>\n<li>各个节点受到 32 位的内存限制；</li>\n<li>大量使用本地缓存的应用，在逻辑集群中会造成较大的内存浪费，因为每个逻辑节点都有一份缓存，这时候可以考虑把本地缓存改成集中式缓存。</li>\n</ul>\n<h3 id=\"5-8-调优案例分析与实战\"><a href=\"#5-8-调优案例分析与实战\" class=\"headerlink\" title=\"5.8 调优案例分析与实战\"></a>5.8 调优案例分析与实战</h3><h4 id=\"场景描述\"><a href=\"#场景描述\" class=\"headerlink\" title=\"场景描述\"></a>场景描述</h4><p>一个小型系统，使用 32 位 JDK，4G 内存，测试期间发现服务端不定时抛出内存溢出异常。 加入 -XX:+HeapDumpOnOutOfMemoryError（添加这个参数后，堆内存溢出时就会输出异常日志）， 但再次发生内存溢出时，没有生成相关异常日志。</p>\n<h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>在 32 位 JDK 上，1.6G 分配给堆，还有一部分分配给 JVM 的其他内存，直接内存最大也只能在剩余的 0.4G 空间中分出一部分， 如果使用了 NIO，JVM 会在 JVM 内存之外分配内存空间，那么就要小心“直接内存”不足时发生内存溢出异常了。</p>\n<h4 id=\"直接内存的回收过程\"><a href=\"#直接内存的回收过程\" class=\"headerlink\" title=\"直接内存的回收过程\"></a>直接内存的回收过程</h4><p>直接内存虽然不是 JVM 内存空间，但它的垃圾回收也由 JVM 负责。</p>\n<p>垃圾收集进行时，虚拟机虽然会对直接内存进行回收， 但是直接内存却不能像新生代、老年代那样，发现空间不足了就通知收集器进行垃圾回收， 它只能等老年代满了后 Full GC，然后“顺便”帮它清理掉内存的废弃对象。 否则只能一直等到抛出内存溢出异常时，先 catch 掉，再在 catch 块里大喊 “<code>System.gc()</code>”。 要是虚拟机还是不听，那就只能眼睁睁看着堆中还有许多空闲内存，自己却不得不抛出内存溢出异常了。</p>\n<h2 id=\"6-类文件结构\"><a href=\"#6-类文件结构\" class=\"headerlink\" title=\"6.类文件结构\"></a>6.类文件结构</h2><h3 id=\"6-1-JVM-的“无关性”\"><a href=\"#6-1-JVM-的“无关性”\" class=\"headerlink\" title=\"6.1 JVM 的“无关性”\"></a>6.1 JVM 的“无关性”</h3><p>谈论 JVM 的无关性，主要有以下两个：</p>\n<ul>\n<li>平台无关性：任何操作系统都能运行 Java 代码</li>\n<li>语言无关性： JVM 能运行除 Java 以外的其他代码</li>\n</ul>\n<p>Java 源代码首先需要使用 Javac 编译器编译成 .class 文件，然后由 JVM 执行 .class 文件，从而程序开始运行。</p>\n<p>JVM 只认识 .class 文件，它不关心是何种语言生成了 .class 文件，只要 .class 文件符合 JVM 的规范就能运行。 目前已经有 JRuby、Jython、Scala 等语言能够在 JVM 上运行。它们有各自的语法规则，不过它们的编译器 都能将各自的源码编译成符合 JVM 规范的 .class 文件，从而能够借助 JVM 运行它们。</p>\n<blockquote>\n<p>Java 语言中的各种变量、关键字和运算符号的语义最终都是由多条字节码命令组合而成的， 因此字节码命令所能提供的语义描述能力肯定会比 Java 语言本身更加强大。 因此，有一些 Java 语言本身无法有效支持的语言特性，不代表字节码本身无法有效支持。</p>\n</blockquote>\n<h3 id=\"6-2-Class-文件结构\"><a href=\"#6-2-Class-文件结构\" class=\"headerlink\" title=\"6.2 Class 文件结构\"></a>6.2 Class 文件结构</h3><p>Class 文件是二进制文件，它的内容具有严格的规范，文件中没有任何空格，全都是连续的 0/1。Class 文件 中的所有内容被分为两种类型：无符号数、表。</p>\n<ul>\n<li>无符号数 无符号数表示 Class 文件中的值，这些值没有任何类型，但有不同的长度。u1、u2、u4、u8 分别代表 1/2/4/8 字节的无符号数。</li>\n<li>表 由多个无符号数或者其他表作为数据项构成的复合数据类型。</li>\n</ul>\n<p>Class 文件具体由以下几个构成:</p>\n<ul>\n<li>魔数</li>\n<li>版本信息</li>\n<li>常量池</li>\n<li>访问标志</li>\n<li>类索引、父类索引、接口索引集合</li>\n<li>字段表集合</li>\n<li>方法表集合</li>\n<li>属性表集合</li>\n</ul>\n<h4 id=\"魔数\"><a href=\"#魔数\" class=\"headerlink\" title=\"魔数\"></a>魔数</h4><p>Class 文件的头 4 个字节称为魔数，用来表示这个 Class 文件的类型。</p>\n<p>Class 文件的魔数是用 16 进制表示的“CAFE BABE”，是不是很具有浪漫色彩？</p>\n<blockquote>\n<p>魔数相当于文件后缀名，只不过后缀名容易被修改，不安全，因此在 Class 文件中标识文件类型比较合适。</p>\n</blockquote>\n<h4 id=\"版本信息\"><a href=\"#版本信息\" class=\"headerlink\" title=\"版本信息\"></a>版本信息</h4><p>紧接着魔数的 4 个字节是版本信息，5-6 字节表示次版本号，7-8 字节表示主版本号，它们表示当前 Class 文件中使用的是哪个版本的 JDK。</p>\n<p>高版本的 JDK 能向下兼容以前版本的 Class 文件，但不能运行以后版本的 Class 文件，即使文件格式并未发生任何变化，虚拟机也必需拒绝执行超过其版本号的 Class 文件。</p>\n<h4 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h4><p>版本信息之后就是常量池，常量池中存放两种类型的常量：</p>\n<ul>\n<li><p>字面值常量</p>\n<p>字面值常量就是我们在程序中定义的字符串、被 final 修饰的值。</p>\n</li>\n<li><p>符号引用</p>\n<p>符号引用就是我们定义的各种名字：类和接口的全限定名、字段的名字和描述符、方法的名字和描述符。</p>\n</li>\n</ul>\n<h5 id=\"常量池的特点\"><a href=\"#常量池的特点\" class=\"headerlink\" title=\"常量池的特点\"></a>常量池的特点</h5><ul>\n<li>常量池中常量数量不固定，因此常量池开头放置一个 u2 类型的无符号数，用来存储当前常量池的容量。</li>\n<li>常量池的每一项常量都是一个表，表开始的第一位是一个 u1 类型的标志位（tag），代表当前这个常量属于哪种常量类型。</li>\n</ul>\n<h5 id=\"常量池中常量类型\"><a href=\"#常量池中常量类型\" class=\"headerlink\" title=\"常量池中常量类型\"></a>常量池中常量类型</h5><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>tag</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CONSTANT_utf8_info</td>\n<td>1</td>\n<td>UTF-8 编码的字符串</td>\n</tr>\n<tr>\n<td>CONSTANT_Integer_info</td>\n<td>3</td>\n<td>整型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Float_info</td>\n<td>4</td>\n<td>浮点型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Long_info</td>\n<td>5</td>\n<td>长整型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Double_info</td>\n<td>6</td>\n<td>双精度浮点型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Class_info</td>\n<td>7</td>\n<td>类或接口的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_String_info</td>\n<td>8</td>\n<td>字符串类型字面量</td>\n</tr>\n<tr>\n<td>CONSTANT_Fieldref_info</td>\n<td>9</td>\n<td>字段的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_Methodref_info</td>\n<td>10</td>\n<td>类中方法的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_InterfaceMethodref_info</td>\n<td>11</td>\n<td>接口中方法的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_NameAndType_info</td>\n<td>12</td>\n<td>字段或方法的符号引用</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodHandle_info</td>\n<td>15</td>\n<td>表示方法句柄</td>\n</tr>\n<tr>\n<td>CONSTANT_MethodType_info</td>\n<td>16</td>\n<td>标识方法类型</td>\n</tr>\n<tr>\n<td>CONSTANT_InvokeDynamic_info</td>\n<td>18</td>\n<td>表示一个动态方法调用点</td>\n</tr>\n</tbody></table>\n<p>对于 CONSTANT_Class_info（此类型的常量代表一个类或者接口的符号引用），它的二维表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u1</td>\n<td>tag</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>name_index</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>tag 是标志位，用于区分常量类型；name_index 是一个索引值，它指向常量池中一个 CONSTANT_Utf8_info 类型常量，此常量代表这个类（或接口）的全限定名，这里 name_index 值若为 0x0002，也即是指向了常量池中的第二项常量。</p>\n<p>CONSTANT_Utf8_info 型常量的结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u1</td>\n<td>tag</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>length</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u1</td>\n<td>bytes</td>\n<td>length</td>\n</tr>\n</tbody></table>\n<p>tag 是当前常量的类型；length 表示这个字符串的长度；bytes 是这个字符串的内容（采用缩略的 UTF8 编码）</p>\n<h4 id=\"访问标志\"><a href=\"#访问标志\" class=\"headerlink\" title=\"访问标志\"></a>访问标志</h4><p>在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否被 abstract/final 修饰。</p>\n<h4 id=\"类索引、父类索引、接口索引集合\"><a href=\"#类索引、父类索引、接口索引集合\" class=\"headerlink\" title=\"类索引、父类索引、接口索引集合\"></a>类索引、父类索引、接口索引集合</h4><p>类索引和父类索引都是一个 u2 类型的数据，而接口索引集合是一组 u2 类型的数据的集合，Class 文件中由这三项数据来确定类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。</p>\n<p>由于 Java 不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。一个类可能实现了多个接口，因此用接口索引集合来描述。这个集合第一项为 u2 类型的数据，表示索引表的容量，接下来就是接口的名字索引。</p>\n<p>类索引和父类索引用两个 u2 类型的索引值表示，它们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过该常量总的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。</p>\n<h4 id=\"字段表集合\"><a href=\"#字段表集合\" class=\"headerlink\" title=\"字段表集合\"></a>字段表集合</h4><p>字段表集合存储本类涉及到的成员变量，包括实例变量和类变量，但不包括方法中的局部变量。</p>\n<p>每一个字段表只表示一个成员变量，本类中的所有成员变量构成了字段表集合。字段表结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u2</td>\n<td>access_flags</td>\n<td>1</td>\n<td>字段的访问标志，与类稍有不同</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>name_index</td>\n<td>1</td>\n<td>字段名字的索引</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>descriptor_index</td>\n<td>1</td>\n<td>描述符，用于描述字段的数据类型。 基本数据类型用大写字母表示； 对象类型用“L 对象类型的全限定名”表示。</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>attributes_count</td>\n<td>1</td>\n<td>属性表集合的长度</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>attributes</td>\n<td>attributes_count</td>\n<td>属性表集合，用于存放属性的额外信息，如属性的值。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>字段表集合中不会出现从父类（或接口）中继承而来的字段，但有可能出现原本 Java 代码中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</p>\n</blockquote>\n<h4 id=\"方法表集合\"><a href=\"#方法表集合\" class=\"headerlink\" title=\"方法表集合\"></a>方法表集合</h4><p>方法表结构与属性表类似。</p>\n<p>volatile 关键字 和 transient 关键字不能修饰方法，所以方法表的访问标志中没有 ACC_VOLATILE 和 ACC_TRANSIENT 标志。</p>\n<p>方法表的属性表集合中有一张 Code 属性表，用于存储当前方法经编译器编译后的字节码指令。</p>\n<h4 id=\"属性表集合\"><a href=\"#属性表集合\" class=\"headerlink\" title=\"属性表集合\"></a>属性表集合</h4><p>每个属性对应一张属性表，属性表的结构如下：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>u2</td>\n<td>attribute_name_index</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u4</td>\n<td>attribute_length</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u1</td>\n<td>info</td>\n<td>attribute_length</td>\n</tr>\n</tbody></table>\n<h2 id=\"7-类加载的时机\"><a href=\"#7-类加载的时机\" class=\"headerlink\" title=\"7.类加载的时机\"></a>7.类加载的时机</h2><h3 id=\"7-1-类的生命周期\"><a href=\"#7-1-类的生命周期\" class=\"headerlink\" title=\"7.1 类的生命周期\"></a>7.1 类的生命周期</h3><p>类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括以下 7 个阶段：</p>\n<ul>\n<li>加载</li>\n<li>验证</li>\n<li>准备</li>\n<li>解析</li>\n<li>初始化</li>\n<li>使用</li>\n<li>卸载</li>\n</ul>\n<p>验证、准备、解析 3 个阶段统称为连接。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/loadclass.png\" alt=\"Load Class\"></p>\n<p>加载、验证、准备、初始化和卸载这 5 个阶段的顺序是确定的，类的加载过程必须按照这种顺序按部就班地开始（注意是“开始”，而不是“进行”或“完成”），而解析阶段则不一定：它在某些情况下可以在初始化后再开始，这是为了支持 Java 语言的运行时绑定。</p>\n<h3 id=\"7-2-类加载过程中“初始化”开始的时机\"><a href=\"#7-2-类加载过程中“初始化”开始的时机\" class=\"headerlink\" title=\"7.2 类加载过程中“初始化”开始的时机\"></a>7.2 类加载过程中“初始化”开始的时机</h3><p>Java 虚拟机规范没有强制约束类加载过程的第一阶段（即：加载）什么时候开始，但对于“初始化”阶段，有着严格的规定。有且仅有 5 种情况必须立即对类进行“初始化”：</p>\n<ul>\n<li>在遇到 new、putstatic、getstatic、invokestatic 字节码指令时，如果类尚未初始化，则需要先触发其初始化。</li>\n<li>对类进行反射调用时，如果类还没有初始化，则需要先触发其初始化。</li>\n<li>初始化一个类时，如果其父类还没有初始化，则需要先初始化父类。</li>\n<li>虚拟机启动时，用于需要指定一个包含 <code>main()</code> 方法的主类，虚拟机会先初始化这个主类。</li>\n<li>当使用 JDK 1.7 的动态语言支持时，如果一个 java.lang.invoke.MethodHandle 实例最后的解析结果为 REF_getStatic、REF_putStatic、REF_invokeStatic 的方法句柄，并且这个方法句柄所对应的类还没初始化，则需要先触发其初始化。</li>\n</ul>\n<p>这 5 种场景中的行为称为对一个类进行<strong>主动引用</strong>，除此之外，其它所有引用类的方式都不会触发初始化，称为<strong>被动引用</strong>。</p>\n<h3 id=\"7-3-被动引用演示-Demo\"><a href=\"#7-3-被动引用演示-Demo\" class=\"headerlink\" title=\"7.3 被动引用演示 Demo\"></a>7.3 被动引用演示 Demo</h3><h4 id=\"Demo1\"><a href=\"#Demo1\" class=\"headerlink\" title=\"Demo1\"></a>Demo1</h4><pre><code class=\"java\">/**\n * 被动引用 Demo1:\n * 通过子类引用父类的静态字段，不会导致子类初始化。\n *\n * @author ylb\n *\n */\nclass SuperClass {\n    static {\n        System.out.println(&quot;SuperClass init!&quot;);\n    }\n\n    public static int value = 123;\n}\n\nclass SubClass extends SuperClass {\n    static {\n        System.out.println(&quot;SubClass init!&quot;);\n    }\n}\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        System.out.println(SubClass.value);\n        // SuperClass init!\n    }\n\n}</code></pre>\n<p>对于静态字段，只有直接定义这个字段的类才会被初始化，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>\n<h4 id=\"Demo2\"><a href=\"#Demo2\" class=\"headerlink\" title=\"Demo2\"></a>Demo2</h4><pre><code class=\"java\">/**\n * 被动引用 Demo2:\n * 通过数组定义来引用类，不会触发此类的初始化。\n *\n * @author ylb\n *\n */\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        SuperClass[] superClasses = new SuperClass[10];\n    }\n\n}</code></pre>\n<p>这段代码不会触发父类的初始化，但会触发“[L 全类名”这个类的初始化，它由虚拟机自动生成，直接继承自 java.lang.Object，创建动作由字节码指令 newarray 触发。</p>\n<h4 id=\"Demo3\"><a href=\"#Demo3\" class=\"headerlink\" title=\"Demo3\"></a>Demo3</h4><pre><code class=\"java\">/**\n * 被动引用 Demo3:\n * 常量在编译阶段会存入调用类的常量池中，本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化。\n *\n * @author ylb\n *\n */\nclass ConstClass {\n    static {\n        System.out.println(&quot;ConstClass init!&quot;);\n    }\n\n    public static final String HELLO_BINGO = &quot;Hello Bingo&quot;;\n\n}\n\npublic class NotInitialization {\n\n    public static void main(String[] args) {\n        System.out.println(ConstClass.HELLO_BINGO);\n    }\n\n}</code></pre>\n<p>编译通过之后，常量存储到 NotInitialization 类的常量池中，NotInitialization 的 Class 文件中并没有 ConstClass 类的符号引用入口，这两个类在编译成 Class 之后就没有任何联系了。</p>\n<h3 id=\"7-4-接口的加载过程\"><a href=\"#7-4-接口的加载过程\" class=\"headerlink\" title=\"7.4 接口的加载过程\"></a>7.4 接口的加载过程</h3><p>接口加载过程与类加载过程稍有不同。</p>\n<p>当一个类在初始化时，要求其父类全部都已经初始化过了，但是一个接口在初始化时，并不要求其父接口全部都完成了初始化，当真正用到父接口的时候才会初始化。</p>\n<h3 id=\"7-5-类加载的过程\"><a href=\"#7-5-类加载的过程\" class=\"headerlink\" title=\"7.5 类加载的过程\"></a>7.5 类加载的过程</h3><p>类加载过程包括 5 个阶段：加载、验证、准备、解析和初始化。</p>\n<h3 id=\"7-6-加载\"><a href=\"#7-6-加载\" class=\"headerlink\" title=\"7.6 加载\"></a>7.6 加载</h3><h4 id=\"加载的过程\"><a href=\"#加载的过程\" class=\"headerlink\" title=\"加载的过程\"></a>加载的过程</h4><p>“加载”是“类加载”过程的一个阶段，不能混淆这两个名词。在加载阶段，虚拟机需要完成 3 件事：</p>\n<ul>\n<li>通过类的全限定名获取该类的二进制字节流。</li>\n<li>将二进制字节流所代表的静态结构转化为方法区的运行时数据结构。</li>\n<li>在内存中创建一个代表该类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li>\n</ul>\n<h4 id=\"获取二进制字节流\"><a href=\"#获取二进制字节流\" class=\"headerlink\" title=\"获取二进制字节流\"></a>获取二进制字节流</h4><p>对于 Class 文件，虚拟机没有指明要从哪里获取、怎样获取。除了直接从编译好的 .class 文件中读取，还有以下几种方式：</p>\n<ul>\n<li>从 zip 包中读取，如 jar、war 等</li>\n<li>从网络中获取，如 Applet</li>\n<li>通过动态代理技术生成代理类的二进制字节流</li>\n<li>由 JSP 文件生成对应的 Class 类</li>\n<li>从数据库中读取，如 有些中间件服务器可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</li>\n</ul>\n<h4 id=\"“非数组类”与“数组类”加载比较\"><a href=\"#“非数组类”与“数组类”加载比较\" class=\"headerlink\" title=\"“非数组类”与“数组类”加载比较\"></a>“非数组类”与“数组类”加载比较</h4><ul>\n<li>非数组类加载阶段可以使用系统提供的引导类加载器，也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器控制字节流的获取方式（如重写一个类加载器的 <code>loadClass()</code> 方法）</li>\n<li>数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的，再由类加载器创建数组中的元素类。</li>\n</ul>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>虚拟机规范未规定 Class 对象的存储位置，对于 HotSpot 虚拟机而言，Class 对象比较特殊，它虽然是对象，但存放在方法区中。</li>\n<li>加载阶段与连接阶段的部分内容交叉进行，加载阶段尚未完成，连接阶段可能已经开始了。但这两个阶段的开始时间仍然保持着固定的先后顺序。</li>\n</ul>\n<h3 id=\"7-7-验证\"><a href=\"#7-7-验证\" class=\"headerlink\" title=\"7.7 验证\"></a>7.7 验证</h3><h4 id=\"验证的重要性\"><a href=\"#验证的重要性\" class=\"headerlink\" title=\"验证的重要性\"></a>验证的重要性</h4><p>验证阶段确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n<h4 id=\"验证的过程\"><a href=\"#验证的过程\" class=\"headerlink\" title=\"验证的过程\"></a>验证的过程</h4><ul>\n<li>文件格式验证 验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，验证点如下：<ul>\n<li>是否以魔数 0XCAFEBABE 开头</li>\n<li>主次版本号是否在当前虚拟机处理范围内</li>\n<li>常量池是否有不被支持的常量类型</li>\n<li>指向常量的索引值是否指向了不存在的常量</li>\n<li>CONSTANT_Utf8_info 型的常量是否有不符合 UTF8 编码的数据</li>\n<li>……</li>\n</ul>\n</li>\n<li>元数据验证 对字节码描述信息进行语义分析，确保其符合 Java 语法规范。</li>\n<li>字节码验证 本阶段是验证过程中最复杂的一个阶段，是对方法体进行语义分析，保证方法在运行时不会出现危害虚拟机的事件。</li>\n<li>符号引用验证 本阶段发生在解析阶段，确保解析正常执行。</li>\n</ul>\n<h3 id=\"7-8-准备\"><a href=\"#7-8-准备\" class=\"headerlink\" title=\"7.8 准备\"></a>7.8 准备</h3><p>准备阶段是正式为类变量（或称“静态成员变量”）分配内存并设置初始值的阶段。这些变量（不包括实例变量）所使用的内存都在方法区中进行分配。</p>\n<p>初始值“通常情况下”是数据类型的零值（0, null…），假设一个类变量的定义为：</p>\n<pre><code class=\"java\">public static int value = 123;</code></pre>\n<p>那么变量 value 在准备阶段过后的初始值为 0 而不是 123，因为这时候尚未开始执行任何 Java 方法。</p>\n<p>存在“特殊情况”：如果类字段的字段属性表中存在 ConstantValue 属性，那么在准备阶段 value 就会被初始化为 ConstantValue 属性所指定的值，假设上面类变量 value 的定义变为：</p>\n<pre><code class=\"java\">public static final int value = 123;</code></pre>\n<p>那么在准备阶段虚拟机会根据 ConstantValue 的设置将 value 赋值为 123。</p>\n<h3 id=\"7-9-解析\"><a href=\"#7-9-解析\" class=\"headerlink\" title=\"7.9 解析\"></a>7.9 解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<h3 id=\"7-10-初始化\"><a href=\"#7-10-初始化\" class=\"headerlink\" title=\"7.10 初始化\"></a>7.10 初始化</h3><p>类初始化阶段是类加载过程的最后一步，是执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p>\n<p><code>&lt;clinit&gt;()</code> 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {} 块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。</p>\n<p>静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但不能访问。如下方代码所示：</p>\n<pre><code class=\"java\">public class Test {\n    static {\n        i = 0;  // 给变量赋值可以正常编译通过\n        System.out.println(i);  // 这句编译器会提示“非法向前引用”\n    }\n    static int i = 1;\n}</code></pre>\n<p><code>&lt;clinit&gt;()</code> 方法不需要显式调用父类构造器，虚拟机会保证在子类的 <code>&lt;clinit&gt;()</code> 方法执行之前，父类的 <code>&lt;clinit&gt;()</code> 方法已经执行完毕。</p>\n<p>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。如下方代码所示：</p>\n<pre><code class=\"java\">static class Parent {\n    public static int A = 1;\n    static {\n        A = 2;\n    }\n}\n\nstatic class Sub extends Parent {\n    public static int B = A;\n}\n\npublic static void main(String[] args) {\n    System.out.println(Sub.B); // 输出 2\n}</code></pre>\n<p><code>&lt;clinit&gt;()</code> 方法不是必需的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成 <code>&lt;clinit&gt;()</code> 方法。</p>\n<p>接口中不能使用静态代码块，但接口也需要通过 <code>&lt;clinit&gt;()</code> 方法为接口中定义的静态成员变量显式初始化。但接口与类不同，接口的 <code>&lt;clinit&gt;()</code> 方法不需要先执行父类的 <code>&lt;clinit&gt;()</code> 方法，只有当父接口中定义的变量使用时，父接口才会初始化。</p>\n<p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确加锁、同步。如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法。</p>\n<h2 id=\"8-类加载器\"><a href=\"#8-类加载器\" class=\"headerlink\" title=\"8.类加载器\"></a>8.类加载器</h2><h3 id=\"8-1-类与类加载器\"><a href=\"#8-1-类与类加载器\" class=\"headerlink\" title=\"8.1 类与类加载器\"></a>8.1 类与类加载器</h3><h4 id=\"判断类是否“相等”\"><a href=\"#判断类是否“相等”\" class=\"headerlink\" title=\"判断类是否“相等”\"></a>判断类是否“相等”</h4><p>任意一个类，都由<strong>加载它的类加载器</strong>和这个<strong>类本身</strong>一同确立其在 Java 虚拟机中的唯一性，每一个类加载器，都有一个独立的类名称空间。</p>\n<p>因此，比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个 Class 文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那么这两个类就必定不相等。</p>\n<p>这里的“相等”，包括代表类的 Class 对象的 <code>equals()</code> 方法、<code>isInstance()</code> 方法的返回结果，也包括使用 instanceof 关键字做对象所属关系判定等情况。</p>\n<h4 id=\"加载器种类\"><a href=\"#加载器种类\" class=\"headerlink\" title=\"加载器种类\"></a>加载器种类</h4><p>系统提供了 3 种类加载器：</p>\n<ul>\n<li>启动类加载器（Bootstrap ClassLoader）： 负责将存放在 <code>&lt;JAVA_HOME&gt;\\lib</code> 目录中的，并且能被虚拟机识别的（仅按照文件名识别，如 rt.jar，名字不符合的类库即使放在 lib 目录中也不会被加载）类库加载到虚拟机内存中。</li>\n<li>扩展类加载器（Extension ClassLoader）： 负责加载 <code>&lt;JAVA_HOME&gt;\\lib\\ext</code> 目录中的所有类库，开发者可以直接使用扩展类加载器。</li>\n<li>应用程序类加载器（Application ClassLoader）： 由于这个类加载器是 ClassLoader 中的 <code>getSystemClassLoader()</code> 方法的返回值，所以一般也称它为“系统类加载器”。它负责加载用户类路径（classpath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/classloader.png\" alt=\"ClassLoader\"></p>\n<p>当然，如果有必要，还可以加入自己定义的类加载器。</p>\n<h3 id=\"8-2-双亲委派模型\"><a href=\"#8-2-双亲委派模型\" class=\"headerlink\" title=\"8.2 双亲委派模型\"></a>8.2 双亲委派模型</h3><h4 id=\"什么是双亲委派模型\"><a href=\"#什么是双亲委派模型\" class=\"headerlink\" title=\"什么是双亲委派模型\"></a>什么是双亲委派模型</h4><p>双亲委派模型是描述类加载器之间的层次关系。它要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。（父子关系一般不会以继承的关系实现，而是以组合关系来复用父加载器的代码）</p>\n<h4 id=\"工作过程\"><a href=\"#工作过程\" class=\"headerlink\" title=\"工作过程\"></a>工作过程</h4><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（找不到所需的类）时，子加载器才会尝试自己去加载。</p>\n<p>在 java.lang.ClassLoader 中的 <code>loadClass</code> 方法中实现该过程。</p>\n<h4 id=\"为什么使用双亲委派模型\"><a href=\"#为什么使用双亲委派模型\" class=\"headerlink\" title=\"为什么使用双亲委派模型\"></a>为什么使用双亲委派模型</h4><p>像 java.lang.Object 这些存放在 rt.jar 中的类，无论使用哪个类加载器加载，最终都会委派给最顶端的启动类加载器加载，从而使得不同加载器加载的 Object 类都是同一个。</p>\n<p>相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为 java.lang.Object 的类，并放在 classpath 下，那么系统将会出现多个不同的 Object 类，Java 类型体系中最基础的行为也就无法保证。</p>\n"},{"title":"Android 组件化-组件aar化实战","date":"2021-07-31T06:16:55.000Z","cover":true,"summary":"Gradle 推送插件、阿里云效 Maven 仓库、Gradle 依赖管理","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n# Android 组件化-组件aar化实战\n\n[toc]\n\n\n\n## 1.Gradle 推送插件|Maven Publish Plugin\n\nMaven Publish 插件提供将构建产物发布到[Apache Maven](http://maven.apache.org/)存储库的功能。发布到 Maven 存储库的模块可以被 Maven、Gradle和其他了解 Maven 存储库格式的工具使用。\n\n### 1.1 插件任务|Tasks\n\n- `generatePomFileFor*PubName*Publication`—[生成MavenPom](https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.GenerateMavenPom.html)\n\n  为名为*PubName*的发布创建 POM 文件，填充已知元数据，例如项目名称、项目版本和依赖项。POM 文件的默认位置是*build/publications/$pubName/pom-default.xml*。\n\n- `publish*PubName*PublicationTo*RepoName*Repository`— [PublishToMavenRepository](https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.PublishToMavenRepository.html)\n\n  将*PubName*发布发布到名为*RepoName*的存储库。如果您有一个没有明确名称的存储库定义，*RepoName*将是“Maven”。\n\n- `publish*PubName*PublicationToMavenLocal`— [PublishToMavenLocal](https://docs.gradle.org/7.0/javadoc/org/gradle/api/publish/maven/tasks/PublishToMavenLocal.html)\n\n  将*PubName*发布与发布的 POM 文件和其他元数据一起复制到本地 Maven 缓存——通常是*$USER_HOME/.m2/repository*。\n\n- `publish`\n\n  *取决于*：所有任务`publish*PubName*PublicationTo*RepoName*Repository`将所有定义的发布发布到所有定义的存储库的聚合任务。它*不*包括复制出版物本地Maven缓存。\n\n- `publishToMavenLocal`\n\n  *取决于*：所有任务`publish*PubName*PublicationToMavenLocal`将所有定义的发布复制到本地 Maven 缓存，包括它们的元数据（POM 文件等）。\n\n```groovy\n//生成MavenPom\ngenerateMetadataFileForDebugPublication\ngenerateMetadataFileForReleasePublication\ngeneratePomFileForDebugPublication \ngeneratePomFileForReleasePublication\n\n//PublishToMavenRepository\npublish\npublishAllPublicationsToMavenRepository\npublishDebugPublicationToMavenRepository\npublishReleasePublicationToMavenRepository\n\n//PublishToMavenLocal\npublishToMavenLocal\npublishDebugPublicationToMavenLocal\npublishReleasePublicationToMavenLocal\n\n//如果你的项目使用了gralde wrapper组件的话请使用以下命令\n./gradlew task [name]\n./gradlew task :lib-net:publishToMavenLocal\n```\n\n\n\n### 1.2 构建产物|Publications\n\n您可以在 Maven 出版物中配置四项主要内容：\n\n- A [component](https://docs.gradle.org/7.0/userguide/dependency_management_terminology.html#sub:terminology_component)  例如 一个 java module、Android library module\n  - 通过该方法指定 MavenPublication.from(org.gradle.api.component.SoftwareComponent)\n- [Custom artifacts](https://docs.gradle.org/7.0/userguide/publishing_customization.html#sec:publishing_custom_artifacts_to_maven) \n  - 自定义构建产物通过这个方法 [MavenPublication.artifact(java.lang.Object)](https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.MavenPublication.html#org.gradle.api.publish.maven.MavenPublication:artifact(java.lang.Object)) method.\n- 标准的元数据 \n  - 例如 artifactId、groupId、version.\n- POM file 的其它配置\n  - 通过这个方法设置 MavenPublication.pom(org.gradle.api.Action)\n\n\n\n### 1.3 仓库|Repositories\n\n插件提供 MavenArtifactRepository 类型的存储库\n\n定义发布存储库：\n\n```groovy\npublishing {\n   repositories {\n      maven {\n          url \"url\"\n          credentials {\n              username = 'name'\n              password = 'pwd'\n          }\n      }\n\t\t}\n}\n```\n\nSnapshot and release repositories\n\n```groovy\npublishing {\n    repositories {\n        maven {\n            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')\n            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n        }\n    }\n}\n```\n\n\n\n### 1.4 完整示例 \n\n以下示例演示了如何签署和发布包含源代码、Javadoc 和自定义 POM 的 Java 库：\n\nbuild.gradle\n\n```groovy\nplugins {\n    id 'java-library'\n    id 'maven-publish'\n    id 'signing'\n}\n\ngroup = 'com.example'\nversion = '1.0'\n\njava {\n    withJavadocJar()\n    withSourcesJar()\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n            artifactId = 'my-library'\n            from components.java\n            versionMapping {\n                usage('java-api') {\n                    fromResolutionOf('runtimeClasspath')\n                }\n                usage('java-runtime') {\n                    fromResolutionResult()\n                }\n            }\n            pom {\n                name = 'My Library'\n                description = 'A concise description of my library'\n                url = 'http://www.example.com/library'\n                properties = [\n                    myProp: \"value\",\n                    \"prop.with.dots\": \"anotherValue\"\n                ]\n                licenses {\n                    license {\n                        name = 'The Apache License, Version 2.0'\n                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                developers {\n                    developer {\n                        id = 'johnd'\n                        name = 'John Doe'\n                        email = 'john.doe@example.com'\n                    }\n                }\n                scm {\n                    connection = 'scm:git:git://example.com/my-library.git'\n                    developerConnection = 'scm:git:ssh://example.com/my-library.git'\n                    url = 'http://example.com/my-library/'\n                }\n            }\n        }\n    }\n    repositories {\n        maven {\n            // change URLs to point to your repos, e.g. http://my.org/repo\n            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')\n            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n            credentials {\n              username = 'name'\n              password = 'pwd'\n            }\n        }\n    }\n}\n\nsigning {\n    sign publishing.publications.mavenJava\n}\n\n\njavadoc {\n    if(JavaVersion.current().isJava9Compatible()) {\n        options.addBooleanOption('html5', true)\n    }\n}\n```\n\n以上配置的结果是将发布以下工件：\n\n- POM文件: `my-library-1.0.pom`\n- 主要的 JAR 工件 : `my-library-1.0.jar`\n- 已显式配置的源代码: `my-library-1.0-sources.jar`\n- 已显式配置的 Javadoc： `my-library-1.0-javadoc.jar`\n\n签名插件用于为每个工件生成签名文件。此外，将为所有工件和签名文件生成校验和文件。\n\n\n\n### 1.5 Android 中 使用 Maven 发布插件\n\nAndroid Gradle 插件 3.6.0 及更高版本包括对 [Maven Publish Gradle 插件的支持](https://docs.gradle.org/current/userguide/publishing_maven.html)，它允许您将构建工件发布到 Apache Maven 存储库。Android Gradle 插件 为您的应用程序或库模块中的每个构建变体工件创建一个 [*组件*](https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component)，您可以使用它来自定义 [*发布*](https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications) 到 Maven 存储库。\n\nAndroid 插件创建的组件取决于模块是使用应用程序插件还是库插件，如下表所述。\n\n| Android Gradle 插件       | 出版神器                                       | 组件名称                 |\n| :------------------------ | :--------------------------------------------- | :----------------------- |\n| `com.android.library`     | AAR                                            | `components.variant`     |\n| `com.android.application` | APK 的 ZIP，以及可用的 ProGuard 或 R8 映射文件 | `components.variant_apk` |\n| `com.android.application` | 一个 Android 应用程序包 (AAB)                  | `components.variant_aab` |\n\n\n\n### 1.6 Android 版示例\n\n```groovy\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\nafterEvaluate {\n    publishing {\n        publications {\n            // Creates a Maven publication called \"release\".\n            release(MavenPublication) {\n                // Applies the component for the release build variant.\n                from components.release\n                // You can then customize attributes of the publication as shown below.\n                groupId = GROUP\n                artifactId = ARTIFACT_ID\n                version = VERSION\n\n            }\n            // Creates a Maven publication called “debug”.\n            debug(MavenPublication) {\n                // Applies the component for the debug build variant.\n                from components.debug\n                groupId = GROUP\n                artifactId = ARTIFACT_ID + \"-debug\"\n                version = VERSION\n            }\n        }\n        repositories {\n            maven {\n                // change URLs to point to your repos, e.g. http://my.org/repo\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n\n\n\n```\n\n### 1.7 Android 自定义POM文件版示例\n\n```groovy\napply plugin: 'maven-publish'\n\nprintln(\"--------${project.name}：Maven Publish Gradle--------\")\n//release 和 snapshot 的控制开关\ndef isUploadToRelease = rootProject.ext.mavenRepo['isUploadToRelease']\n//远程Maven仓库的URL Release\ndef MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n//远程Maven仓库的URL snapshots\ndef MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n//远程Maven仓库用户名\ndef USER_NAME = rootProject.ext.mavenRepo['userName']\n//远程Maven仓库密码\ndef PASSWORD = rootProject.ext.mavenRepo['password']\n// 唯一标识 每个组件都要指定\ndef GROUP = group.toString()\n// todo 默认为项目名称\ndef ARTIFACT_ID = project.name\n// 版本号 每个组件都要指定\ndef VERSION = version.toString()\n//远程Maven仓库的URL\ndef URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL\n\nprintln(\"dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION\")\nprintln(\"MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL\")\nprintln(\"MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL\")\n\n\n//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven\n//https://developer.android.com/studio/build/maven-publish-plugin\n\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\n\n\ntask sourceJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier \"sources\"\n}\n\nafterEvaluate {\n    publishing {\n        publications {\n            maven(MavenPublication) {\n                groupId GROUP\n                artifactId ARTIFACT_ID\n                version VERSION\n                artifact bundleReleaseAar\n                artifact sourceJar\n\n                //根据输入数据生成 POM 后，自定义配置 POM。\n                pom.withXml {\n                 \n                    final dependenciesNode = asNode().appendNode('dependencies')\n\n                    //dependenciesNode:dependencies[attributes={}; value=[]]\n                    println \"dependenciesNode:\" + dependenciesNode\n                    ext.addDependency = { Dependency dep, String scope ->\n                        //Dependency:DefaultExternalModuleDependency{group='com.qlife.android', name='lib-baidu-face', version='1.0.0', configuration='default'}\n                        //scope:compile\n                        println \"Dependency:\" + dep\n                        println \"scope:\" + scope\n\n                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == \"unspecified\")\n                            return // invalid dependencies should be ignored\n\n                        final dependencyNode = dependenciesNode.appendNode('dependency')\n                        dependencyNode.appendNode('artifactId', dep.name)\n\n                        if (dep.version == 'unspecified') {\n                            dependencyNode.appendNode('groupId', project.ext.pomGroupID)\n                            dependencyNode.appendNode('version', project.ext.pomVersion)\n                            System.println(\"${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}\")\n                        } else {\n                            dependencyNode.appendNode('groupId', dep.group)\n                            dependencyNode.appendNode('version', dep.version)\n                            System.println(\"${dep.group} ${dep.name} ${dep.version}\")\n                        }\n\n                        dependencyNode.appendNode('scope', scope)\n                        //一些依赖可能有类型，比如aar，应该在POM文件中提到\n                        // Some dependencies may have types, such as aar, that should be mentioned in the POM file\n                        def artifactsList = dep.properties['artifacts']\n                        if (artifactsList != null && artifactsList.size() > 0) {\n                            final artifact = artifactsList[0]\n                            dependencyNode.appendNode('type', artifact.getType())\n                        }\n\n                        if (!dep.transitive) {\n                            //在非传递依赖的情况下，它的所有依赖都应该从 POM 文件中强制排除\n                            // In case of non transitive dependency, all its dependencies should be force excluded from them POM file\n                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')\n                            exclusionNode.appendNode('groupId', '*')\n                            exclusionNode.appendNode('artifactId', '*')\n                        } else if (!dep.properties.excludeRules.empty) {\n                            //对于带排除的传递，应将所有排除规则添加到 POM 文件中\n                            // For transitive with exclusions, all exclude rules should be added to the POM file\n                            final exclusions = dependencyNode.appendNode('exclusions')\n                            dep.properties.excludeRules.each { ExcludeRule rule ->\n                                final exclusionNode = exclusions.appendNode('exclusion')\n                                exclusionNode.appendNode('groupId', rule.group ?: '*')\n                                exclusionNode.appendNode('artifactId', rule.module ?: '*')\n                            }\n                        }\n                    }\n\n                    // List all \"api\" dependencies (for new Gradle) as \"compile\" dependencies\n                    configurations.api.getDependencies().each { dep -> addDependency(dep, \"compile\") }\n                    // List all \"implementation\" dependencies (for new Gradle) as \"runtime\" dependencies\n                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, \"runtime\") }\n\n                }\n            }\n        }\n        repositories {\n            maven {\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n\ntask cleanBuildPublishLocal(type: GradleBuild) {\n    tasks = ['clean', 'build', 'publishToMavenLocal']\n}\n\ntask cleanBuildPublish(type: GradleBuild) {\n    tasks = ['clean', 'build', 'publish']\n}\n\n\n\n```\n\n\n\n### 1.8 Maven pom 文件格式\n\nPOM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。\n\n执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。\n\nPOM 中可以指定以下配置：\n\n- 项目依赖\n- 插件\n- 执行目标\n- 项目构建 profile\n- 项目版本\n- 项目开发者列表\n- 相关邮件列表信息\n\n所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。\n\n| 节点         | 描述                                                         |\n| :----------- | :----------------------------------------------------------- |\n| project      | 工程的根标签。                                               |\n| modelVersion | 模型版本需要设置为 4.0.0。                                   |\n| groupId      | 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group |\n| artifactId   | 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。 |\n| version      | 这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。 |\n| packaging    | 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 |\n| dependencies | 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。 |\n| dependency   | 依赖项                                                       |\n| scope        | 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 <br />- compile ：默认范围，用于编译<br /> - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath   <br />- runtime: 在执行时需要使用 <br />- test: 用于test任务时使用 <br />- system: 需要外在提供相应的元素。通过systemPath来取得                 <br />- systemPath: 仅用于范围为system。提供相应的路径 <br />- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 |\n\n[POM 标签大全详解](https://www.runoob.com/maven/maven-pom.html)\n\n一个简单的Android 依赖库的pom文件如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <!-- This module was also published with a richer model, Gradle metadata,  -->\n  <!-- which should be used instead. Do not delete the following line which  -->\n  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->\n  <!-- that they should prefer consuming it instead. -->\n  <!-- do_not_remove: published-with-gradle-metadata -->\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.qlife.android</groupId>\n  <artifactId>lib-net-release</artifactId>\n  <version>1.0.1</version>\n  <packaging>aar</packaging>\n  \n  <dependencies>\n    <dependency>\n      <groupId>com.squareup.retrofit2</groupId>\n      <artifactId>retrofit</artifactId>\n      <version>2.6.0</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.squareup.okhttp3</groupId>\n      <artifactId>logging-interceptor</artifactId>\n      <version>4.2.2</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.github.jaydroid1024.JDispatcher</groupId>\n      <artifactId>jdispatcher-api</artifactId>\n      <version>0.0.7</version>\n      <scope>runtime</scope>\n    </dependency>\n    。。。\n  </dependencies>\n</project>\n\n```\n\n\n\n\n\n## 2.阿里云-云效 Maven 仓库\n\n如果想自己搭建 NXRM(Nexus Repository Manager)私服，可参考 [Nexus 官网]( https://help.sonatype.com/repomanager3) [下载NXRM](https://help.sonatype.com/repomanager3/download)\n\n阿里云Maven中央仓库为 [阿里云云效](https://devops.aliyun.com/?channel=maven.aliyun) 提供的公共代理仓库，帮助研发人员提高研发生产效率，使用阿里云Maven中央仓库作为下载源，速度更快更稳定。\n\n[阿里云云效](https://devops.aliyun.com/?channel=maven.aliyun) 是企业级一站式 DevOps 平台，覆盖产品从需求到运营的研发全生命周期，其中云效也提供了免费、可靠的Maven私有仓库 [Packages](https://packages.aliyun.com/?channel=maven.aliyun)\n\n\n\n### 2.1 公共代理仓库\n\n| 仓库名称         | 阿里云仓库地址                                       | 阿里云仓库地址(老版)                                         | 源地址                                   |\n| :--------------- | :--------------------------------------------------- | :----------------------------------------------------------- | :--------------------------------------- |\n| central          | https://maven.aliyun.com/repository/central          | https://maven.aliyun.com/nexus/content/repositories/central  | https://repo1.maven.org/maven2/          |\n| jcenter          | https://maven.aliyun.com/repository/public           | https://maven.aliyun.com/nexus/content/repositories/jcenter  | http://jcenter.bintray.com/              |\n| public           | https://maven.aliyun.com/repository/public           | https://maven.aliyun.com/nexus/content/groups/public         | central仓和jcenter仓的聚合仓             |\n| google           | https://maven.aliyun.com/repository/google           | https://maven.aliyun.com/nexus/content/repositories/google   | https://maven.google.com/                |\n| gradle-plugin    | https://maven.aliyun.com/repository/gradle-plugin    | https://maven.aliyun.com/nexus/content/repositories/gradle-plugin | https://plugins.gradle.org/m2/           |\n| spring           | https://maven.aliyun.com/repository/spring           | https://maven.aliyun.com/nexus/content/repositories/spring   | http://repo.spring.io/libs-milestone/    |\n| spring-plugin    | https://maven.aliyun.com/repository/spring-plugin    | https://maven.aliyun.com/nexus/content/repositories/spring-plugin | http://repo.spring.io/plugins-release/   |\n| grails-core      | https://maven.aliyun.com/repository/grails-core      | https://maven.aliyun.com/nexus/content/repositories/grails-core | https://repo.grails.org/grails/core      |\n| apache snapshots | https://maven.aliyun.com/repository/apache-snapshots | https://maven.aliyun.com/nexus/content/repositories/apache-snapshots | https://repository.apache.org/snapshots/ |\n\n\n\n### 2.2 Android 相关代理仓库\n\n| 仓库名称      | 阿里云仓库地址                                    |\n| ------------- | ------------------------------------------------- |\n| central       | https://maven.aliyun.com/repository/central       |\n| jcenter       | https://maven.aliyun.com/repository/public        |\n| public        | https://maven.aliyun.com/repository/public        |\n| google        | https://maven.aliyun.com/repository/google        |\n| gradle-plugin | https://maven.aliyun.com/repository/gradle-plugin |\n\n**拿来就用**\n\n```groovy\nbuildscript {\n    repositories {\n      //central\n      maven { url 'https://maven.aliyun.com/repository/central' }\n      //jcenter&public\n      maven { url 'https://maven.aliyun.com/repository/public' }\n      //google\n      maven { url 'https://maven.aliyun.com/repository/google' }\n      //gradle-plugin\n      maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }\n      mavenCentral()\n      maven { url \"https://jitpack.io\" }\n      google()\n      jcenter()\n    }\n}\n```\n\n\n\n### 2.3 制品私有仓库\n\n- 云效 Packages 为您自动创建了两个 Maven 仓库，一个 release 库和一个 snapshot 库。\n\n  - Maven Release 库用于存储功能趋于稳定、当前更新停止，可以用于发行的版本。\n  - Maven Snapchat 库用于存储不稳定、尚处于开发中的版本，即快照版本。\n\n  - 您的制品文件具体推送到哪个库，根据您项目目录的build.gradle文件中version字段中是否配置了-SNAPSHOT。\n\n- 进入仓库后，可以通过仓库指南完成 仓库凭证设置、制品文件的上传和下载、私有库迁移。\n\n- 包列表下展示仓库下所有二进制包文件，支持通过 Group Id 和 Artifacts Id 进行包文件搜索。\n\n- 点击包文件展示包文件信息，默认展示最新版本信息，点击可切换版本。\n\n- 默认企业拥有者为仓库拥有者，其他企业成员需要在仓库中设置成员和角色。仓库公开性、成员角色之间的关系如下：\n\n|            |                                  |                                  |\n| ---------- | -------------------------------- | -------------------------------- |\n| 仓库角色   | 仓库公开性：私有仓库             | 仓库公开性：企业内可见           |\n| 拥有者     | 访问、下载、上传、删除、仓库管理 | 访问、下载、上传、删除、仓库管理 |\n| 管理员     | 访问、下载、上传、删除、仓库管理 | 访问、下载、上传、删除、仓库管理 |\n| 开发成员   | 访问、下载、上传                 | 访问、下载、上传                 |\n| 普通成员   | 访问、下载                       | 访问、下载                       |\n| 非仓库成员 | 无                               | 访问、下载                       |\n\n\n\n### 2.4 Gradle 推送\n\n1. 设置仓库凭证\n\n```groovy\napply plugin: 'maven-publish'\n\nprintln(\"--------${project.name}：Maven Publish Gradle--------\")\n//release 和 snapshot 的控制开关\ndef isUploadToRelease = rootProject.ext.mavenRepo['isUploadToRelease']\n//远程Maven仓库的URL Release\ndef MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n//远程Maven仓库的URL snapshots\ndef MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n//远程Maven仓库用户名\ndef USER_NAME = rootProject.ext.mavenRepo['userName']\n//远程Maven仓库密码\ndef PASSWORD = rootProject.ext.mavenRepo['password']\n// 唯一标识 每个组件都要指定\ndef GROUP = group.toString()\n// todo 默认为项目名称\ndef ARTIFACT_ID = project.name\n// 版本号 每个组件都要指定\ndef VERSION = version.toString()\n//远程Maven仓库的URL\ndef URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL\n\nprintln(\"dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION\")\nprintln(\"MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL\")\nprintln(\"MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL\")\n\n\n//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven\n//https://developer.android.com/studio/build/maven-publish-plugin\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\nafterEvaluate {\n    publishing {\n        publications {\n            // Creates a Maven publication called \"release\".\n            release(MavenPublication) {\n                // Applies the component for the release build variant.\n                from components.release\n                // You can then customize attributes of the publication as shown below.\n                groupId = GROUP\n                artifactId = ARTIFACT_ID\n                version = VERSION\n\n            }\n            // Creates a Maven publication called “debug”.\n            debug(MavenPublication) {\n                // Applies the component for the debug build variant.\n                from components.debug\n                groupId = GROUP\n                artifactId = ARTIFACT_ID + \"-debug\"\n                version = VERSION\n            }\n        }\n        repositories {\n            maven {\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n```\n\n2. 设置仓库下载配置\n\n```groovy\nallprojects {\n    repositories {\n        //central\n        maven { url 'https://maven.aliyun.com/repository/central' }\n        //jcenter&public\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        //google\n        maven { url 'https://maven.aliyun.com/repository/google' }\n        //gradle-plugin\n        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n        google()\n        jcenter()\n\n        /**Maven 私服配置*/\n        // 仓库类型 local dev production\n        def currentMavenRepositoryType = rootProject.ext.mavenRepo['currentMavenRepositoryType']\n        def localMavenRepositoryType = rootProject.ext.mavenRepositoryType['local']\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n        }\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n        }\n\n    }\n}\n```\n\n\n\n### 2.5 Gradle 拉取\n\n1. 设置仓库凭证\n\n```groovy\nallprojects {\n    repositories {\n        //central\n        maven { url 'https://maven.aliyun.com/repository/central' }\n        //jcenter&public\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        //google\n        maven { url 'https://maven.aliyun.com/repository/google' }\n        //gradle-plugin\n        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n        google()\n        jcenter()\n\n        /**Maven 私服配置*/\n        // 仓库类型 local dev production\n        def currentMavenRepositoryType = rootProject.ext.mavenRepo['currentMavenRepositoryType']\n        def localMavenRepositoryType = rootProject.ext.mavenRepositoryType['local']\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n        }\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n        }\n\n    }\n}\n```\n\n2. 配置包信息\n\n```groovy\ndependencies {\n    def currentMavenRepositoryType = rootProject.ext.mavenRepo['dependenceTypeIsModule']\n    if (currentMavenRepositoryType) {\n        implementation project(path: ':lib-net')\n    } else {\n        implementation rootProject.ext.libNet\n    }\n}\n```\n\n\n\n## 3.Grade依赖管理\n\n### 3.1 依赖项类型\n\n```groovy\ndependencies {\n  \n    // 对本地库模块的依赖\n    implementation project(\":mylibrary\")\n\n    // 对本地二进制文件的依赖\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n  \timplementation files('libs/foo.jar')\n    implementation project(path: ':foo-aar-module')\n  \n    // 对远程二进制文件的依赖\n    implementation 'com.example.android:app-magic:12.3'\n\n}\n```\n\n**本地库模块依赖**\n\n这里依赖了一个名为“mylibrary”（此名称必须与在您的 settings.gradle 文件中使用 `include:` 定义的库名称相符）的Android 库模块。在构建您的应用时，构建系统会编译该库模块，并将生成的编译内容打包到 APK 中。\n\n**本地二进制文件依赖**\n\nGradle 声明了对项目的 `module_name/libs/` 目录中 JAR 文件的依赖关系（因为 Gradle 会读取 `build.gradle` 文件的相对路径）。\n\n也可指定各个jar/aar文件或者通过创建一个aar/jar 模块建立像对本地库模块一样的依赖\n\n**远程二进制文件依赖**\n\n```\nimplementation 'com.example.android:app-magic:12.3'\n```\n\n这实际上是以下代码的简写形式：\n\n```\nimplementation group: 'com.example.android', name: 'app-magic', version: '12.3'\n```\n\n这声明了对“com.example.android”命名空间组内的 12.3 版“app-magic”库的依赖关系。\n\n此类远程依赖项要求您声明适当的远程代码库，Gradle 应在其中查找相应的库。如果本地不存在相应的库，Gradle 会从远程站点提取它。\n\n### 3.2 依赖项依赖方式配置\n\n在 `dependencies` 代码块内，您可以从多种不同的依赖项配置中选择其一,每种依赖项配置都向 Gradle 提供了有关如何使用该依赖项的不同说明。下表介绍了Android 项目中的依赖项使用的各种配置。\n\n|        新配置         | 已弃用配置 | 行为描述                                                     |\n| :-------------------: | :--------: | :----------------------------------------------------------- |\n|   `implementation`    | `compile`  | Gradle 会将依赖项添加到编译类路径，并将依赖项打包到构建输出。 当模块配置 `implementation` 依赖项时，Gradle在编译时**不会将该依赖项传递给其他模块**。也就是说，其他模块只有在运行时才能使用该依赖项。 使用此依赖项配置代替 `api` 或 `compile`（已弃用）可以**显著缩短构建时间**，因为这样可以减少构建系统需要重新编译的模块数。例如，如果 `implementation` 依赖项更改了其 API，Gradle 只会重新编译该依赖项以及直接依赖于它的模块。大多数应用和测试模块都应使用此配置。 |\n|         `api`         | `compile`  | Gradle 会将依赖项添加到编译类路径和构建输出。当一个模块包含 `api` 依赖项时，会让 Gradle **以传递方式将该依赖项导出到其他模块**，以便这些模块在运行时和编译时都可以使用该依赖项。 此配置的行为类似于 `compile`（现已弃用），但使用它时应格外小心，只能对需要以传递方式导出到其它上游消费者的依赖项时才使用它。这是因为，如果 `api` 依赖项更改了其外部 API，Gradle 会在编译时重新编译所有有权访问该依赖项的模块。因此，拥有大量的 `api` 依赖项会显**著增加构建时间**。除非要将依赖项的 API 公开给单独的模块，否则库模块应改用 `implementation` 依赖项。 |\n|     `compileOnly`     | `provided` | Gradle 只会将依赖项添加到编译类路径也就是说，**不会将其添加到构建输出**。如果您创建 Android 模块时在编译期间需要相应依赖项，但它在运行时可有可无，此配置会很有用。如果您使用此配置，那么您的库模块必须包含一个运行时条件，用于检查是否提供了相应依赖项，然后适当地改变该模块的行为，以使该模块在未提供相应依赖项的情况下仍可正常运行。这样做**不会添加不重要的瞬时依赖项**，因而**有助于减小最终 APK 的大小**。此配置的行为类似于 `provided`（现已弃用）。**注意**：您不能将 `compileOnly` 配置与 AAR 依赖项配合使用。 |\n|     `runtimeOnly`     |   `apk`    | Gradle 只会将依赖项添加到构建输出，以便在运行时使用。也就是说，不会将其添加到编译类路径。此配置的行为类似于 `apk`（现已弃用）。 |\n| `annotationProcessor` | `compile`  | 如需添加对作为注释处理器的库的依赖关系，您必须使用 `annotationProcessor` 配置将其添加到注释处理器类路径。这是因为，使用此配置可以**将编译类路径与注释处理器类路径分开，从而提高构建性能**。如果 Gradle 在编译类路径上找到注释处理器，则会禁用[避免编译](https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance)功能，这样会对构建时间产生负面影响（Gradle 5.0 及更高版本会忽略在编译类路径上找到的注释处理器）。如果 JAR 文件包含以下文件，则 Android Gradle 插件会假定依赖项是注释处理器： `META-INF/services/javax.annotation.processing.Processor`。如果插件检测到编译类路径上包含注释处理器，则会生成构建错误。 |\n\n\n\n### 3.3 依赖项顺序\n\n依赖项的列出顺序指明了每个库的优先级：第一个库的优先级高于第二个，第二个库的优先级高于第三个，依此类推。在[合并资源](https://developer.android.com/studio/write/add-resources#resource_merging)或[将清单元素从库中合并](https://developer.android.com/studio/build/manifest-merge)到应用中时，此顺序很重要。\n\n例如，如果您的项目声明以下内容：\n\n- 依赖 `LIB_A` 和 `LIB_B`（按此顺序）\n- `LIB_A` 依赖于 `LIB_C` 和 `LIB_D`（按此顺序）\n- `LIB_B` 也依赖于 `LIB_C`\n\n```groovy\n//app\ndependencies {\n    implementation('LIB_A')\n    implementation('LIB_B')\n}\n//LIB_A\ndependencies {\n    implementation('LIB_C')\n    implementation('LIB_D')\n}\n//LIB_B\ndependencies {\n    implementation('LIB_C')\n}\n```\n\n![image-20210826160438305](/Users/xuejiewang/Library/Application Support/typora-user-images/image-20210826160438305.png)\n\n那么，扁平型依赖项顺序将如下所示：\n\n1. `LIB_A`\n2. `LIB_D`\n3. `LIB_B`\n4. `LIB_C`\n\n这可以确保 `LIB_A` 和 `LIB_B` 都可以替换 `LIB_C`；并且 `LIB_D` 的优先级仍高于 `LIB_B`，因为 `LIB_A`（依赖前者）的优先级高于 `LIB_B`。\n\n### 3.4 依赖冲突问题\n\n**解决类路径之间的冲突**\n\n当 Gradle 解析编译类路径时，会先解析运行时类路径，然后使用所得结果确定应添加到编译类路径的依赖项版本。换句话说，运行时类路径决定了下游类路径上完全相同的依赖项所需的版本号。\n\n应用的运行时类路径还决定了 Gradle 需要对应用的测试 APK 的运行时类路径中的匹配依赖项使用的版本号。图 1 说明了类路径的层次结构。\n\n![img](https://developer.android.com/studio/images/build/classpath_sync-2x.png)\n\n例如，当应用使用 `implementation` [依赖项配置](https://developer.android.com/studio/build/dependencies#dependency_configurations)加入某个依赖项的一个版本，而库模块使用 `runtimeOnly` 配置加入该依赖项的另一个版本时，就可能会发生多个类路径中出现同一依赖项的不同版本的冲突。\n\n在解析对运行时和编译时类路径的依赖关系时，Android Gradle 插件 3.3.0 及更高版本会尝试自动解决某些下游版本冲突。例如，如果运行时类路径包含库 A 版本 2.0，而编译类路径包含库 A 版本 1.0，则插件会自动将对编译类路径的依赖关系更新为库 A 版本 2.0，以避免错误。\n\n不过，如果运行时类路径包含库 A 版本 1.0，而编译类路径包含库 A 版本 2.0，插件不会将对编译类路径的依赖关系降级为库 A 版本 1.0，您仍会收到一条与以下内容类似的错误：\n\n```\nConflict with dependency 'com.example.library:some-lib:2.0' in project 'my-library'.\nResolved versions for runtime classpath (1.0) and compile classpath (2.0) differ.\n```\n\n如需解决此问题，请执行以下某项操作：\n\n- 将所需版本的依赖项作为 `api` 依赖项添加到库模块。也就是说，只有库模块声明相应依赖项，但应用模块也能以传递方式访问其 API。 - 或者，您也可以同时在两个模块中声明相应依赖项，但应确保每个模块使用的版本相同。不妨考虑[配置项目全局属性](https://developer.android.com/studio/build/gradle-tips#configure-project-wide-properties)，以确保每个依赖项的版本在整个项目中保持一致。\n\n**排除传递依赖项**\n\n随着应用的范围不断扩大，它可能会包含许多依赖项，包括直接依赖项和传递依赖项（应用中导入的库所依赖的库）。如需排除不再需要的传递依赖项，您可以使用 `exclude` 关键字，如下所示：\n\n```\ndependencies {\n    implementation('some-library') {\n        exclude group: 'com.example.imgtools', module: 'native'\n    }\n}\n```\n\n如果在configuration中定义一个exclude,那么所有依赖的transitive dependency (指定的)都会被去除。定义exclude时候，或只指定group, 或只指定module名字，或二者都指定。\n\n下面是一些使用exclude的典型场合：\n\n- 有licensing问题\n- 从远程仓库上无法获取到依赖\n- runtime时候用不到\n- 有版本冲突\n\n**强制使用当前版本**\n\n```\nimplementation('com.squareup.okhttp:okhttp-mt:2.5.0') {\n    force = true\n}\n```\n\n如上，我们在依赖okhttp的时候很可能发生冲突，就比如依赖的依赖中也包含了okhttp，这种场合下，就会产生版本冲突的问题，加上force = true表明的意思就是即使在有依赖库版本冲突的情况下坚持使用被标注的这个依赖库版本。\n\n**间接依赖 transitive**\n\ntransitive dependencies 被称为依赖的依赖，称为“间接依赖”比较合适。\n\n```\nimplementation('com.meituan.android.terminus:library:6.6.1.16@aar') {\n    transitive = true\n}\n```\n\n在后面加上@aar，意指你只是下载该aar包，而并不下载该aar包所依赖的其他库，那如果想在使用@aar的前提下还能下载其依赖库，则需要添加transitive=true的条件。\n\n\n\n## 4.参考资料\n\n- [阿里云 | 云效 Maven](https://developer.aliyun.com/mvn/guide) \n- [阿里云 | 云效制品仓库 Package 官方文档](https://thoughts.aliyun.com/sharespace/5e8c436d546fd9001aee824a/docs/5e8c436d546fd9001aee8244?spm=a2c4g.11186623.2.2.5db21b3frHmIbF)\n- [阿里云 | 云效制品仓库 Package 地址](https://packages.aliyun.com/maven)\n- [Android 开发者 | Android Maven Publish docs]( https://developer.android.com/studio/build/maven-publish-plugin)\n- [Gradle 用户指南 | Gradle Maven Publish official page]( https://docs.gradle.org/current/userguide/publishing_maven.html)\n- [What is Maven](http://maven.apache.org/what-is-maven.html) \n- [菜鸟教程 | Maven 教程](https://www.runoob.com/maven/maven-pom.html)\n- [Publish an Android library to Maven with aar and source jar](https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-source-jar)\n- [ Android 开发者 | 添加构建依赖项 ](https://developer.android.com/studio/build/dependencies)\n- [Gradle 用户指南 | Gradle中的依赖管理](https://docs.gradle.org/current/userguide/dependency_management.html#dependency_management_in_gradle)\n\n\n\n","source":"_posts/android_component_aar.md","raw":"---\ntitle: Android 组件化-组件aar化实战\ndate: 2021-07-31 14:16:55\ncover: true\ntags: \n    - 组件化\n    - Maven\n    - aar化\n    - 编译优化\ncategory: \n\t- 组件化\nsummary: Gradle 推送插件、阿里云效 Maven 仓库、Gradle 依赖管理\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n\n\n# Android 组件化-组件aar化实战\n\n[toc]\n\n\n\n## 1.Gradle 推送插件|Maven Publish Plugin\n\nMaven Publish 插件提供将构建产物发布到[Apache Maven](http://maven.apache.org/)存储库的功能。发布到 Maven 存储库的模块可以被 Maven、Gradle和其他了解 Maven 存储库格式的工具使用。\n\n### 1.1 插件任务|Tasks\n\n- `generatePomFileFor*PubName*Publication`—[生成MavenPom](https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.GenerateMavenPom.html)\n\n  为名为*PubName*的发布创建 POM 文件，填充已知元数据，例如项目名称、项目版本和依赖项。POM 文件的默认位置是*build/publications/$pubName/pom-default.xml*。\n\n- `publish*PubName*PublicationTo*RepoName*Repository`— [PublishToMavenRepository](https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.PublishToMavenRepository.html)\n\n  将*PubName*发布发布到名为*RepoName*的存储库。如果您有一个没有明确名称的存储库定义，*RepoName*将是“Maven”。\n\n- `publish*PubName*PublicationToMavenLocal`— [PublishToMavenLocal](https://docs.gradle.org/7.0/javadoc/org/gradle/api/publish/maven/tasks/PublishToMavenLocal.html)\n\n  将*PubName*发布与发布的 POM 文件和其他元数据一起复制到本地 Maven 缓存——通常是*$USER_HOME/.m2/repository*。\n\n- `publish`\n\n  *取决于*：所有任务`publish*PubName*PublicationTo*RepoName*Repository`将所有定义的发布发布到所有定义的存储库的聚合任务。它*不*包括复制出版物本地Maven缓存。\n\n- `publishToMavenLocal`\n\n  *取决于*：所有任务`publish*PubName*PublicationToMavenLocal`将所有定义的发布复制到本地 Maven 缓存，包括它们的元数据（POM 文件等）。\n\n```groovy\n//生成MavenPom\ngenerateMetadataFileForDebugPublication\ngenerateMetadataFileForReleasePublication\ngeneratePomFileForDebugPublication \ngeneratePomFileForReleasePublication\n\n//PublishToMavenRepository\npublish\npublishAllPublicationsToMavenRepository\npublishDebugPublicationToMavenRepository\npublishReleasePublicationToMavenRepository\n\n//PublishToMavenLocal\npublishToMavenLocal\npublishDebugPublicationToMavenLocal\npublishReleasePublicationToMavenLocal\n\n//如果你的项目使用了gralde wrapper组件的话请使用以下命令\n./gradlew task [name]\n./gradlew task :lib-net:publishToMavenLocal\n```\n\n\n\n### 1.2 构建产物|Publications\n\n您可以在 Maven 出版物中配置四项主要内容：\n\n- A [component](https://docs.gradle.org/7.0/userguide/dependency_management_terminology.html#sub:terminology_component)  例如 一个 java module、Android library module\n  - 通过该方法指定 MavenPublication.from(org.gradle.api.component.SoftwareComponent)\n- [Custom artifacts](https://docs.gradle.org/7.0/userguide/publishing_customization.html#sec:publishing_custom_artifacts_to_maven) \n  - 自定义构建产物通过这个方法 [MavenPublication.artifact(java.lang.Object)](https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.MavenPublication.html#org.gradle.api.publish.maven.MavenPublication:artifact(java.lang.Object)) method.\n- 标准的元数据 \n  - 例如 artifactId、groupId、version.\n- POM file 的其它配置\n  - 通过这个方法设置 MavenPublication.pom(org.gradle.api.Action)\n\n\n\n### 1.3 仓库|Repositories\n\n插件提供 MavenArtifactRepository 类型的存储库\n\n定义发布存储库：\n\n```groovy\npublishing {\n   repositories {\n      maven {\n          url \"url\"\n          credentials {\n              username = 'name'\n              password = 'pwd'\n          }\n      }\n\t\t}\n}\n```\n\nSnapshot and release repositories\n\n```groovy\npublishing {\n    repositories {\n        maven {\n            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')\n            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n        }\n    }\n}\n```\n\n\n\n### 1.4 完整示例 \n\n以下示例演示了如何签署和发布包含源代码、Javadoc 和自定义 POM 的 Java 库：\n\nbuild.gradle\n\n```groovy\nplugins {\n    id 'java-library'\n    id 'maven-publish'\n    id 'signing'\n}\n\ngroup = 'com.example'\nversion = '1.0'\n\njava {\n    withJavadocJar()\n    withSourcesJar()\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n            artifactId = 'my-library'\n            from components.java\n            versionMapping {\n                usage('java-api') {\n                    fromResolutionOf('runtimeClasspath')\n                }\n                usage('java-runtime') {\n                    fromResolutionResult()\n                }\n            }\n            pom {\n                name = 'My Library'\n                description = 'A concise description of my library'\n                url = 'http://www.example.com/library'\n                properties = [\n                    myProp: \"value\",\n                    \"prop.with.dots\": \"anotherValue\"\n                ]\n                licenses {\n                    license {\n                        name = 'The Apache License, Version 2.0'\n                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                developers {\n                    developer {\n                        id = 'johnd'\n                        name = 'John Doe'\n                        email = 'john.doe@example.com'\n                    }\n                }\n                scm {\n                    connection = 'scm:git:git://example.com/my-library.git'\n                    developerConnection = 'scm:git:ssh://example.com/my-library.git'\n                    url = 'http://example.com/my-library/'\n                }\n            }\n        }\n    }\n    repositories {\n        maven {\n            // change URLs to point to your repos, e.g. http://my.org/repo\n            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')\n            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')\n            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl\n            credentials {\n              username = 'name'\n              password = 'pwd'\n            }\n        }\n    }\n}\n\nsigning {\n    sign publishing.publications.mavenJava\n}\n\n\njavadoc {\n    if(JavaVersion.current().isJava9Compatible()) {\n        options.addBooleanOption('html5', true)\n    }\n}\n```\n\n以上配置的结果是将发布以下工件：\n\n- POM文件: `my-library-1.0.pom`\n- 主要的 JAR 工件 : `my-library-1.0.jar`\n- 已显式配置的源代码: `my-library-1.0-sources.jar`\n- 已显式配置的 Javadoc： `my-library-1.0-javadoc.jar`\n\n签名插件用于为每个工件生成签名文件。此外，将为所有工件和签名文件生成校验和文件。\n\n\n\n### 1.5 Android 中 使用 Maven 发布插件\n\nAndroid Gradle 插件 3.6.0 及更高版本包括对 [Maven Publish Gradle 插件的支持](https://docs.gradle.org/current/userguide/publishing_maven.html)，它允许您将构建工件发布到 Apache Maven 存储库。Android Gradle 插件 为您的应用程序或库模块中的每个构建变体工件创建一个 [*组件*](https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component)，您可以使用它来自定义 [*发布*](https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications) 到 Maven 存储库。\n\nAndroid 插件创建的组件取决于模块是使用应用程序插件还是库插件，如下表所述。\n\n| Android Gradle 插件       | 出版神器                                       | 组件名称                 |\n| :------------------------ | :--------------------------------------------- | :----------------------- |\n| `com.android.library`     | AAR                                            | `components.variant`     |\n| `com.android.application` | APK 的 ZIP，以及可用的 ProGuard 或 R8 映射文件 | `components.variant_apk` |\n| `com.android.application` | 一个 Android 应用程序包 (AAB)                  | `components.variant_aab` |\n\n\n\n### 1.6 Android 版示例\n\n```groovy\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\nafterEvaluate {\n    publishing {\n        publications {\n            // Creates a Maven publication called \"release\".\n            release(MavenPublication) {\n                // Applies the component for the release build variant.\n                from components.release\n                // You can then customize attributes of the publication as shown below.\n                groupId = GROUP\n                artifactId = ARTIFACT_ID\n                version = VERSION\n\n            }\n            // Creates a Maven publication called “debug”.\n            debug(MavenPublication) {\n                // Applies the component for the debug build variant.\n                from components.debug\n                groupId = GROUP\n                artifactId = ARTIFACT_ID + \"-debug\"\n                version = VERSION\n            }\n        }\n        repositories {\n            maven {\n                // change URLs to point to your repos, e.g. http://my.org/repo\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n\n\n\n```\n\n### 1.7 Android 自定义POM文件版示例\n\n```groovy\napply plugin: 'maven-publish'\n\nprintln(\"--------${project.name}：Maven Publish Gradle--------\")\n//release 和 snapshot 的控制开关\ndef isUploadToRelease = rootProject.ext.mavenRepo['isUploadToRelease']\n//远程Maven仓库的URL Release\ndef MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n//远程Maven仓库的URL snapshots\ndef MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n//远程Maven仓库用户名\ndef USER_NAME = rootProject.ext.mavenRepo['userName']\n//远程Maven仓库密码\ndef PASSWORD = rootProject.ext.mavenRepo['password']\n// 唯一标识 每个组件都要指定\ndef GROUP = group.toString()\n// todo 默认为项目名称\ndef ARTIFACT_ID = project.name\n// 版本号 每个组件都要指定\ndef VERSION = version.toString()\n//远程Maven仓库的URL\ndef URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL\n\nprintln(\"dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION\")\nprintln(\"MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL\")\nprintln(\"MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL\")\n\n\n//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven\n//https://developer.android.com/studio/build/maven-publish-plugin\n\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\n\n\ntask sourceJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier \"sources\"\n}\n\nafterEvaluate {\n    publishing {\n        publications {\n            maven(MavenPublication) {\n                groupId GROUP\n                artifactId ARTIFACT_ID\n                version VERSION\n                artifact bundleReleaseAar\n                artifact sourceJar\n\n                //根据输入数据生成 POM 后，自定义配置 POM。\n                pom.withXml {\n                 \n                    final dependenciesNode = asNode().appendNode('dependencies')\n\n                    //dependenciesNode:dependencies[attributes={}; value=[]]\n                    println \"dependenciesNode:\" + dependenciesNode\n                    ext.addDependency = { Dependency dep, String scope ->\n                        //Dependency:DefaultExternalModuleDependency{group='com.qlife.android', name='lib-baidu-face', version='1.0.0', configuration='default'}\n                        //scope:compile\n                        println \"Dependency:\" + dep\n                        println \"scope:\" + scope\n\n                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == \"unspecified\")\n                            return // invalid dependencies should be ignored\n\n                        final dependencyNode = dependenciesNode.appendNode('dependency')\n                        dependencyNode.appendNode('artifactId', dep.name)\n\n                        if (dep.version == 'unspecified') {\n                            dependencyNode.appendNode('groupId', project.ext.pomGroupID)\n                            dependencyNode.appendNode('version', project.ext.pomVersion)\n                            System.println(\"${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}\")\n                        } else {\n                            dependencyNode.appendNode('groupId', dep.group)\n                            dependencyNode.appendNode('version', dep.version)\n                            System.println(\"${dep.group} ${dep.name} ${dep.version}\")\n                        }\n\n                        dependencyNode.appendNode('scope', scope)\n                        //一些依赖可能有类型，比如aar，应该在POM文件中提到\n                        // Some dependencies may have types, such as aar, that should be mentioned in the POM file\n                        def artifactsList = dep.properties['artifacts']\n                        if (artifactsList != null && artifactsList.size() > 0) {\n                            final artifact = artifactsList[0]\n                            dependencyNode.appendNode('type', artifact.getType())\n                        }\n\n                        if (!dep.transitive) {\n                            //在非传递依赖的情况下，它的所有依赖都应该从 POM 文件中强制排除\n                            // In case of non transitive dependency, all its dependencies should be force excluded from them POM file\n                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')\n                            exclusionNode.appendNode('groupId', '*')\n                            exclusionNode.appendNode('artifactId', '*')\n                        } else if (!dep.properties.excludeRules.empty) {\n                            //对于带排除的传递，应将所有排除规则添加到 POM 文件中\n                            // For transitive with exclusions, all exclude rules should be added to the POM file\n                            final exclusions = dependencyNode.appendNode('exclusions')\n                            dep.properties.excludeRules.each { ExcludeRule rule ->\n                                final exclusionNode = exclusions.appendNode('exclusion')\n                                exclusionNode.appendNode('groupId', rule.group ?: '*')\n                                exclusionNode.appendNode('artifactId', rule.module ?: '*')\n                            }\n                        }\n                    }\n\n                    // List all \"api\" dependencies (for new Gradle) as \"compile\" dependencies\n                    configurations.api.getDependencies().each { dep -> addDependency(dep, \"compile\") }\n                    // List all \"implementation\" dependencies (for new Gradle) as \"runtime\" dependencies\n                    configurations.implementation.getDependencies().each { dep -> addDependency(dep, \"runtime\") }\n\n                }\n            }\n        }\n        repositories {\n            maven {\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n\ntask cleanBuildPublishLocal(type: GradleBuild) {\n    tasks = ['clean', 'build', 'publishToMavenLocal']\n}\n\ntask cleanBuildPublish(type: GradleBuild) {\n    tasks = ['clean', 'build', 'publish']\n}\n\n\n\n```\n\n\n\n### 1.8 Maven pom 文件格式\n\nPOM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。\n\n执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。\n\nPOM 中可以指定以下配置：\n\n- 项目依赖\n- 插件\n- 执行目标\n- 项目构建 profile\n- 项目版本\n- 项目开发者列表\n- 相关邮件列表信息\n\n所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。\n\n| 节点         | 描述                                                         |\n| :----------- | :----------------------------------------------------------- |\n| project      | 工程的根标签。                                               |\n| modelVersion | 模型版本需要设置为 4.0.0。                                   |\n| groupId      | 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group |\n| artifactId   | 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。 |\n| version      | 这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。 |\n| packaging    | 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 |\n| dependencies | 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。 |\n| dependency   | 依赖项                                                       |\n| scope        | 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 <br />- compile ：默认范围，用于编译<br /> - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath   <br />- runtime: 在执行时需要使用 <br />- test: 用于test任务时使用 <br />- system: 需要外在提供相应的元素。通过systemPath来取得                 <br />- systemPath: 仅用于范围为system。提供相应的路径 <br />- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 |\n\n[POM 标签大全详解](https://www.runoob.com/maven/maven-pom.html)\n\n一个简单的Android 依赖库的pom文件如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <!-- This module was also published with a richer model, Gradle metadata,  -->\n  <!-- which should be used instead. Do not delete the following line which  -->\n  <!-- is to indicate to Gradle or any Gradle module metadata file consumer  -->\n  <!-- that they should prefer consuming it instead. -->\n  <!-- do_not_remove: published-with-gradle-metadata -->\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.qlife.android</groupId>\n  <artifactId>lib-net-release</artifactId>\n  <version>1.0.1</version>\n  <packaging>aar</packaging>\n  \n  <dependencies>\n    <dependency>\n      <groupId>com.squareup.retrofit2</groupId>\n      <artifactId>retrofit</artifactId>\n      <version>2.6.0</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.squareup.okhttp3</groupId>\n      <artifactId>logging-interceptor</artifactId>\n      <version>4.2.2</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.github.jaydroid1024.JDispatcher</groupId>\n      <artifactId>jdispatcher-api</artifactId>\n      <version>0.0.7</version>\n      <scope>runtime</scope>\n    </dependency>\n    。。。\n  </dependencies>\n</project>\n\n```\n\n\n\n\n\n## 2.阿里云-云效 Maven 仓库\n\n如果想自己搭建 NXRM(Nexus Repository Manager)私服，可参考 [Nexus 官网]( https://help.sonatype.com/repomanager3) [下载NXRM](https://help.sonatype.com/repomanager3/download)\n\n阿里云Maven中央仓库为 [阿里云云效](https://devops.aliyun.com/?channel=maven.aliyun) 提供的公共代理仓库，帮助研发人员提高研发生产效率，使用阿里云Maven中央仓库作为下载源，速度更快更稳定。\n\n[阿里云云效](https://devops.aliyun.com/?channel=maven.aliyun) 是企业级一站式 DevOps 平台，覆盖产品从需求到运营的研发全生命周期，其中云效也提供了免费、可靠的Maven私有仓库 [Packages](https://packages.aliyun.com/?channel=maven.aliyun)\n\n\n\n### 2.1 公共代理仓库\n\n| 仓库名称         | 阿里云仓库地址                                       | 阿里云仓库地址(老版)                                         | 源地址                                   |\n| :--------------- | :--------------------------------------------------- | :----------------------------------------------------------- | :--------------------------------------- |\n| central          | https://maven.aliyun.com/repository/central          | https://maven.aliyun.com/nexus/content/repositories/central  | https://repo1.maven.org/maven2/          |\n| jcenter          | https://maven.aliyun.com/repository/public           | https://maven.aliyun.com/nexus/content/repositories/jcenter  | http://jcenter.bintray.com/              |\n| public           | https://maven.aliyun.com/repository/public           | https://maven.aliyun.com/nexus/content/groups/public         | central仓和jcenter仓的聚合仓             |\n| google           | https://maven.aliyun.com/repository/google           | https://maven.aliyun.com/nexus/content/repositories/google   | https://maven.google.com/                |\n| gradle-plugin    | https://maven.aliyun.com/repository/gradle-plugin    | https://maven.aliyun.com/nexus/content/repositories/gradle-plugin | https://plugins.gradle.org/m2/           |\n| spring           | https://maven.aliyun.com/repository/spring           | https://maven.aliyun.com/nexus/content/repositories/spring   | http://repo.spring.io/libs-milestone/    |\n| spring-plugin    | https://maven.aliyun.com/repository/spring-plugin    | https://maven.aliyun.com/nexus/content/repositories/spring-plugin | http://repo.spring.io/plugins-release/   |\n| grails-core      | https://maven.aliyun.com/repository/grails-core      | https://maven.aliyun.com/nexus/content/repositories/grails-core | https://repo.grails.org/grails/core      |\n| apache snapshots | https://maven.aliyun.com/repository/apache-snapshots | https://maven.aliyun.com/nexus/content/repositories/apache-snapshots | https://repository.apache.org/snapshots/ |\n\n\n\n### 2.2 Android 相关代理仓库\n\n| 仓库名称      | 阿里云仓库地址                                    |\n| ------------- | ------------------------------------------------- |\n| central       | https://maven.aliyun.com/repository/central       |\n| jcenter       | https://maven.aliyun.com/repository/public        |\n| public        | https://maven.aliyun.com/repository/public        |\n| google        | https://maven.aliyun.com/repository/google        |\n| gradle-plugin | https://maven.aliyun.com/repository/gradle-plugin |\n\n**拿来就用**\n\n```groovy\nbuildscript {\n    repositories {\n      //central\n      maven { url 'https://maven.aliyun.com/repository/central' }\n      //jcenter&public\n      maven { url 'https://maven.aliyun.com/repository/public' }\n      //google\n      maven { url 'https://maven.aliyun.com/repository/google' }\n      //gradle-plugin\n      maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }\n      mavenCentral()\n      maven { url \"https://jitpack.io\" }\n      google()\n      jcenter()\n    }\n}\n```\n\n\n\n### 2.3 制品私有仓库\n\n- 云效 Packages 为您自动创建了两个 Maven 仓库，一个 release 库和一个 snapshot 库。\n\n  - Maven Release 库用于存储功能趋于稳定、当前更新停止，可以用于发行的版本。\n  - Maven Snapchat 库用于存储不稳定、尚处于开发中的版本，即快照版本。\n\n  - 您的制品文件具体推送到哪个库，根据您项目目录的build.gradle文件中version字段中是否配置了-SNAPSHOT。\n\n- 进入仓库后，可以通过仓库指南完成 仓库凭证设置、制品文件的上传和下载、私有库迁移。\n\n- 包列表下展示仓库下所有二进制包文件，支持通过 Group Id 和 Artifacts Id 进行包文件搜索。\n\n- 点击包文件展示包文件信息，默认展示最新版本信息，点击可切换版本。\n\n- 默认企业拥有者为仓库拥有者，其他企业成员需要在仓库中设置成员和角色。仓库公开性、成员角色之间的关系如下：\n\n|            |                                  |                                  |\n| ---------- | -------------------------------- | -------------------------------- |\n| 仓库角色   | 仓库公开性：私有仓库             | 仓库公开性：企业内可见           |\n| 拥有者     | 访问、下载、上传、删除、仓库管理 | 访问、下载、上传、删除、仓库管理 |\n| 管理员     | 访问、下载、上传、删除、仓库管理 | 访问、下载、上传、删除、仓库管理 |\n| 开发成员   | 访问、下载、上传                 | 访问、下载、上传                 |\n| 普通成员   | 访问、下载                       | 访问、下载                       |\n| 非仓库成员 | 无                               | 访问、下载                       |\n\n\n\n### 2.4 Gradle 推送\n\n1. 设置仓库凭证\n\n```groovy\napply plugin: 'maven-publish'\n\nprintln(\"--------${project.name}：Maven Publish Gradle--------\")\n//release 和 snapshot 的控制开关\ndef isUploadToRelease = rootProject.ext.mavenRepo['isUploadToRelease']\n//远程Maven仓库的URL Release\ndef MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n//远程Maven仓库的URL snapshots\ndef MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n//远程Maven仓库用户名\ndef USER_NAME = rootProject.ext.mavenRepo['userName']\n//远程Maven仓库密码\ndef PASSWORD = rootProject.ext.mavenRepo['password']\n// 唯一标识 每个组件都要指定\ndef GROUP = group.toString()\n// todo 默认为项目名称\ndef ARTIFACT_ID = project.name\n// 版本号 每个组件都要指定\ndef VERSION = version.toString()\n//远程Maven仓库的URL\ndef URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL\n\nprintln(\"dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION\")\nprintln(\"MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL\")\nprintln(\"MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL\")\n\n\n//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven\n//https://developer.android.com/studio/build/maven-publish-plugin\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\nafterEvaluate {\n    publishing {\n        publications {\n            // Creates a Maven publication called \"release\".\n            release(MavenPublication) {\n                // Applies the component for the release build variant.\n                from components.release\n                // You can then customize attributes of the publication as shown below.\n                groupId = GROUP\n                artifactId = ARTIFACT_ID\n                version = VERSION\n\n            }\n            // Creates a Maven publication called “debug”.\n            debug(MavenPublication) {\n                // Applies the component for the debug build variant.\n                from components.debug\n                groupId = GROUP\n                artifactId = ARTIFACT_ID + \"-debug\"\n                version = VERSION\n            }\n        }\n        repositories {\n            maven {\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n```\n\n2. 设置仓库下载配置\n\n```groovy\nallprojects {\n    repositories {\n        //central\n        maven { url 'https://maven.aliyun.com/repository/central' }\n        //jcenter&public\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        //google\n        maven { url 'https://maven.aliyun.com/repository/google' }\n        //gradle-plugin\n        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n        google()\n        jcenter()\n\n        /**Maven 私服配置*/\n        // 仓库类型 local dev production\n        def currentMavenRepositoryType = rootProject.ext.mavenRepo['currentMavenRepositoryType']\n        def localMavenRepositoryType = rootProject.ext.mavenRepositoryType['local']\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n        }\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n        }\n\n    }\n}\n```\n\n\n\n### 2.5 Gradle 拉取\n\n1. 设置仓库凭证\n\n```groovy\nallprojects {\n    repositories {\n        //central\n        maven { url 'https://maven.aliyun.com/repository/central' }\n        //jcenter&public\n        maven { url 'https://maven.aliyun.com/repository/public' }\n        //google\n        maven { url 'https://maven.aliyun.com/repository/google' }\n        //gradle-plugin\n        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }\n        mavenCentral()\n        maven { url \"https://jitpack.io\" }\n        google()\n        jcenter()\n\n        /**Maven 私服配置*/\n        // 仓库类型 local dev production\n        def currentMavenRepositoryType = rootProject.ext.mavenRepo['currentMavenRepositoryType']\n        def localMavenRepositoryType = rootProject.ext.mavenRepositoryType['local']\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlRelease']\n        }\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo['userName']\n                    password rootProject.ext.mavenRepo['password']\n                }\n            }\n            url rootProject.ext.mavenRepo['mavenRepoUrlSnapshots']\n        }\n\n    }\n}\n```\n\n2. 配置包信息\n\n```groovy\ndependencies {\n    def currentMavenRepositoryType = rootProject.ext.mavenRepo['dependenceTypeIsModule']\n    if (currentMavenRepositoryType) {\n        implementation project(path: ':lib-net')\n    } else {\n        implementation rootProject.ext.libNet\n    }\n}\n```\n\n\n\n## 3.Grade依赖管理\n\n### 3.1 依赖项类型\n\n```groovy\ndependencies {\n  \n    // 对本地库模块的依赖\n    implementation project(\":mylibrary\")\n\n    // 对本地二进制文件的依赖\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n  \timplementation files('libs/foo.jar')\n    implementation project(path: ':foo-aar-module')\n  \n    // 对远程二进制文件的依赖\n    implementation 'com.example.android:app-magic:12.3'\n\n}\n```\n\n**本地库模块依赖**\n\n这里依赖了一个名为“mylibrary”（此名称必须与在您的 settings.gradle 文件中使用 `include:` 定义的库名称相符）的Android 库模块。在构建您的应用时，构建系统会编译该库模块，并将生成的编译内容打包到 APK 中。\n\n**本地二进制文件依赖**\n\nGradle 声明了对项目的 `module_name/libs/` 目录中 JAR 文件的依赖关系（因为 Gradle 会读取 `build.gradle` 文件的相对路径）。\n\n也可指定各个jar/aar文件或者通过创建一个aar/jar 模块建立像对本地库模块一样的依赖\n\n**远程二进制文件依赖**\n\n```\nimplementation 'com.example.android:app-magic:12.3'\n```\n\n这实际上是以下代码的简写形式：\n\n```\nimplementation group: 'com.example.android', name: 'app-magic', version: '12.3'\n```\n\n这声明了对“com.example.android”命名空间组内的 12.3 版“app-magic”库的依赖关系。\n\n此类远程依赖项要求您声明适当的远程代码库，Gradle 应在其中查找相应的库。如果本地不存在相应的库，Gradle 会从远程站点提取它。\n\n### 3.2 依赖项依赖方式配置\n\n在 `dependencies` 代码块内，您可以从多种不同的依赖项配置中选择其一,每种依赖项配置都向 Gradle 提供了有关如何使用该依赖项的不同说明。下表介绍了Android 项目中的依赖项使用的各种配置。\n\n|        新配置         | 已弃用配置 | 行为描述                                                     |\n| :-------------------: | :--------: | :----------------------------------------------------------- |\n|   `implementation`    | `compile`  | Gradle 会将依赖项添加到编译类路径，并将依赖项打包到构建输出。 当模块配置 `implementation` 依赖项时，Gradle在编译时**不会将该依赖项传递给其他模块**。也就是说，其他模块只有在运行时才能使用该依赖项。 使用此依赖项配置代替 `api` 或 `compile`（已弃用）可以**显著缩短构建时间**，因为这样可以减少构建系统需要重新编译的模块数。例如，如果 `implementation` 依赖项更改了其 API，Gradle 只会重新编译该依赖项以及直接依赖于它的模块。大多数应用和测试模块都应使用此配置。 |\n|         `api`         | `compile`  | Gradle 会将依赖项添加到编译类路径和构建输出。当一个模块包含 `api` 依赖项时，会让 Gradle **以传递方式将该依赖项导出到其他模块**，以便这些模块在运行时和编译时都可以使用该依赖项。 此配置的行为类似于 `compile`（现已弃用），但使用它时应格外小心，只能对需要以传递方式导出到其它上游消费者的依赖项时才使用它。这是因为，如果 `api` 依赖项更改了其外部 API，Gradle 会在编译时重新编译所有有权访问该依赖项的模块。因此，拥有大量的 `api` 依赖项会显**著增加构建时间**。除非要将依赖项的 API 公开给单独的模块，否则库模块应改用 `implementation` 依赖项。 |\n|     `compileOnly`     | `provided` | Gradle 只会将依赖项添加到编译类路径也就是说，**不会将其添加到构建输出**。如果您创建 Android 模块时在编译期间需要相应依赖项，但它在运行时可有可无，此配置会很有用。如果您使用此配置，那么您的库模块必须包含一个运行时条件，用于检查是否提供了相应依赖项，然后适当地改变该模块的行为，以使该模块在未提供相应依赖项的情况下仍可正常运行。这样做**不会添加不重要的瞬时依赖项**，因而**有助于减小最终 APK 的大小**。此配置的行为类似于 `provided`（现已弃用）。**注意**：您不能将 `compileOnly` 配置与 AAR 依赖项配合使用。 |\n|     `runtimeOnly`     |   `apk`    | Gradle 只会将依赖项添加到构建输出，以便在运行时使用。也就是说，不会将其添加到编译类路径。此配置的行为类似于 `apk`（现已弃用）。 |\n| `annotationProcessor` | `compile`  | 如需添加对作为注释处理器的库的依赖关系，您必须使用 `annotationProcessor` 配置将其添加到注释处理器类路径。这是因为，使用此配置可以**将编译类路径与注释处理器类路径分开，从而提高构建性能**。如果 Gradle 在编译类路径上找到注释处理器，则会禁用[避免编译](https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance)功能，这样会对构建时间产生负面影响（Gradle 5.0 及更高版本会忽略在编译类路径上找到的注释处理器）。如果 JAR 文件包含以下文件，则 Android Gradle 插件会假定依赖项是注释处理器： `META-INF/services/javax.annotation.processing.Processor`。如果插件检测到编译类路径上包含注释处理器，则会生成构建错误。 |\n\n\n\n### 3.3 依赖项顺序\n\n依赖项的列出顺序指明了每个库的优先级：第一个库的优先级高于第二个，第二个库的优先级高于第三个，依此类推。在[合并资源](https://developer.android.com/studio/write/add-resources#resource_merging)或[将清单元素从库中合并](https://developer.android.com/studio/build/manifest-merge)到应用中时，此顺序很重要。\n\n例如，如果您的项目声明以下内容：\n\n- 依赖 `LIB_A` 和 `LIB_B`（按此顺序）\n- `LIB_A` 依赖于 `LIB_C` 和 `LIB_D`（按此顺序）\n- `LIB_B` 也依赖于 `LIB_C`\n\n```groovy\n//app\ndependencies {\n    implementation('LIB_A')\n    implementation('LIB_B')\n}\n//LIB_A\ndependencies {\n    implementation('LIB_C')\n    implementation('LIB_D')\n}\n//LIB_B\ndependencies {\n    implementation('LIB_C')\n}\n```\n\n![image-20210826160438305](/Users/xuejiewang/Library/Application Support/typora-user-images/image-20210826160438305.png)\n\n那么，扁平型依赖项顺序将如下所示：\n\n1. `LIB_A`\n2. `LIB_D`\n3. `LIB_B`\n4. `LIB_C`\n\n这可以确保 `LIB_A` 和 `LIB_B` 都可以替换 `LIB_C`；并且 `LIB_D` 的优先级仍高于 `LIB_B`，因为 `LIB_A`（依赖前者）的优先级高于 `LIB_B`。\n\n### 3.4 依赖冲突问题\n\n**解决类路径之间的冲突**\n\n当 Gradle 解析编译类路径时，会先解析运行时类路径，然后使用所得结果确定应添加到编译类路径的依赖项版本。换句话说，运行时类路径决定了下游类路径上完全相同的依赖项所需的版本号。\n\n应用的运行时类路径还决定了 Gradle 需要对应用的测试 APK 的运行时类路径中的匹配依赖项使用的版本号。图 1 说明了类路径的层次结构。\n\n![img](https://developer.android.com/studio/images/build/classpath_sync-2x.png)\n\n例如，当应用使用 `implementation` [依赖项配置](https://developer.android.com/studio/build/dependencies#dependency_configurations)加入某个依赖项的一个版本，而库模块使用 `runtimeOnly` 配置加入该依赖项的另一个版本时，就可能会发生多个类路径中出现同一依赖项的不同版本的冲突。\n\n在解析对运行时和编译时类路径的依赖关系时，Android Gradle 插件 3.3.0 及更高版本会尝试自动解决某些下游版本冲突。例如，如果运行时类路径包含库 A 版本 2.0，而编译类路径包含库 A 版本 1.0，则插件会自动将对编译类路径的依赖关系更新为库 A 版本 2.0，以避免错误。\n\n不过，如果运行时类路径包含库 A 版本 1.0，而编译类路径包含库 A 版本 2.0，插件不会将对编译类路径的依赖关系降级为库 A 版本 1.0，您仍会收到一条与以下内容类似的错误：\n\n```\nConflict with dependency 'com.example.library:some-lib:2.0' in project 'my-library'.\nResolved versions for runtime classpath (1.0) and compile classpath (2.0) differ.\n```\n\n如需解决此问题，请执行以下某项操作：\n\n- 将所需版本的依赖项作为 `api` 依赖项添加到库模块。也就是说，只有库模块声明相应依赖项，但应用模块也能以传递方式访问其 API。 - 或者，您也可以同时在两个模块中声明相应依赖项，但应确保每个模块使用的版本相同。不妨考虑[配置项目全局属性](https://developer.android.com/studio/build/gradle-tips#configure-project-wide-properties)，以确保每个依赖项的版本在整个项目中保持一致。\n\n**排除传递依赖项**\n\n随着应用的范围不断扩大，它可能会包含许多依赖项，包括直接依赖项和传递依赖项（应用中导入的库所依赖的库）。如需排除不再需要的传递依赖项，您可以使用 `exclude` 关键字，如下所示：\n\n```\ndependencies {\n    implementation('some-library') {\n        exclude group: 'com.example.imgtools', module: 'native'\n    }\n}\n```\n\n如果在configuration中定义一个exclude,那么所有依赖的transitive dependency (指定的)都会被去除。定义exclude时候，或只指定group, 或只指定module名字，或二者都指定。\n\n下面是一些使用exclude的典型场合：\n\n- 有licensing问题\n- 从远程仓库上无法获取到依赖\n- runtime时候用不到\n- 有版本冲突\n\n**强制使用当前版本**\n\n```\nimplementation('com.squareup.okhttp:okhttp-mt:2.5.0') {\n    force = true\n}\n```\n\n如上，我们在依赖okhttp的时候很可能发生冲突，就比如依赖的依赖中也包含了okhttp，这种场合下，就会产生版本冲突的问题，加上force = true表明的意思就是即使在有依赖库版本冲突的情况下坚持使用被标注的这个依赖库版本。\n\n**间接依赖 transitive**\n\ntransitive dependencies 被称为依赖的依赖，称为“间接依赖”比较合适。\n\n```\nimplementation('com.meituan.android.terminus:library:6.6.1.16@aar') {\n    transitive = true\n}\n```\n\n在后面加上@aar，意指你只是下载该aar包，而并不下载该aar包所依赖的其他库，那如果想在使用@aar的前提下还能下载其依赖库，则需要添加transitive=true的条件。\n\n\n\n## 4.参考资料\n\n- [阿里云 | 云效 Maven](https://developer.aliyun.com/mvn/guide) \n- [阿里云 | 云效制品仓库 Package 官方文档](https://thoughts.aliyun.com/sharespace/5e8c436d546fd9001aee824a/docs/5e8c436d546fd9001aee8244?spm=a2c4g.11186623.2.2.5db21b3frHmIbF)\n- [阿里云 | 云效制品仓库 Package 地址](https://packages.aliyun.com/maven)\n- [Android 开发者 | Android Maven Publish docs]( https://developer.android.com/studio/build/maven-publish-plugin)\n- [Gradle 用户指南 | Gradle Maven Publish official page]( https://docs.gradle.org/current/userguide/publishing_maven.html)\n- [What is Maven](http://maven.apache.org/what-is-maven.html) \n- [菜鸟教程 | Maven 教程](https://www.runoob.com/maven/maven-pom.html)\n- [Publish an Android library to Maven with aar and source jar](https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-source-jar)\n- [ Android 开发者 | 添加构建依赖项 ](https://developer.android.com/studio/build/dependencies)\n- [Gradle 用户指南 | Gradle中的依赖管理](https://docs.gradle.org/current/userguide/dependency_management.html#dependency_management_in_gradle)\n\n\n\n","slug":"android_component_aar","published":1,"updated":"2021-08-26T08:50:38.007Z","_id":"ckssof6um0000unfygb7kdxhl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Android-组件化-组件aar化实战\"><a href=\"#Android-组件化-组件aar化实战\" class=\"headerlink\" title=\"Android 组件化-组件aar化实战\"></a>Android 组件化-组件aar化实战</h1><p>[toc]</p>\n<h2 id=\"1-Gradle-推送插件-Maven-Publish-Plugin\"><a href=\"#1-Gradle-推送插件-Maven-Publish-Plugin\" class=\"headerlink\" title=\"1.Gradle 推送插件|Maven Publish Plugin\"></a>1.Gradle 推送插件|Maven Publish Plugin</h2><p>Maven Publish 插件提供将构建产物发布到<a href=\"http://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Maven</a>存储库的功能。发布到 Maven 存储库的模块可以被 Maven、Gradle和其他了解 Maven 存储库格式的工具使用。</p>\n<h3 id=\"1-1-插件任务-Tasks\"><a href=\"#1-1-插件任务-Tasks\" class=\"headerlink\" title=\"1.1 插件任务|Tasks\"></a>1.1 插件任务|Tasks</h3><ul>\n<li><p><code>generatePomFileFor*PubName*Publication</code>—<a href=\"https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.GenerateMavenPom.html\" target=\"_blank\" rel=\"noopener\">生成MavenPom</a></p>\n<p>为名为<em>PubName</em>的发布创建 POM 文件，填充已知元数据，例如项目名称、项目版本和依赖项。POM 文件的默认位置是<em>build/publications/$pubName/pom-default.xml</em>。</p>\n</li>\n<li><p><code>publish*PubName*PublicationTo*RepoName*Repository</code>— <a href=\"https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.PublishToMavenRepository.html\" target=\"_blank\" rel=\"noopener\">PublishToMavenRepository</a></p>\n<p>将<em>PubName</em>发布发布到名为<em>RepoName</em>的存储库。如果您有一个没有明确名称的存储库定义，<em>RepoName</em>将是“Maven”。</p>\n</li>\n<li><p><code>publish*PubName*PublicationToMavenLocal</code>— <a href=\"https://docs.gradle.org/7.0/javadoc/org/gradle/api/publish/maven/tasks/PublishToMavenLocal.html\" target=\"_blank\" rel=\"noopener\">PublishToMavenLocal</a></p>\n<p>将<em>PubName*发布与发布的 POM 文件和其他元数据一起复制到本地 Maven 缓存——通常是</em>$USER_HOME/.m2/repository*。</p>\n</li>\n<li><p><code>publish</code></p>\n<p><em>取决于</em>：所有任务<code>publish*PubName*PublicationTo*RepoName*Repository</code>将所有定义的发布发布到所有定义的存储库的聚合任务。它<em>不</em>包括复制出版物本地Maven缓存。</p>\n</li>\n<li><p><code>publishToMavenLocal</code></p>\n<p><em>取决于</em>：所有任务<code>publish*PubName*PublicationToMavenLocal</code>将所有定义的发布复制到本地 Maven 缓存，包括它们的元数据（POM 文件等）。</p>\n</li>\n</ul>\n<pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\" spellcheck=\"true\">//生成MavenPom</span>\ngenerateMetadataFileForDebugPublication\ngenerateMetadataFileForReleasePublication\ngeneratePomFileForDebugPublication \ngeneratePomFileForReleasePublication\n\n<span class=\"token comment\" spellcheck=\"true\">//PublishToMavenRepository</span>\npublish\npublishAllPublicationsToMavenRepository\npublishDebugPublicationToMavenRepository\npublishReleasePublicationToMavenRepository\n\n<span class=\"token comment\" spellcheck=\"true\">//PublishToMavenLocal</span>\npublishToMavenLocal\npublishDebugPublicationToMavenLocal\npublishReleasePublicationToMavenLocal\n\n<span class=\"token comment\" spellcheck=\"true\">//如果你的项目使用了gralde wrapper组件的话请使用以下命令</span>\n<span class=\"token operator\">.</span><span class=\"token operator\">/</span>gradlew task <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">.</span><span class=\"token operator\">/</span>gradlew task <span class=\"token punctuation\">:</span>lib<span class=\"token operator\">-</span>net<span class=\"token punctuation\">:</span>publishToMavenLocal</code></pre>\n<h3 id=\"1-2-构建产物-Publications\"><a href=\"#1-2-构建产物-Publications\" class=\"headerlink\" title=\"1.2 构建产物|Publications\"></a>1.2 构建产物|Publications</h3><p>您可以在 Maven 出版物中配置四项主要内容：</p>\n<ul>\n<li>A <a href=\"https://docs.gradle.org/7.0/userguide/dependency_management_terminology.html#sub:terminology_component\" target=\"_blank\" rel=\"noopener\">component</a>  例如 一个 java module、Android library module<ul>\n<li>通过该方法指定 MavenPublication.from(org.gradle.api.component.SoftwareComponent)</li>\n</ul>\n</li>\n<li><a href=\"https://docs.gradle.org/7.0/userguide/publishing_customization.html#sec:publishing_custom_artifacts_to_maven\" target=\"_blank\" rel=\"noopener\">Custom artifacts</a> <ul>\n<li>自定义构建产物通过这个方法 <a href=\"https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.MavenPublication.html#org.gradle.api.publish.maven.MavenPublication:artifact(java.lang.Object)\" target=\"_blank\" rel=\"noopener\">MavenPublication.artifact(java.lang.Object)</a> method.</li>\n</ul>\n</li>\n<li>标准的元数据 <ul>\n<li>例如 artifactId、groupId、version.</li>\n</ul>\n</li>\n<li>POM file 的其它配置<ul>\n<li>通过这个方法设置 MavenPublication.pom(org.gradle.api.Action)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-仓库-Repositories\"><a href=\"#1-3-仓库-Repositories\" class=\"headerlink\" title=\"1.3 仓库|Repositories\"></a>1.3 仓库|Repositories</h3><p>插件提供 MavenArtifactRepository 类型的存储库</p>\n<p>定义发布存储库：</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">publishing <span class=\"token punctuation\">{</span>\n   repositories <span class=\"token punctuation\">{</span>\n      maven <span class=\"token punctuation\">{</span>\n          url <span class=\"token string\">\"url\"</span>\n          credentials <span class=\"token punctuation\">{</span>\n              username <span class=\"token operator\">=</span> <span class=\"token string\">'name'</span>\n              password <span class=\"token operator\">=</span> <span class=\"token string\">'pwd'</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Snapshot and release repositories</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">publishing <span class=\"token punctuation\">{</span>\n    repositories <span class=\"token punctuation\">{</span>\n        maven <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">def</span> releasesRepoUrl <span class=\"token operator\">=</span> layout<span class=\"token operator\">.</span>buildDirectory<span class=\"token operator\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repos/releases'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">def</span> snapshotsRepoUrl <span class=\"token operator\">=</span> layout<span class=\"token operator\">.</span>buildDirectory<span class=\"token operator\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repos/snapshots'</span><span class=\"token punctuation\">)</span>\n            url <span class=\"token operator\">=</span> version<span class=\"token operator\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SNAPSHOT'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> snapshotsRepoUrl <span class=\"token punctuation\">:</span> releasesRepoUrl\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"1-4-完整示例\"><a href=\"#1-4-完整示例\" class=\"headerlink\" title=\"1.4 完整示例\"></a>1.4 完整示例</h3><p>以下示例演示了如何签署和发布包含源代码、Javadoc 和自定义 POM 的 Java 库：</p>\n<p>build.gradle</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n    id <span class=\"token string\">'java-library'</span>\n    id <span class=\"token string\">'maven-publish'</span>\n    id <span class=\"token string\">'signing'</span>\n<span class=\"token punctuation\">}</span>\n\ngroup <span class=\"token operator\">=</span> <span class=\"token string\">'com.example'</span>\nversion <span class=\"token operator\">=</span> <span class=\"token string\">'1.0'</span>\n\njava <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">withJavadocJar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">withSourcesJar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\npublishing <span class=\"token punctuation\">{</span>\n    publications <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">mavenJava</span><span class=\"token punctuation\">(</span>MavenPublication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            artifactId <span class=\"token operator\">=</span> <span class=\"token string\">'my-library'</span>\n            from components<span class=\"token operator\">.</span>java\n            versionMapping <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java-api'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">fromResolutionOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'runtimeClasspath'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java-runtime'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">fromResolutionResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            pom <span class=\"token punctuation\">{</span>\n                name <span class=\"token operator\">=</span> <span class=\"token string\">'My Library'</span>\n                description <span class=\"token operator\">=</span> <span class=\"token string\">'A concise description of my library'</span>\n                url <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.example.com/library'</span>\n                properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                    myProp<span class=\"token punctuation\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"prop.with.dots\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"anotherValue\"</span>\n                <span class=\"token punctuation\">]</span>\n                licenses <span class=\"token punctuation\">{</span>\n                    license <span class=\"token punctuation\">{</span>\n                        name <span class=\"token operator\">=</span> <span class=\"token string\">'The Apache License, Version 2.0'</span>\n                        url <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.apache.org/licenses/LICENSE-2.0.txt'</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                developers <span class=\"token punctuation\">{</span>\n                    developer <span class=\"token punctuation\">{</span>\n                        id <span class=\"token operator\">=</span> <span class=\"token string\">'johnd'</span>\n                        name <span class=\"token operator\">=</span> <span class=\"token string\">'John Doe'</span>\n                        email <span class=\"token operator\">=</span> <span class=\"token string\">'john.doe@example.com'</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                scm <span class=\"token punctuation\">{</span>\n                    connection <span class=\"token operator\">=</span> <span class=\"token string\">'scm:git:git://example.com/my-library.git'</span>\n                    developerConnection <span class=\"token operator\">=</span> <span class=\"token string\">'scm:git:ssh://example.com/my-library.git'</span>\n                    url <span class=\"token operator\">=</span> <span class=\"token string\">'http://example.com/my-library/'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    repositories <span class=\"token punctuation\">{</span>\n        maven <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// change URLs to point to your repos, e.g. http://my.org/repo</span>\n            <span class=\"token keyword\">def</span> releasesRepoUrl <span class=\"token operator\">=</span> layout<span class=\"token operator\">.</span>buildDirectory<span class=\"token operator\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repos/releases'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">def</span> snapshotsRepoUrl <span class=\"token operator\">=</span> layout<span class=\"token operator\">.</span>buildDirectory<span class=\"token operator\">.</span><span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">'repos/snapshots'</span><span class=\"token punctuation\">)</span>\n            url <span class=\"token operator\">=</span> version<span class=\"token operator\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SNAPSHOT'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> snapshotsRepoUrl <span class=\"token punctuation\">:</span> releasesRepoUrl\n            credentials <span class=\"token punctuation\">{</span>\n              username <span class=\"token operator\">=</span> <span class=\"token string\">'name'</span>\n              password <span class=\"token operator\">=</span> <span class=\"token string\">'pwd'</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nsigning <span class=\"token punctuation\">{</span>\n    sign publishing<span class=\"token operator\">.</span>publications<span class=\"token operator\">.</span>mavenJava\n<span class=\"token punctuation\">}</span>\n\n\njavadoc <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>JavaVersion<span class=\"token operator\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">isJava9Compatible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        options<span class=\"token operator\">.</span><span class=\"token function\">addBooleanOption</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html5'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>以上配置的结果是将发布以下工件：</p>\n<ul>\n<li>POM文件: <code>my-library-1.0.pom</code></li>\n<li>主要的 JAR 工件 : <code>my-library-1.0.jar</code></li>\n<li>已显式配置的源代码: <code>my-library-1.0-sources.jar</code></li>\n<li>已显式配置的 Javadoc： <code>my-library-1.0-javadoc.jar</code></li>\n</ul>\n<p>签名插件用于为每个工件生成签名文件。此外，将为所有工件和签名文件生成校验和文件。</p>\n<h3 id=\"1-5-Android-中-使用-Maven-发布插件\"><a href=\"#1-5-Android-中-使用-Maven-发布插件\" class=\"headerlink\" title=\"1.5 Android 中 使用 Maven 发布插件\"></a>1.5 Android 中 使用 Maven 发布插件</h3><p>Android Gradle 插件 3.6.0 及更高版本包括对 <a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html\" target=\"_blank\" rel=\"noopener\">Maven Publish Gradle 插件的支持</a>，它允许您将构建工件发布到 Apache Maven 存储库。Android Gradle 插件 为您的应用程序或库模块中的每个构建变体工件创建一个 <a href=\"https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component\" target=\"_blank\" rel=\"noopener\"><em>组件</em></a>，您可以使用它来自定义 <a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications\" target=\"_blank\" rel=\"noopener\"><em>发布</em></a> 到 Maven 存储库。</p>\n<p>Android 插件创建的组件取决于模块是使用应用程序插件还是库插件，如下表所述。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Android Gradle 插件</th>\n<th align=\"left\">出版神器</th>\n<th align=\"left\">组件名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>com.android.library</code></td>\n<td align=\"left\">AAR</td>\n<td align=\"left\"><code>components.variant</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>com.android.application</code></td>\n<td align=\"left\">APK 的 ZIP，以及可用的 ProGuard 或 R8 映射文件</td>\n<td align=\"left\"><code>components.variant_apk</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>com.android.application</code></td>\n<td align=\"left\">一个 Android 应用程序包 (AAB)</td>\n<td align=\"left\"><code>components.variant_aab</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"1-6-Android-版示例\"><a href=\"#1-6-Android-版示例\" class=\"headerlink\" title=\"1.6 Android 版示例\"></a>1.6 Android 版示例</h3><pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\" spellcheck=\"true\">// Because the components are created only during the afterEvaluate phase, you must</span>\n<span class=\"token comment\" spellcheck=\"true\">// configure your publications using the afterEvaluate() lifecycle method.</span>\nafterEvaluate <span class=\"token punctuation\">{</span>\n    publishing <span class=\"token punctuation\">{</span>\n        publications <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Creates a Maven publication called \"release\".</span>\n            <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>MavenPublication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Applies the component for the release build variant.</span>\n                from components<span class=\"token operator\">.</span>release\n                <span class=\"token comment\" spellcheck=\"true\">// You can then customize attributes of the publication as shown below.</span>\n                groupId <span class=\"token operator\">=</span> GROUP\n                artifactId <span class=\"token operator\">=</span> ARTIFACT_ID\n                version <span class=\"token operator\">=</span> VERSION\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Creates a Maven publication called “debug”.</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>MavenPublication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Applies the component for the debug build variant.</span>\n                from components<span class=\"token operator\">.</span>debug\n                groupId <span class=\"token operator\">=</span> GROUP\n                artifactId <span class=\"token operator\">=</span> ARTIFACT_ID <span class=\"token operator\">+</span> <span class=\"token string\">\"-debug\"</span>\n                version <span class=\"token operator\">=</span> VERSION\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        repositories <span class=\"token punctuation\">{</span>\n            maven <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// change URLs to point to your repos, e.g. http://my.org/repo</span>\n                url <span class=\"token operator\">=</span> URL\n                credentials <span class=\"token punctuation\">{</span>\n                    username USER_NAME\n                    password PASSWORD\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h3 id=\"1-7-Android-自定义POM文件版示例\"><a href=\"#1-7-Android-自定义POM文件版示例\" class=\"headerlink\" title=\"1.7 Android 自定义POM文件版示例\"></a>1.7 Android 自定义POM文件版示例</h3><pre class=\" language-groovy\"><code class=\"language-groovy\">apply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'maven-publish'</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------${project.name}：Maven Publish Gradle--------\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//release 和 snapshot 的控制开关</span>\n<span class=\"token keyword\">def</span> isUploadToRelease <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'isUploadToRelease'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库的URL Release</span>\n<span class=\"token keyword\">def</span> MAVEN_REPO_RELEASE_URL <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlRelease'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库的URL snapshots</span>\n<span class=\"token keyword\">def</span> MAVEN_REPO_SNAPSHOTS_URL <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlSnapshots'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库用户名</span>\n<span class=\"token keyword\">def</span> USER_NAME <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库密码</span>\n<span class=\"token keyword\">def</span> PASSWORD <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">// 唯一标识 每个组件都要指定</span>\n<span class=\"token keyword\">def</span> GROUP <span class=\"token operator\">=</span> group<span class=\"token operator\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// todo 默认为项目名称</span>\n<span class=\"token keyword\">def</span> ARTIFACT_ID <span class=\"token operator\">=</span> project<span class=\"token operator\">.</span>name\n<span class=\"token comment\" spellcheck=\"true\">// 版本号 每个组件都要指定</span>\n<span class=\"token keyword\">def</span> VERSION <span class=\"token operator\">=</span> version<span class=\"token operator\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库的URL</span>\n<span class=\"token keyword\">def</span> URL <span class=\"token operator\">=</span> isUploadToRelease <span class=\"token operator\">?</span> MAVEN_REPO_RELEASE_URL <span class=\"token punctuation\">:</span> MAVEN_REPO_SNAPSHOTS_URL\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven</span>\n<span class=\"token comment\" spellcheck=\"true\">//https://developer.android.com/studio/build/maven-publish-plugin</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Because the components are created only during the afterEvaluate phase, you must</span>\n<span class=\"token comment\" spellcheck=\"true\">// configure your publications using the afterEvaluate() lifecycle method.</span>\n\n\ntask <span class=\"token function\">sourceJar</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> Jar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    from android<span class=\"token operator\">.</span>sourceSets<span class=\"token operator\">.</span>main<span class=\"token operator\">.</span>java<span class=\"token operator\">.</span>srcDirs\n    classifier <span class=\"token string\">\"sources\"</span>\n<span class=\"token punctuation\">}</span>\n\nafterEvaluate <span class=\"token punctuation\">{</span>\n    publishing <span class=\"token punctuation\">{</span>\n        publications <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">maven</span><span class=\"token punctuation\">(</span>MavenPublication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                groupId GROUP\n                artifactId ARTIFACT_ID\n                version VERSION\n                artifact bundleReleaseAar\n                artifact sourceJar\n\n                <span class=\"token comment\" spellcheck=\"true\">//根据输入数据生成 POM 后，自定义配置 POM。</span>\n                pom<span class=\"token operator\">.</span>withXml <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token keyword\">final</span> dependenciesNode <span class=\"token operator\">=</span> <span class=\"token function\">asNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dependencies'</span><span class=\"token punctuation\">)</span>\n\n                    <span class=\"token comment\" spellcheck=\"true\">//dependenciesNode:dependencies[attributes={}; value=[]]</span>\n                    println <span class=\"token string\">\"dependenciesNode:\"</span> <span class=\"token operator\">+</span> dependenciesNode\n                    ext<span class=\"token operator\">.</span>addDependency <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Dependency dep<span class=\"token punctuation\">,</span> String scope <span class=\"token operator\">-></span>\n                        <span class=\"token comment\" spellcheck=\"true\">//Dependency:DefaultExternalModuleDependency{group='com.qlife.android', name='lib-baidu-face', version='1.0.0', configuration='default'}</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//scope:compile</span>\n                        println <span class=\"token string\">\"Dependency:\"</span> <span class=\"token operator\">+</span> dep\n                        println <span class=\"token string\">\"scope:\"</span> <span class=\"token operator\">+</span> scope\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token operator\">.</span>group <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> dep<span class=\"token operator\">.</span>version <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> dep<span class=\"token operator\">.</span>name <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> dep<span class=\"token operator\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"unspecified\"</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token keyword\">return</span> <span class=\"token comment\" spellcheck=\"true\">// invalid dependencies should be ignored</span>\n\n                        <span class=\"token keyword\">final</span> dependencyNode <span class=\"token operator\">=</span> dependenciesNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dependency'</span><span class=\"token punctuation\">)</span>\n                        dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'artifactId'</span><span class=\"token punctuation\">,</span> dep<span class=\"token operator\">.</span>name<span class=\"token punctuation\">)</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dep<span class=\"token operator\">.</span>version <span class=\"token operator\">==</span> <span class=\"token string\">'unspecified'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupId'</span><span class=\"token punctuation\">,</span> project<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>pomGroupID<span class=\"token punctuation\">)</span>\n                            dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">,</span> project<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>pomVersion<span class=\"token punctuation\">)</span>\n                            System<span class=\"token operator\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                            dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupId'</span><span class=\"token punctuation\">,</span> dep<span class=\"token operator\">.</span>group<span class=\"token punctuation\">)</span>\n                            dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">,</span> dep<span class=\"token operator\">.</span>version<span class=\"token punctuation\">)</span>\n                            System<span class=\"token operator\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"${dep.group} ${dep.name} ${dep.version}\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scope'</span><span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//一些依赖可能有类型，比如aar，应该在POM文件中提到</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// Some dependencies may have types, such as aar, that should be mentioned in the POM file</span>\n                        <span class=\"token keyword\">def</span> artifactsList <span class=\"token operator\">=</span> dep<span class=\"token operator\">.</span>properties<span class=\"token punctuation\">[</span><span class=\"token string\">'artifacts'</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>artifactsList <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> artifactsList<span class=\"token operator\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">final</span> artifact <span class=\"token operator\">=</span> artifactsList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n                            dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">,</span> artifact<span class=\"token operator\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token operator\">.</span>transitive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\" spellcheck=\"true\">//在非传递依赖的情况下，它的所有依赖都应该从 POM 文件中强制排除</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// In case of non transitive dependency, all its dependencies should be force excluded from them POM file</span>\n                            <span class=\"token keyword\">final</span> exclusionNode <span class=\"token operator\">=</span> dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusions'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusion'</span><span class=\"token punctuation\">)</span>\n                            exclusionNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupId'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n                            exclusionNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'artifactId'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dep<span class=\"token operator\">.</span>properties<span class=\"token operator\">.</span>excludeRules<span class=\"token operator\">.</span>empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token comment\" spellcheck=\"true\">//对于带排除的传递，应将所有排除规则添加到 POM 文件中</span>\n                            <span class=\"token comment\" spellcheck=\"true\">// For transitive with exclusions, all exclude rules should be added to the POM file</span>\n                            <span class=\"token keyword\">final</span> exclusions <span class=\"token operator\">=</span> dependencyNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusions'</span><span class=\"token punctuation\">)</span>\n                            dep<span class=\"token operator\">.</span>properties<span class=\"token operator\">.</span>excludeRules<span class=\"token operator\">.</span>each <span class=\"token punctuation\">{</span> ExcludeRule rule <span class=\"token operator\">-></span>\n                                <span class=\"token keyword\">final</span> exclusionNode <span class=\"token operator\">=</span> exclusions<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'exclusion'</span><span class=\"token punctuation\">)</span>\n                                exclusionNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'groupId'</span><span class=\"token punctuation\">,</span> rule<span class=\"token operator\">.</span>group <span class=\"token operator\">?:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n                                exclusionNode<span class=\"token operator\">.</span><span class=\"token function\">appendNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'artifactId'</span><span class=\"token punctuation\">,</span> rule<span class=\"token operator\">.</span>module <span class=\"token operator\">?:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token comment\" spellcheck=\"true\">// List all \"api\" dependencies (for new Gradle) as \"compile\" dependencies</span>\n                    configurations<span class=\"token operator\">.</span>api<span class=\"token operator\">.</span><span class=\"token function\">getDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>each <span class=\"token punctuation\">{</span> dep <span class=\"token operator\">-></span> <span class=\"token function\">addDependency</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">,</span> <span class=\"token string\">\"compile\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// List all \"implementation\" dependencies (for new Gradle) as \"runtime\" dependencies</span>\n                    configurations<span class=\"token operator\">.</span>implementation<span class=\"token operator\">.</span><span class=\"token function\">getDependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>each <span class=\"token punctuation\">{</span> dep <span class=\"token operator\">-></span> <span class=\"token function\">addDependency</span><span class=\"token punctuation\">(</span>dep<span class=\"token punctuation\">,</span> <span class=\"token string\">\"runtime\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        repositories <span class=\"token punctuation\">{</span>\n            maven <span class=\"token punctuation\">{</span>\n                url <span class=\"token operator\">=</span> URL\n                credentials <span class=\"token punctuation\">{</span>\n                    username USER_NAME\n                    password PASSWORD\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ntask <span class=\"token function\">cleanBuildPublishLocal</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> GradleBuild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'clean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'publishToMavenLocal'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\ntask <span class=\"token function\">cleanBuildPublish</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">:</span> GradleBuild<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'clean'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'publish'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h3 id=\"1-8-Maven-pom-文件格式\"><a href=\"#1-8-Maven-pom-文件格式\" class=\"headerlink\" title=\"1.8 Maven pom 文件格式\"></a>1.8 Maven pom 文件格式</h3><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p>\n<p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p>\n<p>POM 中可以指定以下配置：</p>\n<ul>\n<li>项目依赖</li>\n<li>插件</li>\n<li>执行目标</li>\n<li>项目构建 profile</li>\n<li>项目版本</li>\n<li>项目开发者列表</li>\n<li>相关邮件列表信息</li>\n</ul>\n<p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">节点</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">project</td>\n<td align=\"left\">工程的根标签。</td>\n</tr>\n<tr>\n<td align=\"left\">modelVersion</td>\n<td align=\"left\">模型版本需要设置为 4.0.0。</td>\n</tr>\n<tr>\n<td align=\"left\">groupId</td>\n<td align=\"left\">公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group</td>\n</tr>\n<tr>\n<td align=\"left\">artifactId</td>\n<td align=\"left\">项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。</td>\n</tr>\n<tr>\n<td align=\"left\">version</td>\n<td align=\"left\">这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。</td>\n</tr>\n<tr>\n<td align=\"left\">packaging</td>\n<td align=\"left\">项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型</td>\n</tr>\n<tr>\n<td align=\"left\">dependencies</td>\n<td align=\"left\">该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。</td>\n</tr>\n<tr>\n<td align=\"left\">dependency</td>\n<td align=\"left\">依赖项</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 <br>- compile ：默认范围，用于编译<br> - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath   <br>- runtime: 在执行时需要使用 <br>- test: 用于test任务时使用 <br>- system: 需要外在提供相应的元素。通过systemPath来取得                 <br>- systemPath: 仅用于范围为system。提供相应的路径 <br>- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.runoob.com/maven/maven-pom.html\" target=\"_blank\" rel=\"noopener\">POM 标签大全详解</a></p>\n<p>一个简单的Android 依赖库的pom文件如下</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project</span> <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://maven.apache.org/POM/4.0.0<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- This module was also published with a richer model, Gradle metadata,  --></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- which should be used instead. Do not delete the following line which  --></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- is to indicate to Gradle or any Gradle module metadata file consumer  --></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- that they should prefer consuming it instead. --></span>\n  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- do_not_remove: published-with-gradle-metadata --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>modelVersion</span><span class=\"token punctuation\">></span></span>4.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>modelVersion</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.qlife.android<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lib-net-release<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>packaging</span><span class=\"token punctuation\">></span></span>aar<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>packaging</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.squareup.retrofit2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>retrofit<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.6.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>compile<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.squareup.okhttp3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>logging-interceptor<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.github.jaydroid1024.JDispatcher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jdispatcher-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.0.7<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>runtime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    。。。\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"2-阿里云-云效-Maven-仓库\"><a href=\"#2-阿里云-云效-Maven-仓库\" class=\"headerlink\" title=\"2.阿里云-云效 Maven 仓库\"></a>2.阿里云-云效 Maven 仓库</h2><p>如果想自己搭建 NXRM(Nexus Repository Manager)私服，可参考 <a href=\"https://help.sonatype.com/repomanager3\" target=\"_blank\" rel=\"noopener\">Nexus 官网</a> <a href=\"https://help.sonatype.com/repomanager3/download\" target=\"_blank\" rel=\"noopener\">下载NXRM</a></p>\n<p>阿里云Maven中央仓库为 <a href=\"https://devops.aliyun.com/?channel=maven.aliyun\" target=\"_blank\" rel=\"noopener\">阿里云云效</a> 提供的公共代理仓库，帮助研发人员提高研发生产效率，使用阿里云Maven中央仓库作为下载源，速度更快更稳定。</p>\n<p><a href=\"https://devops.aliyun.com/?channel=maven.aliyun\" target=\"_blank\" rel=\"noopener\">阿里云云效</a> 是企业级一站式 DevOps 平台，覆盖产品从需求到运营的研发全生命周期，其中云效也提供了免费、可靠的Maven私有仓库 <a href=\"https://packages.aliyun.com/?channel=maven.aliyun\" target=\"_blank\" rel=\"noopener\">Packages</a></p>\n<h3 id=\"2-1-公共代理仓库\"><a href=\"#2-1-公共代理仓库\" class=\"headerlink\" title=\"2.1 公共代理仓库\"></a>2.1 公共代理仓库</h3><table>\n<thead>\n<tr>\n<th align=\"left\">仓库名称</th>\n<th align=\"left\">阿里云仓库地址</th>\n<th align=\"left\">阿里云仓库地址(老版)</th>\n<th align=\"left\">源地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">central</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/central\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/central</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/central\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/central</a></td>\n<td align=\"left\"><a href=\"https://repo1.maven.org/maven2/\" target=\"_blank\" rel=\"noopener\">https://repo1.maven.org/maven2/</a></td>\n</tr>\n<tr>\n<td align=\"left\">jcenter</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/jcenter\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/jcenter</a></td>\n<td align=\"left\"><a href=\"http://jcenter.bintray.com/\" target=\"_blank\" rel=\"noopener\">http://jcenter.bintray.com/</a></td>\n</tr>\n<tr>\n<td align=\"left\">public</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/groups/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/groups/public</a></td>\n<td align=\"left\">central仓和jcenter仓的聚合仓</td>\n</tr>\n<tr>\n<td align=\"left\">google</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/google\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/google</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/google\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/google</a></td>\n<td align=\"left\"><a href=\"https://maven.google.com/\" target=\"_blank\" rel=\"noopener\">https://maven.google.com/</a></td>\n</tr>\n<tr>\n<td align=\"left\">gradle-plugin</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/gradle-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/gradle-plugin</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/gradle-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/gradle-plugin</a></td>\n<td align=\"left\"><a href=\"https://plugins.gradle.org/m2/\" target=\"_blank\" rel=\"noopener\">https://plugins.gradle.org/m2/</a></td>\n</tr>\n<tr>\n<td align=\"left\">spring</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/spring\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/spring</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/spring\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/spring</a></td>\n<td align=\"left\"><a href=\"http://repo.spring.io/libs-milestone/\" target=\"_blank\" rel=\"noopener\">http://repo.spring.io/libs-milestone/</a></td>\n</tr>\n<tr>\n<td align=\"left\">spring-plugin</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/spring-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/spring-plugin</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/spring-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/spring-plugin</a></td>\n<td align=\"left\"><a href=\"http://repo.spring.io/plugins-release/\" target=\"_blank\" rel=\"noopener\">http://repo.spring.io/plugins-release/</a></td>\n</tr>\n<tr>\n<td align=\"left\">grails-core</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/grails-core\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/grails-core</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/grails-core\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/grails-core</a></td>\n<td align=\"left\"><a href=\"https://repo.grails.org/grails/core\" target=\"_blank\" rel=\"noopener\">https://repo.grails.org/grails/core</a></td>\n</tr>\n<tr>\n<td align=\"left\">apache snapshots</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/apache-snapshots\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/apache-snapshots</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/apache-snapshots\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/apache-snapshots</a></td>\n<td align=\"left\"><a href=\"https://repository.apache.org/snapshots/\" target=\"_blank\" rel=\"noopener\">https://repository.apache.org/snapshots/</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-Android-相关代理仓库\"><a href=\"#2-2-Android-相关代理仓库\" class=\"headerlink\" title=\"2.2 Android 相关代理仓库\"></a>2.2 Android 相关代理仓库</h3><table>\n<thead>\n<tr>\n<th>仓库名称</th>\n<th>阿里云仓库地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>central</td>\n<td><a href=\"https://maven.aliyun.com/repository/central\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/central</a></td>\n</tr>\n<tr>\n<td>jcenter</td>\n<td><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n</tr>\n<tr>\n<td>public</td>\n<td><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n</tr>\n<tr>\n<td>google</td>\n<td><a href=\"https://maven.aliyun.com/repository/google\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/google</a></td>\n</tr>\n<tr>\n<td>gradle-plugin</td>\n<td><a href=\"https://maven.aliyun.com/repository/gradle-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/gradle-plugin</a></td>\n</tr>\n</tbody></table>\n<p><strong>拿来就用</strong></p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">{</span>\n    repositories <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//central</span>\n      maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/central'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//jcenter&amp;public</span>\n      maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/public'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//google</span>\n      maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/google'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//gradle-plugin</span>\n      maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/gradle-plugin'</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">\"https://jitpack.io\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">google</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-3-制品私有仓库\"><a href=\"#2-3-制品私有仓库\" class=\"headerlink\" title=\"2.3 制品私有仓库\"></a>2.3 制品私有仓库</h3><ul>\n<li><p>云效 Packages 为您自动创建了两个 Maven 仓库，一个 release 库和一个 snapshot 库。</p>\n<ul>\n<li><p>Maven Release 库用于存储功能趋于稳定、当前更新停止，可以用于发行的版本。</p>\n</li>\n<li><p>Maven Snapchat 库用于存储不稳定、尚处于开发中的版本，即快照版本。</p>\n</li>\n<li><p>您的制品文件具体推送到哪个库，根据您项目目录的build.gradle文件中version字段中是否配置了-SNAPSHOT。</p>\n</li>\n</ul>\n</li>\n<li><p>进入仓库后，可以通过仓库指南完成 仓库凭证设置、制品文件的上传和下载、私有库迁移。</p>\n</li>\n<li><p>包列表下展示仓库下所有二进制包文件，支持通过 Group Id 和 Artifacts Id 进行包文件搜索。</p>\n</li>\n<li><p>点击包文件展示包文件信息，默认展示最新版本信息，点击可切换版本。</p>\n</li>\n<li><p>默认企业拥有者为仓库拥有者，其他企业成员需要在仓库中设置成员和角色。仓库公开性、成员角色之间的关系如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>仓库角色</td>\n<td>仓库公开性：私有仓库</td>\n<td>仓库公开性：企业内可见</td>\n</tr>\n<tr>\n<td>拥有者</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n</tr>\n<tr>\n<td>管理员</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n</tr>\n<tr>\n<td>开发成员</td>\n<td>访问、下载、上传</td>\n<td>访问、下载、上传</td>\n</tr>\n<tr>\n<td>普通成员</td>\n<td>访问、下载</td>\n<td>访问、下载</td>\n</tr>\n<tr>\n<td>非仓库成员</td>\n<td>无</td>\n<td>访问、下载</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-Gradle-推送\"><a href=\"#2-4-Gradle-推送\" class=\"headerlink\" title=\"2.4 Gradle 推送\"></a>2.4 Gradle 推送</h3><ol>\n<li>设置仓库凭证</li>\n</ol>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">apply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'maven-publish'</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------${project.name}：Maven Publish Gradle--------\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//release 和 snapshot 的控制开关</span>\n<span class=\"token keyword\">def</span> isUploadToRelease <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'isUploadToRelease'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库的URL Release</span>\n<span class=\"token keyword\">def</span> MAVEN_REPO_RELEASE_URL <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlRelease'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库的URL snapshots</span>\n<span class=\"token keyword\">def</span> MAVEN_REPO_SNAPSHOTS_URL <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlSnapshots'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库用户名</span>\n<span class=\"token keyword\">def</span> USER_NAME <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库密码</span>\n<span class=\"token keyword\">def</span> PASSWORD <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">// 唯一标识 每个组件都要指定</span>\n<span class=\"token keyword\">def</span> GROUP <span class=\"token operator\">=</span> group<span class=\"token operator\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// todo 默认为项目名称</span>\n<span class=\"token keyword\">def</span> ARTIFACT_ID <span class=\"token operator\">=</span> project<span class=\"token operator\">.</span>name\n<span class=\"token comment\" spellcheck=\"true\">// 版本号 每个组件都要指定</span>\n<span class=\"token keyword\">def</span> VERSION <span class=\"token operator\">=</span> version<span class=\"token operator\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//远程Maven仓库的URL</span>\n<span class=\"token keyword\">def</span> URL <span class=\"token operator\">=</span> isUploadToRelease <span class=\"token operator\">?</span> MAVEN_REPO_RELEASE_URL <span class=\"token punctuation\">:</span> MAVEN_REPO_SNAPSHOTS_URL\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL\"</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven</span>\n<span class=\"token comment\" spellcheck=\"true\">//https://developer.android.com/studio/build/maven-publish-plugin</span>\n<span class=\"token comment\" spellcheck=\"true\">// Because the components are created only during the afterEvaluate phase, you must</span>\n<span class=\"token comment\" spellcheck=\"true\">// configure your publications using the afterEvaluate() lifecycle method.</span>\nafterEvaluate <span class=\"token punctuation\">{</span>\n    publishing <span class=\"token punctuation\">{</span>\n        publications <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Creates a Maven publication called \"release\".</span>\n            <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>MavenPublication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Applies the component for the release build variant.</span>\n                from components<span class=\"token operator\">.</span>release\n                <span class=\"token comment\" spellcheck=\"true\">// You can then customize attributes of the publication as shown below.</span>\n                groupId <span class=\"token operator\">=</span> GROUP\n                artifactId <span class=\"token operator\">=</span> ARTIFACT_ID\n                version <span class=\"token operator\">=</span> VERSION\n\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Creates a Maven publication called “debug”.</span>\n            <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>MavenPublication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Applies the component for the debug build variant.</span>\n                from components<span class=\"token operator\">.</span>debug\n                groupId <span class=\"token operator\">=</span> GROUP\n                artifactId <span class=\"token operator\">=</span> ARTIFACT_ID <span class=\"token operator\">+</span> <span class=\"token string\">\"-debug\"</span>\n                version <span class=\"token operator\">=</span> VERSION\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        repositories <span class=\"token punctuation\">{</span>\n            maven <span class=\"token punctuation\">{</span>\n                url <span class=\"token operator\">=</span> URL\n                credentials <span class=\"token punctuation\">{</span>\n                    username USER_NAME\n                    password PASSWORD\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"2\">\n<li>设置仓库下载配置</li>\n</ol>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">allprojects <span class=\"token punctuation\">{</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//central</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/central'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//jcenter&amp;public</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/public'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//google</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/google'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//gradle-plugin</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/gradle-plugin'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">\"https://jitpack.io\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">google</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**Maven 私服配置*/</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 仓库类型 local dev production</span>\n        <span class=\"token keyword\">def</span> currentMavenRepositoryType <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'currentMavenRepositoryType'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">def</span> localMavenRepositoryType <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepositoryType<span class=\"token punctuation\">[</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">]</span>\n        maven <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//区分本地仓库和远程仓库</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentMavenRepositoryType <span class=\"token operator\">!=</span> localMavenRepositoryType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                credentials <span class=\"token punctuation\">{</span>\n                    username rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">]</span>\n                    password rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            url rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlRelease'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        maven <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//区分本地仓库和远程仓库</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentMavenRepositoryType <span class=\"token operator\">!=</span> localMavenRepositoryType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                credentials <span class=\"token punctuation\">{</span>\n                    username rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">]</span>\n                    password rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            url rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlSnapshots'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-5-Gradle-拉取\"><a href=\"#2-5-Gradle-拉取\" class=\"headerlink\" title=\"2.5 Gradle 拉取\"></a>2.5 Gradle 拉取</h3><ol>\n<li>设置仓库凭证</li>\n</ol>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">allprojects <span class=\"token punctuation\">{</span>\n    repositories <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//central</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/central'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//jcenter&amp;public</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/public'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//google</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/google'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//gradle-plugin</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">'https://maven.aliyun.com/repository/gradle-plugin'</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        maven <span class=\"token punctuation\">{</span> url <span class=\"token string\">\"https://jitpack.io\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">google</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">jcenter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">/**Maven 私服配置*/</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 仓库类型 local dev production</span>\n        <span class=\"token keyword\">def</span> currentMavenRepositoryType <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'currentMavenRepositoryType'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">def</span> localMavenRepositoryType <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepositoryType<span class=\"token punctuation\">[</span><span class=\"token string\">'local'</span><span class=\"token punctuation\">]</span>\n        maven <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//区分本地仓库和远程仓库</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentMavenRepositoryType <span class=\"token operator\">!=</span> localMavenRepositoryType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                credentials <span class=\"token punctuation\">{</span>\n                    username rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">]</span>\n                    password rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            url rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlRelease'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n        maven <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//区分本地仓库和远程仓库</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentMavenRepositoryType <span class=\"token operator\">!=</span> localMavenRepositoryType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                credentials <span class=\"token punctuation\">{</span>\n                    username rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'userName'</span><span class=\"token punctuation\">]</span>\n                    password rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            url rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'mavenRepoUrlSnapshots'</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ol start=\"2\">\n<li>配置包信息</li>\n</ol>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">dependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> currentMavenRepositoryType <span class=\"token operator\">=</span> rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>mavenRepo<span class=\"token punctuation\">[</span><span class=\"token string\">'dependenceTypeIsModule'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentMavenRepositoryType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        implementation <span class=\"token function\">project</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">:</span> <span class=\"token string\">':lib-net'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        implementation rootProject<span class=\"token operator\">.</span>ext<span class=\"token operator\">.</span>libNet\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"3-Grade依赖管理\"><a href=\"#3-Grade依赖管理\" class=\"headerlink\" title=\"3.Grade依赖管理\"></a>3.Grade依赖管理</h2><h3 id=\"3-1-依赖项类型\"><a href=\"#3-1-依赖项类型\" class=\"headerlink\" title=\"3.1 依赖项类型\"></a>3.1 依赖项类型</h3><pre class=\" language-groovy\"><code class=\"language-groovy\">dependencies <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 对本地库模块的依赖</span>\n    implementation <span class=\"token function\">project</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":mylibrary\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 对本地二进制文件的依赖</span>\n    implementation <span class=\"token function\">fileTree</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">:</span> <span class=\"token string\">'libs'</span><span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'*.jar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      implementation <span class=\"token function\">files</span><span class=\"token punctuation\">(</span><span class=\"token string\">'libs/foo.jar'</span><span class=\"token punctuation\">)</span>\n    implementation <span class=\"token function\">project</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">:</span> <span class=\"token string\">':foo-aar-module'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 对远程二进制文件的依赖</span>\n    implementation <span class=\"token string\">'com.example.android:app-magic:12.3'</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>本地库模块依赖</strong></p>\n<p>这里依赖了一个名为“mylibrary”（此名称必须与在您的 settings.gradle 文件中使用 <code>include:</code> 定义的库名称相符）的Android 库模块。在构建您的应用时，构建系统会编译该库模块，并将生成的编译内容打包到 APK 中。</p>\n<p><strong>本地二进制文件依赖</strong></p>\n<p>Gradle 声明了对项目的 <code>module_name/libs/</code> 目录中 JAR 文件的依赖关系（因为 Gradle 会读取 <code>build.gradle</code> 文件的相对路径）。</p>\n<p>也可指定各个jar/aar文件或者通过创建一个aar/jar 模块建立像对本地库模块一样的依赖</p>\n<p><strong>远程二进制文件依赖</strong></p>\n<pre><code>implementation 'com.example.android:app-magic:12.3'</code></pre><p>这实际上是以下代码的简写形式：</p>\n<pre><code>implementation group: 'com.example.android', name: 'app-magic', version: '12.3'</code></pre><p>这声明了对“com.example.android”命名空间组内的 12.3 版“app-magic”库的依赖关系。</p>\n<p>此类远程依赖项要求您声明适当的远程代码库，Gradle 应在其中查找相应的库。如果本地不存在相应的库，Gradle 会从远程站点提取它。</p>\n<h3 id=\"3-2-依赖项依赖方式配置\"><a href=\"#3-2-依赖项依赖方式配置\" class=\"headerlink\" title=\"3.2 依赖项依赖方式配置\"></a>3.2 依赖项依赖方式配置</h3><p>在 <code>dependencies</code> 代码块内，您可以从多种不同的依赖项配置中选择其一,每种依赖项配置都向 Gradle 提供了有关如何使用该依赖项的不同说明。下表介绍了Android 项目中的依赖项使用的各种配置。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">新配置</th>\n<th align=\"center\">已弃用配置</th>\n<th align=\"left\">行为描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>implementation</code></td>\n<td align=\"center\"><code>compile</code></td>\n<td align=\"left\">Gradle 会将依赖项添加到编译类路径，并将依赖项打包到构建输出。 当模块配置 <code>implementation</code> 依赖项时，Gradle在编译时<strong>不会将该依赖项传递给其他模块</strong>。也就是说，其他模块只有在运行时才能使用该依赖项。 使用此依赖项配置代替 <code>api</code> 或 <code>compile</code>（已弃用）可以<strong>显著缩短构建时间</strong>，因为这样可以减少构建系统需要重新编译的模块数。例如，如果 <code>implementation</code> 依赖项更改了其 API，Gradle 只会重新编译该依赖项以及直接依赖于它的模块。大多数应用和测试模块都应使用此配置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>api</code></td>\n<td align=\"center\"><code>compile</code></td>\n<td align=\"left\">Gradle 会将依赖项添加到编译类路径和构建输出。当一个模块包含 <code>api</code> 依赖项时，会让 Gradle <strong>以传递方式将该依赖项导出到其他模块</strong>，以便这些模块在运行时和编译时都可以使用该依赖项。 此配置的行为类似于 <code>compile</code>（现已弃用），但使用它时应格外小心，只能对需要以传递方式导出到其它上游消费者的依赖项时才使用它。这是因为，如果 <code>api</code> 依赖项更改了其外部 API，Gradle 会在编译时重新编译所有有权访问该依赖项的模块。因此，拥有大量的 <code>api</code> 依赖项会显<strong>著增加构建时间</strong>。除非要将依赖项的 API 公开给单独的模块，否则库模块应改用 <code>implementation</code> 依赖项。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>compileOnly</code></td>\n<td align=\"center\"><code>provided</code></td>\n<td align=\"left\">Gradle 只会将依赖项添加到编译类路径也就是说，<strong>不会将其添加到构建输出</strong>。如果您创建 Android 模块时在编译期间需要相应依赖项，但它在运行时可有可无，此配置会很有用。如果您使用此配置，那么您的库模块必须包含一个运行时条件，用于检查是否提供了相应依赖项，然后适当地改变该模块的行为，以使该模块在未提供相应依赖项的情况下仍可正常运行。这样做<strong>不会添加不重要的瞬时依赖项</strong>，因而<strong>有助于减小最终 APK 的大小</strong>。此配置的行为类似于 <code>provided</code>（现已弃用）。<strong>注意</strong>：您不能将 <code>compileOnly</code> 配置与 AAR 依赖项配合使用。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>runtimeOnly</code></td>\n<td align=\"center\"><code>apk</code></td>\n<td align=\"left\">Gradle 只会将依赖项添加到构建输出，以便在运行时使用。也就是说，不会将其添加到编译类路径。此配置的行为类似于 <code>apk</code>（现已弃用）。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>annotationProcessor</code></td>\n<td align=\"center\"><code>compile</code></td>\n<td align=\"left\">如需添加对作为注释处理器的库的依赖关系，您必须使用 <code>annotationProcessor</code> 配置将其添加到注释处理器类路径。这是因为，使用此配置可以<strong>将编译类路径与注释处理器类路径分开，从而提高构建性能</strong>。如果 Gradle 在编译类路径上找到注释处理器，则会禁用<a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance\" target=\"_blank\" rel=\"noopener\">避免编译</a>功能，这样会对构建时间产生负面影响（Gradle 5.0 及更高版本会忽略在编译类路径上找到的注释处理器）。如果 JAR 文件包含以下文件，则 Android Gradle 插件会假定依赖项是注释处理器： <code>META-INF/services/javax.annotation.processing.Processor</code>。如果插件检测到编译类路径上包含注释处理器，则会生成构建错误。</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-依赖项顺序\"><a href=\"#3-3-依赖项顺序\" class=\"headerlink\" title=\"3.3 依赖项顺序\"></a>3.3 依赖项顺序</h3><p>依赖项的列出顺序指明了每个库的优先级：第一个库的优先级高于第二个，第二个库的优先级高于第三个，依此类推。在<a href=\"https://developer.android.com/studio/write/add-resources#resource_merging\" target=\"_blank\" rel=\"noopener\">合并资源</a>或<a href=\"https://developer.android.com/studio/build/manifest-merge\" target=\"_blank\" rel=\"noopener\">将清单元素从库中合并</a>到应用中时，此顺序很重要。</p>\n<p>例如，如果您的项目声明以下内容：</p>\n<ul>\n<li>依赖 <code>LIB_A</code> 和 <code>LIB_B</code>（按此顺序）</li>\n<li><code>LIB_A</code> 依赖于 <code>LIB_C</code> 和 <code>LIB_D</code>（按此顺序）</li>\n<li><code>LIB_B</code> 也依赖于 <code>LIB_C</code></li>\n</ul>\n<pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\" spellcheck=\"true\">//app</span>\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LIB_A'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LIB_B'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//LIB_A</span>\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LIB_C'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LIB_D'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//LIB_B</span>\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">'LIB_C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>![image-20210826160438305](/Users/xuejiewang/Library/Application Support/typora-user-images/image-20210826160438305.png)</p>\n<p>那么，扁平型依赖项顺序将如下所示：</p>\n<ol>\n<li><code>LIB_A</code></li>\n<li><code>LIB_D</code></li>\n<li><code>LIB_B</code></li>\n<li><code>LIB_C</code></li>\n</ol>\n<p>这可以确保 <code>LIB_A</code> 和 <code>LIB_B</code> 都可以替换 <code>LIB_C</code>；并且 <code>LIB_D</code> 的优先级仍高于 <code>LIB_B</code>，因为 <code>LIB_A</code>（依赖前者）的优先级高于 <code>LIB_B</code>。</p>\n<h3 id=\"3-4-依赖冲突问题\"><a href=\"#3-4-依赖冲突问题\" class=\"headerlink\" title=\"3.4 依赖冲突问题\"></a>3.4 依赖冲突问题</h3><p><strong>解决类路径之间的冲突</strong></p>\n<p>当 Gradle 解析编译类路径时，会先解析运行时类路径，然后使用所得结果确定应添加到编译类路径的依赖项版本。换句话说，运行时类路径决定了下游类路径上完全相同的依赖项所需的版本号。</p>\n<p>应用的运行时类路径还决定了 Gradle 需要对应用的测试 APK 的运行时类路径中的匹配依赖项使用的版本号。图 1 说明了类路径的层次结构。</p>\n<p><img src=\"https://developer.android.com/studio/images/build/classpath_sync-2x.png\" alt=\"img\"></p>\n<p>例如，当应用使用 <code>implementation</code> <a href=\"https://developer.android.com/studio/build/dependencies#dependency_configurations\" target=\"_blank\" rel=\"noopener\">依赖项配置</a>加入某个依赖项的一个版本，而库模块使用 <code>runtimeOnly</code> 配置加入该依赖项的另一个版本时，就可能会发生多个类路径中出现同一依赖项的不同版本的冲突。</p>\n<p>在解析对运行时和编译时类路径的依赖关系时，Android Gradle 插件 3.3.0 及更高版本会尝试自动解决某些下游版本冲突。例如，如果运行时类路径包含库 A 版本 2.0，而编译类路径包含库 A 版本 1.0，则插件会自动将对编译类路径的依赖关系更新为库 A 版本 2.0，以避免错误。</p>\n<p>不过，如果运行时类路径包含库 A 版本 1.0，而编译类路径包含库 A 版本 2.0，插件不会将对编译类路径的依赖关系降级为库 A 版本 1.0，您仍会收到一条与以下内容类似的错误：</p>\n<pre><code>Conflict with dependency 'com.example.library:some-lib:2.0' in project 'my-library'.\nResolved versions for runtime classpath (1.0) and compile classpath (2.0) differ.</code></pre><p>如需解决此问题，请执行以下某项操作：</p>\n<ul>\n<li>将所需版本的依赖项作为 <code>api</code> 依赖项添加到库模块。也就是说，只有库模块声明相应依赖项，但应用模块也能以传递方式访问其 API。 - 或者，您也可以同时在两个模块中声明相应依赖项，但应确保每个模块使用的版本相同。不妨考虑<a href=\"https://developer.android.com/studio/build/gradle-tips#configure-project-wide-properties\" target=\"_blank\" rel=\"noopener\">配置项目全局属性</a>，以确保每个依赖项的版本在整个项目中保持一致。</li>\n</ul>\n<p><strong>排除传递依赖项</strong></p>\n<p>随着应用的范围不断扩大，它可能会包含许多依赖项，包括直接依赖项和传递依赖项（应用中导入的库所依赖的库）。如需排除不再需要的传递依赖项，您可以使用 <code>exclude</code> 关键字，如下所示：</p>\n<pre><code>dependencies {\n    implementation('some-library') {\n        exclude group: 'com.example.imgtools', module: 'native'\n    }\n}</code></pre><p>如果在configuration中定义一个exclude,那么所有依赖的transitive dependency (指定的)都会被去除。定义exclude时候，或只指定group, 或只指定module名字，或二者都指定。</p>\n<p>下面是一些使用exclude的典型场合：</p>\n<ul>\n<li>有licensing问题</li>\n<li>从远程仓库上无法获取到依赖</li>\n<li>runtime时候用不到</li>\n<li>有版本冲突</li>\n</ul>\n<p><strong>强制使用当前版本</strong></p>\n<pre><code>implementation('com.squareup.okhttp:okhttp-mt:2.5.0') {\n    force = true\n}</code></pre><p>如上，我们在依赖okhttp的时候很可能发生冲突，就比如依赖的依赖中也包含了okhttp，这种场合下，就会产生版本冲突的问题，加上force = true表明的意思就是即使在有依赖库版本冲突的情况下坚持使用被标注的这个依赖库版本。</p>\n<p><strong>间接依赖 transitive</strong></p>\n<p>transitive dependencies 被称为依赖的依赖，称为“间接依赖”比较合适。</p>\n<pre><code>implementation('com.meituan.android.terminus:library:6.6.1.16@aar') {\n    transitive = true\n}</code></pre><p>在后面加上@aar，意指你只是下载该aar包，而并不下载该aar包所依赖的其他库，那如果想在使用@aar的前提下还能下载其依赖库，则需要添加transitive=true的条件。</p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"4.参考资料\"></a>4.参考资料</h2><ul>\n<li><a href=\"https://developer.aliyun.com/mvn/guide\" target=\"_blank\" rel=\"noopener\">阿里云 | 云效 Maven</a> </li>\n<li><a href=\"https://thoughts.aliyun.com/sharespace/5e8c436d546fd9001aee824a/docs/5e8c436d546fd9001aee8244?spm=a2c4g.11186623.2.2.5db21b3frHmIbF\" target=\"_blank\" rel=\"noopener\">阿里云 | 云效制品仓库 Package 官方文档</a></li>\n<li><a href=\"https://packages.aliyun.com/maven\" target=\"_blank\" rel=\"noopener\">阿里云 | 云效制品仓库 Package 地址</a></li>\n<li><a href=\"https://developer.android.com/studio/build/maven-publish-plugin\" target=\"_blank\" rel=\"noopener\">Android 开发者 | Android Maven Publish docs</a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html\" target=\"_blank\" rel=\"noopener\">Gradle 用户指南 | Gradle Maven Publish official page</a></li>\n<li><a href=\"http://maven.apache.org/what-is-maven.html\" target=\"_blank\" rel=\"noopener\">What is Maven</a> </li>\n<li><a href=\"https://www.runoob.com/maven/maven-pom.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程 | Maven 教程</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-source-jar\" target=\"_blank\" rel=\"noopener\">Publish an Android library to Maven with aar and source jar</a></li>\n<li><a href=\"https://developer.android.com/studio/build/dependencies\" target=\"_blank\" rel=\"noopener\"> Android 开发者 | 添加构建依赖项 </a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/dependency_management.html#dependency_management_in_gradle\" target=\"_blank\" rel=\"noopener\">Gradle 用户指南 | Gradle中的依赖管理</a></li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Android-组件化-组件aar化实战\"><a href=\"#Android-组件化-组件aar化实战\" class=\"headerlink\" title=\"Android 组件化-组件aar化实战\"></a>Android 组件化-组件aar化实战</h1><p>[toc]</p>\n<h2 id=\"1-Gradle-推送插件-Maven-Publish-Plugin\"><a href=\"#1-Gradle-推送插件-Maven-Publish-Plugin\" class=\"headerlink\" title=\"1.Gradle 推送插件|Maven Publish Plugin\"></a>1.Gradle 推送插件|Maven Publish Plugin</h2><p>Maven Publish 插件提供将构建产物发布到<a href=\"http://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Maven</a>存储库的功能。发布到 Maven 存储库的模块可以被 Maven、Gradle和其他了解 Maven 存储库格式的工具使用。</p>\n<h3 id=\"1-1-插件任务-Tasks\"><a href=\"#1-1-插件任务-Tasks\" class=\"headerlink\" title=\"1.1 插件任务|Tasks\"></a>1.1 插件任务|Tasks</h3><ul>\n<li><p><code>generatePomFileFor*PubName*Publication</code>—<a href=\"https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.GenerateMavenPom.html\" target=\"_blank\" rel=\"noopener\">生成MavenPom</a></p>\n<p>为名为<em>PubName</em>的发布创建 POM 文件，填充已知元数据，例如项目名称、项目版本和依赖项。POM 文件的默认位置是<em>build/publications/$pubName/pom-default.xml</em>。</p>\n</li>\n<li><p><code>publish*PubName*PublicationTo*RepoName*Repository</code>— <a href=\"https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.tasks.PublishToMavenRepository.html\" target=\"_blank\" rel=\"noopener\">PublishToMavenRepository</a></p>\n<p>将<em>PubName</em>发布发布到名为<em>RepoName</em>的存储库。如果您有一个没有明确名称的存储库定义，<em>RepoName</em>将是“Maven”。</p>\n</li>\n<li><p><code>publish*PubName*PublicationToMavenLocal</code>— <a href=\"https://docs.gradle.org/7.0/javadoc/org/gradle/api/publish/maven/tasks/PublishToMavenLocal.html\" target=\"_blank\" rel=\"noopener\">PublishToMavenLocal</a></p>\n<p>将<em>PubName*发布与发布的 POM 文件和其他元数据一起复制到本地 Maven 缓存——通常是</em>$USER_HOME/.m2/repository*。</p>\n</li>\n<li><p><code>publish</code></p>\n<p><em>取决于</em>：所有任务<code>publish*PubName*PublicationTo*RepoName*Repository</code>将所有定义的发布发布到所有定义的存储库的聚合任务。它<em>不</em>包括复制出版物本地Maven缓存。</p>\n</li>\n<li><p><code>publishToMavenLocal</code></p>\n<p><em>取决于</em>：所有任务<code>publish*PubName*PublicationToMavenLocal</code>将所有定义的发布复制到本地 Maven 缓存，包括它们的元数据（POM 文件等）。</p>\n</li>\n</ul>\n<pre><code class=\"groovy\">//生成MavenPom\ngenerateMetadataFileForDebugPublication\ngenerateMetadataFileForReleasePublication\ngeneratePomFileForDebugPublication \ngeneratePomFileForReleasePublication\n\n//PublishToMavenRepository\npublish\npublishAllPublicationsToMavenRepository\npublishDebugPublicationToMavenRepository\npublishReleasePublicationToMavenRepository\n\n//PublishToMavenLocal\npublishToMavenLocal\npublishDebugPublicationToMavenLocal\npublishReleasePublicationToMavenLocal\n\n//如果你的项目使用了gralde wrapper组件的话请使用以下命令\n./gradlew task [name]\n./gradlew task :lib-net:publishToMavenLocal</code></pre>\n<h3 id=\"1-2-构建产物-Publications\"><a href=\"#1-2-构建产物-Publications\" class=\"headerlink\" title=\"1.2 构建产物|Publications\"></a>1.2 构建产物|Publications</h3><p>您可以在 Maven 出版物中配置四项主要内容：</p>\n<ul>\n<li>A <a href=\"https://docs.gradle.org/7.0/userguide/dependency_management_terminology.html#sub:terminology_component\" target=\"_blank\" rel=\"noopener\">component</a>  例如 一个 java module、Android library module<ul>\n<li>通过该方法指定 MavenPublication.from(org.gradle.api.component.SoftwareComponent)</li>\n</ul>\n</li>\n<li><a href=\"https://docs.gradle.org/7.0/userguide/publishing_customization.html#sec:publishing_custom_artifacts_to_maven\" target=\"_blank\" rel=\"noopener\">Custom artifacts</a> <ul>\n<li>自定义构建产物通过这个方法 <a href=\"https://docs.gradle.org/7.0/dsl/org.gradle.api.publish.maven.MavenPublication.html#org.gradle.api.publish.maven.MavenPublication:artifact(java.lang.Object)\" target=\"_blank\" rel=\"noopener\">MavenPublication.artifact(java.lang.Object)</a> method.</li>\n</ul>\n</li>\n<li>标准的元数据 <ul>\n<li>例如 artifactId、groupId、version.</li>\n</ul>\n</li>\n<li>POM file 的其它配置<ul>\n<li>通过这个方法设置 MavenPublication.pom(org.gradle.api.Action)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-3-仓库-Repositories\"><a href=\"#1-3-仓库-Repositories\" class=\"headerlink\" title=\"1.3 仓库|Repositories\"></a>1.3 仓库|Repositories</h3><p>插件提供 MavenArtifactRepository 类型的存储库</p>\n<p>定义发布存储库：</p>\n<pre><code class=\"groovy\">publishing {\n   repositories {\n      maven {\n          url &quot;url&quot;\n          credentials {\n              username = &#39;name&#39;\n              password = &#39;pwd&#39;\n          }\n      }\n        }\n}</code></pre>\n<p>Snapshot and release repositories</p>\n<pre><code class=\"groovy\">publishing {\n    repositories {\n        maven {\n            def releasesRepoUrl = layout.buildDirectory.dir(&#39;repos/releases&#39;)\n            def snapshotsRepoUrl = layout.buildDirectory.dir(&#39;repos/snapshots&#39;)\n            url = version.endsWith(&#39;SNAPSHOT&#39;) ? snapshotsRepoUrl : releasesRepoUrl\n        }\n    }\n}</code></pre>\n<h3 id=\"1-4-完整示例\"><a href=\"#1-4-完整示例\" class=\"headerlink\" title=\"1.4 完整示例\"></a>1.4 完整示例</h3><p>以下示例演示了如何签署和发布包含源代码、Javadoc 和自定义 POM 的 Java 库：</p>\n<p>build.gradle</p>\n<pre><code class=\"groovy\">plugins {\n    id &#39;java-library&#39;\n    id &#39;maven-publish&#39;\n    id &#39;signing&#39;\n}\n\ngroup = &#39;com.example&#39;\nversion = &#39;1.0&#39;\n\njava {\n    withJavadocJar()\n    withSourcesJar()\n}\n\npublishing {\n    publications {\n        mavenJava(MavenPublication) {\n            artifactId = &#39;my-library&#39;\n            from components.java\n            versionMapping {\n                usage(&#39;java-api&#39;) {\n                    fromResolutionOf(&#39;runtimeClasspath&#39;)\n                }\n                usage(&#39;java-runtime&#39;) {\n                    fromResolutionResult()\n                }\n            }\n            pom {\n                name = &#39;My Library&#39;\n                description = &#39;A concise description of my library&#39;\n                url = &#39;http://www.example.com/library&#39;\n                properties = [\n                    myProp: &quot;value&quot;,\n                    &quot;prop.with.dots&quot;: &quot;anotherValue&quot;\n                ]\n                licenses {\n                    license {\n                        name = &#39;The Apache License, Version 2.0&#39;\n                        url = &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;\n                    }\n                }\n                developers {\n                    developer {\n                        id = &#39;johnd&#39;\n                        name = &#39;John Doe&#39;\n                        email = &#39;john.doe@example.com&#39;\n                    }\n                }\n                scm {\n                    connection = &#39;scm:git:git://example.com/my-library.git&#39;\n                    developerConnection = &#39;scm:git:ssh://example.com/my-library.git&#39;\n                    url = &#39;http://example.com/my-library/&#39;\n                }\n            }\n        }\n    }\n    repositories {\n        maven {\n            // change URLs to point to your repos, e.g. http://my.org/repo\n            def releasesRepoUrl = layout.buildDirectory.dir(&#39;repos/releases&#39;)\n            def snapshotsRepoUrl = layout.buildDirectory.dir(&#39;repos/snapshots&#39;)\n            url = version.endsWith(&#39;SNAPSHOT&#39;) ? snapshotsRepoUrl : releasesRepoUrl\n            credentials {\n              username = &#39;name&#39;\n              password = &#39;pwd&#39;\n            }\n        }\n    }\n}\n\nsigning {\n    sign publishing.publications.mavenJava\n}\n\n\njavadoc {\n    if(JavaVersion.current().isJava9Compatible()) {\n        options.addBooleanOption(&#39;html5&#39;, true)\n    }\n}</code></pre>\n<p>以上配置的结果是将发布以下工件：</p>\n<ul>\n<li>POM文件: <code>my-library-1.0.pom</code></li>\n<li>主要的 JAR 工件 : <code>my-library-1.0.jar</code></li>\n<li>已显式配置的源代码: <code>my-library-1.0-sources.jar</code></li>\n<li>已显式配置的 Javadoc： <code>my-library-1.0-javadoc.jar</code></li>\n</ul>\n<p>签名插件用于为每个工件生成签名文件。此外，将为所有工件和签名文件生成校验和文件。</p>\n<h3 id=\"1-5-Android-中-使用-Maven-发布插件\"><a href=\"#1-5-Android-中-使用-Maven-发布插件\" class=\"headerlink\" title=\"1.5 Android 中 使用 Maven 发布插件\"></a>1.5 Android 中 使用 Maven 发布插件</h3><p>Android Gradle 插件 3.6.0 及更高版本包括对 <a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html\" target=\"_blank\" rel=\"noopener\">Maven Publish Gradle 插件的支持</a>，它允许您将构建工件发布到 Apache Maven 存储库。Android Gradle 插件 为您的应用程序或库模块中的每个构建变体工件创建一个 <a href=\"https://docs.gradle.org/current/userguide/dependency_management_terminology.html#sub:terminology_component\" target=\"_blank\" rel=\"noopener\"><em>组件</em></a>，您可以使用它来自定义 <a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications\" target=\"_blank\" rel=\"noopener\"><em>发布</em></a> 到 Maven 存储库。</p>\n<p>Android 插件创建的组件取决于模块是使用应用程序插件还是库插件，如下表所述。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Android Gradle 插件</th>\n<th align=\"left\">出版神器</th>\n<th align=\"left\">组件名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>com.android.library</code></td>\n<td align=\"left\">AAR</td>\n<td align=\"left\"><code>components.variant</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>com.android.application</code></td>\n<td align=\"left\">APK 的 ZIP，以及可用的 ProGuard 或 R8 映射文件</td>\n<td align=\"left\"><code>components.variant_apk</code></td>\n</tr>\n<tr>\n<td align=\"left\"><code>com.android.application</code></td>\n<td align=\"left\">一个 Android 应用程序包 (AAB)</td>\n<td align=\"left\"><code>components.variant_aab</code></td>\n</tr>\n</tbody></table>\n<h3 id=\"1-6-Android-版示例\"><a href=\"#1-6-Android-版示例\" class=\"headerlink\" title=\"1.6 Android 版示例\"></a>1.6 Android 版示例</h3><pre><code class=\"groovy\">// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\nafterEvaluate {\n    publishing {\n        publications {\n            // Creates a Maven publication called &quot;release&quot;.\n            release(MavenPublication) {\n                // Applies the component for the release build variant.\n                from components.release\n                // You can then customize attributes of the publication as shown below.\n                groupId = GROUP\n                artifactId = ARTIFACT_ID\n                version = VERSION\n\n            }\n            // Creates a Maven publication called “debug”.\n            debug(MavenPublication) {\n                // Applies the component for the debug build variant.\n                from components.debug\n                groupId = GROUP\n                artifactId = ARTIFACT_ID + &quot;-debug&quot;\n                version = VERSION\n            }\n        }\n        repositories {\n            maven {\n                // change URLs to point to your repos, e.g. http://my.org/repo\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n\n\n</code></pre>\n<h3 id=\"1-7-Android-自定义POM文件版示例\"><a href=\"#1-7-Android-自定义POM文件版示例\" class=\"headerlink\" title=\"1.7 Android 自定义POM文件版示例\"></a>1.7 Android 自定义POM文件版示例</h3><pre><code class=\"groovy\">apply plugin: &#39;maven-publish&#39;\n\nprintln(&quot;--------${project.name}：Maven Publish Gradle--------&quot;)\n//release 和 snapshot 的控制开关\ndef isUploadToRelease = rootProject.ext.mavenRepo[&#39;isUploadToRelease&#39;]\n//远程Maven仓库的URL Release\ndef MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo[&#39;mavenRepoUrlRelease&#39;]\n//远程Maven仓库的URL snapshots\ndef MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo[&#39;mavenRepoUrlSnapshots&#39;]\n//远程Maven仓库用户名\ndef USER_NAME = rootProject.ext.mavenRepo[&#39;userName&#39;]\n//远程Maven仓库密码\ndef PASSWORD = rootProject.ext.mavenRepo[&#39;password&#39;]\n// 唯一标识 每个组件都要指定\ndef GROUP = group.toString()\n// todo 默认为项目名称\ndef ARTIFACT_ID = project.name\n// 版本号 每个组件都要指定\ndef VERSION = version.toString()\n//远程Maven仓库的URL\ndef URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL\n\nprintln(&quot;dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION&quot;)\nprintln(&quot;MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL&quot;)\nprintln(&quot;MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL&quot;)\n\n\n//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven\n//https://developer.android.com/studio/build/maven-publish-plugin\n\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\n\n\ntask sourceJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier &quot;sources&quot;\n}\n\nafterEvaluate {\n    publishing {\n        publications {\n            maven(MavenPublication) {\n                groupId GROUP\n                artifactId ARTIFACT_ID\n                version VERSION\n                artifact bundleReleaseAar\n                artifact sourceJar\n\n                //根据输入数据生成 POM 后，自定义配置 POM。\n                pom.withXml {\n\n                    final dependenciesNode = asNode().appendNode(&#39;dependencies&#39;)\n\n                    //dependenciesNode:dependencies[attributes={}; value=[]]\n                    println &quot;dependenciesNode:&quot; + dependenciesNode\n                    ext.addDependency = { Dependency dep, String scope -&gt;\n                        //Dependency:DefaultExternalModuleDependency{group=&#39;com.qlife.android&#39;, name=&#39;lib-baidu-face&#39;, version=&#39;1.0.0&#39;, configuration=&#39;default&#39;}\n                        //scope:compile\n                        println &quot;Dependency:&quot; + dep\n                        println &quot;scope:&quot; + scope\n\n                        if (dep.group == null || dep.version == null || dep.name == null || dep.name == &quot;unspecified&quot;)\n                            return // invalid dependencies should be ignored\n\n                        final dependencyNode = dependenciesNode.appendNode(&#39;dependency&#39;)\n                        dependencyNode.appendNode(&#39;artifactId&#39;, dep.name)\n\n                        if (dep.version == &#39;unspecified&#39;) {\n                            dependencyNode.appendNode(&#39;groupId&#39;, project.ext.pomGroupID)\n                            dependencyNode.appendNode(&#39;version&#39;, project.ext.pomVersion)\n                            System.println(&quot;${project.ext.pomGroupID} ${dep.name} ${project.ext.pomVersion}&quot;)\n                        } else {\n                            dependencyNode.appendNode(&#39;groupId&#39;, dep.group)\n                            dependencyNode.appendNode(&#39;version&#39;, dep.version)\n                            System.println(&quot;${dep.group} ${dep.name} ${dep.version}&quot;)\n                        }\n\n                        dependencyNode.appendNode(&#39;scope&#39;, scope)\n                        //一些依赖可能有类型，比如aar，应该在POM文件中提到\n                        // Some dependencies may have types, such as aar, that should be mentioned in the POM file\n                        def artifactsList = dep.properties[&#39;artifacts&#39;]\n                        if (artifactsList != null &amp;&amp; artifactsList.size() &gt; 0) {\n                            final artifact = artifactsList[0]\n                            dependencyNode.appendNode(&#39;type&#39;, artifact.getType())\n                        }\n\n                        if (!dep.transitive) {\n                            //在非传递依赖的情况下，它的所有依赖都应该从 POM 文件中强制排除\n                            // In case of non transitive dependency, all its dependencies should be force excluded from them POM file\n                            final exclusionNode = dependencyNode.appendNode(&#39;exclusions&#39;).appendNode(&#39;exclusion&#39;)\n                            exclusionNode.appendNode(&#39;groupId&#39;, &#39;*&#39;)\n                            exclusionNode.appendNode(&#39;artifactId&#39;, &#39;*&#39;)\n                        } else if (!dep.properties.excludeRules.empty) {\n                            //对于带排除的传递，应将所有排除规则添加到 POM 文件中\n                            // For transitive with exclusions, all exclude rules should be added to the POM file\n                            final exclusions = dependencyNode.appendNode(&#39;exclusions&#39;)\n                            dep.properties.excludeRules.each { ExcludeRule rule -&gt;\n                                final exclusionNode = exclusions.appendNode(&#39;exclusion&#39;)\n                                exclusionNode.appendNode(&#39;groupId&#39;, rule.group ?: &#39;*&#39;)\n                                exclusionNode.appendNode(&#39;artifactId&#39;, rule.module ?: &#39;*&#39;)\n                            }\n                        }\n                    }\n\n                    // List all &quot;api&quot; dependencies (for new Gradle) as &quot;compile&quot; dependencies\n                    configurations.api.getDependencies().each { dep -&gt; addDependency(dep, &quot;compile&quot;) }\n                    // List all &quot;implementation&quot; dependencies (for new Gradle) as &quot;runtime&quot; dependencies\n                    configurations.implementation.getDependencies().each { dep -&gt; addDependency(dep, &quot;runtime&quot;) }\n\n                }\n            }\n        }\n        repositories {\n            maven {\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}\n\ntask cleanBuildPublishLocal(type: GradleBuild) {\n    tasks = [&#39;clean&#39;, &#39;build&#39;, &#39;publishToMavenLocal&#39;]\n}\n\ntask cleanBuildPublish(type: GradleBuild) {\n    tasks = [&#39;clean&#39;, &#39;build&#39;, &#39;publish&#39;]\n}\n\n\n</code></pre>\n<h3 id=\"1-8-Maven-pom-文件格式\"><a href=\"#1-8-Maven-pom-文件格式\" class=\"headerlink\" title=\"1.8 Maven pom 文件格式\"></a>1.8 Maven pom 文件格式</h3><p>POM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。</p>\n<p>执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。</p>\n<p>POM 中可以指定以下配置：</p>\n<ul>\n<li>项目依赖</li>\n<li>插件</li>\n<li>执行目标</li>\n<li>项目构建 profile</li>\n<li>项目版本</li>\n<li>项目开发者列表</li>\n<li>相关邮件列表信息</li>\n</ul>\n<p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">节点</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">project</td>\n<td align=\"left\">工程的根标签。</td>\n</tr>\n<tr>\n<td align=\"left\">modelVersion</td>\n<td align=\"left\">模型版本需要设置为 4.0.0。</td>\n</tr>\n<tr>\n<td align=\"left\">groupId</td>\n<td align=\"left\">公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group</td>\n</tr>\n<tr>\n<td align=\"left\">artifactId</td>\n<td align=\"left\">项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。</td>\n</tr>\n<tr>\n<td align=\"left\">version</td>\n<td align=\"left\">这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。</td>\n</tr>\n<tr>\n<td align=\"left\">packaging</td>\n<td align=\"left\">项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型</td>\n</tr>\n<tr>\n<td align=\"left\">dependencies</td>\n<td align=\"left\">该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。</td>\n</tr>\n<tr>\n<td align=\"left\">dependency</td>\n<td align=\"left\">依赖项</td>\n</tr>\n<tr>\n<td align=\"left\">scope</td>\n<td align=\"left\">依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 <br />- compile ：默认范围，用于编译<br /> - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath   <br />- runtime: 在执行时需要使用 <br />- test: 用于test任务时使用 <br />- system: 需要外在提供相应的元素。通过systemPath来取得                 <br />- systemPath: 仅用于范围为system。提供相应的路径 <br />- optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.runoob.com/maven/maven-pom.html\" target=\"_blank\" rel=\"noopener\">POM 标签大全详解</a></p>\n<p>一个简单的Android 依赖库的pom文件如下</p>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n  &lt;!-- This module was also published with a richer model, Gradle metadata,  --&gt;\n  &lt;!-- which should be used instead. Do not delete the following line which  --&gt;\n  &lt;!-- is to indicate to Gradle or any Gradle module metadata file consumer  --&gt;\n  &lt;!-- that they should prefer consuming it instead. --&gt;\n  &lt;!-- do_not_remove: published-with-gradle-metadata --&gt;\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n  &lt;groupId&gt;com.qlife.android&lt;/groupId&gt;\n  &lt;artifactId&gt;lib-net-release&lt;/artifactId&gt;\n  &lt;version&gt;1.0.1&lt;/version&gt;\n  &lt;packaging&gt;aar&lt;/packaging&gt;\n\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.squareup.retrofit2&lt;/groupId&gt;\n      &lt;artifactId&gt;retrofit&lt;/artifactId&gt;\n      &lt;version&gt;2.6.0&lt;/version&gt;\n      &lt;scope&gt;compile&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n      &lt;artifactId&gt;logging-interceptor&lt;/artifactId&gt;\n      &lt;version&gt;4.2.2&lt;/version&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;com.github.jaydroid1024.JDispatcher&lt;/groupId&gt;\n      &lt;artifactId&gt;jdispatcher-api&lt;/artifactId&gt;\n      &lt;version&gt;0.0.7&lt;/version&gt;\n      &lt;scope&gt;runtime&lt;/scope&gt;\n    &lt;/dependency&gt;\n    。。。\n  &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre>\n<h2 id=\"2-阿里云-云效-Maven-仓库\"><a href=\"#2-阿里云-云效-Maven-仓库\" class=\"headerlink\" title=\"2.阿里云-云效 Maven 仓库\"></a>2.阿里云-云效 Maven 仓库</h2><p>如果想自己搭建 NXRM(Nexus Repository Manager)私服，可参考 <a href=\"https://help.sonatype.com/repomanager3\" target=\"_blank\" rel=\"noopener\">Nexus 官网</a> <a href=\"https://help.sonatype.com/repomanager3/download\" target=\"_blank\" rel=\"noopener\">下载NXRM</a></p>\n<p>阿里云Maven中央仓库为 <a href=\"https://devops.aliyun.com/?channel=maven.aliyun\" target=\"_blank\" rel=\"noopener\">阿里云云效</a> 提供的公共代理仓库，帮助研发人员提高研发生产效率，使用阿里云Maven中央仓库作为下载源，速度更快更稳定。</p>\n<p><a href=\"https://devops.aliyun.com/?channel=maven.aliyun\" target=\"_blank\" rel=\"noopener\">阿里云云效</a> 是企业级一站式 DevOps 平台，覆盖产品从需求到运营的研发全生命周期，其中云效也提供了免费、可靠的Maven私有仓库 <a href=\"https://packages.aliyun.com/?channel=maven.aliyun\" target=\"_blank\" rel=\"noopener\">Packages</a></p>\n<h3 id=\"2-1-公共代理仓库\"><a href=\"#2-1-公共代理仓库\" class=\"headerlink\" title=\"2.1 公共代理仓库\"></a>2.1 公共代理仓库</h3><table>\n<thead>\n<tr>\n<th align=\"left\">仓库名称</th>\n<th align=\"left\">阿里云仓库地址</th>\n<th align=\"left\">阿里云仓库地址(老版)</th>\n<th align=\"left\">源地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">central</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/central\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/central</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/central\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/central</a></td>\n<td align=\"left\"><a href=\"https://repo1.maven.org/maven2/\" target=\"_blank\" rel=\"noopener\">https://repo1.maven.org/maven2/</a></td>\n</tr>\n<tr>\n<td align=\"left\">jcenter</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/jcenter\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/jcenter</a></td>\n<td align=\"left\"><a href=\"http://jcenter.bintray.com/\" target=\"_blank\" rel=\"noopener\">http://jcenter.bintray.com/</a></td>\n</tr>\n<tr>\n<td align=\"left\">public</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/groups/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/groups/public</a></td>\n<td align=\"left\">central仓和jcenter仓的聚合仓</td>\n</tr>\n<tr>\n<td align=\"left\">google</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/google\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/google</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/google\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/google</a></td>\n<td align=\"left\"><a href=\"https://maven.google.com/\" target=\"_blank\" rel=\"noopener\">https://maven.google.com/</a></td>\n</tr>\n<tr>\n<td align=\"left\">gradle-plugin</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/gradle-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/gradle-plugin</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/gradle-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/gradle-plugin</a></td>\n<td align=\"left\"><a href=\"https://plugins.gradle.org/m2/\" target=\"_blank\" rel=\"noopener\">https://plugins.gradle.org/m2/</a></td>\n</tr>\n<tr>\n<td align=\"left\">spring</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/spring\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/spring</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/spring\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/spring</a></td>\n<td align=\"left\"><a href=\"http://repo.spring.io/libs-milestone/\" target=\"_blank\" rel=\"noopener\">http://repo.spring.io/libs-milestone/</a></td>\n</tr>\n<tr>\n<td align=\"left\">spring-plugin</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/spring-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/spring-plugin</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/spring-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/spring-plugin</a></td>\n<td align=\"left\"><a href=\"http://repo.spring.io/plugins-release/\" target=\"_blank\" rel=\"noopener\">http://repo.spring.io/plugins-release/</a></td>\n</tr>\n<tr>\n<td align=\"left\">grails-core</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/grails-core\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/grails-core</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/grails-core\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/grails-core</a></td>\n<td align=\"left\"><a href=\"https://repo.grails.org/grails/core\" target=\"_blank\" rel=\"noopener\">https://repo.grails.org/grails/core</a></td>\n</tr>\n<tr>\n<td align=\"left\">apache snapshots</td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/repository/apache-snapshots\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/apache-snapshots</a></td>\n<td align=\"left\"><a href=\"https://maven.aliyun.com/nexus/content/repositories/apache-snapshots\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/nexus/content/repositories/apache-snapshots</a></td>\n<td align=\"left\"><a href=\"https://repository.apache.org/snapshots/\" target=\"_blank\" rel=\"noopener\">https://repository.apache.org/snapshots/</a></td>\n</tr>\n</tbody></table>\n<h3 id=\"2-2-Android-相关代理仓库\"><a href=\"#2-2-Android-相关代理仓库\" class=\"headerlink\" title=\"2.2 Android 相关代理仓库\"></a>2.2 Android 相关代理仓库</h3><table>\n<thead>\n<tr>\n<th>仓库名称</th>\n<th>阿里云仓库地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>central</td>\n<td><a href=\"https://maven.aliyun.com/repository/central\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/central</a></td>\n</tr>\n<tr>\n<td>jcenter</td>\n<td><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n</tr>\n<tr>\n<td>public</td>\n<td><a href=\"https://maven.aliyun.com/repository/public\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/public</a></td>\n</tr>\n<tr>\n<td>google</td>\n<td><a href=\"https://maven.aliyun.com/repository/google\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/google</a></td>\n</tr>\n<tr>\n<td>gradle-plugin</td>\n<td><a href=\"https://maven.aliyun.com/repository/gradle-plugin\" target=\"_blank\" rel=\"noopener\">https://maven.aliyun.com/repository/gradle-plugin</a></td>\n</tr>\n</tbody></table>\n<p><strong>拿来就用</strong></p>\n<pre><code class=\"groovy\">buildscript {\n    repositories {\n      //central\n      maven { url &#39;https://maven.aliyun.com/repository/central&#39; }\n      //jcenter&amp;public\n      maven { url &#39;https://maven.aliyun.com/repository/public&#39; }\n      //google\n      maven { url &#39;https://maven.aliyun.com/repository/google&#39; }\n      //gradle-plugin\n      maven { url &#39;https://maven.aliyun.com/repository/gradle-plugin&#39; }\n      mavenCentral()\n      maven { url &quot;https://jitpack.io&quot; }\n      google()\n      jcenter()\n    }\n}</code></pre>\n<h3 id=\"2-3-制品私有仓库\"><a href=\"#2-3-制品私有仓库\" class=\"headerlink\" title=\"2.3 制品私有仓库\"></a>2.3 制品私有仓库</h3><ul>\n<li><p>云效 Packages 为您自动创建了两个 Maven 仓库，一个 release 库和一个 snapshot 库。</p>\n<ul>\n<li><p>Maven Release 库用于存储功能趋于稳定、当前更新停止，可以用于发行的版本。</p>\n</li>\n<li><p>Maven Snapchat 库用于存储不稳定、尚处于开发中的版本，即快照版本。</p>\n</li>\n<li><p>您的制品文件具体推送到哪个库，根据您项目目录的build.gradle文件中version字段中是否配置了-SNAPSHOT。</p>\n</li>\n</ul>\n</li>\n<li><p>进入仓库后，可以通过仓库指南完成 仓库凭证设置、制品文件的上传和下载、私有库迁移。</p>\n</li>\n<li><p>包列表下展示仓库下所有二进制包文件，支持通过 Group Id 和 Artifacts Id 进行包文件搜索。</p>\n</li>\n<li><p>点击包文件展示包文件信息，默认展示最新版本信息，点击可切换版本。</p>\n</li>\n<li><p>默认企业拥有者为仓库拥有者，其他企业成员需要在仓库中设置成员和角色。仓库公开性、成员角色之间的关系如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>仓库角色</td>\n<td>仓库公开性：私有仓库</td>\n<td>仓库公开性：企业内可见</td>\n</tr>\n<tr>\n<td>拥有者</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n</tr>\n<tr>\n<td>管理员</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n<td>访问、下载、上传、删除、仓库管理</td>\n</tr>\n<tr>\n<td>开发成员</td>\n<td>访问、下载、上传</td>\n<td>访问、下载、上传</td>\n</tr>\n<tr>\n<td>普通成员</td>\n<td>访问、下载</td>\n<td>访问、下载</td>\n</tr>\n<tr>\n<td>非仓库成员</td>\n<td>无</td>\n<td>访问、下载</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-4-Gradle-推送\"><a href=\"#2-4-Gradle-推送\" class=\"headerlink\" title=\"2.4 Gradle 推送\"></a>2.4 Gradle 推送</h3><ol>\n<li>设置仓库凭证</li>\n</ol>\n<pre><code class=\"groovy\">apply plugin: &#39;maven-publish&#39;\n\nprintln(&quot;--------${project.name}：Maven Publish Gradle--------&quot;)\n//release 和 snapshot 的控制开关\ndef isUploadToRelease = rootProject.ext.mavenRepo[&#39;isUploadToRelease&#39;]\n//远程Maven仓库的URL Release\ndef MAVEN_REPO_RELEASE_URL = rootProject.ext.mavenRepo[&#39;mavenRepoUrlRelease&#39;]\n//远程Maven仓库的URL snapshots\ndef MAVEN_REPO_SNAPSHOTS_URL = rootProject.ext.mavenRepo[&#39;mavenRepoUrlSnapshots&#39;]\n//远程Maven仓库用户名\ndef USER_NAME = rootProject.ext.mavenRepo[&#39;userName&#39;]\n//远程Maven仓库密码\ndef PASSWORD = rootProject.ext.mavenRepo[&#39;password&#39;]\n// 唯一标识 每个组件都要指定\ndef GROUP = group.toString()\n// todo 默认为项目名称\ndef ARTIFACT_ID = project.name\n// 版本号 每个组件都要指定\ndef VERSION = version.toString()\n//远程Maven仓库的URL\ndef URL = isUploadToRelease ? MAVEN_REPO_RELEASE_URL : MAVEN_REPO_SNAPSHOTS_URL\n\nprintln(&quot;dependencies_path: $GROUP:$ARTIFACT_ID:$VERSION&quot;)\nprintln(&quot;MAVEN_REPO_RELEASE_URL: $MAVEN_REPO_RELEASE_URL&quot;)\nprintln(&quot;MAVEN_REPO_SNAPSHOTS_URL: $MAVEN_REPO_SNAPSHOTS_URL&quot;)\n\n\n//https://docs.gradle.org/7.0/userguide/publishing_maven.html#publishing_maven\n//https://developer.android.com/studio/build/maven-publish-plugin\n// Because the components are created only during the afterEvaluate phase, you must\n// configure your publications using the afterEvaluate() lifecycle method.\nafterEvaluate {\n    publishing {\n        publications {\n            // Creates a Maven publication called &quot;release&quot;.\n            release(MavenPublication) {\n                // Applies the component for the release build variant.\n                from components.release\n                // You can then customize attributes of the publication as shown below.\n                groupId = GROUP\n                artifactId = ARTIFACT_ID\n                version = VERSION\n\n            }\n            // Creates a Maven publication called “debug”.\n            debug(MavenPublication) {\n                // Applies the component for the debug build variant.\n                from components.debug\n                groupId = GROUP\n                artifactId = ARTIFACT_ID + &quot;-debug&quot;\n                version = VERSION\n            }\n        }\n        repositories {\n            maven {\n                url = URL\n                credentials {\n                    username USER_NAME\n                    password PASSWORD\n                }\n            }\n        }\n    }\n}</code></pre>\n<ol start=\"2\">\n<li>设置仓库下载配置</li>\n</ol>\n<pre><code class=\"groovy\">allprojects {\n    repositories {\n        //central\n        maven { url &#39;https://maven.aliyun.com/repository/central&#39; }\n        //jcenter&amp;public\n        maven { url &#39;https://maven.aliyun.com/repository/public&#39; }\n        //google\n        maven { url &#39;https://maven.aliyun.com/repository/google&#39; }\n        //gradle-plugin\n        maven { url &#39;https://maven.aliyun.com/repository/gradle-plugin&#39; }\n        mavenCentral()\n        maven { url &quot;https://jitpack.io&quot; }\n        google()\n        jcenter()\n\n        /**Maven 私服配置*/\n        // 仓库类型 local dev production\n        def currentMavenRepositoryType = rootProject.ext.mavenRepo[&#39;currentMavenRepositoryType&#39;]\n        def localMavenRepositoryType = rootProject.ext.mavenRepositoryType[&#39;local&#39;]\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo[&#39;userName&#39;]\n                    password rootProject.ext.mavenRepo[&#39;password&#39;]\n                }\n            }\n            url rootProject.ext.mavenRepo[&#39;mavenRepoUrlRelease&#39;]\n        }\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo[&#39;userName&#39;]\n                    password rootProject.ext.mavenRepo[&#39;password&#39;]\n                }\n            }\n            url rootProject.ext.mavenRepo[&#39;mavenRepoUrlSnapshots&#39;]\n        }\n\n    }\n}</code></pre>\n<h3 id=\"2-5-Gradle-拉取\"><a href=\"#2-5-Gradle-拉取\" class=\"headerlink\" title=\"2.5 Gradle 拉取\"></a>2.5 Gradle 拉取</h3><ol>\n<li>设置仓库凭证</li>\n</ol>\n<pre><code class=\"groovy\">allprojects {\n    repositories {\n        //central\n        maven { url &#39;https://maven.aliyun.com/repository/central&#39; }\n        //jcenter&amp;public\n        maven { url &#39;https://maven.aliyun.com/repository/public&#39; }\n        //google\n        maven { url &#39;https://maven.aliyun.com/repository/google&#39; }\n        //gradle-plugin\n        maven { url &#39;https://maven.aliyun.com/repository/gradle-plugin&#39; }\n        mavenCentral()\n        maven { url &quot;https://jitpack.io&quot; }\n        google()\n        jcenter()\n\n        /**Maven 私服配置*/\n        // 仓库类型 local dev production\n        def currentMavenRepositoryType = rootProject.ext.mavenRepo[&#39;currentMavenRepositoryType&#39;]\n        def localMavenRepositoryType = rootProject.ext.mavenRepositoryType[&#39;local&#39;]\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo[&#39;userName&#39;]\n                    password rootProject.ext.mavenRepo[&#39;password&#39;]\n                }\n            }\n            url rootProject.ext.mavenRepo[&#39;mavenRepoUrlRelease&#39;]\n        }\n        maven {\n            //区分本地仓库和远程仓库\n            if (currentMavenRepositoryType != localMavenRepositoryType) {\n                credentials {\n                    username rootProject.ext.mavenRepo[&#39;userName&#39;]\n                    password rootProject.ext.mavenRepo[&#39;password&#39;]\n                }\n            }\n            url rootProject.ext.mavenRepo[&#39;mavenRepoUrlSnapshots&#39;]\n        }\n\n    }\n}</code></pre>\n<ol start=\"2\">\n<li>配置包信息</li>\n</ol>\n<pre><code class=\"groovy\">dependencies {\n    def currentMavenRepositoryType = rootProject.ext.mavenRepo[&#39;dependenceTypeIsModule&#39;]\n    if (currentMavenRepositoryType) {\n        implementation project(path: &#39;:lib-net&#39;)\n    } else {\n        implementation rootProject.ext.libNet\n    }\n}</code></pre>\n<h2 id=\"3-Grade依赖管理\"><a href=\"#3-Grade依赖管理\" class=\"headerlink\" title=\"3.Grade依赖管理\"></a>3.Grade依赖管理</h2><h3 id=\"3-1-依赖项类型\"><a href=\"#3-1-依赖项类型\" class=\"headerlink\" title=\"3.1 依赖项类型\"></a>3.1 依赖项类型</h3><pre><code class=\"groovy\">dependencies {\n\n    // 对本地库模块的依赖\n    implementation project(&quot;:mylibrary&quot;)\n\n    // 对本地二进制文件的依赖\n    implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])\n      implementation files(&#39;libs/foo.jar&#39;)\n    implementation project(path: &#39;:foo-aar-module&#39;)\n\n    // 对远程二进制文件的依赖\n    implementation &#39;com.example.android:app-magic:12.3&#39;\n\n}</code></pre>\n<p><strong>本地库模块依赖</strong></p>\n<p>这里依赖了一个名为“mylibrary”（此名称必须与在您的 settings.gradle 文件中使用 <code>include:</code> 定义的库名称相符）的Android 库模块。在构建您的应用时，构建系统会编译该库模块，并将生成的编译内容打包到 APK 中。</p>\n<p><strong>本地二进制文件依赖</strong></p>\n<p>Gradle 声明了对项目的 <code>module_name/libs/</code> 目录中 JAR 文件的依赖关系（因为 Gradle 会读取 <code>build.gradle</code> 文件的相对路径）。</p>\n<p>也可指定各个jar/aar文件或者通过创建一个aar/jar 模块建立像对本地库模块一样的依赖</p>\n<p><strong>远程二进制文件依赖</strong></p>\n<pre><code>implementation &#39;com.example.android:app-magic:12.3&#39;</code></pre><p>这实际上是以下代码的简写形式：</p>\n<pre><code>implementation group: &#39;com.example.android&#39;, name: &#39;app-magic&#39;, version: &#39;12.3&#39;</code></pre><p>这声明了对“com.example.android”命名空间组内的 12.3 版“app-magic”库的依赖关系。</p>\n<p>此类远程依赖项要求您声明适当的远程代码库，Gradle 应在其中查找相应的库。如果本地不存在相应的库，Gradle 会从远程站点提取它。</p>\n<h3 id=\"3-2-依赖项依赖方式配置\"><a href=\"#3-2-依赖项依赖方式配置\" class=\"headerlink\" title=\"3.2 依赖项依赖方式配置\"></a>3.2 依赖项依赖方式配置</h3><p>在 <code>dependencies</code> 代码块内，您可以从多种不同的依赖项配置中选择其一,每种依赖项配置都向 Gradle 提供了有关如何使用该依赖项的不同说明。下表介绍了Android 项目中的依赖项使用的各种配置。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">新配置</th>\n<th align=\"center\">已弃用配置</th>\n<th align=\"left\">行为描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\"><code>implementation</code></td>\n<td align=\"center\"><code>compile</code></td>\n<td align=\"left\">Gradle 会将依赖项添加到编译类路径，并将依赖项打包到构建输出。 当模块配置 <code>implementation</code> 依赖项时，Gradle在编译时<strong>不会将该依赖项传递给其他模块</strong>。也就是说，其他模块只有在运行时才能使用该依赖项。 使用此依赖项配置代替 <code>api</code> 或 <code>compile</code>（已弃用）可以<strong>显著缩短构建时间</strong>，因为这样可以减少构建系统需要重新编译的模块数。例如，如果 <code>implementation</code> 依赖项更改了其 API，Gradle 只会重新编译该依赖项以及直接依赖于它的模块。大多数应用和测试模块都应使用此配置。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>api</code></td>\n<td align=\"center\"><code>compile</code></td>\n<td align=\"left\">Gradle 会将依赖项添加到编译类路径和构建输出。当一个模块包含 <code>api</code> 依赖项时，会让 Gradle <strong>以传递方式将该依赖项导出到其他模块</strong>，以便这些模块在运行时和编译时都可以使用该依赖项。 此配置的行为类似于 <code>compile</code>（现已弃用），但使用它时应格外小心，只能对需要以传递方式导出到其它上游消费者的依赖项时才使用它。这是因为，如果 <code>api</code> 依赖项更改了其外部 API，Gradle 会在编译时重新编译所有有权访问该依赖项的模块。因此，拥有大量的 <code>api</code> 依赖项会显<strong>著增加构建时间</strong>。除非要将依赖项的 API 公开给单独的模块，否则库模块应改用 <code>implementation</code> 依赖项。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>compileOnly</code></td>\n<td align=\"center\"><code>provided</code></td>\n<td align=\"left\">Gradle 只会将依赖项添加到编译类路径也就是说，<strong>不会将其添加到构建输出</strong>。如果您创建 Android 模块时在编译期间需要相应依赖项，但它在运行时可有可无，此配置会很有用。如果您使用此配置，那么您的库模块必须包含一个运行时条件，用于检查是否提供了相应依赖项，然后适当地改变该模块的行为，以使该模块在未提供相应依赖项的情况下仍可正常运行。这样做<strong>不会添加不重要的瞬时依赖项</strong>，因而<strong>有助于减小最终 APK 的大小</strong>。此配置的行为类似于 <code>provided</code>（现已弃用）。<strong>注意</strong>：您不能将 <code>compileOnly</code> 配置与 AAR 依赖项配合使用。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>runtimeOnly</code></td>\n<td align=\"center\"><code>apk</code></td>\n<td align=\"left\">Gradle 只会将依赖项添加到构建输出，以便在运行时使用。也就是说，不会将其添加到编译类路径。此配置的行为类似于 <code>apk</code>（现已弃用）。</td>\n</tr>\n<tr>\n<td align=\"center\"><code>annotationProcessor</code></td>\n<td align=\"center\"><code>compile</code></td>\n<td align=\"left\">如需添加对作为注释处理器的库的依赖关系，您必须使用 <code>annotationProcessor</code> 配置将其添加到注释处理器类路径。这是因为，使用此配置可以<strong>将编译类路径与注释处理器类路径分开，从而提高构建性能</strong>。如果 Gradle 在编译类路径上找到注释处理器，则会禁用<a href=\"https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance\" target=\"_blank\" rel=\"noopener\">避免编译</a>功能，这样会对构建时间产生负面影响（Gradle 5.0 及更高版本会忽略在编译类路径上找到的注释处理器）。如果 JAR 文件包含以下文件，则 Android Gradle 插件会假定依赖项是注释处理器： <code>META-INF/services/javax.annotation.processing.Processor</code>。如果插件检测到编译类路径上包含注释处理器，则会生成构建错误。</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-3-依赖项顺序\"><a href=\"#3-3-依赖项顺序\" class=\"headerlink\" title=\"3.3 依赖项顺序\"></a>3.3 依赖项顺序</h3><p>依赖项的列出顺序指明了每个库的优先级：第一个库的优先级高于第二个，第二个库的优先级高于第三个，依此类推。在<a href=\"https://developer.android.com/studio/write/add-resources#resource_merging\" target=\"_blank\" rel=\"noopener\">合并资源</a>或<a href=\"https://developer.android.com/studio/build/manifest-merge\" target=\"_blank\" rel=\"noopener\">将清单元素从库中合并</a>到应用中时，此顺序很重要。</p>\n<p>例如，如果您的项目声明以下内容：</p>\n<ul>\n<li>依赖 <code>LIB_A</code> 和 <code>LIB_B</code>（按此顺序）</li>\n<li><code>LIB_A</code> 依赖于 <code>LIB_C</code> 和 <code>LIB_D</code>（按此顺序）</li>\n<li><code>LIB_B</code> 也依赖于 <code>LIB_C</code></li>\n</ul>\n<pre><code class=\"groovy\">//app\ndependencies {\n    implementation(&#39;LIB_A&#39;)\n    implementation(&#39;LIB_B&#39;)\n}\n//LIB_A\ndependencies {\n    implementation(&#39;LIB_C&#39;)\n    implementation(&#39;LIB_D&#39;)\n}\n//LIB_B\ndependencies {\n    implementation(&#39;LIB_C&#39;)\n}</code></pre>\n<p>![image-20210826160438305](/Users/xuejiewang/Library/Application Support/typora-user-images/image-20210826160438305.png)</p>\n<p>那么，扁平型依赖项顺序将如下所示：</p>\n<ol>\n<li><code>LIB_A</code></li>\n<li><code>LIB_D</code></li>\n<li><code>LIB_B</code></li>\n<li><code>LIB_C</code></li>\n</ol>\n<p>这可以确保 <code>LIB_A</code> 和 <code>LIB_B</code> 都可以替换 <code>LIB_C</code>；并且 <code>LIB_D</code> 的优先级仍高于 <code>LIB_B</code>，因为 <code>LIB_A</code>（依赖前者）的优先级高于 <code>LIB_B</code>。</p>\n<h3 id=\"3-4-依赖冲突问题\"><a href=\"#3-4-依赖冲突问题\" class=\"headerlink\" title=\"3.4 依赖冲突问题\"></a>3.4 依赖冲突问题</h3><p><strong>解决类路径之间的冲突</strong></p>\n<p>当 Gradle 解析编译类路径时，会先解析运行时类路径，然后使用所得结果确定应添加到编译类路径的依赖项版本。换句话说，运行时类路径决定了下游类路径上完全相同的依赖项所需的版本号。</p>\n<p>应用的运行时类路径还决定了 Gradle 需要对应用的测试 APK 的运行时类路径中的匹配依赖项使用的版本号。图 1 说明了类路径的层次结构。</p>\n<p><img src=\"https://developer.android.com/studio/images/build/classpath_sync-2x.png\" alt=\"img\"></p>\n<p>例如，当应用使用 <code>implementation</code> <a href=\"https://developer.android.com/studio/build/dependencies#dependency_configurations\" target=\"_blank\" rel=\"noopener\">依赖项配置</a>加入某个依赖项的一个版本，而库模块使用 <code>runtimeOnly</code> 配置加入该依赖项的另一个版本时，就可能会发生多个类路径中出现同一依赖项的不同版本的冲突。</p>\n<p>在解析对运行时和编译时类路径的依赖关系时，Android Gradle 插件 3.3.0 及更高版本会尝试自动解决某些下游版本冲突。例如，如果运行时类路径包含库 A 版本 2.0，而编译类路径包含库 A 版本 1.0，则插件会自动将对编译类路径的依赖关系更新为库 A 版本 2.0，以避免错误。</p>\n<p>不过，如果运行时类路径包含库 A 版本 1.0，而编译类路径包含库 A 版本 2.0，插件不会将对编译类路径的依赖关系降级为库 A 版本 1.0，您仍会收到一条与以下内容类似的错误：</p>\n<pre><code>Conflict with dependency &#39;com.example.library:some-lib:2.0&#39; in project &#39;my-library&#39;.\nResolved versions for runtime classpath (1.0) and compile classpath (2.0) differ.</code></pre><p>如需解决此问题，请执行以下某项操作：</p>\n<ul>\n<li>将所需版本的依赖项作为 <code>api</code> 依赖项添加到库模块。也就是说，只有库模块声明相应依赖项，但应用模块也能以传递方式访问其 API。 - 或者，您也可以同时在两个模块中声明相应依赖项，但应确保每个模块使用的版本相同。不妨考虑<a href=\"https://developer.android.com/studio/build/gradle-tips#configure-project-wide-properties\" target=\"_blank\" rel=\"noopener\">配置项目全局属性</a>，以确保每个依赖项的版本在整个项目中保持一致。</li>\n</ul>\n<p><strong>排除传递依赖项</strong></p>\n<p>随着应用的范围不断扩大，它可能会包含许多依赖项，包括直接依赖项和传递依赖项（应用中导入的库所依赖的库）。如需排除不再需要的传递依赖项，您可以使用 <code>exclude</code> 关键字，如下所示：</p>\n<pre><code>dependencies {\n    implementation(&#39;some-library&#39;) {\n        exclude group: &#39;com.example.imgtools&#39;, module: &#39;native&#39;\n    }\n}</code></pre><p>如果在configuration中定义一个exclude,那么所有依赖的transitive dependency (指定的)都会被去除。定义exclude时候，或只指定group, 或只指定module名字，或二者都指定。</p>\n<p>下面是一些使用exclude的典型场合：</p>\n<ul>\n<li>有licensing问题</li>\n<li>从远程仓库上无法获取到依赖</li>\n<li>runtime时候用不到</li>\n<li>有版本冲突</li>\n</ul>\n<p><strong>强制使用当前版本</strong></p>\n<pre><code>implementation(&#39;com.squareup.okhttp:okhttp-mt:2.5.0&#39;) {\n    force = true\n}</code></pre><p>如上，我们在依赖okhttp的时候很可能发生冲突，就比如依赖的依赖中也包含了okhttp，这种场合下，就会产生版本冲突的问题，加上force = true表明的意思就是即使在有依赖库版本冲突的情况下坚持使用被标注的这个依赖库版本。</p>\n<p><strong>间接依赖 transitive</strong></p>\n<p>transitive dependencies 被称为依赖的依赖，称为“间接依赖”比较合适。</p>\n<pre><code>implementation(&#39;com.meituan.android.terminus:library:6.6.1.16@aar&#39;) {\n    transitive = true\n}</code></pre><p>在后面加上@aar，意指你只是下载该aar包，而并不下载该aar包所依赖的其他库，那如果想在使用@aar的前提下还能下载其依赖库，则需要添加transitive=true的条件。</p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"4.参考资料\"></a>4.参考资料</h2><ul>\n<li><a href=\"https://developer.aliyun.com/mvn/guide\" target=\"_blank\" rel=\"noopener\">阿里云 | 云效 Maven</a> </li>\n<li><a href=\"https://thoughts.aliyun.com/sharespace/5e8c436d546fd9001aee824a/docs/5e8c436d546fd9001aee8244?spm=a2c4g.11186623.2.2.5db21b3frHmIbF\" target=\"_blank\" rel=\"noopener\">阿里云 | 云效制品仓库 Package 官方文档</a></li>\n<li><a href=\"https://packages.aliyun.com/maven\" target=\"_blank\" rel=\"noopener\">阿里云 | 云效制品仓库 Package 地址</a></li>\n<li><a href=\"https://developer.android.com/studio/build/maven-publish-plugin\" target=\"_blank\" rel=\"noopener\">Android 开发者 | Android Maven Publish docs</a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/publishing_maven.html\" target=\"_blank\" rel=\"noopener\">Gradle 用户指南 | Gradle Maven Publish official page</a></li>\n<li><a href=\"http://maven.apache.org/what-is-maven.html\" target=\"_blank\" rel=\"noopener\">What is Maven</a> </li>\n<li><a href=\"https://www.runoob.com/maven/maven-pom.html\" target=\"_blank\" rel=\"noopener\">菜鸟教程 | Maven 教程</a></li>\n<li><a href=\"https://stackoverflow.com/questions/26874498/publish-an-android-library-to-maven-with-aar-and-source-jar\" target=\"_blank\" rel=\"noopener\">Publish an Android library to Maven with aar and source jar</a></li>\n<li><a href=\"https://developer.android.com/studio/build/dependencies\" target=\"_blank\" rel=\"noopener\"> Android 开发者 | 添加构建依赖项 </a></li>\n<li><a href=\"https://docs.gradle.org/current/userguide/dependency_management.html#dependency_management_in_gradle\" target=\"_blank\" rel=\"noopener\">Gradle 用户指南 | Gradle中的依赖管理</a></li>\n</ul>\n"},{"title":"Jetpack | ViewBinding 详解","date":"2021-05-31T06:16:55.000Z","cover":true,"summary":"1. VB 集成与一般使用方式，2. 通过 KT 属性代理简化 VB 创建流程并封装VBHelper，3. LayoutInflater 原理，4.ViewBinding绑定和生成原理","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Jetpack | ViewBinding 详解\n\n通过 **ViewBinding(视图绑定)** 功能，我们可以更轻松地编写与布局文件交互的代码。在模块中启用视图绑定之后，AGP 会为该模块中的每个 XML 布局文件生成一个绑定类。该绑定类的实例中会直接引用那些在布局中声明了资源 id 的控件。这样一来就减少了很多像 `findViewById` 这种操作，同时也为控件的安全性保驾护航。\n\n\n\n**文章核心点：**\n\n- VB 集成与一般使用方式，包括：Activity 、Fragment、Adapter、include、merge、ViewStub\n- KT 属性代理与泛型实化类型参数 `reified` 的介绍\n- 通过 KT 属性代理简化 VB 创建流程，并封装了一个库 VBHelper\n- LayoutInflater 原理与参数解析\n- XXXBinding 类的绑定过程\n- XXXBinding 类的生成过程\n\n\n\n**[VBHelper](https://github.com/jaydroid1024/VBHelper)**：是我写这篇文章提取的一个库，通过属性代理简化了VB的使用，有想了解的可以提提意见\n\n1. 在 Activity 中创建 ViewBinding 绑定类\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 方法\nprivate val binding: ActivityMainBinding by vb()\n//通过自定义属性代理 + 传递 inflate 方法引用\nprivate val binding: ActivityMainBinding by vb(ActivityMainBinding::inflate)\n```\n\n2. 在 Fragment 中创建 ViewBinding 绑定类\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 方法\nprivate val binding: FragmentMainBinding by vb()\n//通过自定义属性代理 + 传递 inflate 方法引用\nprivate val binding: FragmentMainBinding by vb(FragmentMainBinding::inflate)\n```\n\n3. 在 View 中创建 ViewBinding 绑定类\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法\nprivate val binding: MyViewBinding by vb()\n//通过自定义属性代理 + 传递 inflate 三参数方法引用\nprivate val binding: MyViewBinding by vb(MyViewBinding::inflate)\n```\n\n4. 在 Adapter 中创建包含了绑定类的 BindingViewHolder\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法\nval holder: BindingViewHolder<LayoutItemTextBinding> by vh(parent)\n//通过自定义属性代理 + 传递绑定类的 inflate 三参数方法引用\nval holder: BindingViewHolder<LayoutItemTextBinding> by vh(parent, LayoutItemTextBinding::inflate)\n```\n\n\n\n## 1.VB 概述\n\n- 视图绑定在 Android Studio 3.6 Canary 11 及更高版本中可用。\n\n- 开启自动生成绑定类：模块 `build.gradle` 文件中的 `android` 闭包下，两种方式\n  - `viewBinding {enabled = true} ` 默认值为false, Android Studio 3.6 Canary 11 及更高版本中可用。\n  -  ` buildFeatures {viewBinding = true}` 默认值为false,  Android Studio 4.0 及更高版本中可用\n\n- 忽略自动生成绑定类：请将 `tools:viewBindingIgnore=\"true\"` 属性添加到相应布局文件的根视图中\n\n- 生成绑定类的名称：将 XML 文件的名称转换为驼峰式大小写，并在末尾添加“Binding”一词。\n  LayoutInflater.Factory\n  - result_profile.xml ====>ResultProfileBinding\n  - 每个绑定类还包含一个 `getRoot()` 方法，用于为相应布局文件的根视图提供直接引用。\n\n- 与使用 findViewById 相比\n\n  - **Null 安全**：绑定类的创建是通过解析布局文件在编译时生成，布局文件添加了id的控件才会生成对应的引用，因此不会发生绑定类中存在而布局中没有对应控件的情况，如果布局引用了错误的类型也会在编译时暴露错误。\n  - **类型安全**：布局中声明的控件是确定类型的。这意味着不存在发生类转换异常的风险。\n\n- 与使用 DataBinding 对比\n\n  - 视图绑定和[数据绑定](https://developer.android.com/topic/libraries/data-binding?hl=zh-cn)均会生成可用于直接引用视图的绑定类。但是，视图绑定旨在处理更简单的用例。\n\n  - **更快的编译速度**：视图绑定不需要处理注解信息，因此编译时间更短。\n  - **易于使用**：视图绑定不需要在 XML 布局文件中标记，只要在模块中启用视图绑定后，它会自动应用于该模块的所有布局。\n\n  - 如果项目中使用了数据绑定最好在项目中**同时使用视图绑定和数据绑定**。这样可以在需要高级功能的布局中使用数据绑定，而在不需要高级功能的布局中使用视图绑定。如果只是取代 `findViewById()` 调用，请考虑改用视图绑定。\n\n\n\n## 2. VB 一般使用\n\n### 2.1 Activity \n\n```kotlin\nprivate lateinit var binding: ActivityMainBinding\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    binding = ActivityMainBinding.inflate(layoutInflater)\n    setContentView(binding.root)\n    setSupportActionBar(binding.toolbar)\n}\n```\n\n### 2.2 Fragment\n\n```kotlin\nprivate var _binding: FragmentFirstBinding? = null\n// This property is only valid between onCreateView and onDestroyView.\nprivate val binding get() = _binding!!\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\n    firstViewModel = ViewModelProvider(this).get(FirstViewModel::class.java)\n    _binding = FragmentFirstBinding.inflate(inflater, container, false)\n    binding.rvList.layoutManager = LinearLayoutManager(requireContext())\n    return binding.root\n}\n```\n\n### 2.3 Adapter\n\n```kotlin\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TextHolder {\n    val itemBinding = LayoutItemTextBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n    //绑定类交给Holder\n    return TextHolder(itemBinding)\n}\n\noverride fun onBindViewHolder(holder: TextHolder, position: Int) {\n    val item: String = list[position]\n    //数据交给Holder\n    holder.bind(item)\n}\n\nclass TextHolder(val itemBinding: LayoutItemTextBinding) : RecyclerView.ViewHolder(itemBinding.root) {\n    fun bind(name: String) {\n        itemBinding.tvName.text = name\n    }\n}\n```\n\n### 2.4 include\n\n```kotlin\nbinding.includeLayout.tvInfoInclude.text = \"tvInfoInclude:$item\"\n// todo  include 方式有时候无法识别到真实的绑定类类型只能识别它是个View类型但是编译不会报错, 这种情况清理缓存可能会好 ，或者也可以强制类型转换或者自己bind\nval tvInfoInclude: LayoutInfoBinding = binding.includeLayout as LayoutInfoBinding\nval tvInfoInclude = LayoutInfoBinding.bind(binding.root)\ntvInfoInclude.tvInfoInclude.text = \"tvInfoInclude:$item\"\n```\n\n### 2.5 merge\n\n```kotlin\n//include+merge 只能手动调用绑定类的bind方法\nval layoutInfoMergeBinding = LayoutInfoMergeBinding.bind(binding.root)\nval tvInfoMerge = layoutInfoMergeBinding.tvInfoMerge\ntvInfoMerge.text = \"tvInfoMerge:$item\"\n```\n\n### 2.6 ViewStub\n\n```kotlin\n//ViewStub 只能手动调用绑定类的bind方法\nbinding.layoutViewStub.setOnInflateListener { _, inflateId ->\n    val layoutInfoViewStubBinding = LayoutInfoViewStubBinding.bind(inflateId)\n    val tvInfoViewStub = layoutInfoViewStubBinding.tvInfoViewStub\n    tvInfoViewStub.text = \"tvInfoViewStub:$item\"\n}\nbinding.layoutViewStub.inflate()\n```\n\n详细的测试代码参考：[**Github | VBHelper**](https://github.com/jaydroid1024/VBHelper)\n\n## 3. VB 与 Kotlin by\n\n采用 Kotlin 属性代理简化 VB 使用的三方库\n\n- **[ViewBindingPropertyDelegate](https://github.com/androidbroadcast/ViewBindingPropertyDelegate)**\n- **[ViewBindingKTX](https://github.com/DylanCaiCoding/ViewBindingKTX)**\n- **[VBHelper](https://github.com/jaydroid1024/VBHelper)**：这个是我写这篇文章提取的一个库，借鉴了上面两个的实现，精简了一些代码\n\n### 3.1 KT 属性代理：`by` `lazy`\n\n- by关键字实际上就是一个属性代理运算符重载的符号，任何一个具备属性代理规则的类，都可以使用by关键字对属性进行代理。\n\n- `by`关键字后面带有一个代理对象，这个代理类不一定要实现特定的接口，但是需要包含下面这两个方法的签名（val 只需要 getValue ），它就能作为一个代理属性来使用。\n\n- ```kotlin\n  //这个是扩展的实现方式，lazy就是采用的这种\n  operator fun MyDelegate.getValue(thisRef: Any?, property: KProperty<*>): String = this.value\n  \n  class MyDelegate {\n      var value: String = \"YYY\"\n      //todo 代理类里面必须提供 getValue 方法，或者扩展这个方法也可\n      operator fun getValue(thisRef: Any, property: KProperty<*>): String {\n          return value\n      }\n      operator fun setValue(thisRef: Any, property: KProperty<*>, s: String) {\n          value = s\n      }\n  }\n  ```\n  \n- lazy  是Kotlin 内部对对属性代理的一个最佳实践，lazy 返回一个实现了 Lazy 接口的代理类，默认是 `SynchronizedLazyImpl`，\n\n- Lazy<T> 有个扩展方法，符合属性代理的规则\n\n- ```kotlin\n  public inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n  ```\n\n\n\n### 3.2 KT 内联函数 `inline` 与泛型实化类型参数 `reified` \n\n[官方文档](https://www.kotlincn.net/docs/reference/inline-functions.html#%E5%85%B7%E4%BD%93%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0)\n\n[reified-type-parameters](https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md)\n\nKotlin和Java同样存在泛型类型擦除的问题，但是 Kotlin 通过 inline 内联函数使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为实化，对应需要使用 reified 关键字。\n\n- 满足实化类型参数函数的必要条件\n\n  - 必须是 inline 内联函数，使用 inline 关键字修饰\n  - 泛型类定义泛型形参时必须使用 reified 关键字修饰\n\n- 带实化类型参数的函数基本定义\n\n  ```kotlin\n  //类型形参T是泛型函数isInstanceOf的实化类型参数\n  inline fun <reified T> isInstanceOf(value: Any): Boolean = value is T \n  ```\n\n\n\n### 3.3 通过 lazy 属性代理 + inflate方法引用\n\n```kotlin\n//通过 lazy 属性代理 + inflate方法引用\nfun <VB : ViewBinding> ComponentActivity.binding1(inflate: (LayoutInflater) -> VB) =\n    lazy {\n        inflate(layoutInflater).also {\n            setContentView(it.root)\n        }\n    }\n```\n\n### 3.4 通过 lazy 属性代理 + 反射\n\n```kotlin\n//通过 lazy 属性代理 + 反射\n//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等\ninline fun <reified VB : ViewBinding> ComponentActivity.binding3() =\n    lazy {\n        //经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding\n        val viewBinding: VB = VB::class.java.getMethod(\"inflate\", LayoutInflater::class.java)\n            .invoke(null, layoutInflater) as VB\n        viewBinding.also {\n            setContentView(it.root)\n        }\n    }\n```\n\n### 3.5 通过自定义属性代理 + inflate方法引用\n\n```kotlin\n//通过自定义属性代理 + inflate方法引用\nfun <VB : ViewBinding> ComponentActivity.binding2(inflate: (LayoutInflater) -> VB) =\n    ReadOnlyProperty<ComponentActivity, VB> { thisRef, property ->\n        inflate(layoutInflater).also {\n            setContentView(it.root)\n        }\n    }\n```\n\n### 3.6 通过自定义属性代理+ 反射\n\n```kotlin\n//通过自定义属性代理+ 反射\n//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等\ninline fun <reified VB : ViewBinding> ComponentActivity.binding4() =\n    ReadOnlyProperty<ComponentActivity, VB> { thisRef, property ->\n        //经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding\n        val viewBinding: VB = VB::class.java.getMethod(\"inflate\", LayoutInflater::class.java)\n            .invoke(null, layoutInflater) as VB\n        viewBinding.also {\n            setContentView(it.root)\n        }\n    }\n```\n\n四种方式的使用\n\n```kotlin\n//通过 lazy 属性代理 + inflate方法引用\nprivate val binding1 by binding1(ActivityMainBinding::inflate)\n//通过自定义属性代理 + inflate方法引用\nprivate val binding2 by binding2(ActivityMainBinding::inflate)\n//通过 lazy 属性代理 + 反射\nprivate val binding3: ActivityMainBinding by binding3()\n//通过自定义属性代理+ 反射\nprivate val binding4: ActivityMainBinding by binding4()\n```\n\n其它 Fragment、View、Adapter 等绑定类的生成方式可以根据上面的方式灵活调整，也可参考：[**Github | VBHelper**](https://github.com/jaydroid1024/VBHelper)\n\n**注意的地方：**\n\n- 反射的方式我这里都是通过绑定类的 inflate 方法，也可以反射 bind 方法，就是入参不同可以根据具体情况灵活调整。\n- merge 标签作为根视图生成的绑定类的inflate 方法只有一个两参数的 其它情况都是一参和三参同时生成，反射时需要兼容一下，VBHelper 没有兼容这一点有需要的可以处理一下，具体做法就是 try-cache 分别处理。\n\n```java\n@NonNull\npublic static LayoutInfoMergeBinding inflate(@NonNull LayoutInflater inflater,\n    @NonNull ViewGroup parent) {\n  if (parent == null) {\n    throw new NullPointerException(\"parent\");\n  }\n  inflater.inflate(R.layout.layout_info_merge, parent);\n  return bind(parent);\n}\n```\n\n\n\n## 4. VB 原理解析\n\n### 4.1 LayoutInflater 原理与参数解析\n\n[参考：反思|Android LayoutInflater机制的设计与实现](https://juejin.cn/post/6844903919286485000)\n\n#### 获取 LayoutInflater 三种方式\n\n```kotlin\n//获取 LayoutInflater\n//1、通过 LayoutInflater 的静态方法 from 获取，内部调用的是第二种\nval layoutInflater1: LayoutInflater = LayoutInflater.from(this)\n//2、通过系统服务 getSystemService 方法获取\nval layoutInflater2: LayoutInflater =\n    getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n//3、如果是在 Activity 或 Fragment 可直接获取到实例\nval layoutInflater3: LayoutInflater = layoutInflater //相当于调用 getLayoutInflater()\n\n//三种方式在 Activity 范围内是单例\nLog.d(\"Jay\", \"layoutInflater1:${layoutInflater1.hashCode()}\")\nLog.d(\"Jay\", \"layoutInflater2:${layoutInflater2.hashCode()}\")\nLog.d(\"Jay\", \"layoutInflater3:${layoutInflater3.hashCode()}\")\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater1:31503528\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater2:31503528\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater3:31503528\n```\n\n无论哪种方式获取最终都会走到 ContextThemeWrapper 类中 getSystemService\n\n#### PhoneLayoutInflater 创建流程\n\n获取 LayoutInflater 三种方式最终会调到 ContextThemeWrapper#getSystemService\n\n```kotlin\n//class ContextThemeWrapper extends ContextWrapper\n@Override\npublic Object getSystemService(String name) {\n    if (LAYOUT_INFLATER_SERVICE.equals(name)) {\n        if (mInflater == null) {\n            mInflater = LayoutInflater.from(getBaseContext()).cloneInContext(this);\n        }\n        return mInflater;\n    }\n    return getBaseContext().getSystemService(name);\n}\n```\n\ncloneInContext 是 LayoutInflater 接口的方法，LayoutInflater 唯一实现类是 PhoneLayoutInflater\n\n```kotlin\n//class PhoneLayoutInflater extends LayoutInflater\npublic LayoutInflater cloneInContext(Context newContext) {\n    return new PhoneLayoutInflater(this, newContext);\n}\n```\n\n#### 布局填充流程\n\n方法签名\n\n```kotlin\n1.public View inflate(XmlPullParser parser, @Nullable ViewGroup root)\n2.public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)\n3.public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)\n4.public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)\n```\n\n四个 inflate 的重载方法最终都会调用到第四个，下面是四个方法的使用\n\n```kotlin\n//调用 LayoutInflater.inflate 的四个方法重载\n//如果传入的 root 为 null ，此时会将 Xml 布局生成的根 View 对象直接返回\nval view1_1 = layoutInflater3.inflate(R.layout.layout_view, null)\n//这种方式加载的布局不需要再次addView(),否则：Caused by: java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child's parent first.\n//如果传入的 root 不为 null 且 attachToRoot 为 true，此时会将 Xml 布局生成的根 View 通过 addView 方法携带布局参数添加到 root 中\n//如果 root 参数不为空 和 view2_1 一样\nval view1_2 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer)\n//第一个参数代表所要加载的布局，第二个参数是ViewGroup，这个参数需要与第3个参数配合使用，attachToRoot如果为true就把布局添加到ViewGroup中；若为false则只采用ViewGroup的LayoutParams作为测量的依据却不直接添加到ViewGroup中。\nval view2_1 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer, true)\n//如果传入的 root 不为 null 且 attachToRoot 为 false，此时会给 Xml 布局生成的根 View 设置布局参数\nval view2_2 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer, false)\nval parser: XmlResourceParser = resources.getLayout(R.layout.layout_view)\n//这两个重载方法不常用\nval view3 = layoutInflater3.inflate(parser, binding.clContainer)\nval view4 = layoutInflater3.inflate(parser, binding.clContainer, false)\nbinding.clContainer.addView(view1_1)\n```\n\n无论是 Activity 中 setContentView 加载内容还是 DecorView 加载屏幕根视图都是通过 LayoutInflater 加载。\n\ninflate 方法，详细的加载过程会单独整理一篇文章\n\n```java\npublic View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n    synchronized (mConstructorArgs) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n        final Context inflaterContext = mContext;\n        final AttributeSet attrs = Xml.asAttributeSet(parser);\n        Context lastContext = (Context) mConstructorArgs[0];\n        mConstructorArgs[0] = inflaterContext;\n        View result = root;\n        try {\n            advanceToRootNode(parser);\n            final String name = parser.getName();\n            if (TAG_MERGE.equals(name)) {\n                if (root == null || !attachToRoot) {\n                    throw new InflateException(\"<merge /> can be used only with a valid \"+ \"ViewGroup root and attachToRoot=true\");\n                }\n\t\t\t\t\t\t\t\t//merge 根视图单独处理\n                rInflate(parser, root, inflaterContext, attrs, false);\n            } else {\n                //Temp 是在 xml 中找到的根视图\n                final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                ViewGroup.LayoutParams params = null;\n\n                if (root != null) {\n                  \n                    // 创建与根匹配的布局参数（如果提供）\n                    params = root.generateLayoutParams(attrs);\n                    if (!attachToRoot) {\n                        // 如果我们不附加，请为 temp 设置根布局的布局参数\n                        temp.setLayoutParams(params);\n                    }\n                }\n                // 将所有处于临时状态的孩子都根据其上下文进行布局填充。\n                rInflateChildren(parser, temp, attrs, true);\n                // 将所有视图添加到 root\n                if (root != null && attachToRoot) {\n                    root.addView(temp, params);\n                }\n                // 返回传入的 root 还是在 xml 中找到的顶视图。\n                if (root == null || !attachToRoot) {\n                    result = temp;\n                }\n            }\n        } \n        return result;\n    }\n}\n```\n\n\n\n**LayoutInflater 参数说明**\n\n`layoutResID：`代表所要加载的布局资源id，\n\n`root：`是ViewGroup类型，这个参数需要与第3个参数配合使用，\n\n`attachToRoot：`如果为`true`就把布局添加到 `root` 中；若为`false`则只采用`ViewGroup`的`LayoutParams`作为测量的依据却不直接添加到`ViewGroup`中。\n\n`parser：`包含布局层次结构描述的 XML dom 节点。\n\n**LayoutInflater.Factory 接口的扩展功能**\n\n`LayoutInflater`设计了一个`LayoutInflater.Factory`接口，该接口设计得非常巧妙：在`xml`解析过程中，开发者可以通过配置该接口对`View`的创建过程进行拦截：**通过new的方式创建控件以避免大量地使用反射**,`Factory`接口的意义是在`xml`解析过程中，开发者可以通过配置该接口对`View`的创建过程进行拦截\n\n#### LayoutInflater 总结\n\n获取 LayoutInflater实例最终都会走到 ContextThemeWrapper 类中 getSystemService 构建一个局部单例的 **PhoneLayoutInflater** 实例。\n\nLayoutInflater 布局填充有四个重载方法，最终都会调用到同一个方法，再根据传递的参数做不同的加载处理\n\n\n\n### 4.2 ActivityMainBinding 类的绑定过程\n\n#### inflate 过程\n\nView 类中通过调用apt 自动生成的绑定类的inflate方法或者 bind 方法获取绑定类\n\n```kotlin\n//CustomView\nval layoutInflater: LayoutInflater = LayoutInflater.from(context)\nval binding = LayoutViewBinding.inflate(layoutInflater, this, true)\n//SecondFragment\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedIS: Bundle?): View {\n    _binding = FragmentSecondBinding.inflate(inflater, container, false)\n    return binding.root\n}\n//include+merge 只能手动调用绑定类的bind方法\nval layoutInfoMergeBinding = LayoutInfoMergeBinding.bind(binding.root)\n```\n\n绑定类的 inflate 方法，通过传入的 LayoutInflater 将 layout 填充为 View\n\n```kotlin\n//class FragmentSecondBinding implements ViewBinding\n@NonNull\npublic static FragmentSecondBinding inflate(@NonNull LayoutInflater inflater,\n    @Nullable ViewGroup parent, boolean attachToParent) {\n  View root = inflater.inflate(R.layout.fragment_second, parent, false);\n  //这里的 attachToParent 参数为 true 时不知为何不传入 LayoutInflater 来 addView 而是自己单独做了判断\n  if (attachToParent) {\n    parent.addView(root);\n  }\n  return bind(root);\n}\n```\n\n#### bind 过程\n\n从 inflate 过程填充的视图中(或者是从外部传入的 View)实例化所有控件并构建绑定类\n\n```kotlin\n  @NonNull\n  public static FragmentSecondBinding bind(@NonNull View rootView) {\n    //此方法的主体是以您不会编写的方式生成的。这样做是为了优化已编译的字节码的大小和性能。\n    int id;\n    missingId: {\n      //根布局中的普通控件\n      id = R.id.button_second;\n      Button buttonSecond = ViewBindings.findChildViewById(rootView, id);\n      if (buttonSecond == null) {\n        break missingId;\n      }\n      //根布局中的 include 标签\n      id = R.id.include_layout;\n      View includeLayout = ViewBindings.findChildViewById(rootView, id);\n      if (includeLayout == null) {\n        break missingId;\n      }\n      LayoutInfoBinding binding_includeLayout = LayoutInfoBinding.bind(includeLayout);\n\t\t\t//ViewStub标签\n      id = R.id.layout_view_stub;\n      ViewStub layoutViewStub = ViewBindings.findChildViewById(rootView, id);\n      if (layoutViewStub == null) {\n        break missingId;\n      }\n\t\t\t//自定义 View\n      id = R.id.name;\n      CustomView name = ViewBindings.findChildViewById(rootView, id);\n      if (name == null) {\n        break missingId;\n      }\n\n \t\t\t//include+merge 没有生成对应的类型，只能手动调用绑定类的bind方法\n\n      //构建绑定类，并将所有控件赋值给类属性\n      return new FragmentSecondBinding((ConstraintLayout) rootView, buttonSecond, flSecond,\n          binding_includeLayout, layoutViewStub, llInfo, name, textviewSecond);\n    }\n    // 如果有任何一个控件在 findChildViewById 过程中没有被找到就会抛NPE异常\n    String missingId = rootView.getResources().getResourceName(id);\n    throw new NullPointerException(\"Missing required view with ID: \".concat(missingId));\n  }\n}\n```\n\n遍历根视图匹配布局文件中的id并通过findViewById方法返回View实例\n\n```kotlin\n//ViewBindings\n/**\n Like `findViewById` but skips the view itself.\n */\n@Nullable\npublic static <T extends View> T findChildViewById(View rootView, @IdRes int id) {\n    if (!(rootView instanceof ViewGroup)) {\n        return null;\n    }\n    final ViewGroup rootViewGroup = (ViewGroup) rootView;\n    final int childCount = rootViewGroup.getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        final T view = rootViewGroup.getChildAt(i).findViewById(id);\n        if (view != null) {\n            return view;\n        }\n    }\n    return null;\n}\n```\n\n\n\n#### 绑定过程总结\n\nDataBinding 借助 AGP 会为所有布局文件自动生成绑定类\n\n绑定类的 inflate 方法通过传入的布局填充器 LayoutInflater 以及自动收集的根布局 id 加载出根布局 rootView 然后传给 bind 方法实例化控件\n\n绑定类的 bind 方法通过传入的根布局以及自动收集的控件 id 实例化所有控件 并构建绑定类\n\n### 4.3 ActivityMainBinding 类的生成过程\n\n[参考：ViewBinding 的本质](https://juejin.cn/post/6844904106268557326)\n\n[DataBinding Compiler Common](https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common)\n\n依赖源码方便查看\n\n```groovy\n//todo 依赖 databinding-compiler 方便查看 ViewBinding 类的生成过程\n// https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common\nimplementation group: 'androidx.databinding', name: 'databinding-compiler-common', version: '7.0.1'\n// https://mvnrepository.com/artifact/com.android.tools.build/gradle\nimplementation group: 'com.android.tools.build', name: 'gradle', version: '7.0.1'\n```\n\nViewBinding 是属于 dataBinding 库里面的一个小功能,对于解析布局文件生成绑定类的逻辑是通用的，\n\n#### 阶段一：解析xml布局文件\n\n**LayoutXmlProcessor**：处理布局 XML，剥离绑定属性和元素，并将信息写入带注解的类文件以供注释处理器使用\n\n**processResources**：假装这个方法就是布局文件改动后调用的入口方法（应该是由AGP 触发，暂时未找到）\n\n```java\n\nandroid.databinding.tool.LayoutXmlProcessor\n  \npublic boolean processResources(ResourceInput input, boolean isViewBindingEnabled, boolean isDataBindingEnabled)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n    ProcessFileCallback callback = new ProcessFileCallback() {\n    //省略回调代码\n    }\n    //布局文件的改动输入源支持增量构建\n    if (input.isIncremental()) {\n        processIncrementalInputFiles(input, callback);\n    } else {\n        processAllInputFiles(input, callback);\n    }\n    return true;\n}\n```\n\nprocessIncrementalInputFiles 处理增量输入（Added、Removed、Changed）\n\nprocessAllInputFiles 处理全部输入\n\n```java\n//遍历文件\nfor (File firstLevel : input.getRootInputFolder().listFiles())\n//处理 layout_xx 目录下面的 xxx.xml 文件\nif (LAYOUT_FOLDER_FILTER.accept(firstLevel, firstLevel.getName())) {\n    callback.processLayoutFolder(firstLevel);\n    //noinspection ConstantConditions\n    for (File xmlFile : firstLevel.listFiles(XML_FILE_FILTER)) {\n        callback.processLayoutFile(xmlFile);\n    }\n}\n```\n\nProcessFileCallback 扫描文件后的回调\n\n```java\npublic void processLayoutFile(File file)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n          //处理单个文件，\n    processSingleFile(RelativizableFile.fromAbsoluteFile(file, null),\n            convertToOutFile(file), isViewBindingEnabled, isDataBindingEnabled);\n}\n```\n\nprocessSingleFile \n\n```java\npublic boolean processSingleFile(@NonNull RelativizableFile input, @NonNull File output,\n        boolean isViewBindingEnabled, boolean isDataBindingEnabled)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n          //解析xml文件 封账布局文件扫描类\n    final ResourceBundle.LayoutFileBundle bindingLayout = LayoutFileParser\n            .parseXml(input, output, mResourceBundle.getAppPackage(), mOriginalFileLookup,\n                    isViewBindingEnabled, isDataBindingEnabled);\n    if (bindingLayout == null\n            || (bindingLayout.isBindingData() && bindingLayout.isEmpty())) {\n        return false;\n    }\n          //添加到map缓存起来\n    mResourceBundle.addLayoutBundle(bindingLayout, true);\n    return true;\n}\n```\n\n**LayoutFileParser**：获取 XML 文件列表并创建可以持久化或转换为 LayoutBinder 的ResourceBundle列表\n\nandroid.databinding.tool.store public final class LayoutFileParser\n\nparseXml:路径、编码、校验等\n\nparseOriginalXml :将布局文件解析为描述类\n\n```java\nprivate static ResourceBundle.LayoutFileBundle parseOriginalXml(\n        @NonNull final RelativizableFile originalFile, @NonNull final String pkg,\n        @NonNull final String encoding, boolean isViewBindingEnabled,\n        boolean isDataBindingEnabled)\n        throws IOException {}\n\n//layout 标签判断databinding\nXMLParser.ElementContext root = expr.element();\nboolean isBindingData = \"layout\".equals(root.elmName.getText());\n//dataBinding\nif (isBindingData) {\n    if (!isDataBindingEnabled) {\n        L.e(ErrorMessages.FOUND_LAYOUT_BUT_NOT_ENABLED);\n        return null;\n    }\n    data = getDataNode(root);\n    rootView = getViewNode(original, root);\n} else if (isViewBindingEnabled) {\n  //viewBindingIgnore 根布局添加这个属性为true可以跳过生成绑定类的过程\n    if (\"true\".equalsIgnoreCase(attributeMap(root).get(\"tools:viewBindingIgnore\"))) {\n        L.d(\"Ignoring %s for view binding\", originalFile);\n        return null;\n    }\n    data = null;\n    rootView = root;\n} else {\n    return null;\n}\n\n//dataBinding <include> 元素不支持作为 <merge> 元素的直接子元素\nboolean isMerge = \"merge\".equals(rootView.elmName.getText());\nif (isBindingData && isMerge && !filter(rootView, \"include\").isEmpty()) {\n//public static final String INCLUDE_INSIDE_MERGE = \"<include> elements are not supported as direct children of <merge> elements\";\n    L.e(ErrorMessages.INCLUDE_INSIDE_MERGE);\n    return null;\n}\n\nString rootViewType = getViewName(rootView);\nString rootViewId = attributeMap(rootView).get(\"android:id\");\n//构建布局描述的封装类\nResourceBundle.LayoutFileBundle bundle =\n    new ResourceBundle.LayoutFileBundle(\n        originalFile, xmlNoExtension, original.getParentFile().getName(), pkg,\n        isMerge, isBindingData, rootViewType, rootViewId);\nfinal String newTag = original.getParentFile().getName() + '/' + xmlNoExtension;\n//data 数据只有 databinding 才会有的元素，viewBinding 是不会去解析的\nparseData(original, data, bundle);\n//解析表达式，这里面会循环遍历元素，解析 view 的 id、tag、include、fragment 等等 xml 相关的元素，并且还有 databinding 相关的 @={ 的表达式，最后将结果缓存起来\nparseExpressions(newTag, rootView, isMerge, bundle);\n```\n\n#### 阶段二：输出描述文件\n\n**LayoutXmlProcessor**\n\n**writeLayoutInfoFiles**：这个方法的执行点可以在AGP里面找到，task 为：**com.android.build.gradle.tasks.MergeResources**\n\n**MergeResources**\n\n```java\n@Override\npublic void doTaskAction(@NonNull InputChanges changedInputs) {\n    ...\n    SingleFileProcessor dataBindingLayoutProcessor = maybeCreateLayoutProcessor();\n    if (dataBindingLayoutProcessor != null) {\n        dataBindingLayoutProcessor.end();\n    }\n    ...\n}\n```\n\n```java\n//maybeCreateLayoutProcessor\nreturn new SingleFileProcessor() {\n\n    private LayoutXmlProcessor getProcessor() {\n        return processor;\n    }\n\n    @Override\n    public boolean processSingleFile(\n            @NonNull File inputFile,\n            @NonNull File outputFile,\n            @Nullable Boolean inputFileIsFromDependency)\n            throws Exception {\n        return getProcessor()\n               .processSingleFile(\n                        normalizedInputFile,\n                        outputFile,\n                        getViewBindingEnabled().get(),\n                        getDataBindingEnabled().get());\n    }\n    @Override\n    public void end() throws JAXBException {\n        getProcessor().writeLayoutInfoFiles(getDataBindingLayoutInfoOutFolder().get().getAsFile());\n    }\n};\n\n//输出路径可以从这里查看\nartifacts.setInitialProvider(taskProvider, MergeResources::getDataBindingLayoutInfoOutFolder)\n        .withName(\"out\")\n        .on( mergeType == MERGE? DATA_BINDING_LAYOUT_INFO_TYPE_MERGE.INSTANCE\n                        : DATA_BINDING_LAYOUT_INFO_TYPE_PACKAGE.INSTANCE);\n```\n\n**writeLayoutInfoFiles**\n\n```java\npublic void writeLayoutInfoFiles(File xmlOutDir, JavaFileWriter writer) throws JAXBException {\n    //遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径\n    for (ResourceBundle.LayoutFileBundle layout : mResourceBundle\n            .getAllLayoutFileBundlesInSource()) {\n        writeXmlFile(writer, xmlOutDir, layout);\n    }\n}\n```\n\nwriteXmlFile\n\n```kotlin\nprivate void writeXmlFile(JavaFileWriter writer, File xmlOutDir,\n        ResourceBundle.LayoutFileBundle layout)\n        throws JAXBException {\n    String filename = generateExportFileName(layout);//  fileName + '-' + dirName + \".xml\";\n          //遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径\n    writer.writeToFile(new File(xmlOutDir, filename), layout.toXML());\n}\n```\n\n描述文件的生成路径为：app/build/intermediates/data_binding_layout_info_type_merge/debug/out\n\n```xml\n//fragment_second-layout.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<Layout directory=\"layout\" filePath=\"app/src/main/res/layout/fragment_second.xml\"\n    isBindingData=\"false\" isMerge=\"false\" layout=\"fragment_second\"\n    modulePackage=\"com.jay.vbhelper\" rootNodeType=\"androidx.constraintlayout.widget.ConstraintLayout\">\n    <Targets>\n        <Target tag=\"layout/fragment_second_0\"\n            view=\"androidx.constraintlayout.widget.ConstraintLayout\">\n            <Expressions />\n            <location endLine=\"78\" endOffset=\"51\" startLine=\"1\" startOffset=\"0\" />\n        </Target>\n        <Target id=\"@+id/ll_info\" tag=\"binding_1\"\n            view=\"androidx.appcompat.widget.LinearLayoutCompat\">\n            <Expressions />\n            <location endLine=\"51\" endOffset=\"50\" startLine=\"9\" startOffset=\"4\" />\n        </Target>\n        <Target id=\"@+id/include_layout\" include=\"layout_info\" tag=\"binding_1\">\n            <Expressions />\n            <location endLine=\"31\" endOffset=\"42\" startLine=\"29\" startOffset=\"8\" />\n        </Target>\n        <Target include=\"layout_info_merge\" tag=\"binding_1\">\n            <Expressions />\n            <location endLine=\"35\" endOffset=\"53\" startLine=\"35\" startOffset=\"8\" />\n        </Target>\n \n    </Targets>\n</Layout>\n```\n\n#### 阶段三：输出绑定类\n\nAGP Task DataBindingGenBaseClassesTask 触发\n\ncom.android.build.gradle.internal.tasks.databinding.DataBindingGenBaseClassesTask\n\nDataBindingGenBaseClassesTask\n\n```kotlin\n@TaskAction\nfun writeBaseClasses(inputs: IncrementalTaskInputs) {\n    // TODO extend NewIncrementalTask when moved to new API so that we can remove the manual call to recordTaskAction\n    recordTaskAction(analyticsService.get()) {\n        // TODO figure out why worker execution makes the task flake.\n        // Some files cannot be accessed even though they show up when directory listing is\n        // invoked.\n        // b/69652332\n        val args = buildInputArgs(inputs)\n        CodeGenerator(\n            args,\n            sourceOutFolder.get().asFile,\n            Logger.getLogger(DataBindingGenBaseClassesTask::class.java),\n            encodeErrors,\n            collectResources()).run()//触发生成流程\n    }\n}\n\n//绑定类生成器\nclass CodeGenerator @Inject constructor(\n    val args: LayoutInfoInput.Args,\n    private val sourceOutFolder: File,\n    private val logger: Logger,\n    private val encodeErrors: Boolean,\n    private val symbolTables: List<SymbolTable>? = null\n) : Runnable, Serializable {\n    override fun run() {\n        try {\n            initLogger()\n            BaseDataBinder(LayoutInfoInput(args), if (symbolTables != null) this::getRPackage else null)\n          //生成逻辑\n                .generateAll(DataBindingBuilder.GradleFileWriter(sourceOutFolder.absolutePath))\n        } finally {\n            clearLogger()\n        }\n    }\n    ...\n}\n\n//sourceOutFolder路径信息\ncreationConfig.artifacts.setInitialProvider(\n    taskProvider,\n    DataBindingGenBaseClassesTask::sourceOutFolder\n).withName(\"out\").on(InternalArtifactType.DATA_BINDING_BASE_CLASS_SOURCE_OUT)\n```\n\n\n\nBaseDataBinder\n\n```java\n@Suppress(\"unused\")// used by tools\nclass BaseDataBinder(val input : LayoutInfoInput, val getRPackage: ((String, String) -> (String))?) {\n    private val resourceBundle : ResourceBundle = ResourceBundle(\n            input.packageName, input.args.useAndroidX)\n      //\n    init {\n        input.filesToConsider .forEach {\n                    it.inputStream().use {\n                     // 又将上面收集的 layout，将 xml 转成 LayoutFileBundle\n                        val bundle = LayoutFileBundle.fromXML(it)\n                        resourceBundle.addLayoutBundle(bundle, true)\n                    }\n                }\n        resourceBundle.addDependencyLayouts(input.existingBindingClasses)\n        resourceBundle.validateAndRegisterErrors()\n    }\n  \n  \n  \n    @Suppress(\"unused\")// used by android gradle plugin\n    fun generateAll(writer : JavaFileWriter) {\n    \t\t// 拿到所有的 LayoutFileBundle，并根据文件名进行分组排序\n        val layoutBindings = resourceBundle.allLayoutFileBundlesInSource\n            .groupBy(LayoutFileBundle::getFileName).toSortedMap()\n\n        layoutBindings.forEach { layoutName, variations ->\n            // 将 LayoutFileBundle 信息包装成 BaseLayoutModel\n            val layoutModel = BaseLayoutModel(variations, getRPackage)\n            val javaFile: JavaFile\n            val classInfo: GenClassInfoLog.GenClass\n            if (variations.first().isBindingData) {\n                val binderWriter = BaseLayoutBinderWriter(layoutModel, libTypes)\n                javaFile = binderWriter.write()\n                classInfo = binderWriter.generateClassInfo()\n            } else {\n              //不是DataBinding，按照 ViewBinding 处理\n              //toViewBinder 是 BaseLayoutModel 的拓展函数，他会将 LayoutFileBundle 包装成 ViewBinder 类返回 \n                val viewBinder = layoutModel.toViewBinder()\n              //toJavaFile 是 ViewBinder 的拓展函数，通过Javapoet生成Java文件\n                javaFile = viewBinder.toJavaFile(useLegacyAnnotations = !useAndroidX)\n                classInfo = viewBinder.generatedClassInfo()\n            }\n            writer.writeToFile(javaFile)\n            myLog.classInfoLog.addMapping(layoutName, classInfo)\n            variations.forEach {\n                it.bindingTargetBundles.forEach { bundle ->\n                    if (bundle.isBinder) {\n                        myLog.addDependency(layoutName, bundle.includedLayout)\n                    }\n                }\n            }\n        }\n        input.saveLog(myLog)\n        // data binding will eat some errors to be able to report them later on. This is a good\n        // time to report them after the processing is done.\n        Scope.assertNoError()\n    }\n}\n```\n\n通过Javapoet 生成绑定类\n\n```kotlin\n\nfun ViewBinder.toJavaFile(useLegacyAnnotations: Boolean = false) =\n    JavaFileGenerator(this, useLegacyAnnotations).create()\n\nfun create() = javaFile(binder.generatedTypeName.packageName(), typeSpec()) {\n    addFileComment(\"Generated by view binder compiler. Do not edit!\")\n}\n\nprivate fun typeSpec() = classSpec(binder.generatedTypeName) {\n  \n    addModifiers(PUBLIC, FINAL)\n    addSuperinterface(ClassName.get(viewBindingPackage, \"ViewBinding\"))\n\n    // TODO elide the separate root field if the root tag has an ID (and isn't a binder)\n    addField(rootViewField())\n    addFields(bindingFields())\n\n    addMethod(constructor())\n    addMethod(rootViewGetter())\n\t\t//如果跟标签是 merge  是生成的两参数的infate 参数\n    if (binder.rootNode is RootNode.Merge) {\n        addMethod(mergeInflate())\n    } else {\n      //其它情况都是同时生成一参数和三参数的inflate方法\n        addMethod(oneParamInflate())\n        addMethod(threeParamInflate())\n    }\n\n    addMethod(bind())\n}\n```\n\n#### 生成过程总结\n\n实时更新生成：布局文件改动(新加/更新/删除)后AS或AGP或立即更新绑定类，这个过程还没找到对应的源码\n\n编译更新生成：AGP 不同的任务触发\n\n- 解析xml布局文件：LayoutXmlProcessor#processResources 方法应该是改动布局文件的输入口，暂时没找到对应的Task，收集过程支持增量更新。处理 layout_xx 目录下面的 xxx.xml 文件，解析xml文件的过程区分 DataBinding 和 ViewBinding ，最后的产物是 ResourceBundle.LayoutFileBundle 以及 HashMap<String, List<LayoutFileBundle>> mLayoutBundles\n- 输出描述文件：有AGP中的 **MergeResources**Task 触发 , 遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径, 这个xml文件中描述了布局的 文件路径、包名、布局名、控件id、控件行号等信息\n- 输出绑定类：AGP **DataBindingGenBaseClassesTask**触发，将上个过程生成的布局描述xml文件再解析成 LayoutFileBundle 类信息，然后再次包装这些信息，最后通过Javapoet 生成绑定类\n\n\n\n#### TODO \n\n- 布局文件更新后触发扫描和处理布局文件的操作也就是调用 processResources 方法的地方\n  - 猜测AGP 和 AS 都有参与\n\n- 为什么点击 ActivityMainBinding 会跳转到对应的布局文件\n  - 这个猜测应该和编译相关，生成词法分析器和解析器代码\n\n- 为什么添加了新的布局文件还没有编译就获取到绑定类，但是在data_binding_base_class_source_out路径下没有这个绑定类只有编译才会看到\n\n  - 应该也有AS的份\n\n  - [AS 中关于 DataBind 的一个库：Generate lexer and parser code](https://android.googlesource.com/platform/tools/adt/idea/+/refs/heads/mirror-goog-studio-master-dev/android-lang-databinding/)\n\n    \n\n","source":"_posts/jetpack_viewbinding.md","raw":"---\ntitle: Jetpack | ViewBinding 详解\ndate: 2021-05-31 14:16:55\ncover: true\ntags: \n    - Jetpack\n    - ViewBinding\n    - VBHelper\ncategory: \n\t- Jetpack\nsummary: 1. VB 集成与一般使用方式，2. 通过 KT 属性代理简化 VB 创建流程并封装VBHelper，3. LayoutInflater 原理，4.ViewBinding绑定和生成原理\n\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Jetpack | ViewBinding 详解\n\n通过 **ViewBinding(视图绑定)** 功能，我们可以更轻松地编写与布局文件交互的代码。在模块中启用视图绑定之后，AGP 会为该模块中的每个 XML 布局文件生成一个绑定类。该绑定类的实例中会直接引用那些在布局中声明了资源 id 的控件。这样一来就减少了很多像 `findViewById` 这种操作，同时也为控件的安全性保驾护航。\n\n\n\n**文章核心点：**\n\n- VB 集成与一般使用方式，包括：Activity 、Fragment、Adapter、include、merge、ViewStub\n- KT 属性代理与泛型实化类型参数 `reified` 的介绍\n- 通过 KT 属性代理简化 VB 创建流程，并封装了一个库 VBHelper\n- LayoutInflater 原理与参数解析\n- XXXBinding 类的绑定过程\n- XXXBinding 类的生成过程\n\n\n\n**[VBHelper](https://github.com/jaydroid1024/VBHelper)**：是我写这篇文章提取的一个库，通过属性代理简化了VB的使用，有想了解的可以提提意见\n\n1. 在 Activity 中创建 ViewBinding 绑定类\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 方法\nprivate val binding: ActivityMainBinding by vb()\n//通过自定义属性代理 + 传递 inflate 方法引用\nprivate val binding: ActivityMainBinding by vb(ActivityMainBinding::inflate)\n```\n\n2. 在 Fragment 中创建 ViewBinding 绑定类\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 方法\nprivate val binding: FragmentMainBinding by vb()\n//通过自定义属性代理 + 传递 inflate 方法引用\nprivate val binding: FragmentMainBinding by vb(FragmentMainBinding::inflate)\n```\n\n3. 在 View 中创建 ViewBinding 绑定类\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法\nprivate val binding: MyViewBinding by vb()\n//通过自定义属性代理 + 传递 inflate 三参数方法引用\nprivate val binding: MyViewBinding by vb(MyViewBinding::inflate)\n```\n\n4. 在 Adapter 中创建包含了绑定类的 BindingViewHolder\n\n```kotlin\n//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法\nval holder: BindingViewHolder<LayoutItemTextBinding> by vh(parent)\n//通过自定义属性代理 + 传递绑定类的 inflate 三参数方法引用\nval holder: BindingViewHolder<LayoutItemTextBinding> by vh(parent, LayoutItemTextBinding::inflate)\n```\n\n\n\n## 1.VB 概述\n\n- 视图绑定在 Android Studio 3.6 Canary 11 及更高版本中可用。\n\n- 开启自动生成绑定类：模块 `build.gradle` 文件中的 `android` 闭包下，两种方式\n  - `viewBinding {enabled = true} ` 默认值为false, Android Studio 3.6 Canary 11 及更高版本中可用。\n  -  ` buildFeatures {viewBinding = true}` 默认值为false,  Android Studio 4.0 及更高版本中可用\n\n- 忽略自动生成绑定类：请将 `tools:viewBindingIgnore=\"true\"` 属性添加到相应布局文件的根视图中\n\n- 生成绑定类的名称：将 XML 文件的名称转换为驼峰式大小写，并在末尾添加“Binding”一词。\n  LayoutInflater.Factory\n  - result_profile.xml ====>ResultProfileBinding\n  - 每个绑定类还包含一个 `getRoot()` 方法，用于为相应布局文件的根视图提供直接引用。\n\n- 与使用 findViewById 相比\n\n  - **Null 安全**：绑定类的创建是通过解析布局文件在编译时生成，布局文件添加了id的控件才会生成对应的引用，因此不会发生绑定类中存在而布局中没有对应控件的情况，如果布局引用了错误的类型也会在编译时暴露错误。\n  - **类型安全**：布局中声明的控件是确定类型的。这意味着不存在发生类转换异常的风险。\n\n- 与使用 DataBinding 对比\n\n  - 视图绑定和[数据绑定](https://developer.android.com/topic/libraries/data-binding?hl=zh-cn)均会生成可用于直接引用视图的绑定类。但是，视图绑定旨在处理更简单的用例。\n\n  - **更快的编译速度**：视图绑定不需要处理注解信息，因此编译时间更短。\n  - **易于使用**：视图绑定不需要在 XML 布局文件中标记，只要在模块中启用视图绑定后，它会自动应用于该模块的所有布局。\n\n  - 如果项目中使用了数据绑定最好在项目中**同时使用视图绑定和数据绑定**。这样可以在需要高级功能的布局中使用数据绑定，而在不需要高级功能的布局中使用视图绑定。如果只是取代 `findViewById()` 调用，请考虑改用视图绑定。\n\n\n\n## 2. VB 一般使用\n\n### 2.1 Activity \n\n```kotlin\nprivate lateinit var binding: ActivityMainBinding\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    binding = ActivityMainBinding.inflate(layoutInflater)\n    setContentView(binding.root)\n    setSupportActionBar(binding.toolbar)\n}\n```\n\n### 2.2 Fragment\n\n```kotlin\nprivate var _binding: FragmentFirstBinding? = null\n// This property is only valid between onCreateView and onDestroyView.\nprivate val binding get() = _binding!!\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\n    firstViewModel = ViewModelProvider(this).get(FirstViewModel::class.java)\n    _binding = FragmentFirstBinding.inflate(inflater, container, false)\n    binding.rvList.layoutManager = LinearLayoutManager(requireContext())\n    return binding.root\n}\n```\n\n### 2.3 Adapter\n\n```kotlin\noverride fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TextHolder {\n    val itemBinding = LayoutItemTextBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n    //绑定类交给Holder\n    return TextHolder(itemBinding)\n}\n\noverride fun onBindViewHolder(holder: TextHolder, position: Int) {\n    val item: String = list[position]\n    //数据交给Holder\n    holder.bind(item)\n}\n\nclass TextHolder(val itemBinding: LayoutItemTextBinding) : RecyclerView.ViewHolder(itemBinding.root) {\n    fun bind(name: String) {\n        itemBinding.tvName.text = name\n    }\n}\n```\n\n### 2.4 include\n\n```kotlin\nbinding.includeLayout.tvInfoInclude.text = \"tvInfoInclude:$item\"\n// todo  include 方式有时候无法识别到真实的绑定类类型只能识别它是个View类型但是编译不会报错, 这种情况清理缓存可能会好 ，或者也可以强制类型转换或者自己bind\nval tvInfoInclude: LayoutInfoBinding = binding.includeLayout as LayoutInfoBinding\nval tvInfoInclude = LayoutInfoBinding.bind(binding.root)\ntvInfoInclude.tvInfoInclude.text = \"tvInfoInclude:$item\"\n```\n\n### 2.5 merge\n\n```kotlin\n//include+merge 只能手动调用绑定类的bind方法\nval layoutInfoMergeBinding = LayoutInfoMergeBinding.bind(binding.root)\nval tvInfoMerge = layoutInfoMergeBinding.tvInfoMerge\ntvInfoMerge.text = \"tvInfoMerge:$item\"\n```\n\n### 2.6 ViewStub\n\n```kotlin\n//ViewStub 只能手动调用绑定类的bind方法\nbinding.layoutViewStub.setOnInflateListener { _, inflateId ->\n    val layoutInfoViewStubBinding = LayoutInfoViewStubBinding.bind(inflateId)\n    val tvInfoViewStub = layoutInfoViewStubBinding.tvInfoViewStub\n    tvInfoViewStub.text = \"tvInfoViewStub:$item\"\n}\nbinding.layoutViewStub.inflate()\n```\n\n详细的测试代码参考：[**Github | VBHelper**](https://github.com/jaydroid1024/VBHelper)\n\n## 3. VB 与 Kotlin by\n\n采用 Kotlin 属性代理简化 VB 使用的三方库\n\n- **[ViewBindingPropertyDelegate](https://github.com/androidbroadcast/ViewBindingPropertyDelegate)**\n- **[ViewBindingKTX](https://github.com/DylanCaiCoding/ViewBindingKTX)**\n- **[VBHelper](https://github.com/jaydroid1024/VBHelper)**：这个是我写这篇文章提取的一个库，借鉴了上面两个的实现，精简了一些代码\n\n### 3.1 KT 属性代理：`by` `lazy`\n\n- by关键字实际上就是一个属性代理运算符重载的符号，任何一个具备属性代理规则的类，都可以使用by关键字对属性进行代理。\n\n- `by`关键字后面带有一个代理对象，这个代理类不一定要实现特定的接口，但是需要包含下面这两个方法的签名（val 只需要 getValue ），它就能作为一个代理属性来使用。\n\n- ```kotlin\n  //这个是扩展的实现方式，lazy就是采用的这种\n  operator fun MyDelegate.getValue(thisRef: Any?, property: KProperty<*>): String = this.value\n  \n  class MyDelegate {\n      var value: String = \"YYY\"\n      //todo 代理类里面必须提供 getValue 方法，或者扩展这个方法也可\n      operator fun getValue(thisRef: Any, property: KProperty<*>): String {\n          return value\n      }\n      operator fun setValue(thisRef: Any, property: KProperty<*>, s: String) {\n          value = s\n      }\n  }\n  ```\n  \n- lazy  是Kotlin 内部对对属性代理的一个最佳实践，lazy 返回一个实现了 Lazy 接口的代理类，默认是 `SynchronizedLazyImpl`，\n\n- Lazy<T> 有个扩展方法，符合属性代理的规则\n\n- ```kotlin\n  public inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n  ```\n\n\n\n### 3.2 KT 内联函数 `inline` 与泛型实化类型参数 `reified` \n\n[官方文档](https://www.kotlincn.net/docs/reference/inline-functions.html#%E5%85%B7%E4%BD%93%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0)\n\n[reified-type-parameters](https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md)\n\nKotlin和Java同样存在泛型类型擦除的问题，但是 Kotlin 通过 inline 内联函数使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为实化，对应需要使用 reified 关键字。\n\n- 满足实化类型参数函数的必要条件\n\n  - 必须是 inline 内联函数，使用 inline 关键字修饰\n  - 泛型类定义泛型形参时必须使用 reified 关键字修饰\n\n- 带实化类型参数的函数基本定义\n\n  ```kotlin\n  //类型形参T是泛型函数isInstanceOf的实化类型参数\n  inline fun <reified T> isInstanceOf(value: Any): Boolean = value is T \n  ```\n\n\n\n### 3.3 通过 lazy 属性代理 + inflate方法引用\n\n```kotlin\n//通过 lazy 属性代理 + inflate方法引用\nfun <VB : ViewBinding> ComponentActivity.binding1(inflate: (LayoutInflater) -> VB) =\n    lazy {\n        inflate(layoutInflater).also {\n            setContentView(it.root)\n        }\n    }\n```\n\n### 3.4 通过 lazy 属性代理 + 反射\n\n```kotlin\n//通过 lazy 属性代理 + 反射\n//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等\ninline fun <reified VB : ViewBinding> ComponentActivity.binding3() =\n    lazy {\n        //经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding\n        val viewBinding: VB = VB::class.java.getMethod(\"inflate\", LayoutInflater::class.java)\n            .invoke(null, layoutInflater) as VB\n        viewBinding.also {\n            setContentView(it.root)\n        }\n    }\n```\n\n### 3.5 通过自定义属性代理 + inflate方法引用\n\n```kotlin\n//通过自定义属性代理 + inflate方法引用\nfun <VB : ViewBinding> ComponentActivity.binding2(inflate: (LayoutInflater) -> VB) =\n    ReadOnlyProperty<ComponentActivity, VB> { thisRef, property ->\n        inflate(layoutInflater).also {\n            setContentView(it.root)\n        }\n    }\n```\n\n### 3.6 通过自定义属性代理+ 反射\n\n```kotlin\n//通过自定义属性代理+ 反射\n//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等\ninline fun <reified VB : ViewBinding> ComponentActivity.binding4() =\n    ReadOnlyProperty<ComponentActivity, VB> { thisRef, property ->\n        //经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding\n        val viewBinding: VB = VB::class.java.getMethod(\"inflate\", LayoutInflater::class.java)\n            .invoke(null, layoutInflater) as VB\n        viewBinding.also {\n            setContentView(it.root)\n        }\n    }\n```\n\n四种方式的使用\n\n```kotlin\n//通过 lazy 属性代理 + inflate方法引用\nprivate val binding1 by binding1(ActivityMainBinding::inflate)\n//通过自定义属性代理 + inflate方法引用\nprivate val binding2 by binding2(ActivityMainBinding::inflate)\n//通过 lazy 属性代理 + 反射\nprivate val binding3: ActivityMainBinding by binding3()\n//通过自定义属性代理+ 反射\nprivate val binding4: ActivityMainBinding by binding4()\n```\n\n其它 Fragment、View、Adapter 等绑定类的生成方式可以根据上面的方式灵活调整，也可参考：[**Github | VBHelper**](https://github.com/jaydroid1024/VBHelper)\n\n**注意的地方：**\n\n- 反射的方式我这里都是通过绑定类的 inflate 方法，也可以反射 bind 方法，就是入参不同可以根据具体情况灵活调整。\n- merge 标签作为根视图生成的绑定类的inflate 方法只有一个两参数的 其它情况都是一参和三参同时生成，反射时需要兼容一下，VBHelper 没有兼容这一点有需要的可以处理一下，具体做法就是 try-cache 分别处理。\n\n```java\n@NonNull\npublic static LayoutInfoMergeBinding inflate(@NonNull LayoutInflater inflater,\n    @NonNull ViewGroup parent) {\n  if (parent == null) {\n    throw new NullPointerException(\"parent\");\n  }\n  inflater.inflate(R.layout.layout_info_merge, parent);\n  return bind(parent);\n}\n```\n\n\n\n## 4. VB 原理解析\n\n### 4.1 LayoutInflater 原理与参数解析\n\n[参考：反思|Android LayoutInflater机制的设计与实现](https://juejin.cn/post/6844903919286485000)\n\n#### 获取 LayoutInflater 三种方式\n\n```kotlin\n//获取 LayoutInflater\n//1、通过 LayoutInflater 的静态方法 from 获取，内部调用的是第二种\nval layoutInflater1: LayoutInflater = LayoutInflater.from(this)\n//2、通过系统服务 getSystemService 方法获取\nval layoutInflater2: LayoutInflater =\n    getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n//3、如果是在 Activity 或 Fragment 可直接获取到实例\nval layoutInflater3: LayoutInflater = layoutInflater //相当于调用 getLayoutInflater()\n\n//三种方式在 Activity 范围内是单例\nLog.d(\"Jay\", \"layoutInflater1:${layoutInflater1.hashCode()}\")\nLog.d(\"Jay\", \"layoutInflater2:${layoutInflater2.hashCode()}\")\nLog.d(\"Jay\", \"layoutInflater3:${layoutInflater3.hashCode()}\")\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater1:31503528\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater2:31503528\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater3:31503528\n```\n\n无论哪种方式获取最终都会走到 ContextThemeWrapper 类中 getSystemService\n\n#### PhoneLayoutInflater 创建流程\n\n获取 LayoutInflater 三种方式最终会调到 ContextThemeWrapper#getSystemService\n\n```kotlin\n//class ContextThemeWrapper extends ContextWrapper\n@Override\npublic Object getSystemService(String name) {\n    if (LAYOUT_INFLATER_SERVICE.equals(name)) {\n        if (mInflater == null) {\n            mInflater = LayoutInflater.from(getBaseContext()).cloneInContext(this);\n        }\n        return mInflater;\n    }\n    return getBaseContext().getSystemService(name);\n}\n```\n\ncloneInContext 是 LayoutInflater 接口的方法，LayoutInflater 唯一实现类是 PhoneLayoutInflater\n\n```kotlin\n//class PhoneLayoutInflater extends LayoutInflater\npublic LayoutInflater cloneInContext(Context newContext) {\n    return new PhoneLayoutInflater(this, newContext);\n}\n```\n\n#### 布局填充流程\n\n方法签名\n\n```kotlin\n1.public View inflate(XmlPullParser parser, @Nullable ViewGroup root)\n2.public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)\n3.public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)\n4.public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)\n```\n\n四个 inflate 的重载方法最终都会调用到第四个，下面是四个方法的使用\n\n```kotlin\n//调用 LayoutInflater.inflate 的四个方法重载\n//如果传入的 root 为 null ，此时会将 Xml 布局生成的根 View 对象直接返回\nval view1_1 = layoutInflater3.inflate(R.layout.layout_view, null)\n//这种方式加载的布局不需要再次addView(),否则：Caused by: java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child's parent first.\n//如果传入的 root 不为 null 且 attachToRoot 为 true，此时会将 Xml 布局生成的根 View 通过 addView 方法携带布局参数添加到 root 中\n//如果 root 参数不为空 和 view2_1 一样\nval view1_2 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer)\n//第一个参数代表所要加载的布局，第二个参数是ViewGroup，这个参数需要与第3个参数配合使用，attachToRoot如果为true就把布局添加到ViewGroup中；若为false则只采用ViewGroup的LayoutParams作为测量的依据却不直接添加到ViewGroup中。\nval view2_1 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer, true)\n//如果传入的 root 不为 null 且 attachToRoot 为 false，此时会给 Xml 布局生成的根 View 设置布局参数\nval view2_2 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer, false)\nval parser: XmlResourceParser = resources.getLayout(R.layout.layout_view)\n//这两个重载方法不常用\nval view3 = layoutInflater3.inflate(parser, binding.clContainer)\nval view4 = layoutInflater3.inflate(parser, binding.clContainer, false)\nbinding.clContainer.addView(view1_1)\n```\n\n无论是 Activity 中 setContentView 加载内容还是 DecorView 加载屏幕根视图都是通过 LayoutInflater 加载。\n\ninflate 方法，详细的加载过程会单独整理一篇文章\n\n```java\npublic View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n    synchronized (mConstructorArgs) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, \"inflate\");\n        final Context inflaterContext = mContext;\n        final AttributeSet attrs = Xml.asAttributeSet(parser);\n        Context lastContext = (Context) mConstructorArgs[0];\n        mConstructorArgs[0] = inflaterContext;\n        View result = root;\n        try {\n            advanceToRootNode(parser);\n            final String name = parser.getName();\n            if (TAG_MERGE.equals(name)) {\n                if (root == null || !attachToRoot) {\n                    throw new InflateException(\"<merge /> can be used only with a valid \"+ \"ViewGroup root and attachToRoot=true\");\n                }\n\t\t\t\t\t\t\t\t//merge 根视图单独处理\n                rInflate(parser, root, inflaterContext, attrs, false);\n            } else {\n                //Temp 是在 xml 中找到的根视图\n                final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                ViewGroup.LayoutParams params = null;\n\n                if (root != null) {\n                  \n                    // 创建与根匹配的布局参数（如果提供）\n                    params = root.generateLayoutParams(attrs);\n                    if (!attachToRoot) {\n                        // 如果我们不附加，请为 temp 设置根布局的布局参数\n                        temp.setLayoutParams(params);\n                    }\n                }\n                // 将所有处于临时状态的孩子都根据其上下文进行布局填充。\n                rInflateChildren(parser, temp, attrs, true);\n                // 将所有视图添加到 root\n                if (root != null && attachToRoot) {\n                    root.addView(temp, params);\n                }\n                // 返回传入的 root 还是在 xml 中找到的顶视图。\n                if (root == null || !attachToRoot) {\n                    result = temp;\n                }\n            }\n        } \n        return result;\n    }\n}\n```\n\n\n\n**LayoutInflater 参数说明**\n\n`layoutResID：`代表所要加载的布局资源id，\n\n`root：`是ViewGroup类型，这个参数需要与第3个参数配合使用，\n\n`attachToRoot：`如果为`true`就把布局添加到 `root` 中；若为`false`则只采用`ViewGroup`的`LayoutParams`作为测量的依据却不直接添加到`ViewGroup`中。\n\n`parser：`包含布局层次结构描述的 XML dom 节点。\n\n**LayoutInflater.Factory 接口的扩展功能**\n\n`LayoutInflater`设计了一个`LayoutInflater.Factory`接口，该接口设计得非常巧妙：在`xml`解析过程中，开发者可以通过配置该接口对`View`的创建过程进行拦截：**通过new的方式创建控件以避免大量地使用反射**,`Factory`接口的意义是在`xml`解析过程中，开发者可以通过配置该接口对`View`的创建过程进行拦截\n\n#### LayoutInflater 总结\n\n获取 LayoutInflater实例最终都会走到 ContextThemeWrapper 类中 getSystemService 构建一个局部单例的 **PhoneLayoutInflater** 实例。\n\nLayoutInflater 布局填充有四个重载方法，最终都会调用到同一个方法，再根据传递的参数做不同的加载处理\n\n\n\n### 4.2 ActivityMainBinding 类的绑定过程\n\n#### inflate 过程\n\nView 类中通过调用apt 自动生成的绑定类的inflate方法或者 bind 方法获取绑定类\n\n```kotlin\n//CustomView\nval layoutInflater: LayoutInflater = LayoutInflater.from(context)\nval binding = LayoutViewBinding.inflate(layoutInflater, this, true)\n//SecondFragment\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedIS: Bundle?): View {\n    _binding = FragmentSecondBinding.inflate(inflater, container, false)\n    return binding.root\n}\n//include+merge 只能手动调用绑定类的bind方法\nval layoutInfoMergeBinding = LayoutInfoMergeBinding.bind(binding.root)\n```\n\n绑定类的 inflate 方法，通过传入的 LayoutInflater 将 layout 填充为 View\n\n```kotlin\n//class FragmentSecondBinding implements ViewBinding\n@NonNull\npublic static FragmentSecondBinding inflate(@NonNull LayoutInflater inflater,\n    @Nullable ViewGroup parent, boolean attachToParent) {\n  View root = inflater.inflate(R.layout.fragment_second, parent, false);\n  //这里的 attachToParent 参数为 true 时不知为何不传入 LayoutInflater 来 addView 而是自己单独做了判断\n  if (attachToParent) {\n    parent.addView(root);\n  }\n  return bind(root);\n}\n```\n\n#### bind 过程\n\n从 inflate 过程填充的视图中(或者是从外部传入的 View)实例化所有控件并构建绑定类\n\n```kotlin\n  @NonNull\n  public static FragmentSecondBinding bind(@NonNull View rootView) {\n    //此方法的主体是以您不会编写的方式生成的。这样做是为了优化已编译的字节码的大小和性能。\n    int id;\n    missingId: {\n      //根布局中的普通控件\n      id = R.id.button_second;\n      Button buttonSecond = ViewBindings.findChildViewById(rootView, id);\n      if (buttonSecond == null) {\n        break missingId;\n      }\n      //根布局中的 include 标签\n      id = R.id.include_layout;\n      View includeLayout = ViewBindings.findChildViewById(rootView, id);\n      if (includeLayout == null) {\n        break missingId;\n      }\n      LayoutInfoBinding binding_includeLayout = LayoutInfoBinding.bind(includeLayout);\n\t\t\t//ViewStub标签\n      id = R.id.layout_view_stub;\n      ViewStub layoutViewStub = ViewBindings.findChildViewById(rootView, id);\n      if (layoutViewStub == null) {\n        break missingId;\n      }\n\t\t\t//自定义 View\n      id = R.id.name;\n      CustomView name = ViewBindings.findChildViewById(rootView, id);\n      if (name == null) {\n        break missingId;\n      }\n\n \t\t\t//include+merge 没有生成对应的类型，只能手动调用绑定类的bind方法\n\n      //构建绑定类，并将所有控件赋值给类属性\n      return new FragmentSecondBinding((ConstraintLayout) rootView, buttonSecond, flSecond,\n          binding_includeLayout, layoutViewStub, llInfo, name, textviewSecond);\n    }\n    // 如果有任何一个控件在 findChildViewById 过程中没有被找到就会抛NPE异常\n    String missingId = rootView.getResources().getResourceName(id);\n    throw new NullPointerException(\"Missing required view with ID: \".concat(missingId));\n  }\n}\n```\n\n遍历根视图匹配布局文件中的id并通过findViewById方法返回View实例\n\n```kotlin\n//ViewBindings\n/**\n Like `findViewById` but skips the view itself.\n */\n@Nullable\npublic static <T extends View> T findChildViewById(View rootView, @IdRes int id) {\n    if (!(rootView instanceof ViewGroup)) {\n        return null;\n    }\n    final ViewGroup rootViewGroup = (ViewGroup) rootView;\n    final int childCount = rootViewGroup.getChildCount();\n    for (int i = 0; i < childCount; i++) {\n        final T view = rootViewGroup.getChildAt(i).findViewById(id);\n        if (view != null) {\n            return view;\n        }\n    }\n    return null;\n}\n```\n\n\n\n#### 绑定过程总结\n\nDataBinding 借助 AGP 会为所有布局文件自动生成绑定类\n\n绑定类的 inflate 方法通过传入的布局填充器 LayoutInflater 以及自动收集的根布局 id 加载出根布局 rootView 然后传给 bind 方法实例化控件\n\n绑定类的 bind 方法通过传入的根布局以及自动收集的控件 id 实例化所有控件 并构建绑定类\n\n### 4.3 ActivityMainBinding 类的生成过程\n\n[参考：ViewBinding 的本质](https://juejin.cn/post/6844904106268557326)\n\n[DataBinding Compiler Common](https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common)\n\n依赖源码方便查看\n\n```groovy\n//todo 依赖 databinding-compiler 方便查看 ViewBinding 类的生成过程\n// https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common\nimplementation group: 'androidx.databinding', name: 'databinding-compiler-common', version: '7.0.1'\n// https://mvnrepository.com/artifact/com.android.tools.build/gradle\nimplementation group: 'com.android.tools.build', name: 'gradle', version: '7.0.1'\n```\n\nViewBinding 是属于 dataBinding 库里面的一个小功能,对于解析布局文件生成绑定类的逻辑是通用的，\n\n#### 阶段一：解析xml布局文件\n\n**LayoutXmlProcessor**：处理布局 XML，剥离绑定属性和元素，并将信息写入带注解的类文件以供注释处理器使用\n\n**processResources**：假装这个方法就是布局文件改动后调用的入口方法（应该是由AGP 触发，暂时未找到）\n\n```java\n\nandroid.databinding.tool.LayoutXmlProcessor\n  \npublic boolean processResources(ResourceInput input, boolean isViewBindingEnabled, boolean isDataBindingEnabled)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n    ProcessFileCallback callback = new ProcessFileCallback() {\n    //省略回调代码\n    }\n    //布局文件的改动输入源支持增量构建\n    if (input.isIncremental()) {\n        processIncrementalInputFiles(input, callback);\n    } else {\n        processAllInputFiles(input, callback);\n    }\n    return true;\n}\n```\n\nprocessIncrementalInputFiles 处理增量输入（Added、Removed、Changed）\n\nprocessAllInputFiles 处理全部输入\n\n```java\n//遍历文件\nfor (File firstLevel : input.getRootInputFolder().listFiles())\n//处理 layout_xx 目录下面的 xxx.xml 文件\nif (LAYOUT_FOLDER_FILTER.accept(firstLevel, firstLevel.getName())) {\n    callback.processLayoutFolder(firstLevel);\n    //noinspection ConstantConditions\n    for (File xmlFile : firstLevel.listFiles(XML_FILE_FILTER)) {\n        callback.processLayoutFile(xmlFile);\n    }\n}\n```\n\nProcessFileCallback 扫描文件后的回调\n\n```java\npublic void processLayoutFile(File file)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n          //处理单个文件，\n    processSingleFile(RelativizableFile.fromAbsoluteFile(file, null),\n            convertToOutFile(file), isViewBindingEnabled, isDataBindingEnabled);\n}\n```\n\nprocessSingleFile \n\n```java\npublic boolean processSingleFile(@NonNull RelativizableFile input, @NonNull File output,\n        boolean isViewBindingEnabled, boolean isDataBindingEnabled)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n          //解析xml文件 封账布局文件扫描类\n    final ResourceBundle.LayoutFileBundle bindingLayout = LayoutFileParser\n            .parseXml(input, output, mResourceBundle.getAppPackage(), mOriginalFileLookup,\n                    isViewBindingEnabled, isDataBindingEnabled);\n    if (bindingLayout == null\n            || (bindingLayout.isBindingData() && bindingLayout.isEmpty())) {\n        return false;\n    }\n          //添加到map缓存起来\n    mResourceBundle.addLayoutBundle(bindingLayout, true);\n    return true;\n}\n```\n\n**LayoutFileParser**：获取 XML 文件列表并创建可以持久化或转换为 LayoutBinder 的ResourceBundle列表\n\nandroid.databinding.tool.store public final class LayoutFileParser\n\nparseXml:路径、编码、校验等\n\nparseOriginalXml :将布局文件解析为描述类\n\n```java\nprivate static ResourceBundle.LayoutFileBundle parseOriginalXml(\n        @NonNull final RelativizableFile originalFile, @NonNull final String pkg,\n        @NonNull final String encoding, boolean isViewBindingEnabled,\n        boolean isDataBindingEnabled)\n        throws IOException {}\n\n//layout 标签判断databinding\nXMLParser.ElementContext root = expr.element();\nboolean isBindingData = \"layout\".equals(root.elmName.getText());\n//dataBinding\nif (isBindingData) {\n    if (!isDataBindingEnabled) {\n        L.e(ErrorMessages.FOUND_LAYOUT_BUT_NOT_ENABLED);\n        return null;\n    }\n    data = getDataNode(root);\n    rootView = getViewNode(original, root);\n} else if (isViewBindingEnabled) {\n  //viewBindingIgnore 根布局添加这个属性为true可以跳过生成绑定类的过程\n    if (\"true\".equalsIgnoreCase(attributeMap(root).get(\"tools:viewBindingIgnore\"))) {\n        L.d(\"Ignoring %s for view binding\", originalFile);\n        return null;\n    }\n    data = null;\n    rootView = root;\n} else {\n    return null;\n}\n\n//dataBinding <include> 元素不支持作为 <merge> 元素的直接子元素\nboolean isMerge = \"merge\".equals(rootView.elmName.getText());\nif (isBindingData && isMerge && !filter(rootView, \"include\").isEmpty()) {\n//public static final String INCLUDE_INSIDE_MERGE = \"<include> elements are not supported as direct children of <merge> elements\";\n    L.e(ErrorMessages.INCLUDE_INSIDE_MERGE);\n    return null;\n}\n\nString rootViewType = getViewName(rootView);\nString rootViewId = attributeMap(rootView).get(\"android:id\");\n//构建布局描述的封装类\nResourceBundle.LayoutFileBundle bundle =\n    new ResourceBundle.LayoutFileBundle(\n        originalFile, xmlNoExtension, original.getParentFile().getName(), pkg,\n        isMerge, isBindingData, rootViewType, rootViewId);\nfinal String newTag = original.getParentFile().getName() + '/' + xmlNoExtension;\n//data 数据只有 databinding 才会有的元素，viewBinding 是不会去解析的\nparseData(original, data, bundle);\n//解析表达式，这里面会循环遍历元素，解析 view 的 id、tag、include、fragment 等等 xml 相关的元素，并且还有 databinding 相关的 @={ 的表达式，最后将结果缓存起来\nparseExpressions(newTag, rootView, isMerge, bundle);\n```\n\n#### 阶段二：输出描述文件\n\n**LayoutXmlProcessor**\n\n**writeLayoutInfoFiles**：这个方法的执行点可以在AGP里面找到，task 为：**com.android.build.gradle.tasks.MergeResources**\n\n**MergeResources**\n\n```java\n@Override\npublic void doTaskAction(@NonNull InputChanges changedInputs) {\n    ...\n    SingleFileProcessor dataBindingLayoutProcessor = maybeCreateLayoutProcessor();\n    if (dataBindingLayoutProcessor != null) {\n        dataBindingLayoutProcessor.end();\n    }\n    ...\n}\n```\n\n```java\n//maybeCreateLayoutProcessor\nreturn new SingleFileProcessor() {\n\n    private LayoutXmlProcessor getProcessor() {\n        return processor;\n    }\n\n    @Override\n    public boolean processSingleFile(\n            @NonNull File inputFile,\n            @NonNull File outputFile,\n            @Nullable Boolean inputFileIsFromDependency)\n            throws Exception {\n        return getProcessor()\n               .processSingleFile(\n                        normalizedInputFile,\n                        outputFile,\n                        getViewBindingEnabled().get(),\n                        getDataBindingEnabled().get());\n    }\n    @Override\n    public void end() throws JAXBException {\n        getProcessor().writeLayoutInfoFiles(getDataBindingLayoutInfoOutFolder().get().getAsFile());\n    }\n};\n\n//输出路径可以从这里查看\nartifacts.setInitialProvider(taskProvider, MergeResources::getDataBindingLayoutInfoOutFolder)\n        .withName(\"out\")\n        .on( mergeType == MERGE? DATA_BINDING_LAYOUT_INFO_TYPE_MERGE.INSTANCE\n                        : DATA_BINDING_LAYOUT_INFO_TYPE_PACKAGE.INSTANCE);\n```\n\n**writeLayoutInfoFiles**\n\n```java\npublic void writeLayoutInfoFiles(File xmlOutDir, JavaFileWriter writer) throws JAXBException {\n    //遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径\n    for (ResourceBundle.LayoutFileBundle layout : mResourceBundle\n            .getAllLayoutFileBundlesInSource()) {\n        writeXmlFile(writer, xmlOutDir, layout);\n    }\n}\n```\n\nwriteXmlFile\n\n```kotlin\nprivate void writeXmlFile(JavaFileWriter writer, File xmlOutDir,\n        ResourceBundle.LayoutFileBundle layout)\n        throws JAXBException {\n    String filename = generateExportFileName(layout);//  fileName + '-' + dirName + \".xml\";\n          //遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径\n    writer.writeToFile(new File(xmlOutDir, filename), layout.toXML());\n}\n```\n\n描述文件的生成路径为：app/build/intermediates/data_binding_layout_info_type_merge/debug/out\n\n```xml\n//fragment_second-layout.xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<Layout directory=\"layout\" filePath=\"app/src/main/res/layout/fragment_second.xml\"\n    isBindingData=\"false\" isMerge=\"false\" layout=\"fragment_second\"\n    modulePackage=\"com.jay.vbhelper\" rootNodeType=\"androidx.constraintlayout.widget.ConstraintLayout\">\n    <Targets>\n        <Target tag=\"layout/fragment_second_0\"\n            view=\"androidx.constraintlayout.widget.ConstraintLayout\">\n            <Expressions />\n            <location endLine=\"78\" endOffset=\"51\" startLine=\"1\" startOffset=\"0\" />\n        </Target>\n        <Target id=\"@+id/ll_info\" tag=\"binding_1\"\n            view=\"androidx.appcompat.widget.LinearLayoutCompat\">\n            <Expressions />\n            <location endLine=\"51\" endOffset=\"50\" startLine=\"9\" startOffset=\"4\" />\n        </Target>\n        <Target id=\"@+id/include_layout\" include=\"layout_info\" tag=\"binding_1\">\n            <Expressions />\n            <location endLine=\"31\" endOffset=\"42\" startLine=\"29\" startOffset=\"8\" />\n        </Target>\n        <Target include=\"layout_info_merge\" tag=\"binding_1\">\n            <Expressions />\n            <location endLine=\"35\" endOffset=\"53\" startLine=\"35\" startOffset=\"8\" />\n        </Target>\n \n    </Targets>\n</Layout>\n```\n\n#### 阶段三：输出绑定类\n\nAGP Task DataBindingGenBaseClassesTask 触发\n\ncom.android.build.gradle.internal.tasks.databinding.DataBindingGenBaseClassesTask\n\nDataBindingGenBaseClassesTask\n\n```kotlin\n@TaskAction\nfun writeBaseClasses(inputs: IncrementalTaskInputs) {\n    // TODO extend NewIncrementalTask when moved to new API so that we can remove the manual call to recordTaskAction\n    recordTaskAction(analyticsService.get()) {\n        // TODO figure out why worker execution makes the task flake.\n        // Some files cannot be accessed even though they show up when directory listing is\n        // invoked.\n        // b/69652332\n        val args = buildInputArgs(inputs)\n        CodeGenerator(\n            args,\n            sourceOutFolder.get().asFile,\n            Logger.getLogger(DataBindingGenBaseClassesTask::class.java),\n            encodeErrors,\n            collectResources()).run()//触发生成流程\n    }\n}\n\n//绑定类生成器\nclass CodeGenerator @Inject constructor(\n    val args: LayoutInfoInput.Args,\n    private val sourceOutFolder: File,\n    private val logger: Logger,\n    private val encodeErrors: Boolean,\n    private val symbolTables: List<SymbolTable>? = null\n) : Runnable, Serializable {\n    override fun run() {\n        try {\n            initLogger()\n            BaseDataBinder(LayoutInfoInput(args), if (symbolTables != null) this::getRPackage else null)\n          //生成逻辑\n                .generateAll(DataBindingBuilder.GradleFileWriter(sourceOutFolder.absolutePath))\n        } finally {\n            clearLogger()\n        }\n    }\n    ...\n}\n\n//sourceOutFolder路径信息\ncreationConfig.artifacts.setInitialProvider(\n    taskProvider,\n    DataBindingGenBaseClassesTask::sourceOutFolder\n).withName(\"out\").on(InternalArtifactType.DATA_BINDING_BASE_CLASS_SOURCE_OUT)\n```\n\n\n\nBaseDataBinder\n\n```java\n@Suppress(\"unused\")// used by tools\nclass BaseDataBinder(val input : LayoutInfoInput, val getRPackage: ((String, String) -> (String))?) {\n    private val resourceBundle : ResourceBundle = ResourceBundle(\n            input.packageName, input.args.useAndroidX)\n      //\n    init {\n        input.filesToConsider .forEach {\n                    it.inputStream().use {\n                     // 又将上面收集的 layout，将 xml 转成 LayoutFileBundle\n                        val bundle = LayoutFileBundle.fromXML(it)\n                        resourceBundle.addLayoutBundle(bundle, true)\n                    }\n                }\n        resourceBundle.addDependencyLayouts(input.existingBindingClasses)\n        resourceBundle.validateAndRegisterErrors()\n    }\n  \n  \n  \n    @Suppress(\"unused\")// used by android gradle plugin\n    fun generateAll(writer : JavaFileWriter) {\n    \t\t// 拿到所有的 LayoutFileBundle，并根据文件名进行分组排序\n        val layoutBindings = resourceBundle.allLayoutFileBundlesInSource\n            .groupBy(LayoutFileBundle::getFileName).toSortedMap()\n\n        layoutBindings.forEach { layoutName, variations ->\n            // 将 LayoutFileBundle 信息包装成 BaseLayoutModel\n            val layoutModel = BaseLayoutModel(variations, getRPackage)\n            val javaFile: JavaFile\n            val classInfo: GenClassInfoLog.GenClass\n            if (variations.first().isBindingData) {\n                val binderWriter = BaseLayoutBinderWriter(layoutModel, libTypes)\n                javaFile = binderWriter.write()\n                classInfo = binderWriter.generateClassInfo()\n            } else {\n              //不是DataBinding，按照 ViewBinding 处理\n              //toViewBinder 是 BaseLayoutModel 的拓展函数，他会将 LayoutFileBundle 包装成 ViewBinder 类返回 \n                val viewBinder = layoutModel.toViewBinder()\n              //toJavaFile 是 ViewBinder 的拓展函数，通过Javapoet生成Java文件\n                javaFile = viewBinder.toJavaFile(useLegacyAnnotations = !useAndroidX)\n                classInfo = viewBinder.generatedClassInfo()\n            }\n            writer.writeToFile(javaFile)\n            myLog.classInfoLog.addMapping(layoutName, classInfo)\n            variations.forEach {\n                it.bindingTargetBundles.forEach { bundle ->\n                    if (bundle.isBinder) {\n                        myLog.addDependency(layoutName, bundle.includedLayout)\n                    }\n                }\n            }\n        }\n        input.saveLog(myLog)\n        // data binding will eat some errors to be able to report them later on. This is a good\n        // time to report them after the processing is done.\n        Scope.assertNoError()\n    }\n}\n```\n\n通过Javapoet 生成绑定类\n\n```kotlin\n\nfun ViewBinder.toJavaFile(useLegacyAnnotations: Boolean = false) =\n    JavaFileGenerator(this, useLegacyAnnotations).create()\n\nfun create() = javaFile(binder.generatedTypeName.packageName(), typeSpec()) {\n    addFileComment(\"Generated by view binder compiler. Do not edit!\")\n}\n\nprivate fun typeSpec() = classSpec(binder.generatedTypeName) {\n  \n    addModifiers(PUBLIC, FINAL)\n    addSuperinterface(ClassName.get(viewBindingPackage, \"ViewBinding\"))\n\n    // TODO elide the separate root field if the root tag has an ID (and isn't a binder)\n    addField(rootViewField())\n    addFields(bindingFields())\n\n    addMethod(constructor())\n    addMethod(rootViewGetter())\n\t\t//如果跟标签是 merge  是生成的两参数的infate 参数\n    if (binder.rootNode is RootNode.Merge) {\n        addMethod(mergeInflate())\n    } else {\n      //其它情况都是同时生成一参数和三参数的inflate方法\n        addMethod(oneParamInflate())\n        addMethod(threeParamInflate())\n    }\n\n    addMethod(bind())\n}\n```\n\n#### 生成过程总结\n\n实时更新生成：布局文件改动(新加/更新/删除)后AS或AGP或立即更新绑定类，这个过程还没找到对应的源码\n\n编译更新生成：AGP 不同的任务触发\n\n- 解析xml布局文件：LayoutXmlProcessor#processResources 方法应该是改动布局文件的输入口，暂时没找到对应的Task，收集过程支持增量更新。处理 layout_xx 目录下面的 xxx.xml 文件，解析xml文件的过程区分 DataBinding 和 ViewBinding ，最后的产物是 ResourceBundle.LayoutFileBundle 以及 HashMap<String, List<LayoutFileBundle>> mLayoutBundles\n- 输出描述文件：有AGP中的 **MergeResources**Task 触发 , 遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径, 这个xml文件中描述了布局的 文件路径、包名、布局名、控件id、控件行号等信息\n- 输出绑定类：AGP **DataBindingGenBaseClassesTask**触发，将上个过程生成的布局描述xml文件再解析成 LayoutFileBundle 类信息，然后再次包装这些信息，最后通过Javapoet 生成绑定类\n\n\n\n#### TODO \n\n- 布局文件更新后触发扫描和处理布局文件的操作也就是调用 processResources 方法的地方\n  - 猜测AGP 和 AS 都有参与\n\n- 为什么点击 ActivityMainBinding 会跳转到对应的布局文件\n  - 这个猜测应该和编译相关，生成词法分析器和解析器代码\n\n- 为什么添加了新的布局文件还没有编译就获取到绑定类，但是在data_binding_base_class_source_out路径下没有这个绑定类只有编译才会看到\n\n  - 应该也有AS的份\n\n  - [AS 中关于 DataBind 的一个库：Generate lexer and parser code](https://android.googlesource.com/platform/tools/adt/idea/+/refs/heads/mirror-goog-studio-master-dev/android-lang-databinding/)\n\n    \n\n","slug":"jetpack_viewbinding","published":1,"updated":"2021-09-08T10:21:58.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cktbcrlsy0000fxxf94pwenjm","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Jetpack-ViewBinding-详解\"><a href=\"#Jetpack-ViewBinding-详解\" class=\"headerlink\" title=\"Jetpack | ViewBinding 详解\"></a>Jetpack | ViewBinding 详解</h1><p>通过 <strong>ViewBinding(视图绑定)</strong> 功能，我们可以更轻松地编写与布局文件交互的代码。在模块中启用视图绑定之后，AGP 会为该模块中的每个 XML 布局文件生成一个绑定类。该绑定类的实例中会直接引用那些在布局中声明了资源 id 的控件。这样一来就减少了很多像 <code>findViewById</code> 这种操作，同时也为控件的安全性保驾护航。</p>\n<p><strong>文章核心点：</strong></p>\n<ul>\n<li>VB 集成与一般使用方式，包括：Activity 、Fragment、Adapter、include、merge、ViewStub</li>\n<li>KT 属性代理与泛型实化类型参数 <code>reified</code> 的介绍</li>\n<li>通过 KT 属性代理简化 VB 创建流程，并封装了一个库 VBHelper</li>\n<li>LayoutInflater 原理与参数解析</li>\n<li>XXXBinding 类的绑定过程</li>\n<li>XXXBinding 类的生成过程</li>\n</ul>\n<p><strong><a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\">VBHelper</a></strong>：是我写这篇文章提取的一个库，通过属性代理简化了VB的使用，有想了解的可以提提意见</p>\n<ol>\n<li>在 Activity 中创建 ViewBinding 绑定类</li>\n</ol>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 反射绑定类的 inflate 方法</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> ActivityMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 传递 inflate 方法引用</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> ActivityMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span>ActivityMainBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"2\">\n<li>在 Fragment 中创建 ViewBinding 绑定类</li>\n</ol>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 反射绑定类的 inflate 方法</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> FragmentMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 传递 inflate 方法引用</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> FragmentMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span>FragmentMainBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"3\">\n<li>在 View 中创建 ViewBinding 绑定类</li>\n</ol>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> MyViewBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 传递 inflate 三参数方法引用</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> MyViewBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span>MyViewBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span></code></pre>\n<ol start=\"4\">\n<li>在 Adapter 中创建包含了绑定类的 BindingViewHolder</li>\n</ol>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法</span>\n<span class=\"token keyword\">val</span> holder<span class=\"token operator\">:</span> BindingViewHolder<span class=\"token operator\">&lt;</span>LayoutItemTextBinding<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> <span class=\"token function\">vh</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + 传递绑定类的 inflate 三参数方法引用</span>\n<span class=\"token keyword\">val</span> holder<span class=\"token operator\">:</span> BindingViewHolder<span class=\"token operator\">&lt;</span>LayoutItemTextBinding<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> <span class=\"token function\">vh</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> LayoutItemTextBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"1-VB-概述\"><a href=\"#1-VB-概述\" class=\"headerlink\" title=\"1.VB 概述\"></a>1.VB 概述</h2><ul>\n<li><p>视图绑定在 Android Studio 3.6 Canary 11 及更高版本中可用。</p>\n</li>\n<li><p>开启自动生成绑定类：模块 <code>build.gradle</code> 文件中的 <code>android</code> 闭包下，两种方式</p>\n<ul>\n<li><code>viewBinding {enabled = true}</code> 默认值为false, Android Studio 3.6 Canary 11 及更高版本中可用。</li>\n<li><code>buildFeatures {viewBinding = true}</code> 默认值为false,  Android Studio 4.0 及更高版本中可用</li>\n</ul>\n</li>\n<li><p>忽略自动生成绑定类：请将 <code>tools:viewBindingIgnore=\"true\"</code> 属性添加到相应布局文件的根视图中</p>\n</li>\n<li><p>生成绑定类的名称：将 XML 文件的名称转换为驼峰式大小写，并在末尾添加“Binding”一词。<br>LayoutInflater.Factory</p>\n<ul>\n<li>result_profile.xml ====&gt;ResultProfileBinding</li>\n<li>每个绑定类还包含一个 <code>getRoot()</code> 方法，用于为相应布局文件的根视图提供直接引用。</li>\n</ul>\n</li>\n<li><p>与使用 findViewById 相比</p>\n<ul>\n<li><strong>Null 安全</strong>：绑定类的创建是通过解析布局文件在编译时生成，布局文件添加了id的控件才会生成对应的引用，因此不会发生绑定类中存在而布局中没有对应控件的情况，如果布局引用了错误的类型也会在编译时暴露错误。</li>\n<li><strong>类型安全</strong>：布局中声明的控件是确定类型的。这意味着不存在发生类转换异常的风险。</li>\n</ul>\n</li>\n<li><p>与使用 DataBinding 对比</p>\n<ul>\n<li><p>视图绑定和<a href=\"https://developer.android.com/topic/libraries/data-binding?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">数据绑定</a>均会生成可用于直接引用视图的绑定类。但是，视图绑定旨在处理更简单的用例。</p>\n</li>\n<li><p><strong>更快的编译速度</strong>：视图绑定不需要处理注解信息，因此编译时间更短。</p>\n</li>\n<li><p><strong>易于使用</strong>：视图绑定不需要在 XML 布局文件中标记，只要在模块中启用视图绑定后，它会自动应用于该模块的所有布局。</p>\n</li>\n<li><p>如果项目中使用了数据绑定最好在项目中<strong>同时使用视图绑定和数据绑定</strong>。这样可以在需要高级功能的布局中使用数据绑定，而在不需要高级功能的布局中使用视图绑定。如果只是取代 <code>findViewById()</code> 调用，请考虑改用视图绑定。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-VB-一般使用\"><a href=\"#2-VB-一般使用\" class=\"headerlink\" title=\"2. VB 一般使用\"></a>2. VB 一般使用</h2><h3 id=\"2-1-Activity\"><a href=\"#2-1-Activity\" class=\"headerlink\" title=\"2.1 Activity\"></a>2.1 Activity</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> binding<span class=\"token operator\">:</span> ActivityMainBinding\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n    binding <span class=\"token operator\">=</span> ActivityMainBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">setSupportActionBar</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>toolbar<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-2-Fragment\"><a href=\"#2-2-Fragment\" class=\"headerlink\" title=\"2.2 Fragment\"></a>2.2 Fragment</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _binding<span class=\"token operator\">:</span> FragmentFirstBinding<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token comment\" spellcheck=\"true\">// This property is only valid between onCreateView and onDestroyView.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _binding<span class=\"token operator\">!!</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span>inflater<span class=\"token operator\">:</span> LayoutInflater<span class=\"token punctuation\">,</span> container<span class=\"token operator\">:</span> ViewGroup<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> View <span class=\"token punctuation\">{</span>\n    firstViewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>FirstViewModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n    _binding <span class=\"token operator\">=</span> FragmentFirstBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>inflater<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    binding<span class=\"token punctuation\">.</span>rvList<span class=\"token punctuation\">.</span>layoutManager <span class=\"token operator\">=</span> <span class=\"token function\">LinearLayoutManager</span><span class=\"token punctuation\">(</span><span class=\"token function\">requireContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> binding<span class=\"token punctuation\">.</span>root\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-3-Adapter\"><a href=\"#2-3-Adapter\" class=\"headerlink\" title=\"2.3 Adapter\"></a>2.3 Adapter</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateViewHolder</span><span class=\"token punctuation\">(</span>parent<span class=\"token operator\">:</span> ViewGroup<span class=\"token punctuation\">,</span> viewType<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> TextHolder <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> itemBinding <span class=\"token operator\">=</span> LayoutItemTextBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">//绑定类交给Holder</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">TextHolder</span><span class=\"token punctuation\">(</span>itemBinding<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onBindViewHolder</span><span class=\"token punctuation\">(</span>holder<span class=\"token operator\">:</span> TextHolder<span class=\"token punctuation\">,</span> position<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> item<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>position<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\" spellcheck=\"true\">//数据交给Holder</span>\n    holder<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">TextHolder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> itemBinding<span class=\"token operator\">:</span> LayoutItemTextBinding<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> RecyclerView<span class=\"token punctuation\">.</span><span class=\"token function\">ViewHolder</span><span class=\"token punctuation\">(</span>itemBinding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        itemBinding<span class=\"token punctuation\">.</span>tvName<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2-4-include\"><a href=\"#2-4-include\" class=\"headerlink\" title=\"2.4 include\"></a>2.4 include</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\">binding<span class=\"token punctuation\">.</span>includeLayout<span class=\"token punctuation\">.</span>tvInfoInclude<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"tvInfoInclude:<span class=\"token interpolation variable\">$item</span>\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// todo  include 方式有时候无法识别到真实的绑定类类型只能识别它是个View类型但是编译不会报错, 这种情况清理缓存可能会好 ，或者也可以强制类型转换或者自己bind</span>\n<span class=\"token keyword\">val</span> tvInfoInclude<span class=\"token operator\">:</span> LayoutInfoBinding <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>includeLayout <span class=\"token keyword\">as</span> LayoutInfoBinding\n<span class=\"token keyword\">val</span> tvInfoInclude <span class=\"token operator\">=</span> LayoutInfoBinding<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\ntvInfoInclude<span class=\"token punctuation\">.</span>tvInfoInclude<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"tvInfoInclude:<span class=\"token interpolation variable\">$item</span>\"</span></code></pre>\n<h3 id=\"2-5-merge\"><a href=\"#2-5-merge\" class=\"headerlink\" title=\"2.5 merge\"></a>2.5 merge</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//include+merge 只能手动调用绑定类的bind方法</span>\n<span class=\"token keyword\">val</span> layoutInfoMergeBinding <span class=\"token operator\">=</span> LayoutInfoMergeBinding<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> tvInfoMerge <span class=\"token operator\">=</span> layoutInfoMergeBinding<span class=\"token punctuation\">.</span>tvInfoMerge\ntvInfoMerge<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"tvInfoMerge:<span class=\"token interpolation variable\">$item</span>\"</span></code></pre>\n<h3 id=\"2-6-ViewStub\"><a href=\"#2-6-ViewStub\" class=\"headerlink\" title=\"2.6 ViewStub\"></a>2.6 ViewStub</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//ViewStub 只能手动调用绑定类的bind方法</span>\nbinding<span class=\"token punctuation\">.</span>layoutViewStub<span class=\"token punctuation\">.</span><span class=\"token function\">setOnInflateListener</span> <span class=\"token punctuation\">{</span> _<span class=\"token punctuation\">,</span> inflateId <span class=\"token operator\">-></span>\n    <span class=\"token keyword\">val</span> layoutInfoViewStubBinding <span class=\"token operator\">=</span> LayoutInfoViewStubBinding<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>inflateId<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> tvInfoViewStub <span class=\"token operator\">=</span> layoutInfoViewStubBinding<span class=\"token punctuation\">.</span>tvInfoViewStub\n    tvInfoViewStub<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"tvInfoViewStub:<span class=\"token interpolation variable\">$item</span>\"</span>\n<span class=\"token punctuation\">}</span>\nbinding<span class=\"token punctuation\">.</span>layoutViewStub<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>详细的测试代码参考：<a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\"><strong>Github | VBHelper</strong></a></p>\n<h2 id=\"3-VB-与-Kotlin-by\"><a href=\"#3-VB-与-Kotlin-by\" class=\"headerlink\" title=\"3. VB 与 Kotlin by\"></a>3. VB 与 Kotlin by</h2><p>采用 Kotlin 属性代理简化 VB 使用的三方库</p>\n<ul>\n<li><strong><a href=\"https://github.com/androidbroadcast/ViewBindingPropertyDelegate\" target=\"_blank\" rel=\"noopener\">ViewBindingPropertyDelegate</a></strong></li>\n<li><strong><a href=\"https://github.com/DylanCaiCoding/ViewBindingKTX\" target=\"_blank\" rel=\"noopener\">ViewBindingKTX</a></strong></li>\n<li><strong><a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\">VBHelper</a></strong>：这个是我写这篇文章提取的一个库，借鉴了上面两个的实现，精简了一些代码</li>\n</ul>\n<h3 id=\"3-1-KT-属性代理：by-lazy\"><a href=\"#3-1-KT-属性代理：by-lazy\" class=\"headerlink\" title=\"3.1 KT 属性代理：by lazy\"></a>3.1 KT 属性代理：<code>by</code> <code>lazy</code></h3><ul>\n<li><p>by关键字实际上就是一个属性代理运算符重载的符号，任何一个具备属性代理规则的类，都可以使用by关键字对属性进行代理。</p>\n</li>\n<li><p><code>by</code>关键字后面带有一个代理对象，这个代理类不一定要实现特定的接口，但是需要包含下面这两个方法的签名（val 只需要 getValue ），它就能作为一个代理属性来使用。</p>\n</li>\n<li><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//这个是扩展的实现方式，lazy就是采用的这种</span>\noperator <span class=\"token keyword\">fun</span> MyDelegate<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value\n\n<span class=\"token keyword\">class</span> MyDelegate <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"YYY\"</span>\n    <span class=\"token comment\" spellcheck=\"true\">//todo 代理类里面必须提供 getValue 方法，或者扩展这个方法也可</span>\n    operator <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n    operator <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> s\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>lazy  是Kotlin 内部对对属性代理的一个最佳实践，lazy 返回一个实现了 Lazy 接口的代理类，默认是 <code>SynchronizedLazyImpl</code>，</p>\n</li>\n<li><p>Lazy<t> 有个扩展方法，符合属性代理的规则</t></p>\n</li>\n<li><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> operator <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> value</code></pre>\n</li>\n</ul>\n<h3 id=\"3-2-KT-内联函数-inline-与泛型实化类型参数-reified\"><a href=\"#3-2-KT-内联函数-inline-与泛型实化类型参数-reified\" class=\"headerlink\" title=\"3.2 KT 内联函数 inline 与泛型实化类型参数 reified\"></a>3.2 KT 内联函数 <code>inline</code> 与泛型实化类型参数 <code>reified</code></h3><p><a href=\"https://www.kotlincn.net/docs/reference/inline-functions.html#%E5%85%B7%E4%BD%93%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md\" target=\"_blank\" rel=\"noopener\">reified-type-parameters</a></p>\n<p>Kotlin和Java同样存在泛型类型擦除的问题，但是 Kotlin 通过 inline 内联函数使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为实化，对应需要使用 reified 关键字。</p>\n<ul>\n<li><p>满足实化类型参数函数的必要条件</p>\n<ul>\n<li>必须是 inline 内联函数，使用 inline 关键字修饰</li>\n<li>泛型类定义泛型形参时必须使用 reified 关键字修饰</li>\n</ul>\n</li>\n<li><p>带实化类型参数的函数基本定义</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//类型形参T是泛型函数isInstanceOf的实化类型参数</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T<span class=\"token operator\">></span> <span class=\"token function\">isInstanceOf</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> value <span class=\"token keyword\">is</span> T </code></pre>\n</li>\n</ul>\n<h3 id=\"3-3-通过-lazy-属性代理-inflate方法引用\"><a href=\"#3-3-通过-lazy-属性代理-inflate方法引用\" class=\"headerlink\" title=\"3.3 通过 lazy 属性代理 + inflate方法引用\"></a>3.3 通过 lazy 属性代理 + inflate方法引用</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过 lazy 属性代理 + inflate方法引用</span>\n<span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>VB <span class=\"token operator\">:</span> ViewBinding<span class=\"token operator\">></span> ComponentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">binding1</span><span class=\"token punctuation\">(</span>inflate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>LayoutInflater<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> VB<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    lazy <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-4-通过-lazy-属性代理-反射\"><a href=\"#3-4-通过-lazy-属性代理-反射\" class=\"headerlink\" title=\"3.4 通过 lazy 属性代理 + 反射\"></a>3.4 通过 lazy 属性代理 + 反射</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过 lazy 属性代理 + 反射</span>\n<span class=\"token comment\" spellcheck=\"true\">//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> VB <span class=\"token operator\">:</span> ViewBinding<span class=\"token operator\">></span> ComponentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">binding3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    lazy <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding</span>\n        <span class=\"token keyword\">val</span> viewBinding<span class=\"token operator\">:</span> VB <span class=\"token operator\">=</span> VB<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inflate\"</span><span class=\"token punctuation\">,</span> LayoutInflater<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> layoutInflater<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> VB\n        viewBinding<span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-5-通过自定义属性代理-inflate方法引用\"><a href=\"#3-5-通过自定义属性代理-inflate方法引用\" class=\"headerlink\" title=\"3.5 通过自定义属性代理 + inflate方法引用\"></a>3.5 通过自定义属性代理 + inflate方法引用</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + inflate方法引用</span>\n<span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>VB <span class=\"token operator\">:</span> ViewBinding<span class=\"token operator\">></span> ComponentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">binding2</span><span class=\"token punctuation\">(</span>inflate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>LayoutInflater<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> VB<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    ReadOnlyProperty<span class=\"token operator\">&lt;</span>ComponentActivity<span class=\"token punctuation\">,</span> VB<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> thisRef<span class=\"token punctuation\">,</span> property <span class=\"token operator\">-></span>\n        <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-6-通过自定义属性代理-反射\"><a href=\"#3-6-通过自定义属性代理-反射\" class=\"headerlink\" title=\"3.6 通过自定义属性代理+ 反射\"></a>3.6 通过自定义属性代理+ 反射</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理+ 反射</span>\n<span class=\"token comment\" spellcheck=\"true\">//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> VB <span class=\"token operator\">:</span> ViewBinding<span class=\"token operator\">></span> ComponentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">binding4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    ReadOnlyProperty<span class=\"token operator\">&lt;</span>ComponentActivity<span class=\"token punctuation\">,</span> VB<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> thisRef<span class=\"token punctuation\">,</span> property <span class=\"token operator\">-></span>\n        <span class=\"token comment\" spellcheck=\"true\">//经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding</span>\n        <span class=\"token keyword\">val</span> viewBinding<span class=\"token operator\">:</span> VB <span class=\"token operator\">=</span> VB<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inflate\"</span><span class=\"token punctuation\">,</span> LayoutInflater<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> layoutInflater<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> VB\n        viewBinding<span class=\"token punctuation\">.</span><span class=\"token function\">also</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>四种方式的使用</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//通过 lazy 属性代理 + inflate方法引用</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding1 <span class=\"token keyword\">by</span> <span class=\"token function\">binding1</span><span class=\"token punctuation\">(</span>ActivityMainBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理 + inflate方法引用</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding2 <span class=\"token keyword\">by</span> <span class=\"token function\">binding2</span><span class=\"token punctuation\">(</span>ActivityMainBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过 lazy 属性代理 + 反射</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding3<span class=\"token operator\">:</span> ActivityMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">binding3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过自定义属性代理+ 反射</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding4<span class=\"token operator\">:</span> ActivityMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">binding4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>其它 Fragment、View、Adapter 等绑定类的生成方式可以根据上面的方式灵活调整，也可参考：<a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\"><strong>Github | VBHelper</strong></a></p>\n<p><strong>注意的地方：</strong></p>\n<ul>\n<li>反射的方式我这里都是通过绑定类的 inflate 方法，也可以反射 bind 方法，就是入参不同可以根据具体情况灵活调整。</li>\n<li>merge 标签作为根视图生成的绑定类的inflate 方法只有一个两参数的 其它情况都是一参和三参同时生成，反射时需要兼容一下，VBHelper 没有兼容这一点有需要的可以处理一下，具体做法就是 try-cache 分别处理。</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NonNull</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> LayoutInfoMergeBinding <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LayoutInflater inflater<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@NonNull</span> ViewGroup parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>layout_info_merge<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"4-VB-原理解析\"><a href=\"#4-VB-原理解析\" class=\"headerlink\" title=\"4. VB 原理解析\"></a>4. VB 原理解析</h2><h3 id=\"4-1-LayoutInflater-原理与参数解析\"><a href=\"#4-1-LayoutInflater-原理与参数解析\" class=\"headerlink\" title=\"4.1 LayoutInflater 原理与参数解析\"></a>4.1 LayoutInflater 原理与参数解析</h3><p><a href=\"https://juejin.cn/post/6844903919286485000\" target=\"_blank\" rel=\"noopener\">参考：反思|Android LayoutInflater机制的设计与实现</a></p>\n<h4 id=\"获取-LayoutInflater-三种方式\"><a href=\"#获取-LayoutInflater-三种方式\" class=\"headerlink\" title=\"获取 LayoutInflater 三种方式\"></a>获取 LayoutInflater 三种方式</h4><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//获取 LayoutInflater</span>\n<span class=\"token comment\" spellcheck=\"true\">//1、通过 LayoutInflater 的静态方法 from 获取，内部调用的是第二种</span>\n<span class=\"token keyword\">val</span> layoutInflater1<span class=\"token operator\">:</span> LayoutInflater <span class=\"token operator\">=</span> LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//2、通过系统服务 getSystemService 方法获取</span>\n<span class=\"token keyword\">val</span> layoutInflater2<span class=\"token operator\">:</span> LayoutInflater <span class=\"token operator\">=</span>\n    <span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>LAYOUT_INFLATER_SERVICE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> LayoutInflater\n<span class=\"token comment\" spellcheck=\"true\">//3、如果是在 Activity 或 Fragment 可直接获取到实例</span>\n<span class=\"token keyword\">val</span> layoutInflater3<span class=\"token operator\">:</span> LayoutInflater <span class=\"token operator\">=</span> layoutInflater <span class=\"token comment\" spellcheck=\"true\">//相当于调用 getLayoutInflater()</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//三种方式在 Activity 范围内是单例</span>\nLog<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"layoutInflater1:<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>layoutInflater1<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\nLog<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"layoutInflater2:<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>layoutInflater2<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\nLog<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"layoutInflater3:<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater1:31503528</span>\n<span class=\"token comment\" spellcheck=\"true\">//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater2:31503528</span>\n<span class=\"token comment\" spellcheck=\"true\">//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater3:31503528</span></code></pre>\n<p>无论哪种方式获取最终都会走到 ContextThemeWrapper 类中 getSystemService</p>\n<h4 id=\"PhoneLayoutInflater-创建流程\"><a href=\"#PhoneLayoutInflater-创建流程\" class=\"headerlink\" title=\"PhoneLayoutInflater 创建流程\"></a>PhoneLayoutInflater 创建流程</h4><p>获取 LayoutInflater 三种方式最终会调到 ContextThemeWrapper#getSystemService</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//class ContextThemeWrapper extends ContextWrapper</span>\n<span class=\"token annotation builtin\">@Override</span>\n<span class=\"token keyword\">public</span> Object <span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LAYOUT_INFLATER_SERVICE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mInflater <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mInflater <span class=\"token operator\">=</span> LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token function\">getBaseContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cloneInContext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> mInflater<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getBaseContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>cloneInContext 是 LayoutInflater 接口的方法，LayoutInflater 唯一实现类是 PhoneLayoutInflater</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//class PhoneLayoutInflater extends LayoutInflater</span>\n<span class=\"token keyword\">public</span> LayoutInflater <span class=\"token function\">cloneInContext</span><span class=\"token punctuation\">(</span>Context newContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> new <span class=\"token function\">PhoneLayoutInflater</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"布局填充流程\"><a href=\"#布局填充流程\" class=\"headerlink\" title=\"布局填充流程\"></a>布局填充流程</h4><p>方法签名</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>public View <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>XmlPullParser parser<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@Nullable</span> ViewGroup root<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span><span class=\"token punctuation\">.</span>public View <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@LayoutRes</span> int resource<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@Nullable</span> ViewGroup root<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span><span class=\"token punctuation\">.</span>public View <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@LayoutRes</span> int resource<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@Nullable</span> ViewGroup root<span class=\"token punctuation\">,</span> boolean attachToRoot<span class=\"token punctuation\">)</span>\n<span class=\"token number\">4</span><span class=\"token punctuation\">.</span>public View <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>XmlPullParser parser<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@Nullable</span> ViewGroup root<span class=\"token punctuation\">,</span> boolean attachToRoot<span class=\"token punctuation\">)</span></code></pre>\n<p>四个 inflate 的重载方法最终都会调用到第四个，下面是四个方法的使用</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//调用 LayoutInflater.inflate 的四个方法重载</span>\n<span class=\"token comment\" spellcheck=\"true\">//如果传入的 root 为 null ，此时会将 Xml 布局生成的根 View 对象直接返回</span>\n<span class=\"token keyword\">val</span> view1_1 <span class=\"token operator\">=</span> layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>layout_view<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//这种方式加载的布局不需要再次addView(),否则：Caused by: java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child's parent first.</span>\n<span class=\"token comment\" spellcheck=\"true\">//如果传入的 root 不为 null 且 attachToRoot 为 true，此时会将 Xml 布局生成的根 View 通过 addView 方法携带布局参数添加到 root 中</span>\n<span class=\"token comment\" spellcheck=\"true\">//如果 root 参数不为空 和 view2_1 一样</span>\n<span class=\"token keyword\">val</span> view1_2 <span class=\"token operator\">=</span> layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>layout_view<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>clContainer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//第一个参数代表所要加载的布局，第二个参数是ViewGroup，这个参数需要与第3个参数配合使用，attachToRoot如果为true就把布局添加到ViewGroup中；若为false则只采用ViewGroup的LayoutParams作为测量的依据却不直接添加到ViewGroup中。</span>\n<span class=\"token keyword\">val</span> view2_1 <span class=\"token operator\">=</span> layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>layout_view<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>clContainer<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//如果传入的 root 不为 null 且 attachToRoot 为 false，此时会给 Xml 布局生成的根 View 设置布局参数</span>\n<span class=\"token keyword\">val</span> view2_2 <span class=\"token operator\">=</span> layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>layout_view<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>clContainer<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> parser<span class=\"token operator\">:</span> XmlResourceParser <span class=\"token operator\">=</span> resources<span class=\"token punctuation\">.</span><span class=\"token function\">getLayout</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>layout_view<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//这两个重载方法不常用</span>\n<span class=\"token keyword\">val</span> view3 <span class=\"token operator\">=</span> layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>clContainer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> view4 <span class=\"token operator\">=</span> layoutInflater3<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>clContainer<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\nbinding<span class=\"token punctuation\">.</span>clContainer<span class=\"token punctuation\">.</span><span class=\"token function\">addView</span><span class=\"token punctuation\">(</span>view1_1<span class=\"token punctuation\">)</span></code></pre>\n<p>无论是 Activity 中 setContentView 加载内容还是 DecorView 加载屏幕根视图都是通过 LayoutInflater 加载。</p>\n<p>inflate 方法，详细的加载过程会单独整理一篇文章</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> View <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>XmlPullParser parser<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Nullable</span> ViewGroup root<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> attachToRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>mConstructorArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Trace<span class=\"token punctuation\">.</span><span class=\"token function\">traceBegin</span><span class=\"token punctuation\">(</span>Trace<span class=\"token punctuation\">.</span>TRACE_TAG_VIEW<span class=\"token punctuation\">,</span> <span class=\"token string\">\"inflate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> Context inflaterContext <span class=\"token operator\">=</span> mContext<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> AttributeSet attrs <span class=\"token operator\">=</span> Xml<span class=\"token punctuation\">.</span><span class=\"token function\">asAttributeSet</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Context lastContext <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">)</span> mConstructorArgs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        mConstructorArgs<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inflaterContext<span class=\"token punctuation\">;</span>\n        View result <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">advanceToRootNode</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> String name <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>TAG_MERGE<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>attachToRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InflateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;merge /> can be used only with a valid \"</span><span class=\"token operator\">+</span> <span class=\"token string\">\"ViewGroup root and attachToRoot=true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                                <span class=\"token comment\" spellcheck=\"true\">//merge 根视图单独处理</span>\n                <span class=\"token function\">rInflate</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">,</span> inflaterContext<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//Temp 是在 xml 中找到的根视图</span>\n                <span class=\"token keyword\">final</span> View temp <span class=\"token operator\">=</span> <span class=\"token function\">createViewFromTag</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> inflaterContext<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                ViewGroup<span class=\"token punctuation\">.</span>LayoutParams params <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n                    <span class=\"token comment\" spellcheck=\"true\">// 创建与根匹配的布局参数（如果提供）</span>\n                    params <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span><span class=\"token function\">generateLayoutParams</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>attachToRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">// 如果我们不附加，请为 temp 设置根布局的布局参数</span>\n                        temp<span class=\"token punctuation\">.</span><span class=\"token function\">setLayoutParams</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 将所有处于临时状态的孩子都根据其上下文进行布局填充。</span>\n                <span class=\"token function\">rInflateChildren</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 将所有视图添加到 root</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> attachToRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    root<span class=\"token punctuation\">.</span><span class=\"token function\">addView</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 返回传入的 root 还是在 xml 中找到的顶视图。</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>attachToRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>LayoutInflater 参数说明</strong></p>\n<p><code>layoutResID：</code>代表所要加载的布局资源id，</p>\n<p><code>root：</code>是ViewGroup类型，这个参数需要与第3个参数配合使用，</p>\n<p><code>attachToRoot：</code>如果为<code>true</code>就把布局添加到 <code>root</code> 中；若为<code>false</code>则只采用<code>ViewGroup</code>的<code>LayoutParams</code>作为测量的依据却不直接添加到<code>ViewGroup</code>中。</p>\n<p><code>parser：</code>包含布局层次结构描述的 XML dom 节点。</p>\n<p><strong>LayoutInflater.Factory 接口的扩展功能</strong></p>\n<p><code>LayoutInflater</code>设计了一个<code>LayoutInflater.Factory</code>接口，该接口设计得非常巧妙：在<code>xml</code>解析过程中，开发者可以通过配置该接口对<code>View</code>的创建过程进行拦截：<strong>通过new的方式创建控件以避免大量地使用反射</strong>,<code>Factory</code>接口的意义是在<code>xml</code>解析过程中，开发者可以通过配置该接口对<code>View</code>的创建过程进行拦截</p>\n<h4 id=\"LayoutInflater-总结\"><a href=\"#LayoutInflater-总结\" class=\"headerlink\" title=\"LayoutInflater 总结\"></a>LayoutInflater 总结</h4><p>获取 LayoutInflater实例最终都会走到 ContextThemeWrapper 类中 getSystemService 构建一个局部单例的 <strong>PhoneLayoutInflater</strong> 实例。</p>\n<p>LayoutInflater 布局填充有四个重载方法，最终都会调用到同一个方法，再根据传递的参数做不同的加载处理</p>\n<h3 id=\"4-2-ActivityMainBinding-类的绑定过程\"><a href=\"#4-2-ActivityMainBinding-类的绑定过程\" class=\"headerlink\" title=\"4.2 ActivityMainBinding 类的绑定过程\"></a>4.2 ActivityMainBinding 类的绑定过程</h3><h4 id=\"inflate-过程\"><a href=\"#inflate-过程\" class=\"headerlink\" title=\"inflate 过程\"></a>inflate 过程</h4><p>View 类中通过调用apt 自动生成的绑定类的inflate方法或者 bind 方法获取绑定类</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//CustomView</span>\n<span class=\"token keyword\">val</span> layoutInflater<span class=\"token operator\">:</span> LayoutInflater <span class=\"token operator\">=</span> LayoutInflater<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> binding <span class=\"token operator\">=</span> LayoutViewBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>layoutInflater<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//SecondFragment</span>\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreateView</span><span class=\"token punctuation\">(</span>inflater<span class=\"token operator\">:</span> LayoutInflater<span class=\"token punctuation\">,</span> container<span class=\"token operator\">:</span> ViewGroup<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> savedIS<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> View <span class=\"token punctuation\">{</span>\n    _binding <span class=\"token operator\">=</span> FragmentSecondBinding<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>inflater<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> binding<span class=\"token punctuation\">.</span>root\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//include+merge 只能手动调用绑定类的bind方法</span>\n<span class=\"token keyword\">val</span> layoutInfoMergeBinding <span class=\"token operator\">=</span> LayoutInfoMergeBinding<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span></code></pre>\n<p>绑定类的 inflate 方法，通过传入的 LayoutInflater 将 layout 填充为 View</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//class FragmentSecondBinding implements ViewBinding</span>\n<span class=\"token annotation builtin\">@NonNull</span>\n<span class=\"token keyword\">public</span> static FragmentSecondBinding <span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NonNull</span> LayoutInflater inflater<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@Nullable</span> ViewGroup parent<span class=\"token punctuation\">,</span> boolean attachToParent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  View root <span class=\"token operator\">=</span> inflater<span class=\"token punctuation\">.</span><span class=\"token function\">inflate</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>fragment_second<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//这里的 attachToParent 参数为 true 时不知为何不传入 LayoutInflater 来 addView 而是自己单独做了判断</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attachToParent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    parent<span class=\"token punctuation\">.</span><span class=\"token function\">addView</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"bind-过程\"><a href=\"#bind-过程\" class=\"headerlink\" title=\"bind 过程\"></a>bind 过程</h4><p>从 inflate 过程填充的视图中(或者是从外部传入的 View)实例化所有控件并构建绑定类</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">  <span class=\"token annotation builtin\">@NonNull</span>\n  <span class=\"token keyword\">public</span> static FragmentSecondBinding <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NonNull</span> View rootView<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//此方法的主体是以您不会编写的方式生成的。这样做是为了优化已编译的字节码的大小和性能。</span>\n    int id<span class=\"token punctuation\">;</span>\n    missingId<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//根布局中的普通控件</span>\n      id <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button_second<span class=\"token punctuation\">;</span>\n      Button buttonSecond <span class=\"token operator\">=</span> ViewBindings<span class=\"token punctuation\">.</span><span class=\"token function\">findChildViewById</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buttonSecond <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span> missingId<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//根布局中的 include 标签</span>\n      id <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>include_layout<span class=\"token punctuation\">;</span>\n      View includeLayout <span class=\"token operator\">=</span> ViewBindings<span class=\"token punctuation\">.</span><span class=\"token function\">findChildViewById</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>includeLayout <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span> missingId<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      LayoutInfoBinding binding_includeLayout <span class=\"token operator\">=</span> LayoutInfoBinding<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>includeLayout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//ViewStub标签</span>\n      id <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>layout_view_stub<span class=\"token punctuation\">;</span>\n      ViewStub layoutViewStub <span class=\"token operator\">=</span> ViewBindings<span class=\"token punctuation\">.</span><span class=\"token function\">findChildViewById</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>layoutViewStub <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span> missingId<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//自定义 View</span>\n      id <span class=\"token operator\">=</span> R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n      CustomView name <span class=\"token operator\">=</span> ViewBindings<span class=\"token punctuation\">.</span><span class=\"token function\">findChildViewById</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span> missingId<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n             <span class=\"token comment\" spellcheck=\"true\">//include+merge 没有生成对应的类型，只能手动调用绑定类的bind方法</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">//构建绑定类，并将所有控件赋值给类属性</span>\n      <span class=\"token keyword\">return</span> new <span class=\"token function\">FragmentSecondBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ConstraintLayout<span class=\"token punctuation\">)</span> rootView<span class=\"token punctuation\">,</span> buttonSecond<span class=\"token punctuation\">,</span> flSecond<span class=\"token punctuation\">,</span>\n          binding_includeLayout<span class=\"token punctuation\">,</span> layoutViewStub<span class=\"token punctuation\">,</span> llInfo<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> textviewSecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果有任何一个控件在 findChildViewById 过程中没有被找到就会抛NPE异常</span>\n    String missingId <span class=\"token operator\">=</span> rootView<span class=\"token punctuation\">.</span><span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceName</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> new <span class=\"token function\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Missing required view with ID: \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>missingId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>遍历根视图匹配布局文件中的id并通过findViewById方法返回View实例</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//ViewBindings</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n Like `findViewById` but skips the view itself.\n */</span>\n<span class=\"token annotation builtin\">@Nullable</span>\n<span class=\"token keyword\">public</span> static <span class=\"token operator\">&lt;</span>T extends View<span class=\"token operator\">></span> T <span class=\"token function\">findChildViewById</span><span class=\"token punctuation\">(</span>View rootView<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@IdRes</span> int id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>rootView instanceof ViewGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">final</span> ViewGroup rootViewGroup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ViewGroup<span class=\"token punctuation\">)</span> rootView<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> int childCount <span class=\"token operator\">=</span> rootViewGroup<span class=\"token punctuation\">.</span><span class=\"token function\">getChildCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>int i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> T view <span class=\"token operator\">=</span> rootViewGroup<span class=\"token punctuation\">.</span><span class=\"token function\">getChildAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>view <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"绑定过程总结\"><a href=\"#绑定过程总结\" class=\"headerlink\" title=\"绑定过程总结\"></a>绑定过程总结</h4><p>DataBinding 借助 AGP 会为所有布局文件自动生成绑定类</p>\n<p>绑定类的 inflate 方法通过传入的布局填充器 LayoutInflater 以及自动收集的根布局 id 加载出根布局 rootView 然后传给 bind 方法实例化控件</p>\n<p>绑定类的 bind 方法通过传入的根布局以及自动收集的控件 id 实例化所有控件 并构建绑定类</p>\n<h3 id=\"4-3-ActivityMainBinding-类的生成过程\"><a href=\"#4-3-ActivityMainBinding-类的生成过程\" class=\"headerlink\" title=\"4.3 ActivityMainBinding 类的生成过程\"></a>4.3 ActivityMainBinding 类的生成过程</h3><p><a href=\"https://juejin.cn/post/6844904106268557326\" target=\"_blank\" rel=\"noopener\">参考：ViewBinding 的本质</a></p>\n<p><a href=\"https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common\" target=\"_blank\" rel=\"noopener\">DataBinding Compiler Common</a></p>\n<p>依赖源码方便查看</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\" spellcheck=\"true\">//todo 依赖 databinding-compiler 方便查看 ViewBinding 类的生成过程</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common</span>\nimplementation group<span class=\"token punctuation\">:</span> <span class=\"token string\">'androidx.databinding'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'databinding-compiler-common'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'7.0.1'</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://mvnrepository.com/artifact/com.android.tools.build/gradle</span>\nimplementation group<span class=\"token punctuation\">:</span> <span class=\"token string\">'com.android.tools.build'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'gradle'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'7.0.1'</span></code></pre>\n<p>ViewBinding 是属于 dataBinding 库里面的一个小功能,对于解析布局文件生成绑定类的逻辑是通用的，</p>\n<h4 id=\"阶段一：解析xml布局文件\"><a href=\"#阶段一：解析xml布局文件\" class=\"headerlink\" title=\"阶段一：解析xml布局文件\"></a>阶段一：解析xml布局文件</h4><p><strong>LayoutXmlProcessor</strong>：处理布局 XML，剥离绑定属性和元素，并将信息写入带注解的类文件以供注释处理器使用</p>\n<p><strong>processResources</strong>：假装这个方法就是布局文件改动后调用的入口方法（应该是由AGP 触发，暂时未找到）</p>\n<pre class=\" language-java\"><code class=\"language-java\">\nandroid<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span>tool<span class=\"token punctuation\">.</span>LayoutXmlProcessor\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">processResources</span><span class=\"token punctuation\">(</span>ResourceInput input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isViewBindingEnabled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isDataBindingEnabled<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> ParserConfigurationException<span class=\"token punctuation\">,</span> SAXException<span class=\"token punctuation\">,</span> XPathExpressionException<span class=\"token punctuation\">,</span>\n        IOException <span class=\"token punctuation\">{</span>\n    ProcessFileCallback callback <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessFileCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//省略回调代码</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//布局文件的改动输入源支持增量构建</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">isIncremental</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">processIncrementalInputFiles</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">processAllInputFiles</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>processIncrementalInputFiles 处理增量输入（Added、Removed、Changed）</p>\n<p>processAllInputFiles 处理全部输入</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//遍历文件</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>File firstLevel <span class=\"token operator\">:</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getRootInputFolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//处理 layout_xx 目录下面的 xxx.xml 文件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>LAYOUT_FOLDER_FILTER<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>firstLevel<span class=\"token punctuation\">,</span> firstLevel<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    callback<span class=\"token punctuation\">.</span><span class=\"token function\">processLayoutFolder</span><span class=\"token punctuation\">(</span>firstLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//noinspection ConstantConditions</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>File xmlFile <span class=\"token operator\">:</span> firstLevel<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span>XML_FILE_FILTER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        callback<span class=\"token punctuation\">.</span><span class=\"token function\">processLayoutFile</span><span class=\"token punctuation\">(</span>xmlFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>ProcessFileCallback 扫描文件后的回调</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processLayoutFile</span><span class=\"token punctuation\">(</span>File file<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> ParserConfigurationException<span class=\"token punctuation\">,</span> SAXException<span class=\"token punctuation\">,</span> XPathExpressionException<span class=\"token punctuation\">,</span>\n        IOException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">//处理单个文件，</span>\n    <span class=\"token function\">processSingleFile</span><span class=\"token punctuation\">(</span>RelativizableFile<span class=\"token punctuation\">.</span><span class=\"token function\">fromAbsoluteFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">convertToOutFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> isViewBindingEnabled<span class=\"token punctuation\">,</span> isDataBindingEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>processSingleFile </p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">processSingleFile</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> RelativizableFile input<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> File output<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">boolean</span> isViewBindingEnabled<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isDataBindingEnabled<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> ParserConfigurationException<span class=\"token punctuation\">,</span> SAXException<span class=\"token punctuation\">,</span> XPathExpressionException<span class=\"token punctuation\">,</span>\n        IOException <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">//解析xml文件 封账布局文件扫描类</span>\n    <span class=\"token keyword\">final</span> ResourceBundle<span class=\"token punctuation\">.</span>LayoutFileBundle bindingLayout <span class=\"token operator\">=</span> LayoutFileParser\n            <span class=\"token punctuation\">.</span><span class=\"token function\">parseXml</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span> mResourceBundle<span class=\"token punctuation\">.</span><span class=\"token function\">getAppPackage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mOriginalFileLookup<span class=\"token punctuation\">,</span>\n                    isViewBindingEnabled<span class=\"token punctuation\">,</span> isDataBindingEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bindingLayout <span class=\"token operator\">==</span> null\n            <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>bindingLayout<span class=\"token punctuation\">.</span><span class=\"token function\">isBindingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> bindingLayout<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\" spellcheck=\"true\">//添加到map缓存起来</span>\n    mResourceBundle<span class=\"token punctuation\">.</span><span class=\"token function\">addLayoutBundle</span><span class=\"token punctuation\">(</span>bindingLayout<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>LayoutFileParser</strong>：获取 XML 文件列表并创建可以持久化或转换为 LayoutBinder 的ResourceBundle列表</p>\n<p>android.databinding.tool.store public final class LayoutFileParser</p>\n<p>parseXml:路径、编码、校验等</p>\n<p>parseOriginalXml :将布局文件解析为描述类</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> ResourceBundle<span class=\"token punctuation\">.</span>LayoutFileBundle <span class=\"token function\">parseOriginalXml</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token keyword\">final</span> RelativizableFile originalFile<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token keyword\">final</span> String pkg<span class=\"token punctuation\">,</span>\n        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token keyword\">final</span> String encoding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isViewBindingEnabled<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">boolean</span> isDataBindingEnabled<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//layout 标签判断databinding</span>\nXMLParser<span class=\"token punctuation\">.</span>ElementContext root <span class=\"token operator\">=</span> expr<span class=\"token punctuation\">.</span><span class=\"token function\">element</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">boolean</span> isBindingData <span class=\"token operator\">=</span> <span class=\"token string\">\"layout\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>elmName<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//dataBinding</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBindingData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isDataBindingEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        L<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>ErrorMessages<span class=\"token punctuation\">.</span>FOUND_LAYOUT_BUT_NOT_ENABLED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    data <span class=\"token operator\">=</span> <span class=\"token function\">getDataNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    rootView <span class=\"token operator\">=</span> <span class=\"token function\">getViewNode</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isViewBindingEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">//viewBindingIgnore 根布局添加这个属性为true可以跳过生成绑定类的过程</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token function\">attributeMap</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tools:viewBindingIgnore\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        L<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ignoring %s for view binding\"</span><span class=\"token punctuation\">,</span> originalFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    data <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    rootView <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//dataBinding &lt;include> 元素不支持作为 &lt;merge> 元素的直接子元素</span>\n<span class=\"token keyword\">boolean</span> isMerge <span class=\"token operator\">=</span> <span class=\"token string\">\"merge\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">.</span>elmName<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isBindingData <span class=\"token operator\">&amp;&amp;</span> isMerge <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">,</span> <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//public static final String INCLUDE_INSIDE_MERGE = \"&lt;include> elements are not supported as direct children of &lt;merge> elements\";</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>ErrorMessages<span class=\"token punctuation\">.</span>INCLUDE_INSIDE_MERGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nString rootViewType <span class=\"token operator\">=</span> <span class=\"token function\">getViewName</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString rootViewId <span class=\"token operator\">=</span> <span class=\"token function\">attributeMap</span><span class=\"token punctuation\">(</span>rootView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android:id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//构建布局描述的封装类</span>\nResourceBundle<span class=\"token punctuation\">.</span>LayoutFileBundle bundle <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceBundle<span class=\"token punctuation\">.</span>LayoutFileBundle</span><span class=\"token punctuation\">(</span>\n        originalFile<span class=\"token punctuation\">,</span> xmlNoExtension<span class=\"token punctuation\">,</span> original<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pkg<span class=\"token punctuation\">,</span>\n        isMerge<span class=\"token punctuation\">,</span> isBindingData<span class=\"token punctuation\">,</span> rootViewType<span class=\"token punctuation\">,</span> rootViewId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> String newTag <span class=\"token operator\">=</span> original<span class=\"token punctuation\">.</span><span class=\"token function\">getParentFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> xmlNoExtension<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//data 数据只有 databinding 才会有的元素，viewBinding 是不会去解析的</span>\n<span class=\"token function\">parseData</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//解析表达式，这里面会循环遍历元素，解析 view 的 id、tag、include、fragment 等等 xml 相关的元素，并且还有 databinding 相关的 @={ 的表达式，最后将结果缓存起来</span>\n<span class=\"token function\">parseExpressions</span><span class=\"token punctuation\">(</span>newTag<span class=\"token punctuation\">,</span> rootView<span class=\"token punctuation\">,</span> isMerge<span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"阶段二：输出描述文件\"><a href=\"#阶段二：输出描述文件\" class=\"headerlink\" title=\"阶段二：输出描述文件\"></a>阶段二：输出描述文件</h4><p><strong>LayoutXmlProcessor</strong></p>\n<p><strong>writeLayoutInfoFiles</strong>：这个方法的执行点可以在AGP里面找到，task 为：<strong>com.android.build.gradle.tasks.MergeResources</strong></p>\n<p><strong>MergeResources</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doTaskAction</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> InputChanges changedInputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    SingleFileProcessor dataBindingLayoutProcessor <span class=\"token operator\">=</span> <span class=\"token function\">maybeCreateLayoutProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataBindingLayoutProcessor <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dataBindingLayoutProcessor<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//maybeCreateLayoutProcessor</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleFileProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> LayoutXmlProcessor <span class=\"token function\">getProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> processor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">processSingleFile</span><span class=\"token punctuation\">(</span>\n            <span class=\"token annotation punctuation\">@NonNull</span> File inputFile<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@NonNull</span> File outputFile<span class=\"token punctuation\">,</span>\n            <span class=\"token annotation punctuation\">@Nullable</span> Boolean inputFileIsFromDependency<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">processSingleFile</span><span class=\"token punctuation\">(</span>\n                        normalizedInputFile<span class=\"token punctuation\">,</span>\n                        outputFile<span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">getViewBindingEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token function\">getDataBindingEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> JAXBException <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">getProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeLayoutInfoFiles</span><span class=\"token punctuation\">(</span><span class=\"token function\">getDataBindingLayoutInfoOutFolder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAsFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//输出路径可以从这里查看</span>\nartifacts<span class=\"token punctuation\">.</span><span class=\"token function\">setInitialProvider</span><span class=\"token punctuation\">(</span>taskProvider<span class=\"token punctuation\">,</span> MergeResources<span class=\"token operator\">:</span><span class=\"token operator\">:</span>getDataBindingLayoutInfoOutFolder<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">withName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span> mergeType <span class=\"token operator\">==</span> MERGE<span class=\"token operator\">?</span> DATA_BINDING_LAYOUT_INFO_TYPE_MERGE<span class=\"token punctuation\">.</span>INSTANCE\n                        <span class=\"token operator\">:</span> DATA_BINDING_LAYOUT_INFO_TYPE_PACKAGE<span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>writeLayoutInfoFiles</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeLayoutInfoFiles</span><span class=\"token punctuation\">(</span>File xmlOutDir<span class=\"token punctuation\">,</span> JavaFileWriter writer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> JAXBException <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ResourceBundle<span class=\"token punctuation\">.</span>LayoutFileBundle layout <span class=\"token operator\">:</span> mResourceBundle\n            <span class=\"token punctuation\">.</span><span class=\"token function\">getAllLayoutFileBundlesInSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">writeXmlFile</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> xmlOutDir<span class=\"token punctuation\">,</span> layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>writeXmlFile</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> void <span class=\"token function\">writeXmlFile</span><span class=\"token punctuation\">(</span>JavaFileWriter writer<span class=\"token punctuation\">,</span> File xmlOutDir<span class=\"token punctuation\">,</span>\n        ResourceBundle<span class=\"token punctuation\">.</span>LayoutFileBundle layout<span class=\"token punctuation\">)</span>\n        throws JAXBException <span class=\"token punctuation\">{</span>\n    String filename <span class=\"token operator\">=</span> <span class=\"token function\">generateExportFileName</span><span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//  fileName + '-' + dirName + \".xml\";</span>\n          <span class=\"token comment\" spellcheck=\"true\">//遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径</span>\n    writer<span class=\"token punctuation\">.</span><span class=\"token function\">writeToFile</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">File</span><span class=\"token punctuation\">(</span>xmlOutDir<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> layout<span class=\"token punctuation\">.</span><span class=\"token function\">toXML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>描述文件的生成路径为：app/build/intermediates/data_binding_layout_info_type_merge/debug/out</p>\n<pre class=\" language-xml\"><code class=\"language-xml\">//fragment_second-layout.xml\n\n<span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Layout</span> <span class=\"token attr-name\">directory</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>layout<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">filePath</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app/src/main/res/layout/fragment_second.xml<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">isBindingData</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">isMerge</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>fragment_second<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">modulePackage</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.jay.vbhelper<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rootNodeType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>androidx.constraintlayout.widget.ConstraintLayout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Targets</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">tag</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>layout/fragment_second_0<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">view</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>androidx.constraintlayout.widget.ConstraintLayout<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Expressions</span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>location</span> <span class=\"token attr-name\">endLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>78<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">endOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>51<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/ll_info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tag</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>binding_1<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">view</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>androidx.appcompat.widget.LinearLayoutCompat<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Expressions</span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>location</span> <span class=\"token attr-name\">endLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>51<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">endOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>9<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>4<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/include_layout<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>layout_info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tag</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>binding_1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Expressions</span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>location</span> <span class=\"token attr-name\">endLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>31<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">endOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>42<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>29<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Target</span> <span class=\"token attr-name\">include</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>layout_info_merge<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">tag</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>binding_1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Expressions</span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>location</span> <span class=\"token attr-name\">endLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>35<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">endOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>53<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startLine</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>35<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">startOffset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Target</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Targets</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Layout</span><span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"阶段三：输出绑定类\"><a href=\"#阶段三：输出绑定类\" class=\"headerlink\" title=\"阶段三：输出绑定类\"></a>阶段三：输出绑定类</h4><p>AGP Task DataBindingGenBaseClassesTask 触发</p>\n<p>com.android.build.gradle.internal.tasks.databinding.DataBindingGenBaseClassesTask</p>\n<p>DataBindingGenBaseClassesTask</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@TaskAction</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">writeBaseClasses</span><span class=\"token punctuation\">(</span>inputs<span class=\"token operator\">:</span> IncrementalTaskInputs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// TODO extend NewIncrementalTask when moved to new API so that we can remove the manual call to recordTaskAction</span>\n    <span class=\"token function\">recordTaskAction</span><span class=\"token punctuation\">(</span>analyticsService<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// TODO figure out why worker execution makes the task flake.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Some files cannot be accessed even though they show up when directory listing is</span>\n        <span class=\"token comment\" spellcheck=\"true\">// invoked.</span>\n        <span class=\"token comment\" spellcheck=\"true\">// b/69652332</span>\n        <span class=\"token keyword\">val</span> args <span class=\"token operator\">=</span> <span class=\"token function\">buildInputArgs</span><span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">CodeGenerator</span><span class=\"token punctuation\">(</span>\n            args<span class=\"token punctuation\">,</span>\n            sourceOutFolder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>asFile<span class=\"token punctuation\">,</span>\n            Logger<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>DataBindingGenBaseClassesTask<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            encodeErrors<span class=\"token punctuation\">,</span>\n            <span class=\"token function\">collectResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//触发生成流程</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//绑定类生成器</span>\n<span class=\"token keyword\">class</span> CodeGenerator <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> args<span class=\"token operator\">:</span> LayoutInfoInput<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> sourceOutFolder<span class=\"token operator\">:</span> File<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> logger<span class=\"token operator\">:</span> Logger<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> encodeErrors<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> symbolTables<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>SymbolTable<span class=\"token operator\">></span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Runnable<span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">initLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">BaseDataBinder</span><span class=\"token punctuation\">(</span><span class=\"token function\">LayoutInfoInput</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>symbolTables <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token operator\">::</span>getRPackage <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n          <span class=\"token comment\" spellcheck=\"true\">//生成逻辑</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">generateAll</span><span class=\"token punctuation\">(</span>DataBindingBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">GradleFileWriter</span><span class=\"token punctuation\">(</span>sourceOutFolder<span class=\"token punctuation\">.</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">clearLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//sourceOutFolder路径信息</span>\ncreationConfig<span class=\"token punctuation\">.</span>artifacts<span class=\"token punctuation\">.</span><span class=\"token function\">setInitialProvider</span><span class=\"token punctuation\">(</span>\n    taskProvider<span class=\"token punctuation\">,</span>\n    DataBindingGenBaseClassesTask<span class=\"token operator\">::</span>sourceOutFolder\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">withName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>InternalArtifactType<span class=\"token punctuation\">.</span>DATA_BINDING_BASE_CLASS_SOURCE_OUT<span class=\"token punctuation\">)</span></code></pre>\n<p>BaseDataBinder</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unused\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">// used by tools</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseDataBinder</span><span class=\"token punctuation\">(</span>val input <span class=\"token operator\">:</span> LayoutInfoInput<span class=\"token punctuation\">,</span> val getRPackage<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> val resourceBundle <span class=\"token operator\">:</span> ResourceBundle <span class=\"token operator\">=</span> <span class=\"token function\">ResourceBundle</span><span class=\"token punctuation\">(</span>\n            input<span class=\"token punctuation\">.</span>packageName<span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>useAndroidX<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\" spellcheck=\"true\">//</span>\n    init <span class=\"token punctuation\">{</span>\n        input<span class=\"token punctuation\">.</span>filesToConsider <span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span>\n                    it<span class=\"token punctuation\">.</span><span class=\"token function\">inputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>use <span class=\"token punctuation\">{</span>\n                     <span class=\"token comment\" spellcheck=\"true\">// 又将上面收集的 layout，将 xml 转成 LayoutFileBundle</span>\n                        val bundle <span class=\"token operator\">=</span> LayoutFileBundle<span class=\"token punctuation\">.</span><span class=\"token function\">fromXML</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n                        resourceBundle<span class=\"token punctuation\">.</span><span class=\"token function\">addLayoutBundle</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n        resourceBundle<span class=\"token punctuation\">.</span><span class=\"token function\">addDependencyLayouts</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>existingBindingClasses<span class=\"token punctuation\">)</span>\n        resourceBundle<span class=\"token punctuation\">.</span><span class=\"token function\">validateAndRegisterErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token annotation punctuation\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unused\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">// used by android gradle plugin</span>\n    fun <span class=\"token function\">generateAll</span><span class=\"token punctuation\">(</span>writer <span class=\"token operator\">:</span> JavaFileWriter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 拿到所有的 LayoutFileBundle，并根据文件名进行分组排序</span>\n        val layoutBindings <span class=\"token operator\">=</span> resourceBundle<span class=\"token punctuation\">.</span>allLayoutFileBundlesInSource\n            <span class=\"token punctuation\">.</span><span class=\"token function\">groupBy</span><span class=\"token punctuation\">(</span>LayoutFileBundle<span class=\"token operator\">:</span><span class=\"token operator\">:</span>getFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSortedMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        layoutBindings<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> layoutName<span class=\"token punctuation\">,</span> variations <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n            <span class=\"token comment\" spellcheck=\"true\">// 将 LayoutFileBundle 信息包装成 BaseLayoutModel</span>\n            val layoutModel <span class=\"token operator\">=</span> <span class=\"token function\">BaseLayoutModel</span><span class=\"token punctuation\">(</span>variations<span class=\"token punctuation\">,</span> getRPackage<span class=\"token punctuation\">)</span>\n            val javaFile<span class=\"token operator\">:</span> JavaFile\n            val classInfo<span class=\"token operator\">:</span> GenClassInfoLog<span class=\"token punctuation\">.</span>GenClass\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>variations<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isBindingData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                val binderWriter <span class=\"token operator\">=</span> <span class=\"token function\">BaseLayoutBinderWriter</span><span class=\"token punctuation\">(</span>layoutModel<span class=\"token punctuation\">,</span> libTypes<span class=\"token punctuation\">)</span>\n                javaFile <span class=\"token operator\">=</span> binderWriter<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                classInfo <span class=\"token operator\">=</span> binderWriter<span class=\"token punctuation\">.</span><span class=\"token function\">generateClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">//不是DataBinding，按照 ViewBinding 处理</span>\n              <span class=\"token comment\" spellcheck=\"true\">//toViewBinder 是 BaseLayoutModel 的拓展函数，他会将 LayoutFileBundle 包装成 ViewBinder 类返回 </span>\n                val viewBinder <span class=\"token operator\">=</span> layoutModel<span class=\"token punctuation\">.</span><span class=\"token function\">toViewBinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n              <span class=\"token comment\" spellcheck=\"true\">//toJavaFile 是 ViewBinder 的拓展函数，通过Javapoet生成Java文件</span>\n                javaFile <span class=\"token operator\">=</span> viewBinder<span class=\"token punctuation\">.</span><span class=\"token function\">toJavaFile</span><span class=\"token punctuation\">(</span>useLegacyAnnotations <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>useAndroidX<span class=\"token punctuation\">)</span>\n                classInfo <span class=\"token operator\">=</span> viewBinder<span class=\"token punctuation\">.</span><span class=\"token function\">generatedClassInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">writeToFile</span><span class=\"token punctuation\">(</span>javaFile<span class=\"token punctuation\">)</span>\n            myLog<span class=\"token punctuation\">.</span>classInfoLog<span class=\"token punctuation\">.</span><span class=\"token function\">addMapping</span><span class=\"token punctuation\">(</span>layoutName<span class=\"token punctuation\">,</span> classInfo<span class=\"token punctuation\">)</span>\n            variations<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span>\n                it<span class=\"token punctuation\">.</span>bindingTargetBundles<span class=\"token punctuation\">.</span>forEach <span class=\"token punctuation\">{</span> bundle <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">.</span>isBinder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        myLog<span class=\"token punctuation\">.</span><span class=\"token function\">addDependency</span><span class=\"token punctuation\">(</span>layoutName<span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">.</span>includedLayout<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        input<span class=\"token punctuation\">.</span><span class=\"token function\">saveLog</span><span class=\"token punctuation\">(</span>myLog<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// data binding will eat some errors to be able to report them later on. This is a good</span>\n        <span class=\"token comment\" spellcheck=\"true\">// time to report them after the processing is done.</span>\n        Scope<span class=\"token punctuation\">.</span><span class=\"token function\">assertNoError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>通过Javapoet 生成绑定类</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">\n<span class=\"token keyword\">fun</span> ViewBinder<span class=\"token punctuation\">.</span><span class=\"token function\">toJavaFile</span><span class=\"token punctuation\">(</span>useLegacyAnnotations<span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">JavaFileGenerator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> useLegacyAnnotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">javaFile</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>generatedTypeName<span class=\"token punctuation\">.</span><span class=\"token function\">packageName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">typeSpec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">addFileComment</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Generated by view binder compiler. Do not edit!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">typeSpec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">classSpec</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>generatedTypeName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">addModifiers</span><span class=\"token punctuation\">(</span>PUBLIC<span class=\"token punctuation\">,</span> FINAL<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">addSuperinterface</span><span class=\"token punctuation\">(</span>ClassName<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>viewBindingPackage<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ViewBinding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// TODO elide the separate root field if the root tag has an ID (and isn't a binder)</span>\n    <span class=\"token function\">addField</span><span class=\"token punctuation\">(</span><span class=\"token function\">rootViewField</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">addFields</span><span class=\"token punctuation\">(</span><span class=\"token function\">bindingFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token function\">rootViewGetter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果跟标签是 merge  是生成的两参数的infate 参数</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>rootNode <span class=\"token keyword\">is</span> RootNode<span class=\"token punctuation\">.</span>Merge<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token function\">mergeInflate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//其它情况都是同时生成一参数和三参数的inflate方法</span>\n        <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token function\">oneParamInflate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token function\">threeParamInflate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">addMethod</span><span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"生成过程总结\"><a href=\"#生成过程总结\" class=\"headerlink\" title=\"生成过程总结\"></a>生成过程总结</h4><p>实时更新生成：布局文件改动(新加/更新/删除)后AS或AGP或立即更新绑定类，这个过程还没找到对应的源码</p>\n<p>编译更新生成：AGP 不同的任务触发</p>\n<ul>\n<li>解析xml布局文件：LayoutXmlProcessor#processResources 方法应该是改动布局文件的输入口，暂时没找到对应的Task，收集过程支持增量更新。处理 layout_xx 目录下面的 xxx.xml 文件，解析xml文件的过程区分 DataBinding 和 ViewBinding ，最后的产物是 ResourceBundle.LayoutFileBundle 以及 HashMap&lt;String, List<layoutfilebundle>&gt; mLayoutBundles</layoutfilebundle></li>\n<li>输出描述文件：有AGP中的 <strong>MergeResources</strong>Task 触发 , 遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径, 这个xml文件中描述了布局的 文件路径、包名、布局名、控件id、控件行号等信息</li>\n<li>输出绑定类：AGP <strong>DataBindingGenBaseClassesTask</strong>触发，将上个过程生成的布局描述xml文件再解析成 LayoutFileBundle 类信息，然后再次包装这些信息，最后通过Javapoet 生成绑定类</li>\n</ul>\n<h4 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h4><ul>\n<li><p>布局文件更新后触发扫描和处理布局文件的操作也就是调用 processResources 方法的地方</p>\n<ul>\n<li>猜测AGP 和 AS 都有参与</li>\n</ul>\n</li>\n<li><p>为什么点击 ActivityMainBinding 会跳转到对应的布局文件</p>\n<ul>\n<li>这个猜测应该和编译相关，生成词法分析器和解析器代码</li>\n</ul>\n</li>\n<li><p>为什么添加了新的布局文件还没有编译就获取到绑定类，但是在data_binding_base_class_source_out路径下没有这个绑定类只有编译才会看到</p>\n<ul>\n<li><p>应该也有AS的份</p>\n</li>\n<li><p><a href=\"https://android.googlesource.com/platform/tools/adt/idea/+/refs/heads/mirror-goog-studio-master-dev/android-lang-databinding/\" target=\"_blank\" rel=\"noopener\">AS 中关于 DataBind 的一个库：Generate lexer and parser code</a></p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Jetpack-ViewBinding-详解\"><a href=\"#Jetpack-ViewBinding-详解\" class=\"headerlink\" title=\"Jetpack | ViewBinding 详解\"></a>Jetpack | ViewBinding 详解</h1><p>通过 <strong>ViewBinding(视图绑定)</strong> 功能，我们可以更轻松地编写与布局文件交互的代码。在模块中启用视图绑定之后，AGP 会为该模块中的每个 XML 布局文件生成一个绑定类。该绑定类的实例中会直接引用那些在布局中声明了资源 id 的控件。这样一来就减少了很多像 <code>findViewById</code> 这种操作，同时也为控件的安全性保驾护航。</p>\n<p><strong>文章核心点：</strong></p>\n<ul>\n<li>VB 集成与一般使用方式，包括：Activity 、Fragment、Adapter、include、merge、ViewStub</li>\n<li>KT 属性代理与泛型实化类型参数 <code>reified</code> 的介绍</li>\n<li>通过 KT 属性代理简化 VB 创建流程，并封装了一个库 VBHelper</li>\n<li>LayoutInflater 原理与参数解析</li>\n<li>XXXBinding 类的绑定过程</li>\n<li>XXXBinding 类的生成过程</li>\n</ul>\n<p><strong><a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\">VBHelper</a></strong>：是我写这篇文章提取的一个库，通过属性代理简化了VB的使用，有想了解的可以提提意见</p>\n<ol>\n<li>在 Activity 中创建 ViewBinding 绑定类</li>\n</ol>\n<pre><code class=\"kotlin\">//通过自定义属性代理 + 反射绑定类的 inflate 方法\nprivate val binding: ActivityMainBinding by vb()\n//通过自定义属性代理 + 传递 inflate 方法引用\nprivate val binding: ActivityMainBinding by vb(ActivityMainBinding::inflate)</code></pre>\n<ol start=\"2\">\n<li>在 Fragment 中创建 ViewBinding 绑定类</li>\n</ol>\n<pre><code class=\"kotlin\">//通过自定义属性代理 + 反射绑定类的 inflate 方法\nprivate val binding: FragmentMainBinding by vb()\n//通过自定义属性代理 + 传递 inflate 方法引用\nprivate val binding: FragmentMainBinding by vb(FragmentMainBinding::inflate)</code></pre>\n<ol start=\"3\">\n<li>在 View 中创建 ViewBinding 绑定类</li>\n</ol>\n<pre><code class=\"kotlin\">//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法\nprivate val binding: MyViewBinding by vb()\n//通过自定义属性代理 + 传递 inflate 三参数方法引用\nprivate val binding: MyViewBinding by vb(MyViewBinding::inflate)</code></pre>\n<ol start=\"4\">\n<li>在 Adapter 中创建包含了绑定类的 BindingViewHolder</li>\n</ol>\n<pre><code class=\"kotlin\">//通过自定义属性代理 + 反射绑定类的 inflate 三参数方法\nval holder: BindingViewHolder&lt;LayoutItemTextBinding&gt; by vh(parent)\n//通过自定义属性代理 + 传递绑定类的 inflate 三参数方法引用\nval holder: BindingViewHolder&lt;LayoutItemTextBinding&gt; by vh(parent, LayoutItemTextBinding::inflate)</code></pre>\n<h2 id=\"1-VB-概述\"><a href=\"#1-VB-概述\" class=\"headerlink\" title=\"1.VB 概述\"></a>1.VB 概述</h2><ul>\n<li><p>视图绑定在 Android Studio 3.6 Canary 11 及更高版本中可用。</p>\n</li>\n<li><p>开启自动生成绑定类：模块 <code>build.gradle</code> 文件中的 <code>android</code> 闭包下，两种方式</p>\n<ul>\n<li><code>viewBinding {enabled = true}</code> 默认值为false, Android Studio 3.6 Canary 11 及更高版本中可用。</li>\n<li><code>buildFeatures {viewBinding = true}</code> 默认值为false,  Android Studio 4.0 及更高版本中可用</li>\n</ul>\n</li>\n<li><p>忽略自动生成绑定类：请将 <code>tools:viewBindingIgnore=&quot;true&quot;</code> 属性添加到相应布局文件的根视图中</p>\n</li>\n<li><p>生成绑定类的名称：将 XML 文件的名称转换为驼峰式大小写，并在末尾添加“Binding”一词。<br>LayoutInflater.Factory</p>\n<ul>\n<li>result_profile.xml ====&gt;ResultProfileBinding</li>\n<li>每个绑定类还包含一个 <code>getRoot()</code> 方法，用于为相应布局文件的根视图提供直接引用。</li>\n</ul>\n</li>\n<li><p>与使用 findViewById 相比</p>\n<ul>\n<li><strong>Null 安全</strong>：绑定类的创建是通过解析布局文件在编译时生成，布局文件添加了id的控件才会生成对应的引用，因此不会发生绑定类中存在而布局中没有对应控件的情况，如果布局引用了错误的类型也会在编译时暴露错误。</li>\n<li><strong>类型安全</strong>：布局中声明的控件是确定类型的。这意味着不存在发生类转换异常的风险。</li>\n</ul>\n</li>\n<li><p>与使用 DataBinding 对比</p>\n<ul>\n<li><p>视图绑定和<a href=\"https://developer.android.com/topic/libraries/data-binding?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">数据绑定</a>均会生成可用于直接引用视图的绑定类。但是，视图绑定旨在处理更简单的用例。</p>\n</li>\n<li><p><strong>更快的编译速度</strong>：视图绑定不需要处理注解信息，因此编译时间更短。</p>\n</li>\n<li><p><strong>易于使用</strong>：视图绑定不需要在 XML 布局文件中标记，只要在模块中启用视图绑定后，它会自动应用于该模块的所有布局。</p>\n</li>\n<li><p>如果项目中使用了数据绑定最好在项目中<strong>同时使用视图绑定和数据绑定</strong>。这样可以在需要高级功能的布局中使用数据绑定，而在不需要高级功能的布局中使用视图绑定。如果只是取代 <code>findViewById()</code> 调用，请考虑改用视图绑定。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-VB-一般使用\"><a href=\"#2-VB-一般使用\" class=\"headerlink\" title=\"2. VB 一般使用\"></a>2. VB 一般使用</h2><h3 id=\"2-1-Activity\"><a href=\"#2-1-Activity\" class=\"headerlink\" title=\"2.1 Activity\"></a>2.1 Activity</h3><pre><code class=\"kotlin\">private lateinit var binding: ActivityMainBinding\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    binding = ActivityMainBinding.inflate(layoutInflater)\n    setContentView(binding.root)\n    setSupportActionBar(binding.toolbar)\n}</code></pre>\n<h3 id=\"2-2-Fragment\"><a href=\"#2-2-Fragment\" class=\"headerlink\" title=\"2.2 Fragment\"></a>2.2 Fragment</h3><pre><code class=\"kotlin\">private var _binding: FragmentFirstBinding? = null\n// This property is only valid between onCreateView and onDestroyView.\nprivate val binding get() = _binding!!\n\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\n    firstViewModel = ViewModelProvider(this).get(FirstViewModel::class.java)\n    _binding = FragmentFirstBinding.inflate(inflater, container, false)\n    binding.rvList.layoutManager = LinearLayoutManager(requireContext())\n    return binding.root\n}</code></pre>\n<h3 id=\"2-3-Adapter\"><a href=\"#2-3-Adapter\" class=\"headerlink\" title=\"2.3 Adapter\"></a>2.3 Adapter</h3><pre><code class=\"kotlin\">override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TextHolder {\n    val itemBinding = LayoutItemTextBinding.inflate(LayoutInflater.from(parent.context), parent, false)\n    //绑定类交给Holder\n    return TextHolder(itemBinding)\n}\n\noverride fun onBindViewHolder(holder: TextHolder, position: Int) {\n    val item: String = list[position]\n    //数据交给Holder\n    holder.bind(item)\n}\n\nclass TextHolder(val itemBinding: LayoutItemTextBinding) : RecyclerView.ViewHolder(itemBinding.root) {\n    fun bind(name: String) {\n        itemBinding.tvName.text = name\n    }\n}</code></pre>\n<h3 id=\"2-4-include\"><a href=\"#2-4-include\" class=\"headerlink\" title=\"2.4 include\"></a>2.4 include</h3><pre><code class=\"kotlin\">binding.includeLayout.tvInfoInclude.text = &quot;tvInfoInclude:$item&quot;\n// todo  include 方式有时候无法识别到真实的绑定类类型只能识别它是个View类型但是编译不会报错, 这种情况清理缓存可能会好 ，或者也可以强制类型转换或者自己bind\nval tvInfoInclude: LayoutInfoBinding = binding.includeLayout as LayoutInfoBinding\nval tvInfoInclude = LayoutInfoBinding.bind(binding.root)\ntvInfoInclude.tvInfoInclude.text = &quot;tvInfoInclude:$item&quot;</code></pre>\n<h3 id=\"2-5-merge\"><a href=\"#2-5-merge\" class=\"headerlink\" title=\"2.5 merge\"></a>2.5 merge</h3><pre><code class=\"kotlin\">//include+merge 只能手动调用绑定类的bind方法\nval layoutInfoMergeBinding = LayoutInfoMergeBinding.bind(binding.root)\nval tvInfoMerge = layoutInfoMergeBinding.tvInfoMerge\ntvInfoMerge.text = &quot;tvInfoMerge:$item&quot;</code></pre>\n<h3 id=\"2-6-ViewStub\"><a href=\"#2-6-ViewStub\" class=\"headerlink\" title=\"2.6 ViewStub\"></a>2.6 ViewStub</h3><pre><code class=\"kotlin\">//ViewStub 只能手动调用绑定类的bind方法\nbinding.layoutViewStub.setOnInflateListener { _, inflateId -&gt;\n    val layoutInfoViewStubBinding = LayoutInfoViewStubBinding.bind(inflateId)\n    val tvInfoViewStub = layoutInfoViewStubBinding.tvInfoViewStub\n    tvInfoViewStub.text = &quot;tvInfoViewStub:$item&quot;\n}\nbinding.layoutViewStub.inflate()</code></pre>\n<p>详细的测试代码参考：<a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\"><strong>Github | VBHelper</strong></a></p>\n<h2 id=\"3-VB-与-Kotlin-by\"><a href=\"#3-VB-与-Kotlin-by\" class=\"headerlink\" title=\"3. VB 与 Kotlin by\"></a>3. VB 与 Kotlin by</h2><p>采用 Kotlin 属性代理简化 VB 使用的三方库</p>\n<ul>\n<li><strong><a href=\"https://github.com/androidbroadcast/ViewBindingPropertyDelegate\" target=\"_blank\" rel=\"noopener\">ViewBindingPropertyDelegate</a></strong></li>\n<li><strong><a href=\"https://github.com/DylanCaiCoding/ViewBindingKTX\" target=\"_blank\" rel=\"noopener\">ViewBindingKTX</a></strong></li>\n<li><strong><a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\">VBHelper</a></strong>：这个是我写这篇文章提取的一个库，借鉴了上面两个的实现，精简了一些代码</li>\n</ul>\n<h3 id=\"3-1-KT-属性代理：by-lazy\"><a href=\"#3-1-KT-属性代理：by-lazy\" class=\"headerlink\" title=\"3.1 KT 属性代理：by lazy\"></a>3.1 KT 属性代理：<code>by</code> <code>lazy</code></h3><ul>\n<li><p>by关键字实际上就是一个属性代理运算符重载的符号，任何一个具备属性代理规则的类，都可以使用by关键字对属性进行代理。</p>\n</li>\n<li><p><code>by</code>关键字后面带有一个代理对象，这个代理类不一定要实现特定的接口，但是需要包含下面这两个方法的签名（val 只需要 getValue ），它就能作为一个代理属性来使用。</p>\n</li>\n<li><pre><code class=\"kotlin\">//这个是扩展的实现方式，lazy就是采用的这种\noperator fun MyDelegate.getValue(thisRef: Any?, property: KProperty&lt;*&gt;): String = this.value\n\nclass MyDelegate {\n    var value: String = &quot;YYY&quot;\n    //todo 代理类里面必须提供 getValue 方法，或者扩展这个方法也可\n    operator fun getValue(thisRef: Any, property: KProperty&lt;*&gt;): String {\n        return value\n    }\n    operator fun setValue(thisRef: Any, property: KProperty&lt;*&gt;, s: String) {\n        value = s\n    }\n}</code></pre>\n</li>\n<li><p>lazy  是Kotlin 内部对对属性代理的一个最佳实践，lazy 返回一个实现了 Lazy 接口的代理类，默认是 <code>SynchronizedLazyImpl</code>，</p>\n</li>\n<li><p>Lazy<T> 有个扩展方法，符合属性代理的规则</p>\n</li>\n<li><pre><code class=\"kotlin\">public inline operator fun &lt;T&gt; Lazy&lt;T&gt;.getValue(thisRef: Any?, property: KProperty&lt;*&gt;): T = value</code></pre>\n</li>\n</ul>\n<h3 id=\"3-2-KT-内联函数-inline-与泛型实化类型参数-reified\"><a href=\"#3-2-KT-内联函数-inline-与泛型实化类型参数-reified\" class=\"headerlink\" title=\"3.2 KT 内联函数 inline 与泛型实化类型参数 reified\"></a>3.2 KT 内联函数 <code>inline</code> 与泛型实化类型参数 <code>reified</code></h3><p><a href=\"https://www.kotlincn.net/docs/reference/inline-functions.html#%E5%85%B7%E4%BD%93%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><a href=\"https://github.com/JetBrains/kotlin/blob/master/spec-docs/reified-type-parameters.md\" target=\"_blank\" rel=\"noopener\">reified-type-parameters</a></p>\n<p>Kotlin和Java同样存在泛型类型擦除的问题，但是 Kotlin 通过 inline 内联函数使得泛型类的类型实参在运行时能够保留，这样的操作 Kotlin 中把它称为实化，对应需要使用 reified 关键字。</p>\n<ul>\n<li><p>满足实化类型参数函数的必要条件</p>\n<ul>\n<li>必须是 inline 内联函数，使用 inline 关键字修饰</li>\n<li>泛型类定义泛型形参时必须使用 reified 关键字修饰</li>\n</ul>\n</li>\n<li><p>带实化类型参数的函数基本定义</p>\n<pre><code class=\"kotlin\">//类型形参T是泛型函数isInstanceOf的实化类型参数\ninline fun &lt;reified T&gt; isInstanceOf(value: Any): Boolean = value is T </code></pre>\n</li>\n</ul>\n<h3 id=\"3-3-通过-lazy-属性代理-inflate方法引用\"><a href=\"#3-3-通过-lazy-属性代理-inflate方法引用\" class=\"headerlink\" title=\"3.3 通过 lazy 属性代理 + inflate方法引用\"></a>3.3 通过 lazy 属性代理 + inflate方法引用</h3><pre><code class=\"kotlin\">//通过 lazy 属性代理 + inflate方法引用\nfun &lt;VB : ViewBinding&gt; ComponentActivity.binding1(inflate: (LayoutInflater) -&gt; VB) =\n    lazy {\n        inflate(layoutInflater).also {\n            setContentView(it.root)\n        }\n    }</code></pre>\n<h3 id=\"3-4-通过-lazy-属性代理-反射\"><a href=\"#3-4-通过-lazy-属性代理-反射\" class=\"headerlink\" title=\"3.4 通过 lazy 属性代理 + 反射\"></a>3.4 通过 lazy 属性代理 + 反射</h3><pre><code class=\"kotlin\">//通过 lazy 属性代理 + 反射\n//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等\ninline fun &lt;reified VB : ViewBinding&gt; ComponentActivity.binding3() =\n    lazy {\n        //经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding\n        val viewBinding: VB = VB::class.java.getMethod(&quot;inflate&quot;, LayoutInflater::class.java)\n            .invoke(null, layoutInflater) as VB\n        viewBinding.also {\n            setContentView(it.root)\n        }\n    }</code></pre>\n<h3 id=\"3-5-通过自定义属性代理-inflate方法引用\"><a href=\"#3-5-通过自定义属性代理-inflate方法引用\" class=\"headerlink\" title=\"3.5 通过自定义属性代理 + inflate方法引用\"></a>3.5 通过自定义属性代理 + inflate方法引用</h3><pre><code class=\"kotlin\">//通过自定义属性代理 + inflate方法引用\nfun &lt;VB : ViewBinding&gt; ComponentActivity.binding2(inflate: (LayoutInflater) -&gt; VB) =\n    ReadOnlyProperty&lt;ComponentActivity, VB&gt; { thisRef, property -&gt;\n        inflate(layoutInflater).also {\n            setContentView(it.root)\n        }\n    }</code></pre>\n<h3 id=\"3-6-通过自定义属性代理-反射\"><a href=\"#3-6-通过自定义属性代理-反射\" class=\"headerlink\" title=\"3.6 通过自定义属性代理+ 反射\"></a>3.6 通过自定义属性代理+ 反射</h3><pre><code class=\"kotlin\">//通过自定义属性代理+ 反射\n//reified 实化类型参数，作用是将泛型替换为真实的类型用于反射等\ninline fun &lt;reified VB : ViewBinding&gt; ComponentActivity.binding4() =\n    ReadOnlyProperty&lt;ComponentActivity, VB&gt; { thisRef, property -&gt;\n        //经过内联后VB是可以确切知道具体类型的，所以这里可以反射获取具体的 ViewBinding\n        val viewBinding: VB = VB::class.java.getMethod(&quot;inflate&quot;, LayoutInflater::class.java)\n            .invoke(null, layoutInflater) as VB\n        viewBinding.also {\n            setContentView(it.root)\n        }\n    }</code></pre>\n<p>四种方式的使用</p>\n<pre><code class=\"kotlin\">//通过 lazy 属性代理 + inflate方法引用\nprivate val binding1 by binding1(ActivityMainBinding::inflate)\n//通过自定义属性代理 + inflate方法引用\nprivate val binding2 by binding2(ActivityMainBinding::inflate)\n//通过 lazy 属性代理 + 反射\nprivate val binding3: ActivityMainBinding by binding3()\n//通过自定义属性代理+ 反射\nprivate val binding4: ActivityMainBinding by binding4()</code></pre>\n<p>其它 Fragment、View、Adapter 等绑定类的生成方式可以根据上面的方式灵活调整，也可参考：<a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\"><strong>Github | VBHelper</strong></a></p>\n<p><strong>注意的地方：</strong></p>\n<ul>\n<li>反射的方式我这里都是通过绑定类的 inflate 方法，也可以反射 bind 方法，就是入参不同可以根据具体情况灵活调整。</li>\n<li>merge 标签作为根视图生成的绑定类的inflate 方法只有一个两参数的 其它情况都是一参和三参同时生成，反射时需要兼容一下，VBHelper 没有兼容这一点有需要的可以处理一下，具体做法就是 try-cache 分别处理。</li>\n</ul>\n<pre><code class=\"java\">@NonNull\npublic static LayoutInfoMergeBinding inflate(@NonNull LayoutInflater inflater,\n    @NonNull ViewGroup parent) {\n  if (parent == null) {\n    throw new NullPointerException(&quot;parent&quot;);\n  }\n  inflater.inflate(R.layout.layout_info_merge, parent);\n  return bind(parent);\n}</code></pre>\n<h2 id=\"4-VB-原理解析\"><a href=\"#4-VB-原理解析\" class=\"headerlink\" title=\"4. VB 原理解析\"></a>4. VB 原理解析</h2><h3 id=\"4-1-LayoutInflater-原理与参数解析\"><a href=\"#4-1-LayoutInflater-原理与参数解析\" class=\"headerlink\" title=\"4.1 LayoutInflater 原理与参数解析\"></a>4.1 LayoutInflater 原理与参数解析</h3><p><a href=\"https://juejin.cn/post/6844903919286485000\" target=\"_blank\" rel=\"noopener\">参考：反思|Android LayoutInflater机制的设计与实现</a></p>\n<h4 id=\"获取-LayoutInflater-三种方式\"><a href=\"#获取-LayoutInflater-三种方式\" class=\"headerlink\" title=\"获取 LayoutInflater 三种方式\"></a>获取 LayoutInflater 三种方式</h4><pre><code class=\"kotlin\">//获取 LayoutInflater\n//1、通过 LayoutInflater 的静态方法 from 获取，内部调用的是第二种\nval layoutInflater1: LayoutInflater = LayoutInflater.from(this)\n//2、通过系统服务 getSystemService 方法获取\nval layoutInflater2: LayoutInflater =\n    getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n//3、如果是在 Activity 或 Fragment 可直接获取到实例\nval layoutInflater3: LayoutInflater = layoutInflater //相当于调用 getLayoutInflater()\n\n//三种方式在 Activity 范围内是单例\nLog.d(&quot;Jay&quot;, &quot;layoutInflater1:${layoutInflater1.hashCode()}&quot;)\nLog.d(&quot;Jay&quot;, &quot;layoutInflater2:${layoutInflater2.hashCode()}&quot;)\nLog.d(&quot;Jay&quot;, &quot;layoutInflater3:${layoutInflater3.hashCode()}&quot;)\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater1:31503528\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater2:31503528\n//2021-09-06 23:41:52.925 6353-6353/com.jay.vbhelper D/Jay: layoutInflater3:31503528</code></pre>\n<p>无论哪种方式获取最终都会走到 ContextThemeWrapper 类中 getSystemService</p>\n<h4 id=\"PhoneLayoutInflater-创建流程\"><a href=\"#PhoneLayoutInflater-创建流程\" class=\"headerlink\" title=\"PhoneLayoutInflater 创建流程\"></a>PhoneLayoutInflater 创建流程</h4><p>获取 LayoutInflater 三种方式最终会调到 ContextThemeWrapper#getSystemService</p>\n<pre><code class=\"kotlin\">//class ContextThemeWrapper extends ContextWrapper\n@Override\npublic Object getSystemService(String name) {\n    if (LAYOUT_INFLATER_SERVICE.equals(name)) {\n        if (mInflater == null) {\n            mInflater = LayoutInflater.from(getBaseContext()).cloneInContext(this);\n        }\n        return mInflater;\n    }\n    return getBaseContext().getSystemService(name);\n}</code></pre>\n<p>cloneInContext 是 LayoutInflater 接口的方法，LayoutInflater 唯一实现类是 PhoneLayoutInflater</p>\n<pre><code class=\"kotlin\">//class PhoneLayoutInflater extends LayoutInflater\npublic LayoutInflater cloneInContext(Context newContext) {\n    return new PhoneLayoutInflater(this, newContext);\n}</code></pre>\n<h4 id=\"布局填充流程\"><a href=\"#布局填充流程\" class=\"headerlink\" title=\"布局填充流程\"></a>布局填充流程</h4><p>方法签名</p>\n<pre><code class=\"kotlin\">1.public View inflate(XmlPullParser parser, @Nullable ViewGroup root)\n2.public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)\n3.public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)\n4.public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)</code></pre>\n<p>四个 inflate 的重载方法最终都会调用到第四个，下面是四个方法的使用</p>\n<pre><code class=\"kotlin\">//调用 LayoutInflater.inflate 的四个方法重载\n//如果传入的 root 为 null ，此时会将 Xml 布局生成的根 View 对象直接返回\nval view1_1 = layoutInflater3.inflate(R.layout.layout_view, null)\n//这种方式加载的布局不需要再次addView(),否则：Caused by: java.lang.IllegalStateException: The specified child already has a parent. You must call removeView() on the child&#39;s parent first.\n//如果传入的 root 不为 null 且 attachToRoot 为 true，此时会将 Xml 布局生成的根 View 通过 addView 方法携带布局参数添加到 root 中\n//如果 root 参数不为空 和 view2_1 一样\nval view1_2 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer)\n//第一个参数代表所要加载的布局，第二个参数是ViewGroup，这个参数需要与第3个参数配合使用，attachToRoot如果为true就把布局添加到ViewGroup中；若为false则只采用ViewGroup的LayoutParams作为测量的依据却不直接添加到ViewGroup中。\nval view2_1 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer, true)\n//如果传入的 root 不为 null 且 attachToRoot 为 false，此时会给 Xml 布局生成的根 View 设置布局参数\nval view2_2 = layoutInflater3.inflate(R.layout.layout_view, binding.clContainer, false)\nval parser: XmlResourceParser = resources.getLayout(R.layout.layout_view)\n//这两个重载方法不常用\nval view3 = layoutInflater3.inflate(parser, binding.clContainer)\nval view4 = layoutInflater3.inflate(parser, binding.clContainer, false)\nbinding.clContainer.addView(view1_1)</code></pre>\n<p>无论是 Activity 中 setContentView 加载内容还是 DecorView 加载屏幕根视图都是通过 LayoutInflater 加载。</p>\n<p>inflate 方法，详细的加载过程会单独整理一篇文章</p>\n<pre><code class=\"java\">public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot) {\n    synchronized (mConstructorArgs) {\n        Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;inflate&quot;);\n        final Context inflaterContext = mContext;\n        final AttributeSet attrs = Xml.asAttributeSet(parser);\n        Context lastContext = (Context) mConstructorArgs[0];\n        mConstructorArgs[0] = inflaterContext;\n        View result = root;\n        try {\n            advanceToRootNode(parser);\n            final String name = parser.getName();\n            if (TAG_MERGE.equals(name)) {\n                if (root == null || !attachToRoot) {\n                    throw new InflateException(&quot;&lt;merge /&gt; can be used only with a valid &quot;+ &quot;ViewGroup root and attachToRoot=true&quot;);\n                }\n                                //merge 根视图单独处理\n                rInflate(parser, root, inflaterContext, attrs, false);\n            } else {\n                //Temp 是在 xml 中找到的根视图\n                final View temp = createViewFromTag(root, name, inflaterContext, attrs);\n\n                ViewGroup.LayoutParams params = null;\n\n                if (root != null) {\n\n                    // 创建与根匹配的布局参数（如果提供）\n                    params = root.generateLayoutParams(attrs);\n                    if (!attachToRoot) {\n                        // 如果我们不附加，请为 temp 设置根布局的布局参数\n                        temp.setLayoutParams(params);\n                    }\n                }\n                // 将所有处于临时状态的孩子都根据其上下文进行布局填充。\n                rInflateChildren(parser, temp, attrs, true);\n                // 将所有视图添加到 root\n                if (root != null &amp;&amp; attachToRoot) {\n                    root.addView(temp, params);\n                }\n                // 返回传入的 root 还是在 xml 中找到的顶视图。\n                if (root == null || !attachToRoot) {\n                    result = temp;\n                }\n            }\n        } \n        return result;\n    }\n}</code></pre>\n<p><strong>LayoutInflater 参数说明</strong></p>\n<p><code>layoutResID：</code>代表所要加载的布局资源id，</p>\n<p><code>root：</code>是ViewGroup类型，这个参数需要与第3个参数配合使用，</p>\n<p><code>attachToRoot：</code>如果为<code>true</code>就把布局添加到 <code>root</code> 中；若为<code>false</code>则只采用<code>ViewGroup</code>的<code>LayoutParams</code>作为测量的依据却不直接添加到<code>ViewGroup</code>中。</p>\n<p><code>parser：</code>包含布局层次结构描述的 XML dom 节点。</p>\n<p><strong>LayoutInflater.Factory 接口的扩展功能</strong></p>\n<p><code>LayoutInflater</code>设计了一个<code>LayoutInflater.Factory</code>接口，该接口设计得非常巧妙：在<code>xml</code>解析过程中，开发者可以通过配置该接口对<code>View</code>的创建过程进行拦截：<strong>通过new的方式创建控件以避免大量地使用反射</strong>,<code>Factory</code>接口的意义是在<code>xml</code>解析过程中，开发者可以通过配置该接口对<code>View</code>的创建过程进行拦截</p>\n<h4 id=\"LayoutInflater-总结\"><a href=\"#LayoutInflater-总结\" class=\"headerlink\" title=\"LayoutInflater 总结\"></a>LayoutInflater 总结</h4><p>获取 LayoutInflater实例最终都会走到 ContextThemeWrapper 类中 getSystemService 构建一个局部单例的 <strong>PhoneLayoutInflater</strong> 实例。</p>\n<p>LayoutInflater 布局填充有四个重载方法，最终都会调用到同一个方法，再根据传递的参数做不同的加载处理</p>\n<h3 id=\"4-2-ActivityMainBinding-类的绑定过程\"><a href=\"#4-2-ActivityMainBinding-类的绑定过程\" class=\"headerlink\" title=\"4.2 ActivityMainBinding 类的绑定过程\"></a>4.2 ActivityMainBinding 类的绑定过程</h3><h4 id=\"inflate-过程\"><a href=\"#inflate-过程\" class=\"headerlink\" title=\"inflate 过程\"></a>inflate 过程</h4><p>View 类中通过调用apt 自动生成的绑定类的inflate方法或者 bind 方法获取绑定类</p>\n<pre><code class=\"kotlin\">//CustomView\nval layoutInflater: LayoutInflater = LayoutInflater.from(context)\nval binding = LayoutViewBinding.inflate(layoutInflater, this, true)\n//SecondFragment\noverride fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedIS: Bundle?): View {\n    _binding = FragmentSecondBinding.inflate(inflater, container, false)\n    return binding.root\n}\n//include+merge 只能手动调用绑定类的bind方法\nval layoutInfoMergeBinding = LayoutInfoMergeBinding.bind(binding.root)</code></pre>\n<p>绑定类的 inflate 方法，通过传入的 LayoutInflater 将 layout 填充为 View</p>\n<pre><code class=\"kotlin\">//class FragmentSecondBinding implements ViewBinding\n@NonNull\npublic static FragmentSecondBinding inflate(@NonNull LayoutInflater inflater,\n    @Nullable ViewGroup parent, boolean attachToParent) {\n  View root = inflater.inflate(R.layout.fragment_second, parent, false);\n  //这里的 attachToParent 参数为 true 时不知为何不传入 LayoutInflater 来 addView 而是自己单独做了判断\n  if (attachToParent) {\n    parent.addView(root);\n  }\n  return bind(root);\n}</code></pre>\n<h4 id=\"bind-过程\"><a href=\"#bind-过程\" class=\"headerlink\" title=\"bind 过程\"></a>bind 过程</h4><p>从 inflate 过程填充的视图中(或者是从外部传入的 View)实例化所有控件并构建绑定类</p>\n<pre><code class=\"kotlin\">  @NonNull\n  public static FragmentSecondBinding bind(@NonNull View rootView) {\n    //此方法的主体是以您不会编写的方式生成的。这样做是为了优化已编译的字节码的大小和性能。\n    int id;\n    missingId: {\n      //根布局中的普通控件\n      id = R.id.button_second;\n      Button buttonSecond = ViewBindings.findChildViewById(rootView, id);\n      if (buttonSecond == null) {\n        break missingId;\n      }\n      //根布局中的 include 标签\n      id = R.id.include_layout;\n      View includeLayout = ViewBindings.findChildViewById(rootView, id);\n      if (includeLayout == null) {\n        break missingId;\n      }\n      LayoutInfoBinding binding_includeLayout = LayoutInfoBinding.bind(includeLayout);\n            //ViewStub标签\n      id = R.id.layout_view_stub;\n      ViewStub layoutViewStub = ViewBindings.findChildViewById(rootView, id);\n      if (layoutViewStub == null) {\n        break missingId;\n      }\n            //自定义 View\n      id = R.id.name;\n      CustomView name = ViewBindings.findChildViewById(rootView, id);\n      if (name == null) {\n        break missingId;\n      }\n\n             //include+merge 没有生成对应的类型，只能手动调用绑定类的bind方法\n\n      //构建绑定类，并将所有控件赋值给类属性\n      return new FragmentSecondBinding((ConstraintLayout) rootView, buttonSecond, flSecond,\n          binding_includeLayout, layoutViewStub, llInfo, name, textviewSecond);\n    }\n    // 如果有任何一个控件在 findChildViewById 过程中没有被找到就会抛NPE异常\n    String missingId = rootView.getResources().getResourceName(id);\n    throw new NullPointerException(&quot;Missing required view with ID: &quot;.concat(missingId));\n  }\n}</code></pre>\n<p>遍历根视图匹配布局文件中的id并通过findViewById方法返回View实例</p>\n<pre><code class=\"kotlin\">//ViewBindings\n/**\n Like `findViewById` but skips the view itself.\n */\n@Nullable\npublic static &lt;T extends View&gt; T findChildViewById(View rootView, @IdRes int id) {\n    if (!(rootView instanceof ViewGroup)) {\n        return null;\n    }\n    final ViewGroup rootViewGroup = (ViewGroup) rootView;\n    final int childCount = rootViewGroup.getChildCount();\n    for (int i = 0; i &lt; childCount; i++) {\n        final T view = rootViewGroup.getChildAt(i).findViewById(id);\n        if (view != null) {\n            return view;\n        }\n    }\n    return null;\n}</code></pre>\n<h4 id=\"绑定过程总结\"><a href=\"#绑定过程总结\" class=\"headerlink\" title=\"绑定过程总结\"></a>绑定过程总结</h4><p>DataBinding 借助 AGP 会为所有布局文件自动生成绑定类</p>\n<p>绑定类的 inflate 方法通过传入的布局填充器 LayoutInflater 以及自动收集的根布局 id 加载出根布局 rootView 然后传给 bind 方法实例化控件</p>\n<p>绑定类的 bind 方法通过传入的根布局以及自动收集的控件 id 实例化所有控件 并构建绑定类</p>\n<h3 id=\"4-3-ActivityMainBinding-类的生成过程\"><a href=\"#4-3-ActivityMainBinding-类的生成过程\" class=\"headerlink\" title=\"4.3 ActivityMainBinding 类的生成过程\"></a>4.3 ActivityMainBinding 类的生成过程</h3><p><a href=\"https://juejin.cn/post/6844904106268557326\" target=\"_blank\" rel=\"noopener\">参考：ViewBinding 的本质</a></p>\n<p><a href=\"https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common\" target=\"_blank\" rel=\"noopener\">DataBinding Compiler Common</a></p>\n<p>依赖源码方便查看</p>\n<pre><code class=\"groovy\">//todo 依赖 databinding-compiler 方便查看 ViewBinding 类的生成过程\n// https://mvnrepository.com/artifact/androidx.databinding/databinding-compiler-common\nimplementation group: &#39;androidx.databinding&#39;, name: &#39;databinding-compiler-common&#39;, version: &#39;7.0.1&#39;\n// https://mvnrepository.com/artifact/com.android.tools.build/gradle\nimplementation group: &#39;com.android.tools.build&#39;, name: &#39;gradle&#39;, version: &#39;7.0.1&#39;</code></pre>\n<p>ViewBinding 是属于 dataBinding 库里面的一个小功能,对于解析布局文件生成绑定类的逻辑是通用的，</p>\n<h4 id=\"阶段一：解析xml布局文件\"><a href=\"#阶段一：解析xml布局文件\" class=\"headerlink\" title=\"阶段一：解析xml布局文件\"></a>阶段一：解析xml布局文件</h4><p><strong>LayoutXmlProcessor</strong>：处理布局 XML，剥离绑定属性和元素，并将信息写入带注解的类文件以供注释处理器使用</p>\n<p><strong>processResources</strong>：假装这个方法就是布局文件改动后调用的入口方法（应该是由AGP 触发，暂时未找到）</p>\n<pre><code class=\"java\">\nandroid.databinding.tool.LayoutXmlProcessor\n\npublic boolean processResources(ResourceInput input, boolean isViewBindingEnabled, boolean isDataBindingEnabled)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n    ProcessFileCallback callback = new ProcessFileCallback() {\n    //省略回调代码\n    }\n    //布局文件的改动输入源支持增量构建\n    if (input.isIncremental()) {\n        processIncrementalInputFiles(input, callback);\n    } else {\n        processAllInputFiles(input, callback);\n    }\n    return true;\n}</code></pre>\n<p>processIncrementalInputFiles 处理增量输入（Added、Removed、Changed）</p>\n<p>processAllInputFiles 处理全部输入</p>\n<pre><code class=\"java\">//遍历文件\nfor (File firstLevel : input.getRootInputFolder().listFiles())\n//处理 layout_xx 目录下面的 xxx.xml 文件\nif (LAYOUT_FOLDER_FILTER.accept(firstLevel, firstLevel.getName())) {\n    callback.processLayoutFolder(firstLevel);\n    //noinspection ConstantConditions\n    for (File xmlFile : firstLevel.listFiles(XML_FILE_FILTER)) {\n        callback.processLayoutFile(xmlFile);\n    }\n}</code></pre>\n<p>ProcessFileCallback 扫描文件后的回调</p>\n<pre><code class=\"java\">public void processLayoutFile(File file)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n          //处理单个文件，\n    processSingleFile(RelativizableFile.fromAbsoluteFile(file, null),\n            convertToOutFile(file), isViewBindingEnabled, isDataBindingEnabled);\n}</code></pre>\n<p>processSingleFile </p>\n<pre><code class=\"java\">public boolean processSingleFile(@NonNull RelativizableFile input, @NonNull File output,\n        boolean isViewBindingEnabled, boolean isDataBindingEnabled)\n        throws ParserConfigurationException, SAXException, XPathExpressionException,\n        IOException {\n          //解析xml文件 封账布局文件扫描类\n    final ResourceBundle.LayoutFileBundle bindingLayout = LayoutFileParser\n            .parseXml(input, output, mResourceBundle.getAppPackage(), mOriginalFileLookup,\n                    isViewBindingEnabled, isDataBindingEnabled);\n    if (bindingLayout == null\n            || (bindingLayout.isBindingData() &amp;&amp; bindingLayout.isEmpty())) {\n        return false;\n    }\n          //添加到map缓存起来\n    mResourceBundle.addLayoutBundle(bindingLayout, true);\n    return true;\n}</code></pre>\n<p><strong>LayoutFileParser</strong>：获取 XML 文件列表并创建可以持久化或转换为 LayoutBinder 的ResourceBundle列表</p>\n<p>android.databinding.tool.store public final class LayoutFileParser</p>\n<p>parseXml:路径、编码、校验等</p>\n<p>parseOriginalXml :将布局文件解析为描述类</p>\n<pre><code class=\"java\">private static ResourceBundle.LayoutFileBundle parseOriginalXml(\n        @NonNull final RelativizableFile originalFile, @NonNull final String pkg,\n        @NonNull final String encoding, boolean isViewBindingEnabled,\n        boolean isDataBindingEnabled)\n        throws IOException {}\n\n//layout 标签判断databinding\nXMLParser.ElementContext root = expr.element();\nboolean isBindingData = &quot;layout&quot;.equals(root.elmName.getText());\n//dataBinding\nif (isBindingData) {\n    if (!isDataBindingEnabled) {\n        L.e(ErrorMessages.FOUND_LAYOUT_BUT_NOT_ENABLED);\n        return null;\n    }\n    data = getDataNode(root);\n    rootView = getViewNode(original, root);\n} else if (isViewBindingEnabled) {\n  //viewBindingIgnore 根布局添加这个属性为true可以跳过生成绑定类的过程\n    if (&quot;true&quot;.equalsIgnoreCase(attributeMap(root).get(&quot;tools:viewBindingIgnore&quot;))) {\n        L.d(&quot;Ignoring %s for view binding&quot;, originalFile);\n        return null;\n    }\n    data = null;\n    rootView = root;\n} else {\n    return null;\n}\n\n//dataBinding &lt;include&gt; 元素不支持作为 &lt;merge&gt; 元素的直接子元素\nboolean isMerge = &quot;merge&quot;.equals(rootView.elmName.getText());\nif (isBindingData &amp;&amp; isMerge &amp;&amp; !filter(rootView, &quot;include&quot;).isEmpty()) {\n//public static final String INCLUDE_INSIDE_MERGE = &quot;&lt;include&gt; elements are not supported as direct children of &lt;merge&gt; elements&quot;;\n    L.e(ErrorMessages.INCLUDE_INSIDE_MERGE);\n    return null;\n}\n\nString rootViewType = getViewName(rootView);\nString rootViewId = attributeMap(rootView).get(&quot;android:id&quot;);\n//构建布局描述的封装类\nResourceBundle.LayoutFileBundle bundle =\n    new ResourceBundle.LayoutFileBundle(\n        originalFile, xmlNoExtension, original.getParentFile().getName(), pkg,\n        isMerge, isBindingData, rootViewType, rootViewId);\nfinal String newTag = original.getParentFile().getName() + &#39;/&#39; + xmlNoExtension;\n//data 数据只有 databinding 才会有的元素，viewBinding 是不会去解析的\nparseData(original, data, bundle);\n//解析表达式，这里面会循环遍历元素，解析 view 的 id、tag、include、fragment 等等 xml 相关的元素，并且还有 databinding 相关的 @={ 的表达式，最后将结果缓存起来\nparseExpressions(newTag, rootView, isMerge, bundle);</code></pre>\n<h4 id=\"阶段二：输出描述文件\"><a href=\"#阶段二：输出描述文件\" class=\"headerlink\" title=\"阶段二：输出描述文件\"></a>阶段二：输出描述文件</h4><p><strong>LayoutXmlProcessor</strong></p>\n<p><strong>writeLayoutInfoFiles</strong>：这个方法的执行点可以在AGP里面找到，task 为：<strong>com.android.build.gradle.tasks.MergeResources</strong></p>\n<p><strong>MergeResources</strong></p>\n<pre><code class=\"java\">@Override\npublic void doTaskAction(@NonNull InputChanges changedInputs) {\n    ...\n    SingleFileProcessor dataBindingLayoutProcessor = maybeCreateLayoutProcessor();\n    if (dataBindingLayoutProcessor != null) {\n        dataBindingLayoutProcessor.end();\n    }\n    ...\n}</code></pre>\n<pre><code class=\"java\">//maybeCreateLayoutProcessor\nreturn new SingleFileProcessor() {\n\n    private LayoutXmlProcessor getProcessor() {\n        return processor;\n    }\n\n    @Override\n    public boolean processSingleFile(\n            @NonNull File inputFile,\n            @NonNull File outputFile,\n            @Nullable Boolean inputFileIsFromDependency)\n            throws Exception {\n        return getProcessor()\n               .processSingleFile(\n                        normalizedInputFile,\n                        outputFile,\n                        getViewBindingEnabled().get(),\n                        getDataBindingEnabled().get());\n    }\n    @Override\n    public void end() throws JAXBException {\n        getProcessor().writeLayoutInfoFiles(getDataBindingLayoutInfoOutFolder().get().getAsFile());\n    }\n};\n\n//输出路径可以从这里查看\nartifacts.setInitialProvider(taskProvider, MergeResources::getDataBindingLayoutInfoOutFolder)\n        .withName(&quot;out&quot;)\n        .on( mergeType == MERGE? DATA_BINDING_LAYOUT_INFO_TYPE_MERGE.INSTANCE\n                        : DATA_BINDING_LAYOUT_INFO_TYPE_PACKAGE.INSTANCE);</code></pre>\n<p><strong>writeLayoutInfoFiles</strong></p>\n<pre><code class=\"java\">public void writeLayoutInfoFiles(File xmlOutDir, JavaFileWriter writer) throws JAXBException {\n    //遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径\n    for (ResourceBundle.LayoutFileBundle layout : mResourceBundle\n            .getAllLayoutFileBundlesInSource()) {\n        writeXmlFile(writer, xmlOutDir, layout);\n    }\n}</code></pre>\n<p>writeXmlFile</p>\n<pre><code class=\"kotlin\">private void writeXmlFile(JavaFileWriter writer, File xmlOutDir,\n        ResourceBundle.LayoutFileBundle layout)\n        throws JAXBException {\n    String filename = generateExportFileName(layout);//  fileName + &#39;-&#39; + dirName + &quot;.xml&quot;;\n          //遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径\n    writer.writeToFile(new File(xmlOutDir, filename), layout.toXML());\n}</code></pre>\n<p>描述文件的生成路径为：app/build/intermediates/data_binding_layout_info_type_merge/debug/out</p>\n<pre><code class=\"xml\">//fragment_second-layout.xml\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;\n&lt;Layout directory=&quot;layout&quot; filePath=&quot;app/src/main/res/layout/fragment_second.xml&quot;\n    isBindingData=&quot;false&quot; isMerge=&quot;false&quot; layout=&quot;fragment_second&quot;\n    modulePackage=&quot;com.jay.vbhelper&quot; rootNodeType=&quot;androidx.constraintlayout.widget.ConstraintLayout&quot;&gt;\n    &lt;Targets&gt;\n        &lt;Target tag=&quot;layout/fragment_second_0&quot;\n            view=&quot;androidx.constraintlayout.widget.ConstraintLayout&quot;&gt;\n            &lt;Expressions /&gt;\n            &lt;location endLine=&quot;78&quot; endOffset=&quot;51&quot; startLine=&quot;1&quot; startOffset=&quot;0&quot; /&gt;\n        &lt;/Target&gt;\n        &lt;Target id=&quot;@+id/ll_info&quot; tag=&quot;binding_1&quot;\n            view=&quot;androidx.appcompat.widget.LinearLayoutCompat&quot;&gt;\n            &lt;Expressions /&gt;\n            &lt;location endLine=&quot;51&quot; endOffset=&quot;50&quot; startLine=&quot;9&quot; startOffset=&quot;4&quot; /&gt;\n        &lt;/Target&gt;\n        &lt;Target id=&quot;@+id/include_layout&quot; include=&quot;layout_info&quot; tag=&quot;binding_1&quot;&gt;\n            &lt;Expressions /&gt;\n            &lt;location endLine=&quot;31&quot; endOffset=&quot;42&quot; startLine=&quot;29&quot; startOffset=&quot;8&quot; /&gt;\n        &lt;/Target&gt;\n        &lt;Target include=&quot;layout_info_merge&quot; tag=&quot;binding_1&quot;&gt;\n            &lt;Expressions /&gt;\n            &lt;location endLine=&quot;35&quot; endOffset=&quot;53&quot; startLine=&quot;35&quot; startOffset=&quot;8&quot; /&gt;\n        &lt;/Target&gt;\n\n    &lt;/Targets&gt;\n&lt;/Layout&gt;</code></pre>\n<h4 id=\"阶段三：输出绑定类\"><a href=\"#阶段三：输出绑定类\" class=\"headerlink\" title=\"阶段三：输出绑定类\"></a>阶段三：输出绑定类</h4><p>AGP Task DataBindingGenBaseClassesTask 触发</p>\n<p>com.android.build.gradle.internal.tasks.databinding.DataBindingGenBaseClassesTask</p>\n<p>DataBindingGenBaseClassesTask</p>\n<pre><code class=\"kotlin\">@TaskAction\nfun writeBaseClasses(inputs: IncrementalTaskInputs) {\n    // TODO extend NewIncrementalTask when moved to new API so that we can remove the manual call to recordTaskAction\n    recordTaskAction(analyticsService.get()) {\n        // TODO figure out why worker execution makes the task flake.\n        // Some files cannot be accessed even though they show up when directory listing is\n        // invoked.\n        // b/69652332\n        val args = buildInputArgs(inputs)\n        CodeGenerator(\n            args,\n            sourceOutFolder.get().asFile,\n            Logger.getLogger(DataBindingGenBaseClassesTask::class.java),\n            encodeErrors,\n            collectResources()).run()//触发生成流程\n    }\n}\n\n//绑定类生成器\nclass CodeGenerator @Inject constructor(\n    val args: LayoutInfoInput.Args,\n    private val sourceOutFolder: File,\n    private val logger: Logger,\n    private val encodeErrors: Boolean,\n    private val symbolTables: List&lt;SymbolTable&gt;? = null\n) : Runnable, Serializable {\n    override fun run() {\n        try {\n            initLogger()\n            BaseDataBinder(LayoutInfoInput(args), if (symbolTables != null) this::getRPackage else null)\n          //生成逻辑\n                .generateAll(DataBindingBuilder.GradleFileWriter(sourceOutFolder.absolutePath))\n        } finally {\n            clearLogger()\n        }\n    }\n    ...\n}\n\n//sourceOutFolder路径信息\ncreationConfig.artifacts.setInitialProvider(\n    taskProvider,\n    DataBindingGenBaseClassesTask::sourceOutFolder\n).withName(&quot;out&quot;).on(InternalArtifactType.DATA_BINDING_BASE_CLASS_SOURCE_OUT)</code></pre>\n<p>BaseDataBinder</p>\n<pre><code class=\"java\">@Suppress(&quot;unused&quot;)// used by tools\nclass BaseDataBinder(val input : LayoutInfoInput, val getRPackage: ((String, String) -&gt; (String))?) {\n    private val resourceBundle : ResourceBundle = ResourceBundle(\n            input.packageName, input.args.useAndroidX)\n      //\n    init {\n        input.filesToConsider .forEach {\n                    it.inputStream().use {\n                     // 又将上面收集的 layout，将 xml 转成 LayoutFileBundle\n                        val bundle = LayoutFileBundle.fromXML(it)\n                        resourceBundle.addLayoutBundle(bundle, true)\n                    }\n                }\n        resourceBundle.addDependencyLayouts(input.existingBindingClasses)\n        resourceBundle.validateAndRegisterErrors()\n    }\n\n\n\n    @Suppress(&quot;unused&quot;)// used by android gradle plugin\n    fun generateAll(writer : JavaFileWriter) {\n            // 拿到所有的 LayoutFileBundle，并根据文件名进行分组排序\n        val layoutBindings = resourceBundle.allLayoutFileBundlesInSource\n            .groupBy(LayoutFileBundle::getFileName).toSortedMap()\n\n        layoutBindings.forEach { layoutName, variations -&gt;\n            // 将 LayoutFileBundle 信息包装成 BaseLayoutModel\n            val layoutModel = BaseLayoutModel(variations, getRPackage)\n            val javaFile: JavaFile\n            val classInfo: GenClassInfoLog.GenClass\n            if (variations.first().isBindingData) {\n                val binderWriter = BaseLayoutBinderWriter(layoutModel, libTypes)\n                javaFile = binderWriter.write()\n                classInfo = binderWriter.generateClassInfo()\n            } else {\n              //不是DataBinding，按照 ViewBinding 处理\n              //toViewBinder 是 BaseLayoutModel 的拓展函数，他会将 LayoutFileBundle 包装成 ViewBinder 类返回 \n                val viewBinder = layoutModel.toViewBinder()\n              //toJavaFile 是 ViewBinder 的拓展函数，通过Javapoet生成Java文件\n                javaFile = viewBinder.toJavaFile(useLegacyAnnotations = !useAndroidX)\n                classInfo = viewBinder.generatedClassInfo()\n            }\n            writer.writeToFile(javaFile)\n            myLog.classInfoLog.addMapping(layoutName, classInfo)\n            variations.forEach {\n                it.bindingTargetBundles.forEach { bundle -&gt;\n                    if (bundle.isBinder) {\n                        myLog.addDependency(layoutName, bundle.includedLayout)\n                    }\n                }\n            }\n        }\n        input.saveLog(myLog)\n        // data binding will eat some errors to be able to report them later on. This is a good\n        // time to report them after the processing is done.\n        Scope.assertNoError()\n    }\n}</code></pre>\n<p>通过Javapoet 生成绑定类</p>\n<pre><code class=\"kotlin\">\nfun ViewBinder.toJavaFile(useLegacyAnnotations: Boolean = false) =\n    JavaFileGenerator(this, useLegacyAnnotations).create()\n\nfun create() = javaFile(binder.generatedTypeName.packageName(), typeSpec()) {\n    addFileComment(&quot;Generated by view binder compiler. Do not edit!&quot;)\n}\n\nprivate fun typeSpec() = classSpec(binder.generatedTypeName) {\n\n    addModifiers(PUBLIC, FINAL)\n    addSuperinterface(ClassName.get(viewBindingPackage, &quot;ViewBinding&quot;))\n\n    // TODO elide the separate root field if the root tag has an ID (and isn&#39;t a binder)\n    addField(rootViewField())\n    addFields(bindingFields())\n\n    addMethod(constructor())\n    addMethod(rootViewGetter())\n        //如果跟标签是 merge  是生成的两参数的infate 参数\n    if (binder.rootNode is RootNode.Merge) {\n        addMethod(mergeInflate())\n    } else {\n      //其它情况都是同时生成一参数和三参数的inflate方法\n        addMethod(oneParamInflate())\n        addMethod(threeParamInflate())\n    }\n\n    addMethod(bind())\n}</code></pre>\n<h4 id=\"生成过程总结\"><a href=\"#生成过程总结\" class=\"headerlink\" title=\"生成过程总结\"></a>生成过程总结</h4><p>实时更新生成：布局文件改动(新加/更新/删除)后AS或AGP或立即更新绑定类，这个过程还没找到对应的源码</p>\n<p>编译更新生成：AGP 不同的任务触发</p>\n<ul>\n<li>解析xml布局文件：LayoutXmlProcessor#processResources 方法应该是改动布局文件的输入口，暂时没找到对应的Task，收集过程支持增量更新。处理 layout_xx 目录下面的 xxx.xml 文件，解析xml文件的过程区分 DataBinding 和 ViewBinding ，最后的产物是 ResourceBundle.LayoutFileBundle 以及 HashMap&lt;String, List<LayoutFileBundle>&gt; mLayoutBundles</li>\n<li>输出描述文件：有AGP中的 <strong>MergeResources</strong>Task 触发 , 遍历之前收集到的所有 LayoutFileBundle，写入 xmlOutDir 路径, 这个xml文件中描述了布局的 文件路径、包名、布局名、控件id、控件行号等信息</li>\n<li>输出绑定类：AGP <strong>DataBindingGenBaseClassesTask</strong>触发，将上个过程生成的布局描述xml文件再解析成 LayoutFileBundle 类信息，然后再次包装这些信息，最后通过Javapoet 生成绑定类</li>\n</ul>\n<h4 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h4><ul>\n<li><p>布局文件更新后触发扫描和处理布局文件的操作也就是调用 processResources 方法的地方</p>\n<ul>\n<li>猜测AGP 和 AS 都有参与</li>\n</ul>\n</li>\n<li><p>为什么点击 ActivityMainBinding 会跳转到对应的布局文件</p>\n<ul>\n<li>这个猜测应该和编译相关，生成词法分析器和解析器代码</li>\n</ul>\n</li>\n<li><p>为什么添加了新的布局文件还没有编译就获取到绑定类，但是在data_binding_base_class_source_out路径下没有这个绑定类只有编译才会看到</p>\n<ul>\n<li><p>应该也有AS的份</p>\n</li>\n<li><p><a href=\"https://android.googlesource.com/platform/tools/adt/idea/+/refs/heads/mirror-goog-studio-master-dev/android-lang-databinding/\" target=\"_blank\" rel=\"noopener\">AS 中关于 DataBind 的一个库：Generate lexer and parser code</a></p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Kotlin | 委托(Delegation﻿)详解","date":"2021-08-31T06:16:55.000Z","cover":true,"summary":"委托模式与代理模式、接口委托、属性委托、映射委托、延迟属性、非空属性、可观察属性、ViewBinding+属性委、ViewModel+属性委托、SP+属性委托","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Kotlin | 委托(Delegation﻿)详解\n\n\n\n本文要点概述\n\n- 辨析委托模式与代理模式 \n\n- 接口委托(Delegated interface)\n\n- 属性委托(Delegated properties)\n\n- 映射委托(Map delegation)\n\n- 延迟属性(lazy properties)\n\n- 非空属性(Delegates.notNull)\n\n- 变量值更新后的监听(Delegates.observable)\n\n- 变量值更新前的拦截(Delegates.vetoable)\n\n- ViewBinding+属性委托\n\n- ViewModel+属性委托\n\n- SP +属性委托\n\n  \n\n## 1.委托模式 VS 代理模式 \n\n委托模式和代理模式都属于结构型设计模式，结构型模式主要总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。\n\n### 1.1 代理模式（Proxy Pattern）\n\n在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。在代理类中还可以提供额外的逻辑， 例如当真实对象上的操作是资源密集型任务时可以在代理中添加缓存操作，或者在调用真实对象操作之前做一些权限校验或检查行为等。一般情况下，我们让代理类和原始类实现同样的接口或者让代理类继承原始类来实现代理模式。\n\n### 1.2 委托模式（Delegation pattern）\n\n委托可以理解为是代理的一种变体，是一种使组合像继承一样实现代码复用的另一种设计模式。主要目的是组合委托调用和代码复用而不考虑控制访问等逻辑。在委托中处理请求涉及两个对象，委托方将操作交给受托方实现，类似于子类将请求推迟到父类。一般情况下，委托也可以通过接口约束或受托方继承委托方实现委托模式。\n\n### 1.3 法律层面区分代理与委托\n\n为了加深代理和委托的理解，我们看一下**法律层面的代理与委托的不同之处**\n\n- 民事主体活动的名义不同。 代理是指被代理人在代理权限范围内，以被代理人的名义同第三人独立为民事法律行为，由此产生的法律效果直接归属于被代理人的一种法律制度，即代理人必须以被代理人的名义为代理行为。 委托则是委托人委托受托人处理一定事务，受托人接受委托的协议，受托人可以以委托人的名义活动，也可以以自己的名义活动。\n\n- 适用范围不尽相同：代理只是代理人在代理权范围内以被代理人的名义同第三人的民事法律行为；而委托中的受托人办理委托人委托事务的行为可以是民事法律行为，还可以是有经济意义的行为（如整理账簿）和单纯的事实行为（如抄写文件）。\n\n- 效力范围不同：代理涉及三方当事人，即被代理人、代理人、第三人；委托则属于双方当事人之间的关系，即委托人、受托人。\n\n### 1.4 代码实现委托和代理\n\n代理模式和委托模式在代码实现上并没有太多差别，他们的差异还是在使用场景上，为了能更好的理解代理模式和委托模式，我们再来看看如何通过代码来实现\n\n代码参考自：**[ java-design-patterns](https://github.com/iluwatar/java-design-patterns)**\n\n[delegation](https://github.com/iluwatar/java-design-patterns/tree/master/delegation) ：打印机控制器将打印任务委托给不同的打印机\n\n```java\n// 委托二人组：打印机控制器、打印机（惠普打印机、佳能打印机、爱普生打印机）\n// 电脑上有三种打印机设备的驱动，分别将打印任务委托给对应的打印机执行具体的打印操作\nPrinterController hpPrinterController = new PrinterController(new HpPrinter());\nPrinterController canonPrinterController = new PrinterController(new CanonPrinter());\nPrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());\nhpPrinterController.print(MESSAGE_TO_PRINT);\ncanonPrinterController.print(MESSAGE_TO_PRINT);\nepsonPrinterController.print(MESSAGE_TO_PRINT);\n\n//打印机控制器\npublic class PrinterController implements Printer {\n  private final Printer printer;\n  public PrinterController(Printer printer) {\n    this.printer = printer;\n  }\n  /** \n   * 此方法是从 {@link Printer} 实现的，在提供实现时它会调用通过构造函数传递的委托方的 print 方法。 \n   * 这意味着委托关系一旦确定后，调用者不关心实现类，只关心拥有的打印机控制器就行。\n   */\n  @Override\n  public void print(String message) {\n    printer.print(message);\n  }\n}\n\n//三个打印机也实现了 Printer 接口 并提供了具体的打印功能，代码可以参考上面的链接\n```\n\n[proxy](https://github.com/iluwatar/java-design-patterns/tree/master/proxy) ：巫师要进入塔内修炼法术，象牙塔只能通过代理访问并确保只有前三个巫师可以进入。\n\n```java\n// 代理三人组：巫师塔代理、象牙塔、巫师\nWizardTowerProxy proxy = new WizardTowerProxy(new IvoryTower());\nproxy.enter(new Wizard(\"Red wizard\"));\nproxy.enter(new Wizard(\"White wizard\"));\nproxy.enter(new Wizard(\"Black wizard\"));\nproxy.enter(new Wizard(\"Green wizard\"));\nproxy.enter(new Wizard(\"Brown wizard\"));\n\n//代理方：塔代理\npublic class WizardTowerProxy implements WizardTower {\n  private static final int NUM_WIZARDS_ALLOWED = 3;\n  private final WizardTower tower;\n  private int numWizards;\n  //被代理方通过构造方法传入\n  public WizardTowerProxy(WizardTower tower) {\n    this.tower = tower;\n  }\n  //对象牙塔的访问的代理。第三方通过 enter 方法进入\n  @Override\n  public void enter(Wizard wizard) {\n    //超过三个就不让进了\n    if (numWizards < NUM_WIZARDS_ALLOWED) {\n      //代理方授权执行操作\n      tower.enter(wizard);\n      numWizards++;\n    } else {\n      System.out.println(\"{} is not allowed to enter!\" + wizard);\n    }\n  }\n}\n//被代理方：塔\npublic class IvoryTower implements WizardTower {\n  @Override\n  public void enter(Wizard wizard) {\n    System.out.println(\"{} enters the tower.\" + wizard);\n  }\n}\n//第三方：巫师\npublic class Wizard {\n  private String name;\n  public Wizard(String wizard) { this.name = wizard; }\n  @Override\n  public String toString() { return name; }\n}\n\n```\n\n\n\n## 2. 接口委托(Delegated interface)\n\n我们看看Kotlin 是怎么内置接口委托的，先看一下实现的委托模式的传统方式\n\n```kotlin\ninterface Api {\n    fun a()\n    fun b()\n    fun c()\n}\n//委托方\nclass ApiImpl : Api {\n    override fun a() { println(\"ApiImpl-a\") }\n    override fun b() { println(\"ApiImpl-b\") }\n    override fun c() { println(\"ApiImpl-c\") }\n}\n//受托方\nclass ApiWrapper(private val api: Api) : Api {\n    override fun a() {\n        println(\"ApiWrapper-a\")\n        api.a()\n    }\n    override fun b() {\n        println(\"ApiWrapper-b\")\n        api.b()\n    }\n    override fun c() {\n        println(\"ApiWrapper-c\")\n        api.b()\n    }\n}\n```\n\n再看看Kotlin 通过 `by` 关键字实现的简便方式\n\n```kotlin\n//变量 api代替 ApiWrapperWithDelegate 实现了 Api 接口，ApiWrapperWithDelegate 就可以灵活的复写需要的函数\nclass ApiWrapperWithDelegate(private val api: Api) : Api by api {\n    override fun a() {\n        println(\"ApiWrapperWithDelegate-a\")\n    }\n}\n\n\n//反编译 Java 后的代码和 ApiWrapper 是一样的\npublic final class ApiWrapperWithDelegate implements Api {\n   private final Api api;\n   public void a() {\n      String var1 = \"ApiWrapperWithDelegate-a\";\n      boolean var2 = false;\n      System.out.println(var1);\n   }\n   public ApiWrapperWithDelegate(@NotNull Api api) {\n      Intrinsics.checkNotNullParameter(api, \"api\");\n      super();\n      this.api = api;\n   }\n   public void b() {\n      this.api.b();\n   }\n   public void c() {\n      this.api.c();\n   }\n}\n```\n\n可以看到 Kotlin 内置的接口委托是编译器帮我们生成了相关代码\n\n再看一个实践的例子：利用接口代理实现一个集成了 map 和 list 的超级集合\n\n```kotlin\n// 对象 list 和 map 代理 SupperArrayWithDelegate 实现 MutableList，MutableMap\nclass SupperArrayWithDelegate<E>(\n    private val list: MutableList<E?> = mutableListOf(),\n    private val map: MutableMap<String, E> = mutableMapOf()\n) : MutableList<E?> by list, MutableMap<String, E> by map {\n    // 两个接口中都有，编译器不知道执行哪个，所以这些方法必须得重写\n    override fun clear() {\n        list.clear()\n        map.clear()\n    }\n    override fun isEmpty(): Boolean {\n        return list.isEmpty() && map.isEmpty()\n    }\n    override val size: Int get() = list.size + map.size\n    override fun set(index: Int, element: E?): E? {\n        if (index <= list.size) {\n            repeat(index - list.size - 1) {\n                list.add(null)\n            }\n        }\n        return list.set(index, element)\n    }\n    override fun toString(): String {\n        return \"list:$list,map:$map\"\n    }\n}\n```\n\n\n\n## 3. 属性委托(Delegated properties)\n\n\n\n### 3.1 属性(property)\n\n我们先通过对比 Java field 和 kotlin property  来探究一下 kt 中 property 的内部实现方式\n\n```java\n//PersonKotlin 尽量写的像Java好对比 Kotlin 属性背后做的事情\nclass PersonKotlin {\n    constructor(age: Int, name: String) {\n        this.age = age\n        this.name = name\n    }\n    private var age: Int? = null\n        //Redundant getter 属性的 get/set 方法由编译器自动生成\n        get() {\n            return field //这里的 field = backing field\n        }\n        set(value) {\n            field = value\n        }\n\n    private var name: String? = null\n        get() {\n            return field\n        }\n        set(value) {\n            field = value\n        }\n}\n\n//反编译 Java 后的代码\npublic final class PersonKotlin {\n   private Integer age; //field\n   private String name; //field\n   private final Integer getAge() {\n      return this.age;\n   }\n   private final void setAge(Integer value) {\n      this.age = value;\n   }\n   private final String getName() {\n      return this.name;\n   }\n   private final void setName(String value) {\n      this.name = value;\n   }\n   public PersonKotlin(int age, @NotNull String name) {\n      Intrinsics.checkNotNullParameter(name, \"name\");\n      super();\n      this.setAge(age);\n      this.setName(name);\n   }\n}\n```\n\n#### property(kotlin)=field(java)+getField()+setField()\n\n```java\n// age 属性背后包含了三个角色，backing field、get、set\nprivate var age: Int? = null\n//等价于下面的代码\n@Nullable\nprivate Integer age;\n@Nullable\npublic final Integer getAge() {\n   return this.age;\n}\npublic final void setAge(@Nullable Integer var1) {\n   this.age = var1;\n}\n```\n\n#### 属性引用(Property Reference)\n\n通过属性引用我们可以更清楚的了解 property 背后的 get 和 set 以及代理信息等\n\n```kotlin\nval ageRef: KMutableProperty1<PersonKotlin, Int?> = PersonKotlin::age\n//PersonKotlin::age 类名获取的属性引用不包含 receiver，操作时需要传递一个\nval personKotlin = PersonKotlin(18, \"Jay\")\nageRef.set(personKotlin, 22)\nprintln(ageRef.get(personKotlin))\n//22\n//public actual fun set(receiver: T, value: V)\n//public actual fun get(receiver: T): V\n//receiver - 用于获取属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器\n\n//测试自定义属性委托后获取属性的委托信息\nval nameRef: KProperty0<String?> = personKotlin::name\nprintln(\"personKotlin: \" + personKotlin.hashCode())\nprintln(\"nameRef: \" + nameRef.hashCode())\nprintln(\"personKotlin.name: \" + personKotlin.name.hashCode())\n\n//取： is KMutableProperty -> javaField?.isAccessible ?: true && javaGetter?.isAccessible ?: true &&javaSetter?.isAccessible ?: true\n//存： is KMutableProperty -> { javaField?.isAccessible = value javaGetter?.isAccessible = value javaSetter?.isAccessible = value }\n//设置是否访问，只有设置为 true 才可以拿到 属性引用中的委托信息（如果被委托了）这个属性需要单独引入 kotlin-reflect 库\nnameRef.isAccessible = true\n//如果这是一个委托属性，则返回委托的值，如果此属性未委托，则返回null\nval nameDelegate = nameRef.getDelegate()\nprintln(\"nameDelegate： $nameDelegate\") //返回委托信息\nprintln(nameRef.getter.invoke()) //相当于调用 get 方法\n//personKotlin: 1751075886\n//nameRef: -954731934\n//thisRef:1751075886\n//property:-954731934\n//personKotlin.name: 88377\n//可以看到属性引用类和它的 receiver 在委托类和这里的 hashCode 相同\n\n//com.jay.lib_kotlin.delegate.MyDelegate@5a63f509\n//YYY\n\n//测试lazy 属性代理方式\nval sexRef: KProperty0<String?> = personKotlin::sex\npersonKotlin.sex\nsexRef.isAccessible = true\nprintln(sexRef.getDelegate())\n//获取的代理信息就是lazy代码块中的值：sex is male\n\n\n//测试 属性引用的类型\nval kMutableProperty0: KMutableProperty0<Int> = ::sex //sex 是顶级属性\nval s = kMutableProperty0 as CallableReference\nprintln(s.owner) //file class com.jay.lib_kotlin.property.PersonKotlinKt\n//属性引用的类型是 CallableReference\n```\n\n**receiver**：属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器\n\n**CallableReference**：是 Kotlin 编译器为可调用引用类生成的所有类的超类\n\n\n\n### 3.2 属性委托实现原理\n\n```kotlin\npublic open class FooBy {\n    //只要在by关键字后面带有一个委托对象，这个对象不一定要实现特定的接口，只要包含了getValue/setValue方法、那它就能作为一个代理属性来使用。\n    val y by MyDelegate()\n    var w: String by MyDelegate()\n}\n\nclass MyDelegate {\n    var value: String = \"YYY\"\n    //todo 委托类里面必须提供 getValue 方法，或者扩展这个方法也可\n    operator fun getValue(thisRef: Any, property: KProperty<*>): String {\n        return value\n    }\n    operator fun setValue(thisRef: Any, property: KProperty<*>, s: String) {\n        value = s\n    }\n}\n```\n\n反编译Java后的代码\n\n```java\npublic class FooBy {\n   // $FF: synthetic field\n   static final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(FooBy.class, \"y\", \"getY()Ljava/lang/String;\", 0)), (KProperty)Reflection.mutableProperty1(new MutablePropertyReference1Impl(FooBy.class, \"w\", \"getW()Ljava/lang/String;\", 0))};\n   @NotNull\n   private final MyDelegate y$delegate = new MyDelegate();\n   @NotNull\n   private final MyDelegate w$delegate = new MyDelegate();\n   @NotNull\n   public final String getY() {\n      return this.y$delegate.getValue(this, $$delegatedProperties[0]);\n   }\n   @NotNull\n   public final String getW() {\n      return this.w$delegate.getValue(this, $$delegatedProperties[1]);\n   }\n\n   public final void setW(@NotNull String var1) {\n      Intrinsics.checkNotNullParameter(var1, \"<set-?>\");\n      this.w$delegate.setValue(this, $$delegatedProperties[1], var1);\n   }\n}\n```\n\n当调用下面的代码时，就会调用到 FooBy.y 的 get 方法\n\n```\nval foo = FooBy()\nprintln(foo.y)\n```\n\n看一下反编译后的 getY 方法，\n\n```java\n@NotNull\npublic final String getY() {\n   return this.y$delegate.getValue(this, $$delegatedProperties[0]);\n}\n```\n\n看一下 `y$delegate` 是什么 ,其实就是我们的代理类并在 FooBy 类构建的时候已经初始化\n\n```java\n@NotNull\nprivate final MyDelegate y$delegate = new MyDelegate();\n```\n\n再看看MyDelegate中的的 getValue 方法, 就是我们在代理类中必须提供的方法\n\n```java\n//Java code\n@NotNull\npublic final String getValue(@NotNull Object thisRef, @NotNull KProperty property) {\n   Intrinsics.checkNotNullParameter(thisRef, \"thisRef\");\n   Intrinsics.checkNotNullParameter(property, \"property\");\n   return this.value;\n}\n```\n\n到这里我们就可以看清了整个委托流程了\n\n- 当类中有属性被委托时，Kotlin 会在当前类中添加委托类的实例并在实例化当前类时实例化委托类( y$delegate)，同时$$delegatedProperties 数组也是在类初始化时创建完成，里面方式所有属性的反射类信息\n- 当要获取委托属性时，会调用到它的 get 方法，而 get 方法返回的是代理类的 getValue 方法\n- getValue 方法是我们自己实现的，最终代理属性就会通过 getValue  方法赋上值了\n- setValue 时还会把 属性 的backing field 传过去\n\n### 3.3 PropertyReferenceImpl \n\n委托流程搞清楚了，我们再来看看 getValue 方法中 `thisRef: Any`， `property: KProperty<*>` 这两个参数是怎么来的，干什么用的\n\nthisRef 这个参数是业务类本身可以看到就是在调用 getValue 方法时传递的 this\n\nproperty 是委托属性的描述类 `KProperty` ,它是从这个数组里取的 `$$delegatedProperties[0]`，这个数组也是构建业务类时由Kotlin自动生成的，存放的是描述类属性的 KProperty 类型\n\n`Reflection.property1`  是一个工厂函数，将传入的参数返回\n\nPropertyReference1Impl 的父类也间接实现了 KProperty 接口，所以这里可以强转\n\n```java\n//$$delegatedProperties\nstatic final KProperty[] $$delegatedProperties =\n  new KProperty[]{(KProperty)Reflection.property1(\n  new PropertyReference1Impl(FooBy.class, \"y\", \"getY()Ljava/lang/String;\", 0)), (KProperty)Reflection.mutableProperty1(\n  new MutablePropertyReference1Impl(FooBy.class, \"w\", \"getW()Ljava/lang/String;\", 0))};\n\n```\n\n再看一下属性引用实现类 PropertyReference1Impl  的构造参数 \n\nPropertyReference1Impl 类的构造器最终会调用到它的父类  CallableReference\n\n**CallableReference**：是 Kotlin 编译器为可调用引用类生成的所有类的超类。\n\n```kotlin\n@SinceKotlin(version = \"1.4\")\npublic PropertyReference1Impl(Class owner, String name, String signature, int flags) {\n    super(NO_RECEIVER, owner, name, signature, flags);\n}\n//NO_RECEIVER 如果属性没有 receiver 构造时会缺省添加一个 NO_RECEIVER\n@SinceKotlin(version = \"1.1\")\npublic static final Object NO_RECEIVER = NoReceiver.INSTANCE;\n@SinceKotlin(version = \"1.2\")\nprivate static class NoReceiver implements Serializable {\n    private static final NoReceiver INSTANCE = new NoReceiver();\n\n    private Object readResolve() throws ObjectStreamException {\n        return INSTANCE;\n    }\n}\n\n//CallableReference\n@SinceKotlin(version = \"1.4\")\nprotected CallableReference(Object receiver, Class owner, String name, String signature, boolean isTopLevel) {\n    this.receiver = receiver; //可调用对象的属性值的接收器。 例如：类实例\n    this.owner = owner; //可调用对象所在的类或包\n    this.name = name; //可调用对象的 Kotlin 名称，即在源代码中声明的名\n    this.signature = signature; //可调用对象的 JVM 签名。如果这是一个属性引用，则返回其 getter 的 JVM 签名，例如“getFoo(LjavalangString;)I”。\n    this.isTopLevel = isTopLevel; //是否高等类型(文件中还是类中)，0 false; 1 true\n}\n```\n\n利用Java的实现方式简单总结以下Kotlin 属性委托的背后原理\n\n```java\nclass Person {\n  static final Field[] delegatedProperties = Person.class.getFields();\n  private final NameDelegate nameDelegate = new NameDelegate();\n  public final String getName() {\n    return this.nameDelegate.getValue(this, delegatedProperties[0]);\n  }\n}\nclass NameDelegate {\n  String getValue(Person thisRef, Field property) {\n    return \"Jay\";\n  }\n}\n```\n\n\n\n### 3.4 简化属性委托的内置接口们\n\nKotlin 内置的属性委托功能是**属性委托类**，不能像普通的委托模式一样通过接口或集成的方式来约束交互的方法和类型，做不了两方约束，但是可以通过泛型+接口约束一下委托类，也能达到一部分约束的效果。\n\nKotlin 标准库中提供了三个接口来简化委托类的实现\n\n```kotlin\n//val 属性\npublic fun interface ReadOnlyProperty<in T, out V>\n//var 属性\npublic interface ReadWriteProperty<in T, V> : ReadOnlyProperty<T, V>\n//创建委托类的工厂接口\npublic fun interface PropertyDelegateProvider<in T, out D>\n//T：拥有委托属性的对象类型。 \n//V：属性值的类型。\n//D：委托类的类型\n```\n\n看一下三个接口的接口和方法签名\n\n```kotlin\npublic fun interface ReadOnlyProperty<in T, out V> {\n    public operator fun getValue(thisRef: T, property: KProperty<*>): V\n}\npublic interface ReadWriteProperty<in T, V> : ReadOnlyProperty<T, V> {\n    public override operator fun getValue(thisRef: T, property: KProperty<*>): V\n    public operator fun setValue(thisRef: T, property: KProperty<*>, value: V)\n}\n@SinceKotlin(\"1.4\")\npublic fun interface PropertyDelegateProvider<in T, out D> {\n    public operator fun provideDelegate(thisRef: T, property: KProperty<*>): D\n}\n//前两个直接用就行，看一个 PropertyDelegateProvider 的使用场景\nprivate val provider = PropertyDelegateProvider<FooBy, MyDelegate> { thisRef, property ->\n    if (thisRef.y == \"YYY\") {\n        MyDelegate()\n    } else {\n        MyDelegate2() //MyDelegate2:MyDelegate\n    }\n}\n```\n\n看一下他们几个综合使用的情况，同时也可以看到kt语音的强大，同样的功能,代码可以从十几行到三行再到一行。yyds!!!\n\n```kotlin\nval provider1 = object : PropertyDelegateProvider<FooReadWrite, ReadWriteProperty<FooReadWrite, Int>> {\n        override fun provideDelegate(\n            thisRef: FooReadWrite,\n            property: KProperty<*>\n        ): ReadWriteProperty<FooReadWrite, Int> {\n            return object : ReadWriteProperty<FooReadWrite, Int> {\n                var result=1024\n                override fun getValue(thisRef: FooReadWrite, property: KProperty<*>): Int {\n                    return result\n                }\n                override fun setValue(thisRef: FooReadWrite, property: KProperty<*>, value: Int) {\n                    result=value\n                }\n            }\n        }\n    }\n\n//lambda 简化版本\nval provider2: PropertyDelegateProvider<FooReadWrite, ReadOnlyProperty<FooReadWrite, Int>> =\n    PropertyDelegateProvider<FooReadWrite, ReadOnlyProperty<FooReadWrite, Int>> { pThisRef: Any?, pProperty: KProperty<*> ->ReadOnlyProperty<Any?, Int> { thisRef, property -> 1025 }\n    \n//智能类型推导再简化版本\nprivate val provider3 =PropertyDelegateProvider { _: Any?, _ -> ReadOnlyProperty<Any?, Int> { _, _ -> 1026 } }\n\nval delegate1: Int by provider1\nval delegate2: Int by provider2\nval delegate3: Int by provider3\n```\n\n\n\n## 4. 属性委托在 Kotlin Api 中的运用\n\nKotlin 标准库中提供了几种委托\n\n- 映射委托(Map delegation)\n- 延迟属性（lazy properties）: 其值只在首次访问时计算；\n- 可观察属性（observable properties）: 监听器会收到有关此属性变更的通知；\n- 非空属性(Delegates.notNull)\n\n### 4.1 映射委托(Map delegation)\n\n看一个map 作为属性委托方的示例\n\n```kotlin\nclass User {\n    //委托 val\n    val map: Map<String, Any?> = mapOf(\"name2\" to \"Jay\", \"age\" to 18)\n\n    //可变 map 可以委托 val和var\n    val map2: MutableMap<String, Any?> = mutableMapOf(\"name2\" to \"Jay\", \"age\" to 18)\n    val name: String by map\n    var age: Int by map2\n\n    //更新 age 的值，MutableMap 也会同步更新\n    fun setValues(age: Int) {\n        this.age = age\n    }\n}\n```\n\nmap 中的 key 必须包含属性名，否则会报下面这个错\n\n```kotlin\nException in thread \"main\" java.util.NoSuchElementException: Key name2 is missing in the map.\n```\n\n所以在使用这个特性时除非我们完全确定支持映射的结构，否则应该避免基于映射的属性委托，要不然委托的类可能会失败并抛出异常\n\n还有一种情况当value 为 null 时，只有第四种情况会发生：NullPointerException ，这个问题想了解的可以官方的 [bug report](https://youtrack.jetbrains.com/issue/KT-27672)\n\n```kotlin\nval map: HashMap<String, Any?> = hashMapOf(\"name\" to null, \"age\" to null)\nval name: String by map\nval name: String？ by map\nvar age: Int? by map\nvar age: Int by map\n```\n\n再来窥探一下 Map delegation 的委托原理\n\n```java\n// $FF: synthetic field\nstatic final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(User.class, \"name\", \"getName()Ljava/lang/String;\", 0)), (KProperty)Reflection.mutableProperty1(new MutablePropertyReference1Impl(User.class, \"age\", \"getAge()Ljava/lang/Integer;\", 0))};\n@Nullable\nprivate final Map age$delegate;\n@Nullable\npublic final Integer getAge() {\n   Map var1 = (Map)this.age$delegate;\n   KProperty var3 = $$delegatedProperties[1];\n   boolean var4 = false;\n   return (Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());\n}\npublic final void setAge(@Nullable Integer var1) {\n   Map var2 = (Map)this.age$delegate;\n   KProperty var4 = $$delegatedProperties[1];\n   boolean var5 = false;\n   var2.put(var4.getName(), var1);\n}\n```\n\n可以看到，Kotlin 编译器 也生成了KProperty[] 类型的 $$delegatedProperties 和 Map 类型 age$delegate，并在构造时实例化age$delegate \n\nMap相关的委托必要方法在**[MapAccessors](https://github.com/JetBrains/kotlin/blob/34e57a45f2/libraries/stdlib/src/kotlin/collections/MapAccessors.kt)** 这个类里面\n\n```kotlin\n//Map\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1 : V> Map<in String, @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1 =@Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n//MutableMap\n@kotlin.jvm.JvmName(\"getVar\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1 : V> MutableMap<in String, out @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1 = @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n//MutableMap\n@kotlin.internal.InlineOnly\npublic inline operator fun <V> MutableMap<in String, in V>.setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n    this.put(property.name, value)\n}\n```\n\n在访问 age 的 get 时会调用委托 Map 的    `(Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());`\n\n在访问 age 的 set 时直接调用委托 Map 的put方法\n\n下面是 **getOrImplicitDefaultNullable** 函数\n\n```kotlin\n//JvmName 这个注解是指定从此元素生成的 Java 类或方法的名称。\n//扩展方法编译后会将方法的 reciver 作为第一个参数传入\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)return this.getOrImplicitDefault(key)\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n```\n\n关于 map 的 put 和 get 操作是如何与委托的 getValue 和 setValue 如何联系在一起的 以及map 的 `getValue(thisRef: Any?, property: KProperty<*>) `方法为什么用 inline 修饰了，这里涉及到Kotlin 1.4 对委托属性的一个优化，稍后再解析 lazy 原理时会详细解释。\n\nMap delegation 的一个实践，将推送消息封装并通知APP\n\n```kotlin\noverride fun onNotificationReceivedInApp(\n    context: Context,\n    title: String,\n    summary: String,\n    extraMap: Map<String, String>,\n) {\n    val data = extraMap.withDefault { \"\" }\n    val params = NotificationParams(data)\n    EventBus.getDefault().post(params)\n}\n\nclass NotificationParams(val map: Map<String, String>) {\n    val title: String by map\n    val content: String by map\n}\n```\n\n### 4.2 延迟属性(lazy properties)\n\n看一下lazy的简单使用\n\n```kotlin\nval x: String by lazy(LazyThreadSafetyMode.SYNCHRONIZED) {\n    println(\"xxx——lazy\")\n    \"xxx——${index++}\"\n}\nval y: String by lazy(LazyThreadSafetyMode.PUBLICATION) {\n    println(\"yyy——lazy\")\n    \"yyy——${index++}\"\n}\nval z: String by lazy(LazyThreadSafetyMode.NONE) {\n    println(\"zzz——lazy\")\n    \"zzz——${index++}\"\n}\n```\n\n```kotlin\nval fooLazy = FooLazy()\nfor (i in 1..100) {\n    val thread = thread(true) {\n        Thread.sleep(100)\n        println(Thread.currentThread().name)\n        println(\"=\" + fooLazy.x)\n        println(\"====\" + fooLazy.y)\n        println(\"=========\" + fooLazy.z)\n    }\n}\n\n//xxx——lazy 和 yyy——lazy 都只执行一次，x=0, y=1\n//zzz——lazy 和 z 的值不能确定会执行几次\n```\n\nLazyThreadSafetyMode 有三种模式作用是指定 [Lazy] 实例如何在多个线程之间同步初始化。\n\n- SYNCHRONIZED: 锁用于确保只有一个线程可以初始化[Lazy]实例。\n- PUBLICATION: 并发访问未初始化的[Lazy]实例值时，可以多次调用Initializer函数，但是只有第一个返回的值将用作[Lazy]实例的值。\n- NONE: 不使用锁来同步对 [Lazy] 实例值的访问；如果从多个线程访问该实例，可能会发生线程安全问题。除非保证 [Lazy] 实例永远不会从多个线程初始化，否则不应使用此模式。\n\n#### lazy 原理解析\n\n受托对象是Lazy\n\n```kotlin\n@NotNull\nprivate final Lazy x$delegate;\n```\n\n受托对象在委托者构造方法中实例化\n\n```kotlin\npublic FooLazy() {\n   this.x$delegate = LazyKt.lazy(LazyThreadSafetyMode.SYNCHRONIZED, (Function0)(new Function0() {\n      // $FF: synthetic method\n      // $FF: bridge method\n      public Object invoke() {\n         return this.invoke();\n      }\n      @NotNull\n      public final String invoke() {\n         String var1 = \"xxx——lazy\";\n         boolean var2 = false;\n         System.out.println(var1);\n         StringBuilder var10000 = (new StringBuilder()).append(\"xxx——\");\n         FooLazy var10001 = FooLazy.this;\n         int var3;\n         var10001.index = (var3 = var10001.index) + 1;\n         return var10000.append(var3).toString();\n      }\n   }));\n}\n```\n\n可以看到 `x$delegate`  是通过 LazyKt.lazy() 方法实例化的，两个参数分别是线程安全模式类型和一个接口回调\n\n当调用x 的 get 方法时 反回了受托者的 getValue 方法 并没有调用 lazy 的扩展方法：LazyKt.getValue(thisRef: Any?, property: KProperty<*>) \n\n```java\npublic final String getX() {\n   Lazy var1 = this.x$delegate;\n   return (String)var1.getValue();\n}\n```\n\n再看一下 lazy 是如何定义委托方法 getValue 的\n\n```kotlin\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n```\n\n这里有没有注意到 lazy 利用属性委托的方式是不同的\n\n- 没有自动生成属性数组  `KProperty[] $$delegatedProperties` \n- getX 时最终返回时调用的也不是 `getValue(thisRef: Any?, property: KProperty<*>)`\n- lazy 的  `getValue(thisRef: Any?, property: KProperty<*>)` 方法是用 **inline** 修饰的 并且添加了`@kotlin.internal.InlineOnly` 注解，map 委托 也是这样的操作\n\n其实这里是Kotlin 1.4 做的优化，当某些委托属性不会使用 KProperty。对于他们来说，在 `$$delegatedProperties` 中生成一个KProperty对象是多余的。Kotlin 1.4 版本将优化此类情况。如果委托的属性运算符是内联的，并且没有使用 KProperty 参数，则不会生成相应的反射对象。如果委托属性中有没有采用 inline 修饰的 ， 最终生成的`$$delegatedProperties`  数组中也之会单独生成它自己的反射对象，详细说明可以看官方的这篇博客\n\n[What to Expect in Kotlin 1.4 and Beyond | Optimized delegated properties](https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/)\n\n> 内联实际上是如何工作的？\n>\n> 粗略地说，内联采用被内联的函数的字节码，并将其插入到调用处，因此内联函数声明不必在调用处可见。\n>\n> `@kotlin.internal.InlineOnly` 注解的作用？\n>\n> `InlineOnly` 意味着与此 Kotlin 函数对应的 Java 方法被标记为私有，因此 Java 代码无法访问它（这是调用内联函数而不实际内联它的唯一方法）。这个注释还没有得到很好的验证，官方目前只在内部使用，很有可能稍后将其公之于众。\n\n所以 lazy 和 map 的属性委托在 Kotlin 4.1 都是做了优化的，lazy 属性在调用 getter 时实际上是调用的的是 Lazy<T> 中 value 的 getter，map 属性在调用 getter/setter 时 实际上最终调用的也是 map 的 get/put 方法。\n\n看一下 lazy 函数签名\n\n```kotlin\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> =\n    when (mode) {\n        LazyThreadSafetyMode.SYNCHRONIZED -> SynchronizedLazyImpl(initializer)\n        LazyThreadSafetyMode.PUBLICATION -> SafePublicationLazyImpl(initializer)\n        LazyThreadSafetyMode.NONE -> UnsafeLazyImpl(initializer)\n    }\n```\n\n\n\n#### SynchronizedLazyImpl\n\nSynchronizedLazyImpl 采用 DCL 方式确保线程安全\n\n```kotlin\nprivate class SynchronizedLazyImpl<out T>(initializer: () -> T, lock: Any? = null) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    @Volatile // 用内存可见性来检查是否在其他线程初始化过，同时也会禁止指令重排序防止_value拿到不完整的实例\n    private var _value: Any? = UNINITIALIZED_VALUE\n    //实例使用自身进行同步\n    private val lock = lock ?: this\n    //Lazy 接口的 value 属性用于获取当前 Lazy 实例的延迟初始化值。一旦初始化后，它不得在此 Lazy 实例的剩余生命周期内更改。\n    val value: T\n        // 重写 get 来保证懒加载，只在使用的时候才执行函数\n        get() {\n            //局部变量可以将性能提高25%以上\n            val _v1 = _value\n            //检查单例实例是否已初始化。如果它被初始化就返回实例。\n            if (_v1 !== UNINITIALIZED_VALUE) {\n                @Suppress(\"UNCHECKED_CAST\")\n                return _v1 as T\n            }\n            //到这里还没有初始化，但我们不能确定，因为可能有多个其他线程可能同时初始化了它。\n            //所以为了以防万一，这里需要添加一把互斥锁来保证只有一个线程去实例化实例对象。\n            return synchronized(lock) {\n                //再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。\n                val _v2 = _value\n                //如果它已经被其它线程初始化了，当前线程也能感知他的存在了，直接返回实例\n                if (_v2 !== UNINITIALIZED_VALUE) {\n                    @Suppress(\"UNCHECKED_CAST\")\n                    (_v2 as T)\n                } else {\n                    //到这里该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例了。\n                    val typedValue = initializer!!() //执行 Function 对象的 invoke 并将函数的返回值缓存起来\n                    _value = typedValue //_value赋值通知其它线程别进来了，拿走用吧\n                    initializer = null //initializer在当前类实例已经没用了\n                    typedValue // 返回最终的结果给 value\n                }\n            }\n        }\n}\n```\n\n看不惯这种DCL也可以恢复成传统方式看一下\n\n```kotlin\nval value: T\n    get() {\n        //局部变量将性能提高了 25% Joshua Bloch “Effective Java, Second Edition”，第 3 页。 283-284\n        var _v1 = _value\n        if (_v1 == UNINITIALIZED_VALUE) {\n            synchronized(lock) {\n                // 再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。\n                // 如果它被初始化，当前线程也能感知他的存在了。\n                _v1 = _value\n                if (_v1 == UNINITIALIZED_VALUE) {\n                    // 该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例并将其赋值给我们的单例引用。\n                    _v1 = initializer!!()\n                    initializer = null\n                }\n            }\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return _v1 as T\n    }\n```\n\n\n\n#### SafePublicationLazyImpl\n\n**AtomicReferenceFieldUpdater** ：原子更新器是基于反射的工具类，用来对某个类中，被volatile修饰的字段进行原子更新。\n\n通过调用AtomicReferenceFieldUpdater的静态方法`newUpdater`就能创建它的实例，该方法要接收三个参数：包含该字段所在的类、将被更新的对象的类型、将被更新的字段的名称\n\n`compareAndSet` 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新返回 true 同时原子地将字段设置为给定的更新值。\n\n`getAndSet`原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。\n\n原子更新器的使用存在比较苛刻的条件如下\n\n- 操作的字段不能是static类型。\n- 操作的字段不能是final类型的，因为final根本没法修改。\n- 字段必须是volatile修饰的，也就是数据本身是读一致的。\n- 属性必须对当前的Updater所在的区域是可见的，如果不是当前类内部进行原子更新器操作不能使用private，protected子类操作父类时修饰符必须是protect权限及以上，如果在同一个package下则必须是default权限及以上，也就是说无论何时都应该保证操作类与被操作类间的可见性。\n\n> CAS，Compare and Swap即比较并交换，设计并发算法时常用到的一种技术，java.util.concurrent包全完建立在CAS之上，没有CAS也就没有此包，可见CAS的重要性。当前的处理器基本都支持CAS，只不过不同的厂家的实现不一样罢了。**CAS有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做并返回false**。\n>\n> Unsafe，JDK中的一个类，它提供了硬件级别的**原子操作**。\n\ncompareAndSet 方法调用流程\n\n```java\n\nprivate static final sun.misc.Unsafe U = sun.misc.Unsafe.getUnsafe();\n\npublic final boolean compareAndSet(T obj, V expect, V update) {\n    accessCheck(obj);\n    valueCheck(update);\n    return U.compareAndSwapObject(obj, offset, expect, update);\n}\n\npublic final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);\n\n```\n\n看一个例子了解 `AtomicReferenceFieldUpdater` 的使用方式\n\n```java\npublic class AtomicReferenceFieldUpdaterTest {\n  public static void main(String[] args) throws Exception {\n    // T:持有可更新字段的对象的类型\n    // V:字段的类型\n    AtomicReferenceFieldUpdater<Dog, String> updater =\n        // 包含该字段所在的类、将被更新的对象的类、将被更新的字段的名称\n        AtomicReferenceFieldUpdater.newUpdater(Dog.class, String.class, \"name\");\n    Dog dog = new Dog();\n\n    // 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新，则原子地将字段设置为给定的更新值。\n    // 参数：\n    // obj: 字段所在对象\n    // expect - 期望值\n    // update - 新值\n    // 返回：如果成功则为true\n    System.out.println(dog.name); // dog1 默认值\n    boolean result = updater.compareAndSet(dog, \"dog1\", \"dog2\");\n    System.out.println(result); // true 修改成功\n    System.out.println(dog.name); // dog2 修改后的的值\n    boolean result2 = updater.compareAndSet(dog, \"dog1\", \"dog3\");\n    System.out.println(result2); // false 修改失败\n    System.out.println(dog.name); // dog2 还是原来的值\n\n    // 原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。\n    // 参数：\n    // obj – 更新字段的对象\n    // newValue – 新值\n    // 返回：之前的的值\n    String result3 = updater.getAndSet(dog, \"dog4\");\n    System.out.println(result3); // dog2  原来的值\n    System.out.println(dog.name); // dog4 修改后的值\n  }\n}\n\nclass Dog {\n  volatile String name = \"dog1\";\n}\n```\n\nSafePublicationLazyImpl 使用 AtomicReferenceFieldUpdater 来保证 _value 属性的原子操作。支持同时多个线程调用，并且可以在全部或部分线程上同时进行初始化。如果某个值已由另一个线程初始化，则将返回该值而不执行初始化。\n\n```kotlin\nprivate class SafePublicationLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    @Volatile private var initializer: (() -> T)? = initializer\n    @Volatile private var _value: Any? = UNINITIALIZED_VALUE\n    private val final: Any = UNINITIALIZED_VALUE\n    override val value: T\n        get() {\n            val value = _value\n            if (value !== UNINITIALIZED_VALUE) {\n                @Suppress(\"UNCHECKED_CAST\")\n                return value as T\n            }\n            val initializerValue = initializer\n            //如果在这里看到初始值已经为 null，则表示该值已被另一个线程设置过了，直接返回 _value ，否则就初始化\n            if (initializerValue != null) {\n                val newValue = initializerValue() //执行 Function 对象的 invoke 并将函数返回值原子化赋值给 _value\n                //如果_value的值是UNINITIALIZED_VALUE说明还没有线程初始化它，此时可以将newValue设置给_value\n              \tif (valueUpdater.compareAndSet(this, UNINITIALIZED_VALUE, newValue)) {\n                    initializer = null\n                    return newValue //只有唯一的线程会从这里返回，其它都走下面的返回了\n                }\n              //如果_value的值不是UNINITIALIZED_VALUE，说明其它线程已经初始化完了，当前线程直接返回_value就行了\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n\t\t//如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n    companion object {\n      \t//初始化一个原子更新器：保证原子操作的字段是 _value\n        private val valueUpdater = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(\n            SafePublicationLazyImpl::class.java,\n            Any::class.java,\n            \"_value\"\n        )\n    }\n}\n```\n\n#### UnsafeLazyImpl\n\n```kotlin\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n    override val value: T\n        get() {\n          \t//普通的懒加载，只初始化一次，但是在多线程环境下不能保证只执行一次\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!() //多线程并发情况下可能出现空指针异常\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n  \t//如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n```\n\n\n\n### 4.3 NotNullVar\n\nnotNull 可以返回一个经过非空校验的属性值但是该属性值并没有初始化需要人为稍后setValue\n在分配初始值之前尝试读取属性会导致异常，这也是返回非空属性的原理所在\n\n> 非空属性应用场景分析\n> 通常，声明为非空类型的属性必须在构造函数中初始化。然而，这通常并不方便。 例如，可以通过依赖注入或在单元测试的 setup 方法中初始化属性。在这种情况下，您不能在构造函数中提供非 null 初始值设定项，但您仍然希望在引用类体内的属性时避免空检查。\n>\n> notNull VS lateinit\n> lateinit 不支持原始类型、只能用在可变属性var\n> notNull 会为每个属性创建委托类 NotNullVar\n\nnotNull  的使用与原理\n\n```kotlin\n    var name2: String by Delegates.notNull()\n    val age2: Int by Delegates.notNull() // notNull 会为每个属性创建委托类 NotNullVar\n//    lateinit var age3: Int //lateinit 不支持原始类型\n    lateinit var name3: String //lateinit 只能用在 var\n\n\npublic fun <T : Any> notNull(): ReadWriteProperty<Any?, T> = NotNullVar()\n\nprivate class NotNullVar<T : Any>() : ReadWriteProperty<Any?, T> {\n    private var value: T? = null\n\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return value ?: throw IllegalStateException(\"Property ${property.name} should be initialized before get.\")\n    }\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        this.value = value\n    }\n}\n```\n\n### 4.4 ObservableProperty\n\n```kotlin\npublic abstract class ObservableProperty<V>(initialValue: V) : ReadWriteProperty<Any?, V> {\n    private var value = initialValue\n    protected open fun beforeChange(property: KProperty<*>, oldValue: V, newValue: V): Boolean = true\n    protected open fun afterChange(property: KProperty<*>, oldValue: V, newValue: V): Unit {}\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): V {\n        return value\n    }\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n        val oldValue = this.value\n    //beforeChange: 在尝试更改属性值之前调用的回调。 调用此回调时，该属性的值尚未更改。 如果回调返回true ，则属性的值被设置为新值，如果回调返回false ，则丢弃新值，属性保持其旧值\n        if (!beforeChange(property, oldValue, value)) {\n            return\n        }\n        this.value = value\n    //afterChange: 进行属性更改后调用的回调。 调用此回调时，该属性的值已更改。\n        afterChange(property, oldValue, value)\n    }\n}\n```\n\n#### observable 变量值更新后的监听\n\n```kotlin\npublic inline fun <T> observable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Unit): ReadWriteProperty<Any?, T> =\n    object : ObservableProperty<T>(initialValue) {\n        override fun afterChange(property: KProperty<*>, oldValue: T, newValue: T) = onChange(property, oldValue, newValue)\n    }\n```\n\n#### vetoable变量值更新前的拦截\n\n```kotlin\npublic inline fun <T> vetoable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Boolean): ReadWriteProperty<Any?, T> =\n    object : ObservableProperty<T>(initialValue) {\n        override fun beforeChange(property: KProperty<*>, oldValue: T, newValue: T): Boolean = onChange(property, oldValue, newValue)\n    }\n```\n\n测试代码\n\n```kotlin\nvar items: List<String> by Delegates.observable(mutableListOf()) { property, oldValue, newValue ->\n    println(\"${property.name} : $oldValue -> $newValue\")\n}\n\nvar nameAfter: String by Delegates.observable(\"no\") { prop, old, new ->\n    println(\"$old -> $new\")\n}\nvar nameBefore: String by Delegates.vetoable(\"no\") { prop, old, new ->\n    println(\"$old -> $new\")\n    true //返回true 表示 setValue 成功，否则不能覆盖原值\n}\n\nprivate fun <T> onChange(property: KProperty<*>, oldValue: T, newValue: T) {\n    println(\"${property.name} : $oldValue -> $newValue\")\n}\n\nvar age: Int by Delegates.observable(18, ::onChange)\n\n//运行结果\nno -> first\nfirst -> second\nno -> 11111\n11111 -> 2222\nage : 18 -> 33\nage : 33 -> 55\nitems : [] -> [new val]\nitems : [new val] -> [new val, new 111]\n```\n\n\n\n## 5. 属性委托在 Android 上的应用\n\n### 5.1 ViewBinding\n\n```kotlin\n//1. 借助 lazy 属性委托  + 反射 VB 的 inflate 方法\nprivate val binding: ActivityMainBinding by vb()\n//2. 借助 lazy 属性委托  + 传递 inflate 方法引用\nprivate val binding: ActivityMainBinding by vb(ActivityMainBinding::inflate)\n```\n\n**[VBHelper](https://github.com/jaydroid1024/VBHelper)**\n\n```kotlin\n@MainThread\ninline fun <reified T : ViewBinding> ComponentActivity.vb(noinline inflateMethodRef: ((LayoutInflater) -> T)? = null): Lazy<T> =\n    ActivityVBLazy(this, T::class, inflateMethodRef)\n\n\nclass ActivityVBLazy<T : ViewBinding>(\n    private val activity: ComponentActivity,\n    private val kClass: KClass<*>,\n    private val inflateMethodRef: ((LayoutInflater) -> T)?\n) : Lazy<T> {\n    private var cachedBinding: T? = null\n    override val value: T\n        get() {\n            var viewBinding = cachedBinding\n            if (viewBinding == null) {\n                viewBinding = if (inflateMethodRef != null) {\n                    //借助 lazy 属性委托 + 传递 inflate 方法引用\n                    inflateMethodRef.invoke(activity.layoutInflater)\n                } else {\n                    //借助 lazy 属性委托  + 反射绑定类的 inflate 方法\n                    @Suppress(\"UNCHECKED_CAST\")\n                    kClass.java.getMethod(METHOD_INFLATE, LayoutInflater::class.java)\n                        .invoke(null, activity.layoutInflater) as T\n                }\n                activity.setContentView(viewBinding.root)\n                cachedBinding = viewBinding\n            }\n            return viewBinding\n        }\n\n    override fun isInitialized() = cachedBinding != null\n}\n```\n\n### 5.2 ViewModel\n\n```kotlin\n//借助 lazy 属性委托  + ViewModelProvider\nval model: MyViewModel by viewModels()\n```\n\n**[ActivityViewModelLazy](https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/activity/ktx/src/main/java/androidx/activity/ActivityViewModelLazy.kt)**\n\n```kotlin\n@MainThread\ninline fun <reified VM : ViewModel> ComponentActivity.viewModels(\n    factory: ViewModelProvider.Factory? = null\n): Lazy<VM> = ActivityViewModelLazy(this, VM::class, factory)\n\n/**\n * An implementation of [Lazy] used by [ComponentActivity.viewModels] tied to the given [activity],\n * [viewModelClass], [factory]\n */\nclass ActivityViewModelLazy<VM : ViewModel>(\n    private val activity: ComponentActivity,\n    private val viewModelClass: KClass<VM>,\n    private val factory: ViewModelProvider.Factory?\n) : Lazy<VM> {\n    private var cached: VM? = null\n    override val value: VM\n        get() {\n            var viewModel = cached\n            if (viewModel == null) {\n                val application = activity.application\n                    ?: throw IllegalArgumentException(\n                        \"ViewModel can be accessed \" +\n                                \"only when Activity is attached\"\n                    )\n                val resolvedFactory = factory ?: AndroidViewModelFactory.getInstance(application)\n                viewModel = ViewModelProvider(activity, resolvedFactory).get(viewModelClass.java)\n                cached = viewModel\n            }\n            return viewModel\n        }\n\n    override fun isInitialized() = cached != null\n}\n```\n\n**[FragmentViewModelLazy](https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/fragment/ktx/src/main/java/androidx/fragment/app/FragmentViewModelLazy.kt)**\n\n```kotlin\n@MainThread\ninline fun <reified VM : ViewModel> Fragment.viewModels(factory: Factory? = null): Lazy<VM> =\n    FragmentViewModelLazy(this, VM::class, factory)\n\n/**\n * An implementation of [Lazy] used by [Fragment.viewModels] tied to the given [fragment],\n * [viewModelClass], [factory]\n */\nclass FragmentViewModelLazy<VM : ViewModel>(\n    private val fragment: Fragment,\n    private val viewModelClass: KClass<VM>,\n    private val factory: Factory?\n) : Lazy<VM> {\n    private var cached: VM? = null\n    override val value: VM\n        get() {\n            var viewModel = cached\n            if (viewModel == null) {\n                val application = fragment.activity?.application\n                    ?: throw IllegalArgumentException(\n                        \"ViewModel can be accessed \" +\n                                \"only when Fragment is attached\"\n                    )\n                val resolvedFactory = factory ?: AndroidViewModelFactory.getInstance(application)\n                viewModel = ViewModelProvider(fragment, resolvedFactory).get(viewModelClass.java)\n                cached = viewModel\n            }\n            return viewModel\n        }\n\n    override fun isInitialized() = cached != null\n}\n```\n\n### 5.3 SP delegates\n\n```kotlin\nfun SharedPreferences.int(def: Int = 0, key: String? = null) =\n    delegate(def, key, SharedPreferences::getInt, SharedPreferences.Editor::putInt)\n\nfun SharedPreferences.long(def: Long = 0, key: String? = null) =\n    delegate(def, key, SharedPreferences::getLong, SharedPreferences.Editor::putLong)\n\nfun SharedPreferences.string(def: String = \"\", key: String? = null) =\n    delegate(def, key, SharedPreferences::getString, SharedPreferences.Editor::putString)\n\n\nprivate inline fun <T> SharedPreferences.delegate(\n    defaultValue: T,\n    key: String?,\n    crossinline getter: SharedPreferences.(String, T) -> T,\n    crossinline setter: SharedPreferences.Editor.(String, T) -> SharedPreferences.Editor\n) = object : ReadWriteProperty<Any, T> {\n    override fun getValue(thisRef: Any, property: KProperty<*>) =\n        getter(key ?: property.name, defaultValue)\n\n    @SuppressLint(\"CommitPrefEdits\")\n    override fun setValue(thisRef: Any, property: KProperty<*>, value: T) =\n        edit().setter(key ?: property.name, value).apply()\n}\n```\n\n测试代码\n\n```kotlin\nclass TokenHolder(prefs: SharedPreferences) {\n    var token: String by prefs.string()\n        private set\n    var count by prefs.int()\n        private set\n    fun saveToken(newToken: String) {\n        token = newToken\n        count++\n    }\n    override fun toString(): String {\n        return \"TokenHolder(token='$token', count=$count)\"\n    }\n}\n\nclass UserHolder(prefs: SharedPreferences) {\n    var name: String by prefs.string()\n        private set\n    var pwd: String by prefs.string()\n        private set\n    fun saveUserAccount(name: String, pwd: String) {\n        this.name = name\n        this.pwd = pwd\n    }\n    override fun toString(): String {\n        return \"UserHolder(name='$name', pwd='$pwd')\"\n    }\n}\n\nval prefs = getSharedPreferences(\"sp_app_jay\", Context.MODE_PRIVATE)\n\n//缓存Token的场景\nval tokenHolder = TokenHolder(prefs)\nLog.d(\"Jay\", \"tokenHolder:$tokenHolder\")\ntokenHolder.saveToken(\"token_one\")\ntokenHolder.saveToken(\"token_second\")\n\n//缓存登录信息的场景\nval userHolder = UserHolder(prefs)\nLog.d(\"Jay\", \"userHolder:$userHolder\")\nuserHolder.saveUserAccount(\"jay\", \"123456\")\n```\n\n## 6. 总结\n\n本篇文章围绕 Kotlin 的内置委托(Delegation﻿) 特性并结合代码实践分别阐述了 Kotlin 委托的原理(包括属性委托和接口委托)，尤其是属性委托从属性到委托详细阐述了其实现原理，\n\n然后是实践部分，首先是Kotlin 标准库中利用属性委托为我们封装了很多简洁的API，比如：map、lazy、notNull、Observable 等；然后是Kotlin 属性委托在 Android 上的一些实践，包括 VB、VM、SP 等利用属性委托基本上都能完成一行代码实现set/get。Kotlin 委托显然在消除样板代码方面能发挥出强大的作用。但是这每个属性的背后却对应这一个委托类，所以在大量使用时也需要兼顾性能。\n\n\n\n## 7. 参考\n\n[官方文档 | 委托](https://www.kotlincn.net/docs/reference/delegation.html)\n\n[官方文档 | 属性委托](https://www.kotlincn.net/docs/reference/delegated-properties.html)\n\n[慕课网 | 新版 Kotlin 从入门到精通](https://coding.imooc.com/class/398.html)\n\n[一文彻底搞懂Kotlin中的委托](https://juejin.cn/post/6844904038589267982)\n\n[Wikipedia | Delegation pattern](https://en.wikipedia.org/wiki/Delegation_pattern)\n\n[Wikipedia | Proxy pattern](https://en.wikipedia.org/wiki/Proxy_pattern)\n\n[Medium | Kotlin Delegates in Android](https://proandroiddev.com/kotlin-delegates-in-android-1ab0a715762d)\n\n","source":"_posts/Kotlin_delegate.md","raw":"---\ntitle: Kotlin | 委托(Delegation﻿)详解\ndate: 2021-08-31 14:16:55\ncover: true\ntags: \n    - Kotlin 委托\n    - 属性委托\n    - ViewBinding\n    - ViewModel\ncategory: \n\t- Kotlin\nsummary: 委托模式与代理模式、接口委托、属性委托、映射委托、延迟属性、非空属性、可观察属性、ViewBinding+属性委、ViewModel+属性委托、SP+属性委托\n\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Kotlin | 委托(Delegation﻿)详解\n\n\n\n本文要点概述\n\n- 辨析委托模式与代理模式 \n\n- 接口委托(Delegated interface)\n\n- 属性委托(Delegated properties)\n\n- 映射委托(Map delegation)\n\n- 延迟属性(lazy properties)\n\n- 非空属性(Delegates.notNull)\n\n- 变量值更新后的监听(Delegates.observable)\n\n- 变量值更新前的拦截(Delegates.vetoable)\n\n- ViewBinding+属性委托\n\n- ViewModel+属性委托\n\n- SP +属性委托\n\n  \n\n## 1.委托模式 VS 代理模式 \n\n委托模式和代理模式都属于结构型设计模式，结构型模式主要总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。\n\n### 1.1 代理模式（Proxy Pattern）\n\n在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。在代理类中还可以提供额外的逻辑， 例如当真实对象上的操作是资源密集型任务时可以在代理中添加缓存操作，或者在调用真实对象操作之前做一些权限校验或检查行为等。一般情况下，我们让代理类和原始类实现同样的接口或者让代理类继承原始类来实现代理模式。\n\n### 1.2 委托模式（Delegation pattern）\n\n委托可以理解为是代理的一种变体，是一种使组合像继承一样实现代码复用的另一种设计模式。主要目的是组合委托调用和代码复用而不考虑控制访问等逻辑。在委托中处理请求涉及两个对象，委托方将操作交给受托方实现，类似于子类将请求推迟到父类。一般情况下，委托也可以通过接口约束或受托方继承委托方实现委托模式。\n\n### 1.3 法律层面区分代理与委托\n\n为了加深代理和委托的理解，我们看一下**法律层面的代理与委托的不同之处**\n\n- 民事主体活动的名义不同。 代理是指被代理人在代理权限范围内，以被代理人的名义同第三人独立为民事法律行为，由此产生的法律效果直接归属于被代理人的一种法律制度，即代理人必须以被代理人的名义为代理行为。 委托则是委托人委托受托人处理一定事务，受托人接受委托的协议，受托人可以以委托人的名义活动，也可以以自己的名义活动。\n\n- 适用范围不尽相同：代理只是代理人在代理权范围内以被代理人的名义同第三人的民事法律行为；而委托中的受托人办理委托人委托事务的行为可以是民事法律行为，还可以是有经济意义的行为（如整理账簿）和单纯的事实行为（如抄写文件）。\n\n- 效力范围不同：代理涉及三方当事人，即被代理人、代理人、第三人；委托则属于双方当事人之间的关系，即委托人、受托人。\n\n### 1.4 代码实现委托和代理\n\n代理模式和委托模式在代码实现上并没有太多差别，他们的差异还是在使用场景上，为了能更好的理解代理模式和委托模式，我们再来看看如何通过代码来实现\n\n代码参考自：**[ java-design-patterns](https://github.com/iluwatar/java-design-patterns)**\n\n[delegation](https://github.com/iluwatar/java-design-patterns/tree/master/delegation) ：打印机控制器将打印任务委托给不同的打印机\n\n```java\n// 委托二人组：打印机控制器、打印机（惠普打印机、佳能打印机、爱普生打印机）\n// 电脑上有三种打印机设备的驱动，分别将打印任务委托给对应的打印机执行具体的打印操作\nPrinterController hpPrinterController = new PrinterController(new HpPrinter());\nPrinterController canonPrinterController = new PrinterController(new CanonPrinter());\nPrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());\nhpPrinterController.print(MESSAGE_TO_PRINT);\ncanonPrinterController.print(MESSAGE_TO_PRINT);\nepsonPrinterController.print(MESSAGE_TO_PRINT);\n\n//打印机控制器\npublic class PrinterController implements Printer {\n  private final Printer printer;\n  public PrinterController(Printer printer) {\n    this.printer = printer;\n  }\n  /** \n   * 此方法是从 {@link Printer} 实现的，在提供实现时它会调用通过构造函数传递的委托方的 print 方法。 \n   * 这意味着委托关系一旦确定后，调用者不关心实现类，只关心拥有的打印机控制器就行。\n   */\n  @Override\n  public void print(String message) {\n    printer.print(message);\n  }\n}\n\n//三个打印机也实现了 Printer 接口 并提供了具体的打印功能，代码可以参考上面的链接\n```\n\n[proxy](https://github.com/iluwatar/java-design-patterns/tree/master/proxy) ：巫师要进入塔内修炼法术，象牙塔只能通过代理访问并确保只有前三个巫师可以进入。\n\n```java\n// 代理三人组：巫师塔代理、象牙塔、巫师\nWizardTowerProxy proxy = new WizardTowerProxy(new IvoryTower());\nproxy.enter(new Wizard(\"Red wizard\"));\nproxy.enter(new Wizard(\"White wizard\"));\nproxy.enter(new Wizard(\"Black wizard\"));\nproxy.enter(new Wizard(\"Green wizard\"));\nproxy.enter(new Wizard(\"Brown wizard\"));\n\n//代理方：塔代理\npublic class WizardTowerProxy implements WizardTower {\n  private static final int NUM_WIZARDS_ALLOWED = 3;\n  private final WizardTower tower;\n  private int numWizards;\n  //被代理方通过构造方法传入\n  public WizardTowerProxy(WizardTower tower) {\n    this.tower = tower;\n  }\n  //对象牙塔的访问的代理。第三方通过 enter 方法进入\n  @Override\n  public void enter(Wizard wizard) {\n    //超过三个就不让进了\n    if (numWizards < NUM_WIZARDS_ALLOWED) {\n      //代理方授权执行操作\n      tower.enter(wizard);\n      numWizards++;\n    } else {\n      System.out.println(\"{} is not allowed to enter!\" + wizard);\n    }\n  }\n}\n//被代理方：塔\npublic class IvoryTower implements WizardTower {\n  @Override\n  public void enter(Wizard wizard) {\n    System.out.println(\"{} enters the tower.\" + wizard);\n  }\n}\n//第三方：巫师\npublic class Wizard {\n  private String name;\n  public Wizard(String wizard) { this.name = wizard; }\n  @Override\n  public String toString() { return name; }\n}\n\n```\n\n\n\n## 2. 接口委托(Delegated interface)\n\n我们看看Kotlin 是怎么内置接口委托的，先看一下实现的委托模式的传统方式\n\n```kotlin\ninterface Api {\n    fun a()\n    fun b()\n    fun c()\n}\n//委托方\nclass ApiImpl : Api {\n    override fun a() { println(\"ApiImpl-a\") }\n    override fun b() { println(\"ApiImpl-b\") }\n    override fun c() { println(\"ApiImpl-c\") }\n}\n//受托方\nclass ApiWrapper(private val api: Api) : Api {\n    override fun a() {\n        println(\"ApiWrapper-a\")\n        api.a()\n    }\n    override fun b() {\n        println(\"ApiWrapper-b\")\n        api.b()\n    }\n    override fun c() {\n        println(\"ApiWrapper-c\")\n        api.b()\n    }\n}\n```\n\n再看看Kotlin 通过 `by` 关键字实现的简便方式\n\n```kotlin\n//变量 api代替 ApiWrapperWithDelegate 实现了 Api 接口，ApiWrapperWithDelegate 就可以灵活的复写需要的函数\nclass ApiWrapperWithDelegate(private val api: Api) : Api by api {\n    override fun a() {\n        println(\"ApiWrapperWithDelegate-a\")\n    }\n}\n\n\n//反编译 Java 后的代码和 ApiWrapper 是一样的\npublic final class ApiWrapperWithDelegate implements Api {\n   private final Api api;\n   public void a() {\n      String var1 = \"ApiWrapperWithDelegate-a\";\n      boolean var2 = false;\n      System.out.println(var1);\n   }\n   public ApiWrapperWithDelegate(@NotNull Api api) {\n      Intrinsics.checkNotNullParameter(api, \"api\");\n      super();\n      this.api = api;\n   }\n   public void b() {\n      this.api.b();\n   }\n   public void c() {\n      this.api.c();\n   }\n}\n```\n\n可以看到 Kotlin 内置的接口委托是编译器帮我们生成了相关代码\n\n再看一个实践的例子：利用接口代理实现一个集成了 map 和 list 的超级集合\n\n```kotlin\n// 对象 list 和 map 代理 SupperArrayWithDelegate 实现 MutableList，MutableMap\nclass SupperArrayWithDelegate<E>(\n    private val list: MutableList<E?> = mutableListOf(),\n    private val map: MutableMap<String, E> = mutableMapOf()\n) : MutableList<E?> by list, MutableMap<String, E> by map {\n    // 两个接口中都有，编译器不知道执行哪个，所以这些方法必须得重写\n    override fun clear() {\n        list.clear()\n        map.clear()\n    }\n    override fun isEmpty(): Boolean {\n        return list.isEmpty() && map.isEmpty()\n    }\n    override val size: Int get() = list.size + map.size\n    override fun set(index: Int, element: E?): E? {\n        if (index <= list.size) {\n            repeat(index - list.size - 1) {\n                list.add(null)\n            }\n        }\n        return list.set(index, element)\n    }\n    override fun toString(): String {\n        return \"list:$list,map:$map\"\n    }\n}\n```\n\n\n\n## 3. 属性委托(Delegated properties)\n\n\n\n### 3.1 属性(property)\n\n我们先通过对比 Java field 和 kotlin property  来探究一下 kt 中 property 的内部实现方式\n\n```java\n//PersonKotlin 尽量写的像Java好对比 Kotlin 属性背后做的事情\nclass PersonKotlin {\n    constructor(age: Int, name: String) {\n        this.age = age\n        this.name = name\n    }\n    private var age: Int? = null\n        //Redundant getter 属性的 get/set 方法由编译器自动生成\n        get() {\n            return field //这里的 field = backing field\n        }\n        set(value) {\n            field = value\n        }\n\n    private var name: String? = null\n        get() {\n            return field\n        }\n        set(value) {\n            field = value\n        }\n}\n\n//反编译 Java 后的代码\npublic final class PersonKotlin {\n   private Integer age; //field\n   private String name; //field\n   private final Integer getAge() {\n      return this.age;\n   }\n   private final void setAge(Integer value) {\n      this.age = value;\n   }\n   private final String getName() {\n      return this.name;\n   }\n   private final void setName(String value) {\n      this.name = value;\n   }\n   public PersonKotlin(int age, @NotNull String name) {\n      Intrinsics.checkNotNullParameter(name, \"name\");\n      super();\n      this.setAge(age);\n      this.setName(name);\n   }\n}\n```\n\n#### property(kotlin)=field(java)+getField()+setField()\n\n```java\n// age 属性背后包含了三个角色，backing field、get、set\nprivate var age: Int? = null\n//等价于下面的代码\n@Nullable\nprivate Integer age;\n@Nullable\npublic final Integer getAge() {\n   return this.age;\n}\npublic final void setAge(@Nullable Integer var1) {\n   this.age = var1;\n}\n```\n\n#### 属性引用(Property Reference)\n\n通过属性引用我们可以更清楚的了解 property 背后的 get 和 set 以及代理信息等\n\n```kotlin\nval ageRef: KMutableProperty1<PersonKotlin, Int?> = PersonKotlin::age\n//PersonKotlin::age 类名获取的属性引用不包含 receiver，操作时需要传递一个\nval personKotlin = PersonKotlin(18, \"Jay\")\nageRef.set(personKotlin, 22)\nprintln(ageRef.get(personKotlin))\n//22\n//public actual fun set(receiver: T, value: V)\n//public actual fun get(receiver: T): V\n//receiver - 用于获取属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器\n\n//测试自定义属性委托后获取属性的委托信息\nval nameRef: KProperty0<String?> = personKotlin::name\nprintln(\"personKotlin: \" + personKotlin.hashCode())\nprintln(\"nameRef: \" + nameRef.hashCode())\nprintln(\"personKotlin.name: \" + personKotlin.name.hashCode())\n\n//取： is KMutableProperty -> javaField?.isAccessible ?: true && javaGetter?.isAccessible ?: true &&javaSetter?.isAccessible ?: true\n//存： is KMutableProperty -> { javaField?.isAccessible = value javaGetter?.isAccessible = value javaSetter?.isAccessible = value }\n//设置是否访问，只有设置为 true 才可以拿到 属性引用中的委托信息（如果被委托了）这个属性需要单独引入 kotlin-reflect 库\nnameRef.isAccessible = true\n//如果这是一个委托属性，则返回委托的值，如果此属性未委托，则返回null\nval nameDelegate = nameRef.getDelegate()\nprintln(\"nameDelegate： $nameDelegate\") //返回委托信息\nprintln(nameRef.getter.invoke()) //相当于调用 get 方法\n//personKotlin: 1751075886\n//nameRef: -954731934\n//thisRef:1751075886\n//property:-954731934\n//personKotlin.name: 88377\n//可以看到属性引用类和它的 receiver 在委托类和这里的 hashCode 相同\n\n//com.jay.lib_kotlin.delegate.MyDelegate@5a63f509\n//YYY\n\n//测试lazy 属性代理方式\nval sexRef: KProperty0<String?> = personKotlin::sex\npersonKotlin.sex\nsexRef.isAccessible = true\nprintln(sexRef.getDelegate())\n//获取的代理信息就是lazy代码块中的值：sex is male\n\n\n//测试 属性引用的类型\nval kMutableProperty0: KMutableProperty0<Int> = ::sex //sex 是顶级属性\nval s = kMutableProperty0 as CallableReference\nprintln(s.owner) //file class com.jay.lib_kotlin.property.PersonKotlinKt\n//属性引用的类型是 CallableReference\n```\n\n**receiver**：属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器\n\n**CallableReference**：是 Kotlin 编译器为可调用引用类生成的所有类的超类\n\n\n\n### 3.2 属性委托实现原理\n\n```kotlin\npublic open class FooBy {\n    //只要在by关键字后面带有一个委托对象，这个对象不一定要实现特定的接口，只要包含了getValue/setValue方法、那它就能作为一个代理属性来使用。\n    val y by MyDelegate()\n    var w: String by MyDelegate()\n}\n\nclass MyDelegate {\n    var value: String = \"YYY\"\n    //todo 委托类里面必须提供 getValue 方法，或者扩展这个方法也可\n    operator fun getValue(thisRef: Any, property: KProperty<*>): String {\n        return value\n    }\n    operator fun setValue(thisRef: Any, property: KProperty<*>, s: String) {\n        value = s\n    }\n}\n```\n\n反编译Java后的代码\n\n```java\npublic class FooBy {\n   // $FF: synthetic field\n   static final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(FooBy.class, \"y\", \"getY()Ljava/lang/String;\", 0)), (KProperty)Reflection.mutableProperty1(new MutablePropertyReference1Impl(FooBy.class, \"w\", \"getW()Ljava/lang/String;\", 0))};\n   @NotNull\n   private final MyDelegate y$delegate = new MyDelegate();\n   @NotNull\n   private final MyDelegate w$delegate = new MyDelegate();\n   @NotNull\n   public final String getY() {\n      return this.y$delegate.getValue(this, $$delegatedProperties[0]);\n   }\n   @NotNull\n   public final String getW() {\n      return this.w$delegate.getValue(this, $$delegatedProperties[1]);\n   }\n\n   public final void setW(@NotNull String var1) {\n      Intrinsics.checkNotNullParameter(var1, \"<set-?>\");\n      this.w$delegate.setValue(this, $$delegatedProperties[1], var1);\n   }\n}\n```\n\n当调用下面的代码时，就会调用到 FooBy.y 的 get 方法\n\n```\nval foo = FooBy()\nprintln(foo.y)\n```\n\n看一下反编译后的 getY 方法，\n\n```java\n@NotNull\npublic final String getY() {\n   return this.y$delegate.getValue(this, $$delegatedProperties[0]);\n}\n```\n\n看一下 `y$delegate` 是什么 ,其实就是我们的代理类并在 FooBy 类构建的时候已经初始化\n\n```java\n@NotNull\nprivate final MyDelegate y$delegate = new MyDelegate();\n```\n\n再看看MyDelegate中的的 getValue 方法, 就是我们在代理类中必须提供的方法\n\n```java\n//Java code\n@NotNull\npublic final String getValue(@NotNull Object thisRef, @NotNull KProperty property) {\n   Intrinsics.checkNotNullParameter(thisRef, \"thisRef\");\n   Intrinsics.checkNotNullParameter(property, \"property\");\n   return this.value;\n}\n```\n\n到这里我们就可以看清了整个委托流程了\n\n- 当类中有属性被委托时，Kotlin 会在当前类中添加委托类的实例并在实例化当前类时实例化委托类( y$delegate)，同时$$delegatedProperties 数组也是在类初始化时创建完成，里面方式所有属性的反射类信息\n- 当要获取委托属性时，会调用到它的 get 方法，而 get 方法返回的是代理类的 getValue 方法\n- getValue 方法是我们自己实现的，最终代理属性就会通过 getValue  方法赋上值了\n- setValue 时还会把 属性 的backing field 传过去\n\n### 3.3 PropertyReferenceImpl \n\n委托流程搞清楚了，我们再来看看 getValue 方法中 `thisRef: Any`， `property: KProperty<*>` 这两个参数是怎么来的，干什么用的\n\nthisRef 这个参数是业务类本身可以看到就是在调用 getValue 方法时传递的 this\n\nproperty 是委托属性的描述类 `KProperty` ,它是从这个数组里取的 `$$delegatedProperties[0]`，这个数组也是构建业务类时由Kotlin自动生成的，存放的是描述类属性的 KProperty 类型\n\n`Reflection.property1`  是一个工厂函数，将传入的参数返回\n\nPropertyReference1Impl 的父类也间接实现了 KProperty 接口，所以这里可以强转\n\n```java\n//$$delegatedProperties\nstatic final KProperty[] $$delegatedProperties =\n  new KProperty[]{(KProperty)Reflection.property1(\n  new PropertyReference1Impl(FooBy.class, \"y\", \"getY()Ljava/lang/String;\", 0)), (KProperty)Reflection.mutableProperty1(\n  new MutablePropertyReference1Impl(FooBy.class, \"w\", \"getW()Ljava/lang/String;\", 0))};\n\n```\n\n再看一下属性引用实现类 PropertyReference1Impl  的构造参数 \n\nPropertyReference1Impl 类的构造器最终会调用到它的父类  CallableReference\n\n**CallableReference**：是 Kotlin 编译器为可调用引用类生成的所有类的超类。\n\n```kotlin\n@SinceKotlin(version = \"1.4\")\npublic PropertyReference1Impl(Class owner, String name, String signature, int flags) {\n    super(NO_RECEIVER, owner, name, signature, flags);\n}\n//NO_RECEIVER 如果属性没有 receiver 构造时会缺省添加一个 NO_RECEIVER\n@SinceKotlin(version = \"1.1\")\npublic static final Object NO_RECEIVER = NoReceiver.INSTANCE;\n@SinceKotlin(version = \"1.2\")\nprivate static class NoReceiver implements Serializable {\n    private static final NoReceiver INSTANCE = new NoReceiver();\n\n    private Object readResolve() throws ObjectStreamException {\n        return INSTANCE;\n    }\n}\n\n//CallableReference\n@SinceKotlin(version = \"1.4\")\nprotected CallableReference(Object receiver, Class owner, String name, String signature, boolean isTopLevel) {\n    this.receiver = receiver; //可调用对象的属性值的接收器。 例如：类实例\n    this.owner = owner; //可调用对象所在的类或包\n    this.name = name; //可调用对象的 Kotlin 名称，即在源代码中声明的名\n    this.signature = signature; //可调用对象的 JVM 签名。如果这是一个属性引用，则返回其 getter 的 JVM 签名，例如“getFoo(LjavalangString;)I”。\n    this.isTopLevel = isTopLevel; //是否高等类型(文件中还是类中)，0 false; 1 true\n}\n```\n\n利用Java的实现方式简单总结以下Kotlin 属性委托的背后原理\n\n```java\nclass Person {\n  static final Field[] delegatedProperties = Person.class.getFields();\n  private final NameDelegate nameDelegate = new NameDelegate();\n  public final String getName() {\n    return this.nameDelegate.getValue(this, delegatedProperties[0]);\n  }\n}\nclass NameDelegate {\n  String getValue(Person thisRef, Field property) {\n    return \"Jay\";\n  }\n}\n```\n\n\n\n### 3.4 简化属性委托的内置接口们\n\nKotlin 内置的属性委托功能是**属性委托类**，不能像普通的委托模式一样通过接口或集成的方式来约束交互的方法和类型，做不了两方约束，但是可以通过泛型+接口约束一下委托类，也能达到一部分约束的效果。\n\nKotlin 标准库中提供了三个接口来简化委托类的实现\n\n```kotlin\n//val 属性\npublic fun interface ReadOnlyProperty<in T, out V>\n//var 属性\npublic interface ReadWriteProperty<in T, V> : ReadOnlyProperty<T, V>\n//创建委托类的工厂接口\npublic fun interface PropertyDelegateProvider<in T, out D>\n//T：拥有委托属性的对象类型。 \n//V：属性值的类型。\n//D：委托类的类型\n```\n\n看一下三个接口的接口和方法签名\n\n```kotlin\npublic fun interface ReadOnlyProperty<in T, out V> {\n    public operator fun getValue(thisRef: T, property: KProperty<*>): V\n}\npublic interface ReadWriteProperty<in T, V> : ReadOnlyProperty<T, V> {\n    public override operator fun getValue(thisRef: T, property: KProperty<*>): V\n    public operator fun setValue(thisRef: T, property: KProperty<*>, value: V)\n}\n@SinceKotlin(\"1.4\")\npublic fun interface PropertyDelegateProvider<in T, out D> {\n    public operator fun provideDelegate(thisRef: T, property: KProperty<*>): D\n}\n//前两个直接用就行，看一个 PropertyDelegateProvider 的使用场景\nprivate val provider = PropertyDelegateProvider<FooBy, MyDelegate> { thisRef, property ->\n    if (thisRef.y == \"YYY\") {\n        MyDelegate()\n    } else {\n        MyDelegate2() //MyDelegate2:MyDelegate\n    }\n}\n```\n\n看一下他们几个综合使用的情况，同时也可以看到kt语音的强大，同样的功能,代码可以从十几行到三行再到一行。yyds!!!\n\n```kotlin\nval provider1 = object : PropertyDelegateProvider<FooReadWrite, ReadWriteProperty<FooReadWrite, Int>> {\n        override fun provideDelegate(\n            thisRef: FooReadWrite,\n            property: KProperty<*>\n        ): ReadWriteProperty<FooReadWrite, Int> {\n            return object : ReadWriteProperty<FooReadWrite, Int> {\n                var result=1024\n                override fun getValue(thisRef: FooReadWrite, property: KProperty<*>): Int {\n                    return result\n                }\n                override fun setValue(thisRef: FooReadWrite, property: KProperty<*>, value: Int) {\n                    result=value\n                }\n            }\n        }\n    }\n\n//lambda 简化版本\nval provider2: PropertyDelegateProvider<FooReadWrite, ReadOnlyProperty<FooReadWrite, Int>> =\n    PropertyDelegateProvider<FooReadWrite, ReadOnlyProperty<FooReadWrite, Int>> { pThisRef: Any?, pProperty: KProperty<*> ->ReadOnlyProperty<Any?, Int> { thisRef, property -> 1025 }\n    \n//智能类型推导再简化版本\nprivate val provider3 =PropertyDelegateProvider { _: Any?, _ -> ReadOnlyProperty<Any?, Int> { _, _ -> 1026 } }\n\nval delegate1: Int by provider1\nval delegate2: Int by provider2\nval delegate3: Int by provider3\n```\n\n\n\n## 4. 属性委托在 Kotlin Api 中的运用\n\nKotlin 标准库中提供了几种委托\n\n- 映射委托(Map delegation)\n- 延迟属性（lazy properties）: 其值只在首次访问时计算；\n- 可观察属性（observable properties）: 监听器会收到有关此属性变更的通知；\n- 非空属性(Delegates.notNull)\n\n### 4.1 映射委托(Map delegation)\n\n看一个map 作为属性委托方的示例\n\n```kotlin\nclass User {\n    //委托 val\n    val map: Map<String, Any?> = mapOf(\"name2\" to \"Jay\", \"age\" to 18)\n\n    //可变 map 可以委托 val和var\n    val map2: MutableMap<String, Any?> = mutableMapOf(\"name2\" to \"Jay\", \"age\" to 18)\n    val name: String by map\n    var age: Int by map2\n\n    //更新 age 的值，MutableMap 也会同步更新\n    fun setValues(age: Int) {\n        this.age = age\n    }\n}\n```\n\nmap 中的 key 必须包含属性名，否则会报下面这个错\n\n```kotlin\nException in thread \"main\" java.util.NoSuchElementException: Key name2 is missing in the map.\n```\n\n所以在使用这个特性时除非我们完全确定支持映射的结构，否则应该避免基于映射的属性委托，要不然委托的类可能会失败并抛出异常\n\n还有一种情况当value 为 null 时，只有第四种情况会发生：NullPointerException ，这个问题想了解的可以官方的 [bug report](https://youtrack.jetbrains.com/issue/KT-27672)\n\n```kotlin\nval map: HashMap<String, Any?> = hashMapOf(\"name\" to null, \"age\" to null)\nval name: String by map\nval name: String？ by map\nvar age: Int? by map\nvar age: Int by map\n```\n\n再来窥探一下 Map delegation 的委托原理\n\n```java\n// $FF: synthetic field\nstatic final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(User.class, \"name\", \"getName()Ljava/lang/String;\", 0)), (KProperty)Reflection.mutableProperty1(new MutablePropertyReference1Impl(User.class, \"age\", \"getAge()Ljava/lang/Integer;\", 0))};\n@Nullable\nprivate final Map age$delegate;\n@Nullable\npublic final Integer getAge() {\n   Map var1 = (Map)this.age$delegate;\n   KProperty var3 = $$delegatedProperties[1];\n   boolean var4 = false;\n   return (Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());\n}\npublic final void setAge(@Nullable Integer var1) {\n   Map var2 = (Map)this.age$delegate;\n   KProperty var4 = $$delegatedProperties[1];\n   boolean var5 = false;\n   var2.put(var4.getName(), var1);\n}\n```\n\n可以看到，Kotlin 编译器 也生成了KProperty[] 类型的 $$delegatedProperties 和 Map 类型 age$delegate，并在构造时实例化age$delegate \n\nMap相关的委托必要方法在**[MapAccessors](https://github.com/JetBrains/kotlin/blob/34e57a45f2/libraries/stdlib/src/kotlin/collections/MapAccessors.kt)** 这个类里面\n\n```kotlin\n//Map\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1 : V> Map<in String, @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1 =@Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n//MutableMap\n@kotlin.jvm.JvmName(\"getVar\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <V, V1 : V> MutableMap<in String, out @Exact V>.getValue(thisRef: Any?, property: KProperty<*>): V1 = @Suppress(\"UNCHECKED_CAST\") (getOrImplicitDefault(property.name) as V1)\n//MutableMap\n@kotlin.internal.InlineOnly\npublic inline operator fun <V> MutableMap<in String, in V>.setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n    this.put(property.name, value)\n}\n```\n\n在访问 age 的 get 时会调用委托 Map 的    `(Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());`\n\n在访问 age 的 set 时直接调用委托 Map 的put方法\n\n下面是 **getOrImplicitDefaultNullable** 函数\n\n```kotlin\n//JvmName 这个注解是指定从此元素生成的 Java 类或方法的名称。\n//扩展方法编译后会将方法的 reciver 作为第一个参数传入\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)return this.getOrImplicitDefault(key)\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n```\n\n关于 map 的 put 和 get 操作是如何与委托的 getValue 和 setValue 如何联系在一起的 以及map 的 `getValue(thisRef: Any?, property: KProperty<*>) `方法为什么用 inline 修饰了，这里涉及到Kotlin 1.4 对委托属性的一个优化，稍后再解析 lazy 原理时会详细解释。\n\nMap delegation 的一个实践，将推送消息封装并通知APP\n\n```kotlin\noverride fun onNotificationReceivedInApp(\n    context: Context,\n    title: String,\n    summary: String,\n    extraMap: Map<String, String>,\n) {\n    val data = extraMap.withDefault { \"\" }\n    val params = NotificationParams(data)\n    EventBus.getDefault().post(params)\n}\n\nclass NotificationParams(val map: Map<String, String>) {\n    val title: String by map\n    val content: String by map\n}\n```\n\n### 4.2 延迟属性(lazy properties)\n\n看一下lazy的简单使用\n\n```kotlin\nval x: String by lazy(LazyThreadSafetyMode.SYNCHRONIZED) {\n    println(\"xxx——lazy\")\n    \"xxx——${index++}\"\n}\nval y: String by lazy(LazyThreadSafetyMode.PUBLICATION) {\n    println(\"yyy——lazy\")\n    \"yyy——${index++}\"\n}\nval z: String by lazy(LazyThreadSafetyMode.NONE) {\n    println(\"zzz——lazy\")\n    \"zzz——${index++}\"\n}\n```\n\n```kotlin\nval fooLazy = FooLazy()\nfor (i in 1..100) {\n    val thread = thread(true) {\n        Thread.sleep(100)\n        println(Thread.currentThread().name)\n        println(\"=\" + fooLazy.x)\n        println(\"====\" + fooLazy.y)\n        println(\"=========\" + fooLazy.z)\n    }\n}\n\n//xxx——lazy 和 yyy——lazy 都只执行一次，x=0, y=1\n//zzz——lazy 和 z 的值不能确定会执行几次\n```\n\nLazyThreadSafetyMode 有三种模式作用是指定 [Lazy] 实例如何在多个线程之间同步初始化。\n\n- SYNCHRONIZED: 锁用于确保只有一个线程可以初始化[Lazy]实例。\n- PUBLICATION: 并发访问未初始化的[Lazy]实例值时，可以多次调用Initializer函数，但是只有第一个返回的值将用作[Lazy]实例的值。\n- NONE: 不使用锁来同步对 [Lazy] 实例值的访问；如果从多个线程访问该实例，可能会发生线程安全问题。除非保证 [Lazy] 实例永远不会从多个线程初始化，否则不应使用此模式。\n\n#### lazy 原理解析\n\n受托对象是Lazy\n\n```kotlin\n@NotNull\nprivate final Lazy x$delegate;\n```\n\n受托对象在委托者构造方法中实例化\n\n```kotlin\npublic FooLazy() {\n   this.x$delegate = LazyKt.lazy(LazyThreadSafetyMode.SYNCHRONIZED, (Function0)(new Function0() {\n      // $FF: synthetic method\n      // $FF: bridge method\n      public Object invoke() {\n         return this.invoke();\n      }\n      @NotNull\n      public final String invoke() {\n         String var1 = \"xxx——lazy\";\n         boolean var2 = false;\n         System.out.println(var1);\n         StringBuilder var10000 = (new StringBuilder()).append(\"xxx——\");\n         FooLazy var10001 = FooLazy.this;\n         int var3;\n         var10001.index = (var3 = var10001.index) + 1;\n         return var10000.append(var3).toString();\n      }\n   }));\n}\n```\n\n可以看到 `x$delegate`  是通过 LazyKt.lazy() 方法实例化的，两个参数分别是线程安全模式类型和一个接口回调\n\n当调用x 的 get 方法时 反回了受托者的 getValue 方法 并没有调用 lazy 的扩展方法：LazyKt.getValue(thisRef: Any?, property: KProperty<*>) \n\n```java\npublic final String getX() {\n   Lazy var1 = this.x$delegate;\n   return (String)var1.getValue();\n}\n```\n\n再看一下 lazy 是如何定义委托方法 getValue 的\n\n```kotlin\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n```\n\n这里有没有注意到 lazy 利用属性委托的方式是不同的\n\n- 没有自动生成属性数组  `KProperty[] $$delegatedProperties` \n- getX 时最终返回时调用的也不是 `getValue(thisRef: Any?, property: KProperty<*>)`\n- lazy 的  `getValue(thisRef: Any?, property: KProperty<*>)` 方法是用 **inline** 修饰的 并且添加了`@kotlin.internal.InlineOnly` 注解，map 委托 也是这样的操作\n\n其实这里是Kotlin 1.4 做的优化，当某些委托属性不会使用 KProperty。对于他们来说，在 `$$delegatedProperties` 中生成一个KProperty对象是多余的。Kotlin 1.4 版本将优化此类情况。如果委托的属性运算符是内联的，并且没有使用 KProperty 参数，则不会生成相应的反射对象。如果委托属性中有没有采用 inline 修饰的 ， 最终生成的`$$delegatedProperties`  数组中也之会单独生成它自己的反射对象，详细说明可以看官方的这篇博客\n\n[What to Expect in Kotlin 1.4 and Beyond | Optimized delegated properties](https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/)\n\n> 内联实际上是如何工作的？\n>\n> 粗略地说，内联采用被内联的函数的字节码，并将其插入到调用处，因此内联函数声明不必在调用处可见。\n>\n> `@kotlin.internal.InlineOnly` 注解的作用？\n>\n> `InlineOnly` 意味着与此 Kotlin 函数对应的 Java 方法被标记为私有，因此 Java 代码无法访问它（这是调用内联函数而不实际内联它的唯一方法）。这个注释还没有得到很好的验证，官方目前只在内部使用，很有可能稍后将其公之于众。\n\n所以 lazy 和 map 的属性委托在 Kotlin 4.1 都是做了优化的，lazy 属性在调用 getter 时实际上是调用的的是 Lazy<T> 中 value 的 getter，map 属性在调用 getter/setter 时 实际上最终调用的也是 map 的 get/put 方法。\n\n看一下 lazy 函数签名\n\n```kotlin\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> =\n    when (mode) {\n        LazyThreadSafetyMode.SYNCHRONIZED -> SynchronizedLazyImpl(initializer)\n        LazyThreadSafetyMode.PUBLICATION -> SafePublicationLazyImpl(initializer)\n        LazyThreadSafetyMode.NONE -> UnsafeLazyImpl(initializer)\n    }\n```\n\n\n\n#### SynchronizedLazyImpl\n\nSynchronizedLazyImpl 采用 DCL 方式确保线程安全\n\n```kotlin\nprivate class SynchronizedLazyImpl<out T>(initializer: () -> T, lock: Any? = null) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    @Volatile // 用内存可见性来检查是否在其他线程初始化过，同时也会禁止指令重排序防止_value拿到不完整的实例\n    private var _value: Any? = UNINITIALIZED_VALUE\n    //实例使用自身进行同步\n    private val lock = lock ?: this\n    //Lazy 接口的 value 属性用于获取当前 Lazy 实例的延迟初始化值。一旦初始化后，它不得在此 Lazy 实例的剩余生命周期内更改。\n    val value: T\n        // 重写 get 来保证懒加载，只在使用的时候才执行函数\n        get() {\n            //局部变量可以将性能提高25%以上\n            val _v1 = _value\n            //检查单例实例是否已初始化。如果它被初始化就返回实例。\n            if (_v1 !== UNINITIALIZED_VALUE) {\n                @Suppress(\"UNCHECKED_CAST\")\n                return _v1 as T\n            }\n            //到这里还没有初始化，但我们不能确定，因为可能有多个其他线程可能同时初始化了它。\n            //所以为了以防万一，这里需要添加一把互斥锁来保证只有一个线程去实例化实例对象。\n            return synchronized(lock) {\n                //再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。\n                val _v2 = _value\n                //如果它已经被其它线程初始化了，当前线程也能感知他的存在了，直接返回实例\n                if (_v2 !== UNINITIALIZED_VALUE) {\n                    @Suppress(\"UNCHECKED_CAST\")\n                    (_v2 as T)\n                } else {\n                    //到这里该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例了。\n                    val typedValue = initializer!!() //执行 Function 对象的 invoke 并将函数的返回值缓存起来\n                    _value = typedValue //_value赋值通知其它线程别进来了，拿走用吧\n                    initializer = null //initializer在当前类实例已经没用了\n                    typedValue // 返回最终的结果给 value\n                }\n            }\n        }\n}\n```\n\n看不惯这种DCL也可以恢复成传统方式看一下\n\n```kotlin\nval value: T\n    get() {\n        //局部变量将性能提高了 25% Joshua Bloch “Effective Java, Second Edition”，第 3 页。 283-284\n        var _v1 = _value\n        if (_v1 == UNINITIALIZED_VALUE) {\n            synchronized(lock) {\n                // 再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。\n                // 如果它被初始化，当前线程也能感知他的存在了。\n                _v1 = _value\n                if (_v1 == UNINITIALIZED_VALUE) {\n                    // 该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例并将其赋值给我们的单例引用。\n                    _v1 = initializer!!()\n                    initializer = null\n                }\n            }\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return _v1 as T\n    }\n```\n\n\n\n#### SafePublicationLazyImpl\n\n**AtomicReferenceFieldUpdater** ：原子更新器是基于反射的工具类，用来对某个类中，被volatile修饰的字段进行原子更新。\n\n通过调用AtomicReferenceFieldUpdater的静态方法`newUpdater`就能创建它的实例，该方法要接收三个参数：包含该字段所在的类、将被更新的对象的类型、将被更新的字段的名称\n\n`compareAndSet` 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新返回 true 同时原子地将字段设置为给定的更新值。\n\n`getAndSet`原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。\n\n原子更新器的使用存在比较苛刻的条件如下\n\n- 操作的字段不能是static类型。\n- 操作的字段不能是final类型的，因为final根本没法修改。\n- 字段必须是volatile修饰的，也就是数据本身是读一致的。\n- 属性必须对当前的Updater所在的区域是可见的，如果不是当前类内部进行原子更新器操作不能使用private，protected子类操作父类时修饰符必须是protect权限及以上，如果在同一个package下则必须是default权限及以上，也就是说无论何时都应该保证操作类与被操作类间的可见性。\n\n> CAS，Compare and Swap即比较并交换，设计并发算法时常用到的一种技术，java.util.concurrent包全完建立在CAS之上，没有CAS也就没有此包，可见CAS的重要性。当前的处理器基本都支持CAS，只不过不同的厂家的实现不一样罢了。**CAS有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做并返回false**。\n>\n> Unsafe，JDK中的一个类，它提供了硬件级别的**原子操作**。\n\ncompareAndSet 方法调用流程\n\n```java\n\nprivate static final sun.misc.Unsafe U = sun.misc.Unsafe.getUnsafe();\n\npublic final boolean compareAndSet(T obj, V expect, V update) {\n    accessCheck(obj);\n    valueCheck(update);\n    return U.compareAndSwapObject(obj, offset, expect, update);\n}\n\npublic final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);\n\n```\n\n看一个例子了解 `AtomicReferenceFieldUpdater` 的使用方式\n\n```java\npublic class AtomicReferenceFieldUpdaterTest {\n  public static void main(String[] args) throws Exception {\n    // T:持有可更新字段的对象的类型\n    // V:字段的类型\n    AtomicReferenceFieldUpdater<Dog, String> updater =\n        // 包含该字段所在的类、将被更新的对象的类、将被更新的字段的名称\n        AtomicReferenceFieldUpdater.newUpdater(Dog.class, String.class, \"name\");\n    Dog dog = new Dog();\n\n    // 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新，则原子地将字段设置为给定的更新值。\n    // 参数：\n    // obj: 字段所在对象\n    // expect - 期望值\n    // update - 新值\n    // 返回：如果成功则为true\n    System.out.println(dog.name); // dog1 默认值\n    boolean result = updater.compareAndSet(dog, \"dog1\", \"dog2\");\n    System.out.println(result); // true 修改成功\n    System.out.println(dog.name); // dog2 修改后的的值\n    boolean result2 = updater.compareAndSet(dog, \"dog1\", \"dog3\");\n    System.out.println(result2); // false 修改失败\n    System.out.println(dog.name); // dog2 还是原来的值\n\n    // 原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。\n    // 参数：\n    // obj – 更新字段的对象\n    // newValue – 新值\n    // 返回：之前的的值\n    String result3 = updater.getAndSet(dog, \"dog4\");\n    System.out.println(result3); // dog2  原来的值\n    System.out.println(dog.name); // dog4 修改后的值\n  }\n}\n\nclass Dog {\n  volatile String name = \"dog1\";\n}\n```\n\nSafePublicationLazyImpl 使用 AtomicReferenceFieldUpdater 来保证 _value 属性的原子操作。支持同时多个线程调用，并且可以在全部或部分线程上同时进行初始化。如果某个值已由另一个线程初始化，则将返回该值而不执行初始化。\n\n```kotlin\nprivate class SafePublicationLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    @Volatile private var initializer: (() -> T)? = initializer\n    @Volatile private var _value: Any? = UNINITIALIZED_VALUE\n    private val final: Any = UNINITIALIZED_VALUE\n    override val value: T\n        get() {\n            val value = _value\n            if (value !== UNINITIALIZED_VALUE) {\n                @Suppress(\"UNCHECKED_CAST\")\n                return value as T\n            }\n            val initializerValue = initializer\n            //如果在这里看到初始值已经为 null，则表示该值已被另一个线程设置过了，直接返回 _value ，否则就初始化\n            if (initializerValue != null) {\n                val newValue = initializerValue() //执行 Function 对象的 invoke 并将函数返回值原子化赋值给 _value\n                //如果_value的值是UNINITIALIZED_VALUE说明还没有线程初始化它，此时可以将newValue设置给_value\n              \tif (valueUpdater.compareAndSet(this, UNINITIALIZED_VALUE, newValue)) {\n                    initializer = null\n                    return newValue //只有唯一的线程会从这里返回，其它都走下面的返回了\n                }\n              //如果_value的值不是UNINITIALIZED_VALUE，说明其它线程已经初始化完了，当前线程直接返回_value就行了\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n\t\t//如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n    companion object {\n      \t//初始化一个原子更新器：保证原子操作的字段是 _value\n        private val valueUpdater = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(\n            SafePublicationLazyImpl::class.java,\n            Any::class.java,\n            \"_value\"\n        )\n    }\n}\n```\n\n#### UnsafeLazyImpl\n\n```kotlin\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n    override val value: T\n        get() {\n          \t//普通的懒加载，只初始化一次，但是在多线程环境下不能保证只执行一次\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!() //多线程并发情况下可能出现空指针异常\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n  \t//如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n```\n\n\n\n### 4.3 NotNullVar\n\nnotNull 可以返回一个经过非空校验的属性值但是该属性值并没有初始化需要人为稍后setValue\n在分配初始值之前尝试读取属性会导致异常，这也是返回非空属性的原理所在\n\n> 非空属性应用场景分析\n> 通常，声明为非空类型的属性必须在构造函数中初始化。然而，这通常并不方便。 例如，可以通过依赖注入或在单元测试的 setup 方法中初始化属性。在这种情况下，您不能在构造函数中提供非 null 初始值设定项，但您仍然希望在引用类体内的属性时避免空检查。\n>\n> notNull VS lateinit\n> lateinit 不支持原始类型、只能用在可变属性var\n> notNull 会为每个属性创建委托类 NotNullVar\n\nnotNull  的使用与原理\n\n```kotlin\n    var name2: String by Delegates.notNull()\n    val age2: Int by Delegates.notNull() // notNull 会为每个属性创建委托类 NotNullVar\n//    lateinit var age3: Int //lateinit 不支持原始类型\n    lateinit var name3: String //lateinit 只能用在 var\n\n\npublic fun <T : Any> notNull(): ReadWriteProperty<Any?, T> = NotNullVar()\n\nprivate class NotNullVar<T : Any>() : ReadWriteProperty<Any?, T> {\n    private var value: T? = null\n\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): T {\n        return value ?: throw IllegalStateException(\"Property ${property.name} should be initialized before get.\")\n    }\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: T) {\n        this.value = value\n    }\n}\n```\n\n### 4.4 ObservableProperty\n\n```kotlin\npublic abstract class ObservableProperty<V>(initialValue: V) : ReadWriteProperty<Any?, V> {\n    private var value = initialValue\n    protected open fun beforeChange(property: KProperty<*>, oldValue: V, newValue: V): Boolean = true\n    protected open fun afterChange(property: KProperty<*>, oldValue: V, newValue: V): Unit {}\n    public override fun getValue(thisRef: Any?, property: KProperty<*>): V {\n        return value\n    }\n    public override fun setValue(thisRef: Any?, property: KProperty<*>, value: V) {\n        val oldValue = this.value\n    //beforeChange: 在尝试更改属性值之前调用的回调。 调用此回调时，该属性的值尚未更改。 如果回调返回true ，则属性的值被设置为新值，如果回调返回false ，则丢弃新值，属性保持其旧值\n        if (!beforeChange(property, oldValue, value)) {\n            return\n        }\n        this.value = value\n    //afterChange: 进行属性更改后调用的回调。 调用此回调时，该属性的值已更改。\n        afterChange(property, oldValue, value)\n    }\n}\n```\n\n#### observable 变量值更新后的监听\n\n```kotlin\npublic inline fun <T> observable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Unit): ReadWriteProperty<Any?, T> =\n    object : ObservableProperty<T>(initialValue) {\n        override fun afterChange(property: KProperty<*>, oldValue: T, newValue: T) = onChange(property, oldValue, newValue)\n    }\n```\n\n#### vetoable变量值更新前的拦截\n\n```kotlin\npublic inline fun <T> vetoable(initialValue: T, crossinline onChange: (property: KProperty<*>, oldValue: T, newValue: T) -> Boolean): ReadWriteProperty<Any?, T> =\n    object : ObservableProperty<T>(initialValue) {\n        override fun beforeChange(property: KProperty<*>, oldValue: T, newValue: T): Boolean = onChange(property, oldValue, newValue)\n    }\n```\n\n测试代码\n\n```kotlin\nvar items: List<String> by Delegates.observable(mutableListOf()) { property, oldValue, newValue ->\n    println(\"${property.name} : $oldValue -> $newValue\")\n}\n\nvar nameAfter: String by Delegates.observable(\"no\") { prop, old, new ->\n    println(\"$old -> $new\")\n}\nvar nameBefore: String by Delegates.vetoable(\"no\") { prop, old, new ->\n    println(\"$old -> $new\")\n    true //返回true 表示 setValue 成功，否则不能覆盖原值\n}\n\nprivate fun <T> onChange(property: KProperty<*>, oldValue: T, newValue: T) {\n    println(\"${property.name} : $oldValue -> $newValue\")\n}\n\nvar age: Int by Delegates.observable(18, ::onChange)\n\n//运行结果\nno -> first\nfirst -> second\nno -> 11111\n11111 -> 2222\nage : 18 -> 33\nage : 33 -> 55\nitems : [] -> [new val]\nitems : [new val] -> [new val, new 111]\n```\n\n\n\n## 5. 属性委托在 Android 上的应用\n\n### 5.1 ViewBinding\n\n```kotlin\n//1. 借助 lazy 属性委托  + 反射 VB 的 inflate 方法\nprivate val binding: ActivityMainBinding by vb()\n//2. 借助 lazy 属性委托  + 传递 inflate 方法引用\nprivate val binding: ActivityMainBinding by vb(ActivityMainBinding::inflate)\n```\n\n**[VBHelper](https://github.com/jaydroid1024/VBHelper)**\n\n```kotlin\n@MainThread\ninline fun <reified T : ViewBinding> ComponentActivity.vb(noinline inflateMethodRef: ((LayoutInflater) -> T)? = null): Lazy<T> =\n    ActivityVBLazy(this, T::class, inflateMethodRef)\n\n\nclass ActivityVBLazy<T : ViewBinding>(\n    private val activity: ComponentActivity,\n    private val kClass: KClass<*>,\n    private val inflateMethodRef: ((LayoutInflater) -> T)?\n) : Lazy<T> {\n    private var cachedBinding: T? = null\n    override val value: T\n        get() {\n            var viewBinding = cachedBinding\n            if (viewBinding == null) {\n                viewBinding = if (inflateMethodRef != null) {\n                    //借助 lazy 属性委托 + 传递 inflate 方法引用\n                    inflateMethodRef.invoke(activity.layoutInflater)\n                } else {\n                    //借助 lazy 属性委托  + 反射绑定类的 inflate 方法\n                    @Suppress(\"UNCHECKED_CAST\")\n                    kClass.java.getMethod(METHOD_INFLATE, LayoutInflater::class.java)\n                        .invoke(null, activity.layoutInflater) as T\n                }\n                activity.setContentView(viewBinding.root)\n                cachedBinding = viewBinding\n            }\n            return viewBinding\n        }\n\n    override fun isInitialized() = cachedBinding != null\n}\n```\n\n### 5.2 ViewModel\n\n```kotlin\n//借助 lazy 属性委托  + ViewModelProvider\nval model: MyViewModel by viewModels()\n```\n\n**[ActivityViewModelLazy](https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/activity/ktx/src/main/java/androidx/activity/ActivityViewModelLazy.kt)**\n\n```kotlin\n@MainThread\ninline fun <reified VM : ViewModel> ComponentActivity.viewModels(\n    factory: ViewModelProvider.Factory? = null\n): Lazy<VM> = ActivityViewModelLazy(this, VM::class, factory)\n\n/**\n * An implementation of [Lazy] used by [ComponentActivity.viewModels] tied to the given [activity],\n * [viewModelClass], [factory]\n */\nclass ActivityViewModelLazy<VM : ViewModel>(\n    private val activity: ComponentActivity,\n    private val viewModelClass: KClass<VM>,\n    private val factory: ViewModelProvider.Factory?\n) : Lazy<VM> {\n    private var cached: VM? = null\n    override val value: VM\n        get() {\n            var viewModel = cached\n            if (viewModel == null) {\n                val application = activity.application\n                    ?: throw IllegalArgumentException(\n                        \"ViewModel can be accessed \" +\n                                \"only when Activity is attached\"\n                    )\n                val resolvedFactory = factory ?: AndroidViewModelFactory.getInstance(application)\n                viewModel = ViewModelProvider(activity, resolvedFactory).get(viewModelClass.java)\n                cached = viewModel\n            }\n            return viewModel\n        }\n\n    override fun isInitialized() = cached != null\n}\n```\n\n**[FragmentViewModelLazy](https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/fragment/ktx/src/main/java/androidx/fragment/app/FragmentViewModelLazy.kt)**\n\n```kotlin\n@MainThread\ninline fun <reified VM : ViewModel> Fragment.viewModels(factory: Factory? = null): Lazy<VM> =\n    FragmentViewModelLazy(this, VM::class, factory)\n\n/**\n * An implementation of [Lazy] used by [Fragment.viewModels] tied to the given [fragment],\n * [viewModelClass], [factory]\n */\nclass FragmentViewModelLazy<VM : ViewModel>(\n    private val fragment: Fragment,\n    private val viewModelClass: KClass<VM>,\n    private val factory: Factory?\n) : Lazy<VM> {\n    private var cached: VM? = null\n    override val value: VM\n        get() {\n            var viewModel = cached\n            if (viewModel == null) {\n                val application = fragment.activity?.application\n                    ?: throw IllegalArgumentException(\n                        \"ViewModel can be accessed \" +\n                                \"only when Fragment is attached\"\n                    )\n                val resolvedFactory = factory ?: AndroidViewModelFactory.getInstance(application)\n                viewModel = ViewModelProvider(fragment, resolvedFactory).get(viewModelClass.java)\n                cached = viewModel\n            }\n            return viewModel\n        }\n\n    override fun isInitialized() = cached != null\n}\n```\n\n### 5.3 SP delegates\n\n```kotlin\nfun SharedPreferences.int(def: Int = 0, key: String? = null) =\n    delegate(def, key, SharedPreferences::getInt, SharedPreferences.Editor::putInt)\n\nfun SharedPreferences.long(def: Long = 0, key: String? = null) =\n    delegate(def, key, SharedPreferences::getLong, SharedPreferences.Editor::putLong)\n\nfun SharedPreferences.string(def: String = \"\", key: String? = null) =\n    delegate(def, key, SharedPreferences::getString, SharedPreferences.Editor::putString)\n\n\nprivate inline fun <T> SharedPreferences.delegate(\n    defaultValue: T,\n    key: String?,\n    crossinline getter: SharedPreferences.(String, T) -> T,\n    crossinline setter: SharedPreferences.Editor.(String, T) -> SharedPreferences.Editor\n) = object : ReadWriteProperty<Any, T> {\n    override fun getValue(thisRef: Any, property: KProperty<*>) =\n        getter(key ?: property.name, defaultValue)\n\n    @SuppressLint(\"CommitPrefEdits\")\n    override fun setValue(thisRef: Any, property: KProperty<*>, value: T) =\n        edit().setter(key ?: property.name, value).apply()\n}\n```\n\n测试代码\n\n```kotlin\nclass TokenHolder(prefs: SharedPreferences) {\n    var token: String by prefs.string()\n        private set\n    var count by prefs.int()\n        private set\n    fun saveToken(newToken: String) {\n        token = newToken\n        count++\n    }\n    override fun toString(): String {\n        return \"TokenHolder(token='$token', count=$count)\"\n    }\n}\n\nclass UserHolder(prefs: SharedPreferences) {\n    var name: String by prefs.string()\n        private set\n    var pwd: String by prefs.string()\n        private set\n    fun saveUserAccount(name: String, pwd: String) {\n        this.name = name\n        this.pwd = pwd\n    }\n    override fun toString(): String {\n        return \"UserHolder(name='$name', pwd='$pwd')\"\n    }\n}\n\nval prefs = getSharedPreferences(\"sp_app_jay\", Context.MODE_PRIVATE)\n\n//缓存Token的场景\nval tokenHolder = TokenHolder(prefs)\nLog.d(\"Jay\", \"tokenHolder:$tokenHolder\")\ntokenHolder.saveToken(\"token_one\")\ntokenHolder.saveToken(\"token_second\")\n\n//缓存登录信息的场景\nval userHolder = UserHolder(prefs)\nLog.d(\"Jay\", \"userHolder:$userHolder\")\nuserHolder.saveUserAccount(\"jay\", \"123456\")\n```\n\n## 6. 总结\n\n本篇文章围绕 Kotlin 的内置委托(Delegation﻿) 特性并结合代码实践分别阐述了 Kotlin 委托的原理(包括属性委托和接口委托)，尤其是属性委托从属性到委托详细阐述了其实现原理，\n\n然后是实践部分，首先是Kotlin 标准库中利用属性委托为我们封装了很多简洁的API，比如：map、lazy、notNull、Observable 等；然后是Kotlin 属性委托在 Android 上的一些实践，包括 VB、VM、SP 等利用属性委托基本上都能完成一行代码实现set/get。Kotlin 委托显然在消除样板代码方面能发挥出强大的作用。但是这每个属性的背后却对应这一个委托类，所以在大量使用时也需要兼顾性能。\n\n\n\n## 7. 参考\n\n[官方文档 | 委托](https://www.kotlincn.net/docs/reference/delegation.html)\n\n[官方文档 | 属性委托](https://www.kotlincn.net/docs/reference/delegated-properties.html)\n\n[慕课网 | 新版 Kotlin 从入门到精通](https://coding.imooc.com/class/398.html)\n\n[一文彻底搞懂Kotlin中的委托](https://juejin.cn/post/6844904038589267982)\n\n[Wikipedia | Delegation pattern](https://en.wikipedia.org/wiki/Delegation_pattern)\n\n[Wikipedia | Proxy pattern](https://en.wikipedia.org/wiki/Proxy_pattern)\n\n[Medium | Kotlin Delegates in Android](https://proandroiddev.com/kotlin-delegates-in-android-1ab0a715762d)\n\n","slug":"Kotlin_delegate","published":1,"updated":"2021-09-18T18:00:13.917Z","_id":"cktq3gnz70000ccxf3n92ais6","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Kotlin-委托-Delegation-详解\"><a href=\"#Kotlin-委托-Delegation-详解\" class=\"headerlink\" title=\"Kotlin | 委托(Delegation﻿)详解\"></a>Kotlin | 委托(Delegation﻿)详解</h1><p>本文要点概述</p>\n<ul>\n<li><p>辨析委托模式与代理模式 </p>\n</li>\n<li><p>接口委托(Delegated interface)</p>\n</li>\n<li><p>属性委托(Delegated properties)</p>\n</li>\n<li><p>映射委托(Map delegation)</p>\n</li>\n<li><p>延迟属性(lazy properties)</p>\n</li>\n<li><p>非空属性(Delegates.notNull)</p>\n</li>\n<li><p>变量值更新后的监听(Delegates.observable)</p>\n</li>\n<li><p>变量值更新前的拦截(Delegates.vetoable)</p>\n</li>\n<li><p>ViewBinding+属性委托</p>\n</li>\n<li><p>ViewModel+属性委托</p>\n</li>\n<li><p>SP +属性委托</p>\n</li>\n</ul>\n<h2 id=\"1-委托模式-VS-代理模式\"><a href=\"#1-委托模式-VS-代理模式\" class=\"headerlink\" title=\"1.委托模式 VS 代理模式\"></a>1.委托模式 VS 代理模式</h2><p>委托模式和代理模式都属于结构型设计模式，结构型模式主要总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。</p>\n<h3 id=\"1-1-代理模式（Proxy-Pattern）\"><a href=\"#1-1-代理模式（Proxy-Pattern）\" class=\"headerlink\" title=\"1.1 代理模式（Proxy Pattern）\"></a>1.1 代理模式（Proxy Pattern）</h3><p>在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。在代理类中还可以提供额外的逻辑， 例如当真实对象上的操作是资源密集型任务时可以在代理中添加缓存操作，或者在调用真实对象操作之前做一些权限校验或检查行为等。一般情况下，我们让代理类和原始类实现同样的接口或者让代理类继承原始类来实现代理模式。</p>\n<h3 id=\"1-2-委托模式（Delegation-pattern）\"><a href=\"#1-2-委托模式（Delegation-pattern）\" class=\"headerlink\" title=\"1.2 委托模式（Delegation pattern）\"></a>1.2 委托模式（Delegation pattern）</h3><p>委托可以理解为是代理的一种变体，是一种使组合像继承一样实现代码复用的另一种设计模式。主要目的是组合委托调用和代码复用而不考虑控制访问等逻辑。在委托中处理请求涉及两个对象，委托方将操作交给受托方实现，类似于子类将请求推迟到父类。一般情况下，委托也可以通过接口约束或受托方继承委托方实现委托模式。</p>\n<h3 id=\"1-3-法律层面区分代理与委托\"><a href=\"#1-3-法律层面区分代理与委托\" class=\"headerlink\" title=\"1.3 法律层面区分代理与委托\"></a>1.3 法律层面区分代理与委托</h3><p>为了加深代理和委托的理解，我们看一下<strong>法律层面的代理与委托的不同之处</strong></p>\n<ul>\n<li><p>民事主体活动的名义不同。 代理是指被代理人在代理权限范围内，以被代理人的名义同第三人独立为民事法律行为，由此产生的法律效果直接归属于被代理人的一种法律制度，即代理人必须以被代理人的名义为代理行为。 委托则是委托人委托受托人处理一定事务，受托人接受委托的协议，受托人可以以委托人的名义活动，也可以以自己的名义活动。</p>\n</li>\n<li><p>适用范围不尽相同：代理只是代理人在代理权范围内以被代理人的名义同第三人的民事法律行为；而委托中的受托人办理委托人委托事务的行为可以是民事法律行为，还可以是有经济意义的行为（如整理账簿）和单纯的事实行为（如抄写文件）。</p>\n</li>\n<li><p>效力范围不同：代理涉及三方当事人，即被代理人、代理人、第三人；委托则属于双方当事人之间的关系，即委托人、受托人。</p>\n</li>\n</ul>\n<h3 id=\"1-4-代码实现委托和代理\"><a href=\"#1-4-代码实现委托和代理\" class=\"headerlink\" title=\"1.4 代码实现委托和代理\"></a>1.4 代码实现委托和代理</h3><p>代理模式和委托模式在代码实现上并没有太多差别，他们的差异还是在使用场景上，为了能更好的理解代理模式和委托模式，我们再来看看如何通过代码来实现</p>\n<p>代码参考自：<strong><a href=\"https://github.com/iluwatar/java-design-patterns\" target=\"_blank\" rel=\"noopener\"> java-design-patterns</a></strong></p>\n<p><a href=\"https://github.com/iluwatar/java-design-patterns/tree/master/delegation\" target=\"_blank\" rel=\"noopener\">delegation</a> ：打印机控制器将打印任务委托给不同的打印机</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 委托二人组：打印机控制器、打印机（惠普打印机、佳能打印机、爱普生打印机）</span>\n<span class=\"token comment\" spellcheck=\"true\">// 电脑上有三种打印机设备的驱动，分别将打印任务委托给对应的打印机执行具体的打印操作</span>\nPrinterController hpPrinterController <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrinterController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HpPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPrinterController canonPrinterController <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrinterController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">CanonPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPrinterController epsonPrinterController <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrinterController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EpsonPrinter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhpPrinterController<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>MESSAGE_TO_PRINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncanonPrinterController<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>MESSAGE_TO_PRINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nepsonPrinterController<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>MESSAGE_TO_PRINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//打印机控制器</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrinterController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Printer</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Printer printer<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">PrinterController</span><span class=\"token punctuation\">(</span>Printer printer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printer <span class=\"token operator\">=</span> printer<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">/** \n   * 此方法是从 {@link Printer} 实现的，在提供实现时它会调用通过构造函数传递的委托方的 print 方法。 \n   * 这意味着委托关系一旦确定后，调用者不关心实现类，只关心拥有的打印机控制器就行。\n   */</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>String message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    printer<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//三个打印机也实现了 Printer 接口 并提供了具体的打印功能，代码可以参考上面的链接</span></code></pre>\n<p><a href=\"https://github.com/iluwatar/java-design-patterns/tree/master/proxy\" target=\"_blank\" rel=\"noopener\">proxy</a> ：巫师要进入塔内修炼法术，象牙塔只能通过代理访问并确保只有前三个巫师可以进入。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 代理三人组：巫师塔代理、象牙塔、巫师</span>\nWizardTowerProxy proxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WizardTowerProxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IvoryTower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Wizard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Red wizard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Wizard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"White wizard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Wizard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Black wizard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Wizard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Green wizard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nproxy<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Wizard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Brown wizard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//代理方：塔代理</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WizardTowerProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WizardTower</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> NUM_WIZARDS_ALLOWED <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> WizardTower tower<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> numWizards<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//被代理方通过构造方法传入</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">WizardTowerProxy</span><span class=\"token punctuation\">(</span>WizardTower tower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tower <span class=\"token operator\">=</span> tower<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">//对象牙塔的访问的代理。第三方通过 enter 方法进入</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>Wizard wizard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//超过三个就不让进了</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numWizards <span class=\"token operator\">&lt;</span> NUM_WIZARDS_ALLOWED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//代理方授权执行操作</span>\n      tower<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>wizard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      numWizards<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} is not allowed to enter!\"</span> <span class=\"token operator\">+</span> wizard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//被代理方：塔</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IvoryTower</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WizardTower</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>Wizard wizard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{} enters the tower.\"</span> <span class=\"token operator\">+</span> wizard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//第三方：巫师</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Wizard</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">Wizard</span><span class=\"token punctuation\">(</span>String wizard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> wizard<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"2-接口委托-Delegated-interface\"><a href=\"#2-接口委托-Delegated-interface\" class=\"headerlink\" title=\"2. 接口委托(Delegated interface)\"></a>2. 接口委托(Delegated interface)</h2><p>我们看看Kotlin 是怎么内置接口委托的，先看一下实现的委托模式的传统方式</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Api <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//委托方</span>\n<span class=\"token keyword\">class</span> ApiImpl <span class=\"token operator\">:</span> Api <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiImpl-a\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiImpl-b\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiImpl-c\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//受托方</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">ApiWrapper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> api<span class=\"token operator\">:</span> Api<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Api <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiWrapper-a\"</span><span class=\"token punctuation\">)</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiWrapper-b\"</span><span class=\"token punctuation\">)</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiWrapper-c\"</span><span class=\"token punctuation\">)</span>\n        api<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>再看看Kotlin 通过 <code>by</code> 关键字实现的简便方式</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//变量 api代替 ApiWrapperWithDelegate 实现了 Api 接口，ApiWrapperWithDelegate 就可以灵活的复写需要的函数</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">ApiWrapperWithDelegate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> api<span class=\"token operator\">:</span> Api<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Api <span class=\"token keyword\">by</span> api <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ApiWrapperWithDelegate-a\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//反编译 Java 后的代码和 ApiWrapper 是一样的</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> ApiWrapperWithDelegate implements Api <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Api api<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span> void <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      String var1 <span class=\"token operator\">=</span> <span class=\"token string\">\"ApiWrapperWithDelegate-a\"</span><span class=\"token punctuation\">;</span>\n      boolean var2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token function\">ApiWrapperWithDelegate</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NotNull</span> Api api<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Intrinsics<span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">,</span> <span class=\"token string\">\"api\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>api <span class=\"token operator\">=</span> api<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> void <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> void <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到 Kotlin 内置的接口委托是编译器帮我们生成了相关代码</p>\n<p>再看一个实践的例子：利用接口代理实现一个集成了 map 和 list 的超级集合</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">// 对象 list 和 map 代理 SupperArrayWithDelegate 实现 MutableList，MutableMap</span>\n<span class=\"token keyword\">class</span> SupperArrayWithDelegate<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> list<span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> map<span class=\"token operator\">:</span> MutableMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> E<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableMapOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> MutableList<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token keyword\">by</span> list<span class=\"token punctuation\">,</span> MutableMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> E<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> map <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 两个接口中都有，编译器不知道执行哪个，所以这些方法必须得重写</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> size<span class=\"token operator\">:</span> Int <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>size <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span>size\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> element<span class=\"token operator\">:</span> E<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> E<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;=</span> list<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> list<span class=\"token punctuation\">.</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"list:<span class=\"token interpolation variable\">$list</span>,map:<span class=\"token interpolation variable\">$map</span>\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"3-属性委托-Delegated-properties\"><a href=\"#3-属性委托-Delegated-properties\" class=\"headerlink\" title=\"3. 属性委托(Delegated properties)\"></a>3. 属性委托(Delegated properties)</h2><h3 id=\"3-1-属性-property\"><a href=\"#3-1-属性-property\" class=\"headerlink\" title=\"3.1 属性(property)\"></a>3.1 属性(property)</h3><p>我们先通过对比 Java field 和 kotlin property  来探究一下 kt 中 property 的内部实现方式</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//PersonKotlin 尽量写的像Java好对比 Kotlin 属性背后做的事情</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonKotlin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> var age<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> null\n        <span class=\"token comment\" spellcheck=\"true\">//Redundant getter 属性的 get/set 方法由编译器自动生成</span>\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> field <span class=\"token comment\" spellcheck=\"true\">//这里的 field = backing field</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            field <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> var name<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> null\n        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> field\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            field <span class=\"token operator\">=</span> value\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//反编译 Java 后的代码</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonKotlin</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> Integer age<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//field</span>\n   <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//field</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Integer <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>Integer value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>String value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">public</span> <span class=\"token function\">PersonKotlin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NotNull</span> String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Intrinsics<span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"property-kotlin-field-java-getField-setField\"><a href=\"#property-kotlin-field-java-getField-setField\" class=\"headerlink\" title=\"property(kotlin)=field(java)+getField()+setField()\"></a>property(kotlin)=field(java)+getField()+setField()</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// age 属性背后包含了三个角色，backing field、get、set</span>\n<span class=\"token keyword\">private</span> var age<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> null\n<span class=\"token comment\" spellcheck=\"true\">//等价于下面的代码</span>\n<span class=\"token annotation punctuation\">@Nullable</span>\n<span class=\"token keyword\">private</span> Integer age<span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Nullable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> Integer <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Integer var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> var1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"属性引用-Property-Reference\"><a href=\"#属性引用-Property-Reference\" class=\"headerlink\" title=\"属性引用(Property Reference)\"></a>属性引用(Property Reference)</h4><p>通过属性引用我们可以更清楚的了解 property 背后的 get 和 set 以及代理信息等</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> ageRef<span class=\"token operator\">:</span> KMutableProperty1<span class=\"token operator\">&lt;</span>PersonKotlin<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> PersonKotlin<span class=\"token operator\">::</span>age\n<span class=\"token comment\" spellcheck=\"true\">//PersonKotlin::age 类名获取的属性引用不包含 receiver，操作时需要传递一个</span>\n<span class=\"token keyword\">val</span> personKotlin <span class=\"token operator\">=</span> <span class=\"token function\">PersonKotlin</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">)</span>\nageRef<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>personKotlin<span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ageRef<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>personKotlin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//22</span>\n<span class=\"token comment\" spellcheck=\"true\">//public actual fun set(receiver: T, value: V)</span>\n<span class=\"token comment\" spellcheck=\"true\">//public actual fun get(receiver: T): V</span>\n<span class=\"token comment\" spellcheck=\"true\">//receiver - 用于获取属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//测试自定义属性委托后获取属性的委托信息</span>\n<span class=\"token keyword\">val</span> nameRef<span class=\"token operator\">:</span> KProperty0<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> personKotlin<span class=\"token operator\">::</span>name\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"personKotlin: \"</span> <span class=\"token operator\">+</span> personKotlin<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nameRef: \"</span> <span class=\"token operator\">+</span> nameRef<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"personKotlin.name: \"</span> <span class=\"token operator\">+</span> personKotlin<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//取： is KMutableProperty -> javaField?.isAccessible ?: true &amp;&amp; javaGetter?.isAccessible ?: true &amp;&amp;javaSetter?.isAccessible ?: true</span>\n<span class=\"token comment\" spellcheck=\"true\">//存： is KMutableProperty -> { javaField?.isAccessible = value javaGetter?.isAccessible = value javaSetter?.isAccessible = value }</span>\n<span class=\"token comment\" spellcheck=\"true\">//设置是否访问，只有设置为 true 才可以拿到 属性引用中的委托信息（如果被委托了）这个属性需要单独引入 kotlin-reflect 库</span>\nnameRef<span class=\"token punctuation\">.</span>isAccessible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token comment\" spellcheck=\"true\">//如果这是一个委托属性，则返回委托的值，如果此属性未委托，则返回null</span>\n<span class=\"token keyword\">val</span> nameDelegate <span class=\"token operator\">=</span> nameRef<span class=\"token punctuation\">.</span><span class=\"token function\">getDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nameDelegate： <span class=\"token interpolation variable\">$nameDelegate</span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//返回委托信息</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nameRef<span class=\"token punctuation\">.</span>getter<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//相当于调用 get 方法</span>\n<span class=\"token comment\" spellcheck=\"true\">//personKotlin: 1751075886</span>\n<span class=\"token comment\" spellcheck=\"true\">//nameRef: -954731934</span>\n<span class=\"token comment\" spellcheck=\"true\">//thisRef:1751075886</span>\n<span class=\"token comment\" spellcheck=\"true\">//property:-954731934</span>\n<span class=\"token comment\" spellcheck=\"true\">//personKotlin.name: 88377</span>\n<span class=\"token comment\" spellcheck=\"true\">//可以看到属性引用类和它的 receiver 在委托类和这里的 hashCode 相同</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//com.jay.lib_kotlin.delegate.MyDelegate@5a63f509</span>\n<span class=\"token comment\" spellcheck=\"true\">//YYY</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//测试lazy 属性代理方式</span>\n<span class=\"token keyword\">val</span> sexRef<span class=\"token operator\">:</span> KProperty0<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> personKotlin<span class=\"token operator\">::</span>sex\npersonKotlin<span class=\"token punctuation\">.</span>sex\nsexRef<span class=\"token punctuation\">.</span>isAccessible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sexRef<span class=\"token punctuation\">.</span><span class=\"token function\">getDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//获取的代理信息就是lazy代码块中的值：sex is male</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//测试 属性引用的类型</span>\n<span class=\"token keyword\">val</span> kMutableProperty0<span class=\"token operator\">:</span> KMutableProperty0<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">::</span>sex <span class=\"token comment\" spellcheck=\"true\">//sex 是顶级属性</span>\n<span class=\"token keyword\">val</span> s <span class=\"token operator\">=</span> kMutableProperty0 <span class=\"token keyword\">as</span> CallableReference\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>owner<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//file class com.jay.lib_kotlin.property.PersonKotlinKt</span>\n<span class=\"token comment\" spellcheck=\"true\">//属性引用的类型是 CallableReference</span></code></pre>\n<p><strong>receiver</strong>：属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器</p>\n<p><strong>CallableReference</strong>：是 Kotlin 编译器为可调用引用类生成的所有类的超类</p>\n<h3 id=\"3-2-属性委托实现原理\"><a href=\"#3-2-属性委托实现原理\" class=\"headerlink\" title=\"3.2 属性委托实现原理\"></a>3.2 属性委托实现原理</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> FooBy <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//只要在by关键字后面带有一个委托对象，这个对象不一定要实现特定的接口，只要包含了getValue/setValue方法、那它就能作为一个代理属性来使用。</span>\n    <span class=\"token keyword\">val</span> y <span class=\"token keyword\">by</span> <span class=\"token function\">MyDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> w<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> <span class=\"token function\">MyDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MyDelegate <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"YYY\"</span>\n    <span class=\"token comment\" spellcheck=\"true\">//todo 委托类里面必须提供 getValue 方法，或者扩展这个方法也可</span>\n    operator <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n    operator <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">=</span> s\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>反编译Java后的代码</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FooBy</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\" spellcheck=\"true\">// $FF: synthetic field</span>\n   <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> KProperty<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> $$delegatedProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KProperty</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>KProperty<span class=\"token punctuation\">)</span>Reflection<span class=\"token punctuation\">.</span><span class=\"token function\">property1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyReference1Impl</span><span class=\"token punctuation\">(</span>FooBy<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getY()Ljava/lang/String;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>KProperty<span class=\"token punctuation\">)</span>Reflection<span class=\"token punctuation\">.</span><span class=\"token function\">mutableProperty1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePropertyReference1Impl</span><span class=\"token punctuation\">(</span>FooBy<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getW()Ljava/lang/String;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token annotation punctuation\">@NotNull</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> MyDelegate y$delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token annotation punctuation\">@NotNull</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> MyDelegate w$delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token annotation punctuation\">@NotNull</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y$delegate<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> $$delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token annotation punctuation\">@NotNull</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>w$delegate<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> $$delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setW</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NotNull</span> String var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Intrinsics<span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;set-?>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>w$delegate<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> $$delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>当调用下面的代码时，就会调用到 FooBy.y 的 get 方法</p>\n<pre><code>val foo = FooBy()\nprintln(foo.y)</code></pre><p>看一下反编译后的 getY 方法，</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NotNull</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y$delegate<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> $$delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>看一下 <code>y$delegate</code> 是什么 ,其实就是我们的代理类并在 FooBy 类构建的时候已经初始化</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@NotNull</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> MyDelegate y$delegate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>再看看MyDelegate中的的 getValue 方法, 就是我们在代理类中必须提供的方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//Java code</span>\n<span class=\"token annotation punctuation\">@NotNull</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NotNull</span> Object thisRef<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NotNull</span> KProperty property<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   Intrinsics<span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token punctuation\">,</span> <span class=\"token string\">\"thisRef\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   Intrinsics<span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNullParameter</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> <span class=\"token string\">\"property\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>到这里我们就可以看清了整个委托流程了</p>\n<ul>\n<li>当类中有属性被委托时，Kotlin 会在当前类中添加委托类的实例并在实例化当前类时实例化委托类( y$delegate)，同时$$delegatedProperties 数组也是在类初始化时创建完成，里面方式所有属性的反射类信息</li>\n<li>当要获取委托属性时，会调用到它的 get 方法，而 get 方法返回的是代理类的 getValue 方法</li>\n<li>getValue 方法是我们自己实现的，最终代理属性就会通过 getValue  方法赋上值了</li>\n<li>setValue 时还会把 属性 的backing field 传过去</li>\n</ul>\n<h3 id=\"3-3-PropertyReferenceImpl\"><a href=\"#3-3-PropertyReferenceImpl\" class=\"headerlink\" title=\"3.3 PropertyReferenceImpl\"></a>3.3 PropertyReferenceImpl</h3><p>委托流程搞清楚了，我们再来看看 getValue 方法中 <code>thisRef: Any</code>， <code>property: KProperty&lt;*&gt;</code> 这两个参数是怎么来的，干什么用的</p>\n<p>thisRef 这个参数是业务类本身可以看到就是在调用 getValue 方法时传递的 this</p>\n<p>property 是委托属性的描述类 <code>KProperty</code> ,它是从这个数组里取的 <code>$$delegatedProperties[0]</code>，这个数组也是构建业务类时由Kotlin自动生成的，存放的是描述类属性的 KProperty 类型</p>\n<p><code>Reflection.property1</code>  是一个工厂函数，将传入的参数返回</p>\n<p>PropertyReference1Impl 的父类也间接实现了 KProperty 接口，所以这里可以强转</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//$$delegatedProperties</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> KProperty<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> $$delegatedProperties <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">KProperty</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>KProperty<span class=\"token punctuation\">)</span>Reflection<span class=\"token punctuation\">.</span><span class=\"token function\">property1</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyReference1Impl</span><span class=\"token punctuation\">(</span>FooBy<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"y\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getY()Ljava/lang/String;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>KProperty<span class=\"token punctuation\">)</span>Reflection<span class=\"token punctuation\">.</span><span class=\"token function\">mutableProperty1</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePropertyReference1Impl</span><span class=\"token punctuation\">(</span>FooBy<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getW()Ljava/lang/String;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>再看一下属性引用实现类 PropertyReference1Impl  的构造参数 </p>\n<p>PropertyReference1Impl 类的构造器最终会调用到它的父类  CallableReference</p>\n<p><strong>CallableReference</strong>：是 Kotlin 编译器为可调用引用类生成的所有类的超类。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"1.4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token function\">PropertyReference1Impl</span><span class=\"token punctuation\">(</span>Class owner<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">,</span> String signature<span class=\"token punctuation\">,</span> int flags<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>NO_RECEIVER<span class=\"token punctuation\">,</span> owner<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> signature<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//NO_RECEIVER 如果属性没有 receiver 构造时会缺省添加一个 NO_RECEIVER</span>\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"1.1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> static <span class=\"token keyword\">final</span> Object NO_RECEIVER <span class=\"token operator\">=</span> NoReceiver<span class=\"token punctuation\">.</span>INSTANCE<span class=\"token punctuation\">;</span>\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"1.2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> static <span class=\"token keyword\">class</span> NoReceiver implements Serializable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> static <span class=\"token keyword\">final</span> NoReceiver INSTANCE <span class=\"token operator\">=</span> new <span class=\"token function\">NoReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Object <span class=\"token function\">readResolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> throws ObjectStreamException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> INSTANCE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//CallableReference</span>\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token string\">\"1.4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token function\">CallableReference</span><span class=\"token punctuation\">(</span>Object receiver<span class=\"token punctuation\">,</span> Class owner<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">,</span> String signature<span class=\"token punctuation\">,</span> boolean isTopLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>receiver <span class=\"token operator\">=</span> receiver<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//可调用对象的属性值的接收器。 例如：类实例</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>owner <span class=\"token operator\">=</span> owner<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//可调用对象所在的类或包</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//可调用对象的 Kotlin 名称，即在源代码中声明的名</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>signature <span class=\"token operator\">=</span> signature<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//可调用对象的 JVM 签名。如果这是一个属性引用，则返回其 getter 的 JVM 签名，例如“getFoo(LjavalangString;)I”。</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isTopLevel <span class=\"token operator\">=</span> isTopLevel<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//是否高等类型(文件中还是类中)，0 false; 1 true</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>利用Java的实现方式简单总结以下Kotlin 属性委托的背后原理</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Field<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> delegatedProperties <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> NameDelegate nameDelegate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nameDelegate<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NameDelegate</span> <span class=\"token punctuation\">{</span>\n  String <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>Person thisRef<span class=\"token punctuation\">,</span> Field property<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"3-4-简化属性委托的内置接口们\"><a href=\"#3-4-简化属性委托的内置接口们\" class=\"headerlink\" title=\"3.4 简化属性委托的内置接口们\"></a>3.4 简化属性委托的内置接口们</h3><p>Kotlin 内置的属性委托功能是<strong>属性委托类</strong>，不能像普通的委托模式一样通过接口或集成的方式来约束交互的方法和类型，做不了两方约束，但是可以通过泛型+接口约束一下委托类，也能达到一部分约束的效果。</p>\n<p>Kotlin 标准库中提供了三个接口来简化委托类的实现</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//val 属性</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">interface</span> ReadOnlyProperty<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> V<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//var 属性</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> ReadWriteProperty<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token operator\">:</span> ReadOnlyProperty<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//创建委托类的工厂接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">interface</span> PropertyDelegateProvider<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> D<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">//T：拥有委托属性的对象类型。 </span>\n<span class=\"token comment\" spellcheck=\"true\">//V：属性值的类型。</span>\n<span class=\"token comment\" spellcheck=\"true\">//D：委托类的类型</span></code></pre>\n<p>看一下三个接口的接口和方法签名</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">interface</span> ReadOnlyProperty<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> V<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> operator <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> ReadWriteProperty<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token operator\">:</span> ReadOnlyProperty<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> operator <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V\n    <span class=\"token keyword\">public</span> operator <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> V<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token annotation builtin\">@SinceKotlin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.4\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token keyword\">interface</span> PropertyDelegateProvider<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> D<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> operator <span class=\"token keyword\">fun</span> <span class=\"token function\">provideDelegate</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> D\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//前两个直接用就行，看一个 PropertyDelegateProvider 的使用场景</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> provider <span class=\"token operator\">=</span> PropertyDelegateProvider<span class=\"token operator\">&lt;</span>FooBy<span class=\"token punctuation\">,</span> MyDelegate<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> thisRef<span class=\"token punctuation\">,</span> property <span class=\"token operator\">-></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thisRef<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token string\">\"YYY\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">MyDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">MyDelegate2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//MyDelegate2:MyDelegate</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>看一下他们几个综合使用的情况，同时也可以看到kt语音的强大，同样的功能,代码可以从十几行到三行再到一行。yyds!!!</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> provider1 <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> PropertyDelegateProvider<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">provideDelegate</span><span class=\"token punctuation\">(</span>\n            thisRef<span class=\"token operator\">:</span> FooReadWrite<span class=\"token punctuation\">,</span>\n            property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">var</span> result<span class=\"token operator\">=</span><span class=\"token number\">1024</span>\n                <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> FooReadWrite<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> result\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> FooReadWrite<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    result<span class=\"token operator\">=</span>value\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//lambda 简化版本</span>\n<span class=\"token keyword\">val</span> provider2<span class=\"token operator\">:</span> PropertyDelegateProvider<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> ReadOnlyProperty<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    PropertyDelegateProvider<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> ReadOnlyProperty<span class=\"token operator\">&lt;</span>FooReadWrite<span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> pThisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> pProperty<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">-></span>ReadOnlyProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> thisRef<span class=\"token punctuation\">,</span> property <span class=\"token operator\">-></span> <span class=\"token number\">1025</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//智能类型推导再简化版本</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> provider3 <span class=\"token operator\">=</span>PropertyDelegateProvider <span class=\"token punctuation\">{</span> _<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> _ <span class=\"token operator\">-></span> ReadOnlyProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> Int<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">-></span> <span class=\"token number\">1026</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> delegate1<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> provider1\n<span class=\"token keyword\">val</span> delegate2<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> provider2\n<span class=\"token keyword\">val</span> delegate3<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> provider3</code></pre>\n<h2 id=\"4-属性委托在-Kotlin-Api-中的运用\"><a href=\"#4-属性委托在-Kotlin-Api-中的运用\" class=\"headerlink\" title=\"4. 属性委托在 Kotlin Api 中的运用\"></a>4. 属性委托在 Kotlin Api 中的运用</h2><p>Kotlin 标准库中提供了几种委托</p>\n<ul>\n<li>映射委托(Map delegation)</li>\n<li>延迟属性（lazy properties）: 其值只在首次访问时计算；</li>\n<li>可观察属性（observable properties）: 监听器会收到有关此属性变更的通知；</li>\n<li>非空属性(Delegates.notNull)</li>\n</ul>\n<h3 id=\"4-1-映射委托-Map-delegation\"><a href=\"#4-1-映射委托-Map-delegation\" class=\"headerlink\" title=\"4.1 映射委托(Map delegation)\"></a>4.1 映射委托(Map delegation)</h3><p>看一个map 作为属性委托方的示例</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> User <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//委托 val</span>\n    <span class=\"token keyword\">val</span> map<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Any<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mapOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name2\"</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//可变 map 可以委托 val和var</span>\n    <span class=\"token keyword\">val</span> map2<span class=\"token operator\">:</span> MutableMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Any<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">mutableMapOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name2\"</span> <span class=\"token keyword\">to</span> <span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span> <span class=\"token keyword\">to</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> map\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> map2\n\n    <span class=\"token comment\" spellcheck=\"true\">//更新 age 的值，MutableMap 也会同步更新</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setValues</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>map 中的 key 必须包含属性名，否则会报下面这个错</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">Exception <span class=\"token keyword\">in</span> thread <span class=\"token string\">\"main\"</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>NoSuchElementException<span class=\"token operator\">:</span> Key name2 <span class=\"token keyword\">is</span> missing <span class=\"token keyword\">in</span> the map<span class=\"token punctuation\">.</span></code></pre>\n<p>所以在使用这个特性时除非我们完全确定支持映射的结构，否则应该避免基于映射的属性委托，要不然委托的类可能会失败并抛出异常</p>\n<p>还有一种情况当value 为 null 时，只有第四种情况会发生：NullPointerException ，这个问题想了解的可以官方的 <a href=\"https://youtrack.jetbrains.com/issue/KT-27672\" target=\"_blank\" rel=\"noopener\">bug report</a></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> map<span class=\"token operator\">:</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Any<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">hashMapOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span> <span class=\"token keyword\">to</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span> <span class=\"token keyword\">to</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> map\n<span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String？ <span class=\"token keyword\">by</span> map\n<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token keyword\">by</span> map\n<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> map</code></pre>\n<p>再来窥探一下 Map delegation 的委托原理</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// $FF: synthetic field</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> KProperty<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> $$delegatedProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KProperty</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>KProperty<span class=\"token punctuation\">)</span>Reflection<span class=\"token punctuation\">.</span><span class=\"token function\">property1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PropertyReference1Impl</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getName()Ljava/lang/String;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>KProperty<span class=\"token punctuation\">)</span>Reflection<span class=\"token punctuation\">.</span><span class=\"token function\">mutableProperty1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MutablePropertyReference1Impl</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"getAge()Ljava/lang/Integer;\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Nullable</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Map age$delegate<span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Nullable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> Integer <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   Map var1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age$delegate<span class=\"token punctuation\">;</span>\n   KProperty var3 <span class=\"token operator\">=</span> $$delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">boolean</span> var4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>MapsKt<span class=\"token punctuation\">.</span><span class=\"token function\">getOrImplicitDefaultNullable</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var3<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Integer var1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   Map var2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age$delegate<span class=\"token punctuation\">;</span>\n   KProperty var4 <span class=\"token operator\">=</span> $$delegatedProperties<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">boolean</span> var5 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n   var2<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>var4<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到，Kotlin 编译器 也生成了KProperty[] 类型的 $$delegatedProperties 和 Map 类型 age$delegate，并在构造时实例化age$delegate </p>\n<p>Map相关的委托必要方法在<strong><a href=\"https://github.com/JetBrains/kotlin/blob/34e57a45f2/libraries/stdlib/src/kotlin/collections/MapAccessors.kt\" target=\"_blank\" rel=\"noopener\">MapAccessors</a></strong> 这个类里面</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//Map</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> operator <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span> V1 <span class=\"token operator\">:</span> V<span class=\"token operator\">></span> Map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> String<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@Exact</span> V<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V1 <span class=\"token operator\">=</span><span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getOrImplicitDefault</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> V1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//MutableMap</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>jvm<span class=\"token punctuation\">.</span><span class=\"token function\">JvmName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getVar\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> operator <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>V<span class=\"token punctuation\">,</span> V1 <span class=\"token operator\">:</span> V<span class=\"token operator\">></span> MutableMap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token annotation builtin\">@Exact</span> V<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V1 <span class=\"token operator\">=</span> <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getOrImplicitDefault</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> V1<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//MutableMap</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> operator <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span> MutableMap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">in</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> V<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> V<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>在访问 age 的 get 时会调用委托 Map 的    <code>(Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());</code></p>\n<p>在访问 age 的 set 时直接调用委托 Map 的put方法</p>\n<p>下面是 <strong>getOrImplicitDefaultNullable</strong> 函数</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//JvmName 这个注解是指定从此元素生成的 Java 类或方法的名称。</span>\n<span class=\"token comment\" spellcheck=\"true\">//扩展方法编译后会将方法的 reciver 作为第一个参数传入</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>jvm<span class=\"token punctuation\">.</span><span class=\"token function\">JvmName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getOrImplicitDefaultNullable\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation builtin\">@PublishedApi</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> Map<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrImplicitDefault</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> K<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">is</span> MapWithDefault<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrImplicitDefault</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getOrElseNullable</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">NoSuchElementException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key <span class=\"token interpolation variable\">$key</span> is missing in the map.\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>关于 map 的 put 和 get 操作是如何与委托的 getValue 和 setValue 如何联系在一起的 以及map 的 <code>getValue(thisRef: Any?, property: KProperty&lt;*&gt;)</code>方法为什么用 inline 修饰了，这里涉及到Kotlin 1.4 对委托属性的一个优化，稍后再解析 lazy 原理时会详细解释。</p>\n<p>Map delegation 的一个实践，将推送消息封装并通知APP</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onNotificationReceivedInApp</span><span class=\"token punctuation\">(</span>\n    context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span>\n    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    summary<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    extraMap<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token keyword\">data</span> <span class=\"token operator\">=</span> extraMap<span class=\"token punctuation\">.</span><span class=\"token function\">withDefault</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">val</span> params <span class=\"token operator\">=</span> <span class=\"token function\">NotificationParams</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">data</span><span class=\"token punctuation\">)</span>\n    EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">NotificationParams</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> map<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> title<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> map\n    <span class=\"token keyword\">val</span> content<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> map\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"4-2-延迟属性-lazy-properties\"><a href=\"#4-2-延迟属性-lazy-properties\" class=\"headerlink\" title=\"4.2 延迟属性(lazy properties)\"></a>4.2 延迟属性(lazy properties)</h3><p>看一下lazy的简单使用</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> x<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>LazyThreadSafetyMode<span class=\"token punctuation\">.</span>SYNCHRONIZED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx——lazy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"xxx——<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>index<span class=\"token operator\">++</span><span class=\"token delimiter variable\">}</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> y<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>LazyThreadSafetyMode<span class=\"token punctuation\">.</span>PUBLICATION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyy——lazy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"yyy——<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>index<span class=\"token operator\">++</span><span class=\"token delimiter variable\">}</span></span>\"</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> z<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>LazyThreadSafetyMode<span class=\"token punctuation\">.</span>NONE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zzz——lazy\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token string\">\"zzz——<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>index<span class=\"token operator\">++</span><span class=\"token delimiter variable\">}</span></span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> fooLazy <span class=\"token operator\">=</span> <span class=\"token function\">FooLazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> thread <span class=\"token operator\">=</span> <span class=\"token function\">thread</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> fooLazy<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====\"</span> <span class=\"token operator\">+</span> fooLazy<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=========\"</span> <span class=\"token operator\">+</span> fooLazy<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//xxx——lazy 和 yyy——lazy 都只执行一次，x=0, y=1</span>\n<span class=\"token comment\" spellcheck=\"true\">//zzz——lazy 和 z 的值不能确定会执行几次</span></code></pre>\n<p>LazyThreadSafetyMode 有三种模式作用是指定 [Lazy] 实例如何在多个线程之间同步初始化。</p>\n<ul>\n<li>SYNCHRONIZED: 锁用于确保只有一个线程可以初始化[Lazy]实例。</li>\n<li>PUBLICATION: 并发访问未初始化的[Lazy]实例值时，可以多次调用Initializer函数，但是只有第一个返回的值将用作[Lazy]实例的值。</li>\n<li>NONE: 不使用锁来同步对 [Lazy] 实例值的访问；如果从多个线程访问该实例，可能会发生线程安全问题。除非保证 [Lazy] 实例永远不会从多个线程初始化，否则不应使用此模式。</li>\n</ul>\n<h4 id=\"lazy-原理解析\"><a href=\"#lazy-原理解析\" class=\"headerlink\" title=\"lazy 原理解析\"></a>lazy 原理解析</h4><p>受托对象是Lazy</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@NotNull</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Lazy x$delegate<span class=\"token punctuation\">;</span></code></pre>\n<p>受托对象在委托者构造方法中实例化</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token function\">FooLazy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x$delegate <span class=\"token operator\">=</span> LazyKt<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>LazyThreadSafetyMode<span class=\"token punctuation\">.</span>SYNCHRONIZED<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Function0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">Function0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// $FF: synthetic method</span>\n      <span class=\"token comment\" spellcheck=\"true\">// $FF: bridge method</span>\n      <span class=\"token keyword\">public</span> Object <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token annotation builtin\">@NotNull</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         String var1 <span class=\"token operator\">=</span> <span class=\"token string\">\"xxx——lazy\"</span><span class=\"token punctuation\">;</span>\n         boolean var2 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n         System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         StringBuilder var10000 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>new <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx——\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         FooLazy var10001 <span class=\"token operator\">=</span> FooLazy<span class=\"token punctuation\">.</span>this<span class=\"token punctuation\">;</span>\n         int var3<span class=\"token punctuation\">;</span>\n         var10001<span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>var3 <span class=\"token operator\">=</span> var10001<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> var10000<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>var3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>可以看到 <code>x$delegate</code>  是通过 LazyKt.lazy() 方法实例化的，两个参数分别是线程安全模式类型和一个接口回调</p>\n<p>当调用x 的 get 方法时 反回了受托者的 getValue 方法 并没有调用 lazy 的扩展方法：LazyKt.getValue(thisRef: Any?, property: KProperty&lt;*&gt;) </p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> String <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   Lazy var1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x$delegate<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>var1<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>再看一下 lazy 是如何定义委托方法 getValue 的</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> operator <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> value</code></pre>\n<p>这里有没有注意到 lazy 利用属性委托的方式是不同的</p>\n<ul>\n<li>没有自动生成属性数组  <code>KProperty[] $$delegatedProperties</code> </li>\n<li>getX 时最终返回时调用的也不是 <code>getValue(thisRef: Any?, property: KProperty&lt;*&gt;)</code></li>\n<li>lazy 的  <code>getValue(thisRef: Any?, property: KProperty&lt;*&gt;)</code> 方法是用 <strong>inline</strong> 修饰的 并且添加了<code>@kotlin.internal.InlineOnly</code> 注解，map 委托 也是这样的操作</li>\n</ul>\n<p>其实这里是Kotlin 1.4 做的优化，当某些委托属性不会使用 KProperty。对于他们来说，在 <code>$$delegatedProperties</code> 中生成一个KProperty对象是多余的。Kotlin 1.4 版本将优化此类情况。如果委托的属性运算符是内联的，并且没有使用 KProperty 参数，则不会生成相应的反射对象。如果委托属性中有没有采用 inline 修饰的 ， 最终生成的<code>$$delegatedProperties</code>  数组中也之会单独生成它自己的反射对象，详细说明可以看官方的这篇博客</p>\n<p><a href=\"https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/\" target=\"_blank\" rel=\"noopener\">What to Expect in Kotlin 1.4 and Beyond | Optimized delegated properties</a></p>\n<blockquote>\n<p>内联实际上是如何工作的？</p>\n<p>粗略地说，内联采用被内联的函数的字节码，并将其插入到调用处，因此内联函数声明不必在调用处可见。</p>\n<p><code>@kotlin.internal.InlineOnly</code> 注解的作用？</p>\n<p><code>InlineOnly</code> 意味着与此 Kotlin 函数对应的 Java 方法被标记为私有，因此 Java 代码无法访问它（这是调用内联函数而不实际内联它的唯一方法）。这个注释还没有得到很好的验证，官方目前只在内部使用，很有可能稍后将其公之于众。</p>\n</blockquote>\n<p>所以 lazy 和 map 的属性委托在 Kotlin 4.1 都是做了优化的，lazy 属性在调用 getter 时实际上是调用的的是 Lazy<t> 中 value 的 getter，map 属性在调用 getter/setter 时 实际上最终调用的也是 map 的 get/put 方法。</t></p>\n<p>看一下 lazy 函数签名</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> actual <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>mode<span class=\"token operator\">:</span> LazyThreadSafetyMode<span class=\"token punctuation\">,</span> initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LazyThreadSafetyMode<span class=\"token punctuation\">.</span>SYNCHRONIZED <span class=\"token operator\">-></span> <span class=\"token function\">SynchronizedLazyImpl</span><span class=\"token punctuation\">(</span>initializer<span class=\"token punctuation\">)</span>\n        LazyThreadSafetyMode<span class=\"token punctuation\">.</span>PUBLICATION <span class=\"token operator\">-></span> <span class=\"token function\">SafePublicationLazyImpl</span><span class=\"token punctuation\">(</span>initializer<span class=\"token punctuation\">)</span>\n        LazyThreadSafetyMode<span class=\"token punctuation\">.</span>NONE <span class=\"token operator\">-></span> <span class=\"token function\">UnsafeLazyImpl</span><span class=\"token punctuation\">(</span>initializer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"SynchronizedLazyImpl\"><a href=\"#SynchronizedLazyImpl\" class=\"headerlink\" title=\"SynchronizedLazyImpl\"></a>SynchronizedLazyImpl</h4><p>SynchronizedLazyImpl 采用 DCL 方式确保线程安全</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> SynchronizedLazyImpl<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">,</span> lock<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> initializer\n    <span class=\"token annotation builtin\">@Volatile</span> <span class=\"token comment\" spellcheck=\"true\">// 用内存可见性来检查是否在其他线程初始化过，同时也会禁止指令重排序防止_value拿到不完整的实例</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> UNINITIALIZED_VALUE\n    <span class=\"token comment\" spellcheck=\"true\">//实例使用自身进行同步</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> lock <span class=\"token operator\">=</span> lock <span class=\"token operator\">?:</span> <span class=\"token keyword\">this</span>\n    <span class=\"token comment\" spellcheck=\"true\">//Lazy 接口的 value 属性用于获取当前 Lazy 实例的延迟初始化值。一旦初始化后，它不得在此 Lazy 实例的剩余生命周期内更改。</span>\n    <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> T\n        <span class=\"token comment\" spellcheck=\"true\">// 重写 get 来保证懒加载，只在使用的时候才执行函数</span>\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//局部变量可以将性能提高25%以上</span>\n            <span class=\"token keyword\">val</span> _v1 <span class=\"token operator\">=</span> _value\n            <span class=\"token comment\" spellcheck=\"true\">//检查单例实例是否已初始化。如果它被初始化就返回实例。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_v1 <span class=\"token operator\">!==</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> _v1 <span class=\"token keyword\">as</span> T\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//到这里还没有初始化，但我们不能确定，因为可能有多个其他线程可能同时初始化了它。</span>\n            <span class=\"token comment\" spellcheck=\"true\">//所以为了以防万一，这里需要添加一把互斥锁来保证只有一个线程去实例化实例对象。</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。</span>\n                <span class=\"token keyword\">val</span> _v2 <span class=\"token operator\">=</span> _value\n                <span class=\"token comment\" spellcheck=\"true\">//如果它已经被其它线程初始化了，当前线程也能感知他的存在了，直接返回实例</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_v2 <span class=\"token operator\">!==</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">(</span>_v2 <span class=\"token keyword\">as</span> T<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//到这里该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例了。</span>\n                    <span class=\"token keyword\">val</span> typedValue <span class=\"token operator\">=</span> initializer<span class=\"token operator\">!!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//执行 Function 对象的 invoke 并将函数的返回值缓存起来</span>\n                    _value <span class=\"token operator\">=</span> typedValue <span class=\"token comment\" spellcheck=\"true\">//_value赋值通知其它线程别进来了，拿走用吧</span>\n                    initializer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\" spellcheck=\"true\">//initializer在当前类实例已经没用了</span>\n                    typedValue <span class=\"token comment\" spellcheck=\"true\">// 返回最终的结果给 value</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>看不惯这种DCL也可以恢复成传统方式看一下</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> T\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//局部变量将性能提高了 25% Joshua Bloch “Effective Java, Second Edition”，第 3 页。 283-284</span>\n        <span class=\"token keyword\">var</span> _v1 <span class=\"token operator\">=</span> _value\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_v1 <span class=\"token operator\">==</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">synchronized</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果它被初始化，当前线程也能感知他的存在了。</span>\n                _v1 <span class=\"token operator\">=</span> _value\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_v1 <span class=\"token operator\">==</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例并将其赋值给我们的单例引用。</span>\n                    _v1 <span class=\"token operator\">=</span> initializer<span class=\"token operator\">!!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    initializer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> _v1 <span class=\"token keyword\">as</span> T\n    <span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"SafePublicationLazyImpl\"><a href=\"#SafePublicationLazyImpl\" class=\"headerlink\" title=\"SafePublicationLazyImpl\"></a>SafePublicationLazyImpl</h4><p><strong>AtomicReferenceFieldUpdater</strong> ：原子更新器是基于反射的工具类，用来对某个类中，被volatile修饰的字段进行原子更新。</p>\n<p>通过调用AtomicReferenceFieldUpdater的静态方法<code>newUpdater</code>就能创建它的实例，该方法要接收三个参数：包含该字段所在的类、将被更新的对象的类型、将被更新的字段的名称</p>\n<p><code>compareAndSet</code> 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新返回 true 同时原子地将字段设置为给定的更新值。</p>\n<p><code>getAndSet</code>原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。</p>\n<p>原子更新器的使用存在比较苛刻的条件如下</p>\n<ul>\n<li>操作的字段不能是static类型。</li>\n<li>操作的字段不能是final类型的，因为final根本没法修改。</li>\n<li>字段必须是volatile修饰的，也就是数据本身是读一致的。</li>\n<li>属性必须对当前的Updater所在的区域是可见的，如果不是当前类内部进行原子更新器操作不能使用private，protected子类操作父类时修饰符必须是protect权限及以上，如果在同一个package下则必须是default权限及以上，也就是说无论何时都应该保证操作类与被操作类间的可见性。</li>\n</ul>\n<blockquote>\n<p>CAS，Compare and Swap即比较并交换，设计并发算法时常用到的一种技术，java.util.concurrent包全完建立在CAS之上，没有CAS也就没有此包，可见CAS的重要性。当前的处理器基本都支持CAS，只不过不同的厂家的实现不一样罢了。<strong>CAS有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做并返回false</strong>。</p>\n<p>Unsafe，JDK中的一个类，它提供了硬件级别的<strong>原子操作</strong>。</p>\n</blockquote>\n<p>compareAndSet 方法调用流程</p>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Unsafe U <span class=\"token operator\">=</span> sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span>Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>T obj<span class=\"token punctuation\">,</span> V expect<span class=\"token punctuation\">,</span> V update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">accessCheck</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">valueCheck</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> U<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span>Object var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> Object var4<span class=\"token punctuation\">,</span> Object var5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>看一个例子了解 <code>AtomicReferenceFieldUpdater</code> 的使用方式</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AtomicReferenceFieldUpdaterTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// T:持有可更新字段的对象的类型</span>\n    <span class=\"token comment\" spellcheck=\"true\">// V:字段的类型</span>\n    AtomicReferenceFieldUpdater<span class=\"token operator\">&lt;</span>Dog<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span> updater <span class=\"token operator\">=</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 包含该字段所在的类、将被更新的对象的类、将被更新的字段的名称</span>\n        AtomicReferenceFieldUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">newUpdater</span><span class=\"token punctuation\">(</span>Dog<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Dog dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新，则原子地将字段设置为给定的更新值。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 参数：</span>\n    <span class=\"token comment\" spellcheck=\"true\">// obj: 字段所在对象</span>\n    <span class=\"token comment\" spellcheck=\"true\">// expect - 期望值</span>\n    <span class=\"token comment\" spellcheck=\"true\">// update - 新值</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回：如果成功则为true</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dog1 默认值</span>\n    <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true 修改成功</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dog2 修改后的的值</span>\n    <span class=\"token keyword\">boolean</span> result2 <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// false 修改失败</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dog2 还是原来的值</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 参数：</span>\n    <span class=\"token comment\" spellcheck=\"true\">// obj – 更新字段的对象</span>\n    <span class=\"token comment\" spellcheck=\"true\">// newValue – 新值</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回：之前的的值</span>\n    String result3 <span class=\"token operator\">=</span> updater<span class=\"token punctuation\">.</span><span class=\"token function\">getAndSet</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dog4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dog2  原来的值</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dog<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dog4 修改后的值</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">volatile</span> String name <span class=\"token operator\">=</span> <span class=\"token string\">\"dog1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>SafePublicationLazyImpl 使用 AtomicReferenceFieldUpdater 来保证 _value 属性的原子操作。支持同时多个线程调用，并且可以在全部或部分线程上同时进行初始化。如果某个值已由另一个线程初始化，则将返回该值而不执行初始化。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> SafePublicationLazyImpl<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation builtin\">@Volatile</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> initializer\n    <span class=\"token annotation builtin\">@Volatile</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> UNINITIALIZED_VALUE\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> <span class=\"token keyword\">final</span><span class=\"token operator\">:</span> Any <span class=\"token operator\">=</span> UNINITIALIZED_VALUE\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> T\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> value <span class=\"token operator\">=</span> _value\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> value <span class=\"token keyword\">as</span> T\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">val</span> initializerValue <span class=\"token operator\">=</span> initializer\n            <span class=\"token comment\" spellcheck=\"true\">//如果在这里看到初始值已经为 null，则表示该值已被另一个线程设置过了，直接返回 _value ，否则就初始化</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initializerValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">val</span> newValue <span class=\"token operator\">=</span> <span class=\"token function\">initializerValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//执行 Function 对象的 invoke 并将函数返回值原子化赋值给 _value</span>\n                <span class=\"token comment\" spellcheck=\"true\">//如果_value的值是UNINITIALIZED_VALUE说明还没有线程初始化它，此时可以将newValue设置给_value</span>\n                  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valueUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    initializer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n                    <span class=\"token keyword\">return</span> newValue <span class=\"token comment\" spellcheck=\"true\">//只有唯一的线程会从这里返回，其它都走下面的返回了</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token comment\" spellcheck=\"true\">//如果_value的值不是UNINITIALIZED_VALUE，说明其它线程已经初始化完了，当前线程直接返回_value就行了</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> _value <span class=\"token keyword\">as</span> T\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">writeReplace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Any <span class=\"token operator\">=</span> <span class=\"token function\">InitializedLazyImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">//初始化一个原子更新器：保证原子操作的字段是 _value</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> valueUpdater <span class=\"token operator\">=</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span>AtomicReferenceFieldUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">newUpdater</span><span class=\"token punctuation\">(</span>\n            SafePublicationLazyImpl<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span>\n            Any<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"_value\"</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"UnsafeLazyImpl\"><a href=\"#UnsafeLazyImpl\" class=\"headerlink\" title=\"UnsafeLazyImpl\"></a>UnsafeLazyImpl</h4><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> UnsafeLazyImpl<span class=\"token operator\">&lt;</span><span class=\"token keyword\">out</span> T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Serializable <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> initializer<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> initializer\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> _value<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> UNINITIALIZED_VALUE\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> T\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">//普通的懒加载，只初始化一次，但是在多线程环境下不能保证只执行一次</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_value <span class=\"token operator\">===</span> UNINITIALIZED_VALUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                _value <span class=\"token operator\">=</span> initializer<span class=\"token operator\">!!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//多线程并发情况下可能出现空指针异常</span>\n                initializer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> _value <span class=\"token keyword\">as</span> T\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">writeReplace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Any <span class=\"token operator\">=</span> <span class=\"token function\">InitializedLazyImpl</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"4-3-NotNullVar\"><a href=\"#4-3-NotNullVar\" class=\"headerlink\" title=\"4.3 NotNullVar\"></a>4.3 NotNullVar</h3><p>notNull 可以返回一个经过非空校验的属性值但是该属性值并没有初始化需要人为稍后setValue<br>在分配初始值之前尝试读取属性会导致异常，这也是返回非空属性的原理所在</p>\n<blockquote>\n<p>非空属性应用场景分析<br>通常，声明为非空类型的属性必须在构造函数中初始化。然而，这通常并不方便。 例如，可以通过依赖注入或在单元测试的 setup 方法中初始化属性。在这种情况下，您不能在构造函数中提供非 null 初始值设定项，但您仍然希望在引用类体内的属性时避免空检查。</p>\n<p>notNull VS lateinit<br>lateinit 不支持原始类型、只能用在可变属性var<br>notNull 会为每个属性创建委托类 NotNullVar</p>\n</blockquote>\n<p>notNull  的使用与原理</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token keyword\">var</span> name2<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> age2<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// notNull 会为每个属性创建委托类 NotNullVar</span>\n<span class=\"token comment\" spellcheck=\"true\">//    lateinit var age3: Int //lateinit 不支持原始类型</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> name3<span class=\"token operator\">:</span> String <span class=\"token comment\" spellcheck=\"true\">//lateinit 只能用在 var</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> Any<span class=\"token operator\">></span> <span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">NotNullVar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> NotNullVar<span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> Any<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> value<span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value <span class=\"token operator\">?:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Property <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>property<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span> should be initialized before get.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"4-4-ObservableProperty\"><a href=\"#4-4-ObservableProperty\" class=\"headerlink\" title=\"4.4 ObservableProperty\"></a>4.4 ObservableProperty</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> ObservableProperty<span class=\"token operator\">&lt;</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initialValue<span class=\"token operator\">:</span> V<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> initialValue\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">beforeChange</span><span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> V<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> V<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterChange</span><span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> V<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> V<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Unit <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> V<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value\n    <span class=\"token comment\" spellcheck=\"true\">//beforeChange: 在尝试更改属性值之前调用的回调。 调用此回调时，该属性的值尚未更改。 如果回调返回true ，则属性的值被设置为新值，如果回调返回false ，则丢弃新值，属性保持其旧值</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">beforeChange</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n    <span class=\"token comment\" spellcheck=\"true\">//afterChange: 进行属性更改后调用的回调。 调用此回调时，该属性的值已更改。</span>\n        <span class=\"token function\">afterChange</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"observable-变量值更新后的监听\"><a href=\"#observable-变量值更新后的监听\" class=\"headerlink\" title=\"observable 变量值更新后的监听\"></a>observable 变量值更新后的监听</h4><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">crossinline</span> onChange<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ObservableProperty<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterChange</span><span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"vetoable变量值更新前的拦截\"><a href=\"#vetoable变量值更新前的拦截\" class=\"headerlink\" title=\"vetoable变量值更新前的拦截\"></a>vetoable变量值更新前的拦截</h4><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">vetoable</span><span class=\"token punctuation\">(</span>initialValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">crossinline</span> onChange<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ObservableProperty<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initialValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">beforeChange</span><span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token operator\">=</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>测试代码</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> items<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token function\">mutableListOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> property<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>property<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span> : <span class=\"token interpolation variable\">$oldValue</span> -> <span class=\"token interpolation variable\">$newValue</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> nameAfter<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> prop<span class=\"token punctuation\">,</span> old<span class=\"token punctuation\">,</span> new <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$old</span> -> <span class=\"token interpolation variable\">$new</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> nameBefore<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">vetoable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> prop<span class=\"token punctuation\">,</span> old<span class=\"token punctuation\">,</span> new <span class=\"token operator\">-></span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$old</span> -> <span class=\"token interpolation variable\">$new</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token boolean\">true</span> <span class=\"token comment\" spellcheck=\"true\">//返回true 表示 setValue 成功，否则不能覆盖原值</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>property<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span> : <span class=\"token interpolation variable\">$oldValue</span> -> <span class=\"token interpolation variable\">$newValue</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">::</span>onChange<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//运行结果</span>\nno <span class=\"token operator\">-></span> first\nfirst <span class=\"token operator\">-></span> second\nno <span class=\"token operator\">-></span> <span class=\"token number\">11111</span>\n<span class=\"token number\">11111</span> <span class=\"token operator\">-></span> <span class=\"token number\">2222</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token operator\">-></span> <span class=\"token number\">33</span>\nage <span class=\"token operator\">:</span> <span class=\"token number\">33</span> <span class=\"token operator\">-></span> <span class=\"token number\">55</span>\nitems <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span>new <span class=\"token keyword\">val</span><span class=\"token punctuation\">]</span>\nitems <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>new <span class=\"token keyword\">val</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span>new <span class=\"token keyword\">val</span><span class=\"token punctuation\">,</span> new <span class=\"token number\">111</span><span class=\"token punctuation\">]</span></code></pre>\n<h2 id=\"5-属性委托在-Android-上的应用\"><a href=\"#5-属性委托在-Android-上的应用\" class=\"headerlink\" title=\"5. 属性委托在 Android 上的应用\"></a>5. 属性委托在 Android 上的应用</h2><h3 id=\"5-1-ViewBinding\"><a href=\"#5-1-ViewBinding\" class=\"headerlink\" title=\"5.1 ViewBinding\"></a>5.1 ViewBinding</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//1. 借助 lazy 属性委托  + 反射 VB 的 inflate 方法</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> ActivityMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//2. 借助 lazy 属性委托  + 传递 inflate 方法引用</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> binding<span class=\"token operator\">:</span> ActivityMainBinding <span class=\"token keyword\">by</span> <span class=\"token function\">vb</span><span class=\"token punctuation\">(</span>ActivityMainBinding<span class=\"token operator\">::</span>inflate<span class=\"token punctuation\">)</span></code></pre>\n<p><strong><a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\">VBHelper</a></strong></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@MainThread</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> T <span class=\"token operator\">:</span> ViewBinding<span class=\"token operator\">></span> ComponentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">vb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">noinline</span> inflateMethodRef<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LayoutInflater<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">ActivityVBLazy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> T<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> inflateMethodRef<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> ActivityVBLazy<span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewBinding<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> activity<span class=\"token operator\">:</span> ComponentActivity<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> kClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> inflateMethodRef<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LayoutInflater<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> cachedBinding<span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> T\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> viewBinding <span class=\"token operator\">=</span> cachedBinding\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewBinding <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                viewBinding <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inflateMethodRef <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//借助 lazy 属性委托 + 传递 inflate 方法引用</span>\n                    inflateMethodRef<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span>layoutInflater<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//借助 lazy 属性委托  + 反射绑定类的 inflate 方法</span>\n                    <span class=\"token annotation builtin\">@Suppress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UNCHECKED_CAST\"</span><span class=\"token punctuation\">)</span>\n                    kClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>METHOD_INFLATE<span class=\"token punctuation\">,</span> LayoutInflater<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> activity<span class=\"token punctuation\">.</span>layoutInflater<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> T\n                <span class=\"token punctuation\">}</span>\n                activity<span class=\"token punctuation\">.</span><span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>viewBinding<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">)</span>\n                cachedBinding <span class=\"token operator\">=</span> viewBinding\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> viewBinding\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> cachedBinding <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-2-ViewModel\"><a href=\"#5-2-ViewModel\" class=\"headerlink\" title=\"5.2 ViewModel\"></a>5.2 ViewModel</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//借助 lazy 属性委托  + ViewModelProvider</span>\n<span class=\"token keyword\">val</span> model<span class=\"token operator\">:</span> MyViewModel <span class=\"token keyword\">by</span> <span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><strong><a href=\"https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/activity/ktx/src/main/java/androidx/activity/ActivityViewModelLazy.kt\" target=\"_blank\" rel=\"noopener\">ActivityViewModelLazy</a></strong></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@MainThread</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> VM <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">></span> ComponentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span>\n    factory<span class=\"token operator\">:</span> ViewModelProvider<span class=\"token punctuation\">.</span>Factory<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>VM<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">ActivityViewModelLazy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> VM<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * An implementation of [Lazy] used by [ComponentActivity.viewModels] tied to the given [activity],\n * [viewModelClass], [factory]\n */</span>\n<span class=\"token keyword\">class</span> ActivityViewModelLazy<span class=\"token operator\">&lt;</span>VM <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> activity<span class=\"token operator\">:</span> ComponentActivity<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> viewModelClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>VM<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> factory<span class=\"token operator\">:</span> ViewModelProvider<span class=\"token punctuation\">.</span>Factory<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>VM<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> cached<span class=\"token operator\">:</span> VM<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> VM\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> viewModel <span class=\"token operator\">=</span> cached\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewModel <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">val</span> application <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span>application\n                    <span class=\"token operator\">?:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"ViewModel can be accessed \"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"only when Activity is attached\"</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> resolvedFactory <span class=\"token operator\">=</span> factory <span class=\"token operator\">?:</span> AndroidViewModelFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">)</span>\n                viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> resolvedFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>viewModelClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n                cached <span class=\"token operator\">=</span> viewModel\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> viewModel\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> cached <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong><a href=\"https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/fragment/ktx/src/main/java/androidx/fragment/app/FragmentViewModelLazy.kt\" target=\"_blank\" rel=\"noopener\">FragmentViewModelLazy</a></strong></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@MainThread</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">reified</span> VM <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">></span> Fragment<span class=\"token punctuation\">.</span><span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span>factory<span class=\"token operator\">:</span> Factory<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>VM<span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">FragmentViewModelLazy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> VM<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> factory<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * An implementation of [Lazy] used by [Fragment.viewModels] tied to the given [fragment],\n * [viewModelClass], [factory]\n */</span>\n<span class=\"token keyword\">class</span> FragmentViewModelLazy<span class=\"token operator\">&lt;</span>VM <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> fragment<span class=\"token operator\">:</span> Fragment<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> viewModelClass<span class=\"token operator\">:</span> KClass<span class=\"token operator\">&lt;</span>VM<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> factory<span class=\"token operator\">:</span> Factory<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Lazy<span class=\"token operator\">&lt;</span>VM<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> cached<span class=\"token operator\">:</span> VM<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> value<span class=\"token operator\">:</span> VM\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> viewModel <span class=\"token operator\">=</span> cached\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>viewModel <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">val</span> application <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">.</span>activity<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>application\n                    <span class=\"token operator\">?:</span> <span class=\"token keyword\">throw</span> <span class=\"token function\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"ViewModel can be accessed \"</span> <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\"only when Fragment is attached\"</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> resolvedFactory <span class=\"token operator\">=</span> factory <span class=\"token operator\">?:</span> AndroidViewModelFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">)</span>\n                viewModel <span class=\"token operator\">=</span> <span class=\"token function\">ViewModelProvider</span><span class=\"token punctuation\">(</span>fragment<span class=\"token punctuation\">,</span> resolvedFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>viewModelClass<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n                cached <span class=\"token operator\">=</span> viewModel\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> viewModel\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> cached <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-3-SP-delegates\"><a href=\"#5-3-SP-delegates\" class=\"headerlink\" title=\"5.3 SP delegates\"></a>5.3 SP delegates</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> SharedPreferences<span class=\"token punctuation\">.</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span>def<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">delegate</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> SharedPreferences<span class=\"token operator\">::</span>getInt<span class=\"token punctuation\">,</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor<span class=\"token operator\">::</span>putInt<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> SharedPreferences<span class=\"token punctuation\">.</span><span class=\"token function\">long</span><span class=\"token punctuation\">(</span>def<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">delegate</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> SharedPreferences<span class=\"token operator\">::</span>getLong<span class=\"token punctuation\">,</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor<span class=\"token operator\">::</span>putLong<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> SharedPreferences<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>def<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">delegate</span><span class=\"token punctuation\">(</span>def<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> SharedPreferences<span class=\"token operator\">::</span>getString<span class=\"token punctuation\">,</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor<span class=\"token operator\">::</span>putString<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> SharedPreferences<span class=\"token punctuation\">.</span><span class=\"token function\">delegate</span><span class=\"token punctuation\">(</span>\n    defaultValue<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">crossinline</span> getter<span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> T<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">crossinline</span> setter<span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">.</span>Editor<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> SharedPreferences<span class=\"token punctuation\">.</span>Editor\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> ReadWriteProperty<span class=\"token operator\">&lt;</span>Any<span class=\"token punctuation\">,</span> T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        <span class=\"token function\">getter</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">?:</span> property<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">)</span>\n\n    <span class=\"token annotation builtin\">@SuppressLint</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CommitPrefEdits\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>thisRef<span class=\"token operator\">:</span> Any<span class=\"token punctuation\">,</span> property<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n        <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setter</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">?:</span> property<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>测试代码</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">TokenHolder</span><span class=\"token punctuation\">(</span>prefs<span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> token<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> prefs<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token keyword\">var</span> count <span class=\"token keyword\">by</span> prefs<span class=\"token punctuation\">.</span><span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">saveToken</span><span class=\"token punctuation\">(</span>newToken<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        token <span class=\"token operator\">=</span> newToken\n        count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"TokenHolder(token='<span class=\"token interpolation variable\">$token</span>', count=<span class=\"token interpolation variable\">$count</span>)\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">UserHolder</span><span class=\"token punctuation\">(</span>prefs<span class=\"token operator\">:</span> SharedPreferences<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> prefs<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token keyword\">var</span> pwd<span class=\"token operator\">:</span> String <span class=\"token keyword\">by</span> prefs<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">saveUserAccount</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> pwd<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pwd <span class=\"token operator\">=</span> pwd\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"UserHolder(name='<span class=\"token interpolation variable\">$name</span>', pwd='<span class=\"token interpolation variable\">$pwd</span>')\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> prefs <span class=\"token operator\">=</span> <span class=\"token function\">getSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sp_app_jay\"</span><span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">.</span>MODE_PRIVATE<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//缓存Token的场景</span>\n<span class=\"token keyword\">val</span> tokenHolder <span class=\"token operator\">=</span> <span class=\"token function\">TokenHolder</span><span class=\"token punctuation\">(</span>prefs<span class=\"token punctuation\">)</span>\nLog<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"tokenHolder:<span class=\"token interpolation variable\">$tokenHolder</span>\"</span><span class=\"token punctuation\">)</span>\ntokenHolder<span class=\"token punctuation\">.</span><span class=\"token function\">saveToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token_one\"</span><span class=\"token punctuation\">)</span>\ntokenHolder<span class=\"token punctuation\">.</span><span class=\"token function\">saveToken</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token_second\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//缓存登录信息的场景</span>\n<span class=\"token keyword\">val</span> userHolder <span class=\"token operator\">=</span> <span class=\"token function\">UserHolder</span><span class=\"token punctuation\">(</span>prefs<span class=\"token punctuation\">)</span>\nLog<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"userHolder:<span class=\"token interpolation variable\">$userHolder</span>\"</span><span class=\"token punctuation\">)</span>\nuserHolder<span class=\"token punctuation\">.</span><span class=\"token function\">saveUserAccount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>本篇文章围绕 Kotlin 的内置委托(Delegation﻿) 特性并结合代码实践分别阐述了 Kotlin 委托的原理(包括属性委托和接口委托)，尤其是属性委托从属性到委托详细阐述了其实现原理，</p>\n<p>然后是实践部分，首先是Kotlin 标准库中利用属性委托为我们封装了很多简洁的API，比如：map、lazy、notNull、Observable 等；然后是Kotlin 属性委托在 Android 上的一些实践，包括 VB、VM、SP 等利用属性委托基本上都能完成一行代码实现set/get。Kotlin 委托显然在消除样板代码方面能发挥出强大的作用。但是这每个属性的背后却对应这一个委托类，所以在大量使用时也需要兼顾性能。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h2><p><a href=\"https://www.kotlincn.net/docs/reference/delegation.html\" target=\"_blank\" rel=\"noopener\">官方文档 | 委托</a></p>\n<p><a href=\"https://www.kotlincn.net/docs/reference/delegated-properties.html\" target=\"_blank\" rel=\"noopener\">官方文档 | 属性委托</a></p>\n<p><a href=\"https://coding.imooc.com/class/398.html\" target=\"_blank\" rel=\"noopener\">慕课网 | 新版 Kotlin 从入门到精通</a></p>\n<p><a href=\"https://juejin.cn/post/6844904038589267982\" target=\"_blank\" rel=\"noopener\">一文彻底搞懂Kotlin中的委托</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Delegation_pattern\" target=\"_blank\" rel=\"noopener\">Wikipedia | Delegation pattern</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Proxy_pattern\" target=\"_blank\" rel=\"noopener\">Wikipedia | Proxy pattern</a></p>\n<p><a href=\"https://proandroiddev.com/kotlin-delegates-in-android-1ab0a715762d\" target=\"_blank\" rel=\"noopener\">Medium | Kotlin Delegates in Android</a></p>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Kotlin-委托-Delegation-详解\"><a href=\"#Kotlin-委托-Delegation-详解\" class=\"headerlink\" title=\"Kotlin | 委托(Delegation﻿)详解\"></a>Kotlin | 委托(Delegation﻿)详解</h1><p>本文要点概述</p>\n<ul>\n<li><p>辨析委托模式与代理模式 </p>\n</li>\n<li><p>接口委托(Delegated interface)</p>\n</li>\n<li><p>属性委托(Delegated properties)</p>\n</li>\n<li><p>映射委托(Map delegation)</p>\n</li>\n<li><p>延迟属性(lazy properties)</p>\n</li>\n<li><p>非空属性(Delegates.notNull)</p>\n</li>\n<li><p>变量值更新后的监听(Delegates.observable)</p>\n</li>\n<li><p>变量值更新前的拦截(Delegates.vetoable)</p>\n</li>\n<li><p>ViewBinding+属性委托</p>\n</li>\n<li><p>ViewModel+属性委托</p>\n</li>\n<li><p>SP +属性委托</p>\n</li>\n</ul>\n<h2 id=\"1-委托模式-VS-代理模式\"><a href=\"#1-委托模式-VS-代理模式\" class=\"headerlink\" title=\"1.委托模式 VS 代理模式\"></a>1.委托模式 VS 代理模式</h2><p>委托模式和代理模式都属于结构型设计模式，结构型模式主要总结了一些类或对象组合在一起的经典结构，这些经典的结构可以解决特定应用场景的问题。</p>\n<h3 id=\"1-1-代理模式（Proxy-Pattern）\"><a href=\"#1-1-代理模式（Proxy-Pattern）\" class=\"headerlink\" title=\"1.1 代理模式（Proxy Pattern）\"></a>1.1 代理模式（Proxy Pattern）</h3><p>在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大的不同。在代理类中还可以提供额外的逻辑， 例如当真实对象上的操作是资源密集型任务时可以在代理中添加缓存操作，或者在调用真实对象操作之前做一些权限校验或检查行为等。一般情况下，我们让代理类和原始类实现同样的接口或者让代理类继承原始类来实现代理模式。</p>\n<h3 id=\"1-2-委托模式（Delegation-pattern）\"><a href=\"#1-2-委托模式（Delegation-pattern）\" class=\"headerlink\" title=\"1.2 委托模式（Delegation pattern）\"></a>1.2 委托模式（Delegation pattern）</h3><p>委托可以理解为是代理的一种变体，是一种使组合像继承一样实现代码复用的另一种设计模式。主要目的是组合委托调用和代码复用而不考虑控制访问等逻辑。在委托中处理请求涉及两个对象，委托方将操作交给受托方实现，类似于子类将请求推迟到父类。一般情况下，委托也可以通过接口约束或受托方继承委托方实现委托模式。</p>\n<h3 id=\"1-3-法律层面区分代理与委托\"><a href=\"#1-3-法律层面区分代理与委托\" class=\"headerlink\" title=\"1.3 法律层面区分代理与委托\"></a>1.3 法律层面区分代理与委托</h3><p>为了加深代理和委托的理解，我们看一下<strong>法律层面的代理与委托的不同之处</strong></p>\n<ul>\n<li><p>民事主体活动的名义不同。 代理是指被代理人在代理权限范围内，以被代理人的名义同第三人独立为民事法律行为，由此产生的法律效果直接归属于被代理人的一种法律制度，即代理人必须以被代理人的名义为代理行为。 委托则是委托人委托受托人处理一定事务，受托人接受委托的协议，受托人可以以委托人的名义活动，也可以以自己的名义活动。</p>\n</li>\n<li><p>适用范围不尽相同：代理只是代理人在代理权范围内以被代理人的名义同第三人的民事法律行为；而委托中的受托人办理委托人委托事务的行为可以是民事法律行为，还可以是有经济意义的行为（如整理账簿）和单纯的事实行为（如抄写文件）。</p>\n</li>\n<li><p>效力范围不同：代理涉及三方当事人，即被代理人、代理人、第三人；委托则属于双方当事人之间的关系，即委托人、受托人。</p>\n</li>\n</ul>\n<h3 id=\"1-4-代码实现委托和代理\"><a href=\"#1-4-代码实现委托和代理\" class=\"headerlink\" title=\"1.4 代码实现委托和代理\"></a>1.4 代码实现委托和代理</h3><p>代理模式和委托模式在代码实现上并没有太多差别，他们的差异还是在使用场景上，为了能更好的理解代理模式和委托模式，我们再来看看如何通过代码来实现</p>\n<p>代码参考自：<strong><a href=\"https://github.com/iluwatar/java-design-patterns\" target=\"_blank\" rel=\"noopener\"> java-design-patterns</a></strong></p>\n<p><a href=\"https://github.com/iluwatar/java-design-patterns/tree/master/delegation\" target=\"_blank\" rel=\"noopener\">delegation</a> ：打印机控制器将打印任务委托给不同的打印机</p>\n<pre><code class=\"java\">// 委托二人组：打印机控制器、打印机（惠普打印机、佳能打印机、爱普生打印机）\n// 电脑上有三种打印机设备的驱动，分别将打印任务委托给对应的打印机执行具体的打印操作\nPrinterController hpPrinterController = new PrinterController(new HpPrinter());\nPrinterController canonPrinterController = new PrinterController(new CanonPrinter());\nPrinterController epsonPrinterController = new PrinterController(new EpsonPrinter());\nhpPrinterController.print(MESSAGE_TO_PRINT);\ncanonPrinterController.print(MESSAGE_TO_PRINT);\nepsonPrinterController.print(MESSAGE_TO_PRINT);\n\n//打印机控制器\npublic class PrinterController implements Printer {\n  private final Printer printer;\n  public PrinterController(Printer printer) {\n    this.printer = printer;\n  }\n  /** \n   * 此方法是从 {@link Printer} 实现的，在提供实现时它会调用通过构造函数传递的委托方的 print 方法。 \n   * 这意味着委托关系一旦确定后，调用者不关心实现类，只关心拥有的打印机控制器就行。\n   */\n  @Override\n  public void print(String message) {\n    printer.print(message);\n  }\n}\n\n//三个打印机也实现了 Printer 接口 并提供了具体的打印功能，代码可以参考上面的链接</code></pre>\n<p><a href=\"https://github.com/iluwatar/java-design-patterns/tree/master/proxy\" target=\"_blank\" rel=\"noopener\">proxy</a> ：巫师要进入塔内修炼法术，象牙塔只能通过代理访问并确保只有前三个巫师可以进入。</p>\n<pre><code class=\"java\">// 代理三人组：巫师塔代理、象牙塔、巫师\nWizardTowerProxy proxy = new WizardTowerProxy(new IvoryTower());\nproxy.enter(new Wizard(&quot;Red wizard&quot;));\nproxy.enter(new Wizard(&quot;White wizard&quot;));\nproxy.enter(new Wizard(&quot;Black wizard&quot;));\nproxy.enter(new Wizard(&quot;Green wizard&quot;));\nproxy.enter(new Wizard(&quot;Brown wizard&quot;));\n\n//代理方：塔代理\npublic class WizardTowerProxy implements WizardTower {\n  private static final int NUM_WIZARDS_ALLOWED = 3;\n  private final WizardTower tower;\n  private int numWizards;\n  //被代理方通过构造方法传入\n  public WizardTowerProxy(WizardTower tower) {\n    this.tower = tower;\n  }\n  //对象牙塔的访问的代理。第三方通过 enter 方法进入\n  @Override\n  public void enter(Wizard wizard) {\n    //超过三个就不让进了\n    if (numWizards &lt; NUM_WIZARDS_ALLOWED) {\n      //代理方授权执行操作\n      tower.enter(wizard);\n      numWizards++;\n    } else {\n      System.out.println(&quot;{} is not allowed to enter!&quot; + wizard);\n    }\n  }\n}\n//被代理方：塔\npublic class IvoryTower implements WizardTower {\n  @Override\n  public void enter(Wizard wizard) {\n    System.out.println(&quot;{} enters the tower.&quot; + wizard);\n  }\n}\n//第三方：巫师\npublic class Wizard {\n  private String name;\n  public Wizard(String wizard) { this.name = wizard; }\n  @Override\n  public String toString() { return name; }\n}\n</code></pre>\n<h2 id=\"2-接口委托-Delegated-interface\"><a href=\"#2-接口委托-Delegated-interface\" class=\"headerlink\" title=\"2. 接口委托(Delegated interface)\"></a>2. 接口委托(Delegated interface)</h2><p>我们看看Kotlin 是怎么内置接口委托的，先看一下实现的委托模式的传统方式</p>\n<pre><code class=\"kotlin\">interface Api {\n    fun a()\n    fun b()\n    fun c()\n}\n//委托方\nclass ApiImpl : Api {\n    override fun a() { println(&quot;ApiImpl-a&quot;) }\n    override fun b() { println(&quot;ApiImpl-b&quot;) }\n    override fun c() { println(&quot;ApiImpl-c&quot;) }\n}\n//受托方\nclass ApiWrapper(private val api: Api) : Api {\n    override fun a() {\n        println(&quot;ApiWrapper-a&quot;)\n        api.a()\n    }\n    override fun b() {\n        println(&quot;ApiWrapper-b&quot;)\n        api.b()\n    }\n    override fun c() {\n        println(&quot;ApiWrapper-c&quot;)\n        api.b()\n    }\n}</code></pre>\n<p>再看看Kotlin 通过 <code>by</code> 关键字实现的简便方式</p>\n<pre><code class=\"kotlin\">//变量 api代替 ApiWrapperWithDelegate 实现了 Api 接口，ApiWrapperWithDelegate 就可以灵活的复写需要的函数\nclass ApiWrapperWithDelegate(private val api: Api) : Api by api {\n    override fun a() {\n        println(&quot;ApiWrapperWithDelegate-a&quot;)\n    }\n}\n\n\n//反编译 Java 后的代码和 ApiWrapper 是一样的\npublic final class ApiWrapperWithDelegate implements Api {\n   private final Api api;\n   public void a() {\n      String var1 = &quot;ApiWrapperWithDelegate-a&quot;;\n      boolean var2 = false;\n      System.out.println(var1);\n   }\n   public ApiWrapperWithDelegate(@NotNull Api api) {\n      Intrinsics.checkNotNullParameter(api, &quot;api&quot;);\n      super();\n      this.api = api;\n   }\n   public void b() {\n      this.api.b();\n   }\n   public void c() {\n      this.api.c();\n   }\n}</code></pre>\n<p>可以看到 Kotlin 内置的接口委托是编译器帮我们生成了相关代码</p>\n<p>再看一个实践的例子：利用接口代理实现一个集成了 map 和 list 的超级集合</p>\n<pre><code class=\"kotlin\">// 对象 list 和 map 代理 SupperArrayWithDelegate 实现 MutableList，MutableMap\nclass SupperArrayWithDelegate&lt;E&gt;(\n    private val list: MutableList&lt;E?&gt; = mutableListOf(),\n    private val map: MutableMap&lt;String, E&gt; = mutableMapOf()\n) : MutableList&lt;E?&gt; by list, MutableMap&lt;String, E&gt; by map {\n    // 两个接口中都有，编译器不知道执行哪个，所以这些方法必须得重写\n    override fun clear() {\n        list.clear()\n        map.clear()\n    }\n    override fun isEmpty(): Boolean {\n        return list.isEmpty() &amp;&amp; map.isEmpty()\n    }\n    override val size: Int get() = list.size + map.size\n    override fun set(index: Int, element: E?): E? {\n        if (index &lt;= list.size) {\n            repeat(index - list.size - 1) {\n                list.add(null)\n            }\n        }\n        return list.set(index, element)\n    }\n    override fun toString(): String {\n        return &quot;list:$list,map:$map&quot;\n    }\n}</code></pre>\n<h2 id=\"3-属性委托-Delegated-properties\"><a href=\"#3-属性委托-Delegated-properties\" class=\"headerlink\" title=\"3. 属性委托(Delegated properties)\"></a>3. 属性委托(Delegated properties)</h2><h3 id=\"3-1-属性-property\"><a href=\"#3-1-属性-property\" class=\"headerlink\" title=\"3.1 属性(property)\"></a>3.1 属性(property)</h3><p>我们先通过对比 Java field 和 kotlin property  来探究一下 kt 中 property 的内部实现方式</p>\n<pre><code class=\"java\">//PersonKotlin 尽量写的像Java好对比 Kotlin 属性背后做的事情\nclass PersonKotlin {\n    constructor(age: Int, name: String) {\n        this.age = age\n        this.name = name\n    }\n    private var age: Int? = null\n        //Redundant getter 属性的 get/set 方法由编译器自动生成\n        get() {\n            return field //这里的 field = backing field\n        }\n        set(value) {\n            field = value\n        }\n\n    private var name: String? = null\n        get() {\n            return field\n        }\n        set(value) {\n            field = value\n        }\n}\n\n//反编译 Java 后的代码\npublic final class PersonKotlin {\n   private Integer age; //field\n   private String name; //field\n   private final Integer getAge() {\n      return this.age;\n   }\n   private final void setAge(Integer value) {\n      this.age = value;\n   }\n   private final String getName() {\n      return this.name;\n   }\n   private final void setName(String value) {\n      this.name = value;\n   }\n   public PersonKotlin(int age, @NotNull String name) {\n      Intrinsics.checkNotNullParameter(name, &quot;name&quot;);\n      super();\n      this.setAge(age);\n      this.setName(name);\n   }\n}</code></pre>\n<h4 id=\"property-kotlin-field-java-getField-setField\"><a href=\"#property-kotlin-field-java-getField-setField\" class=\"headerlink\" title=\"property(kotlin)=field(java)+getField()+setField()\"></a>property(kotlin)=field(java)+getField()+setField()</h4><pre><code class=\"java\">// age 属性背后包含了三个角色，backing field、get、set\nprivate var age: Int? = null\n//等价于下面的代码\n@Nullable\nprivate Integer age;\n@Nullable\npublic final Integer getAge() {\n   return this.age;\n}\npublic final void setAge(@Nullable Integer var1) {\n   this.age = var1;\n}</code></pre>\n<h4 id=\"属性引用-Property-Reference\"><a href=\"#属性引用-Property-Reference\" class=\"headerlink\" title=\"属性引用(Property Reference)\"></a>属性引用(Property Reference)</h4><p>通过属性引用我们可以更清楚的了解 property 背后的 get 和 set 以及代理信息等</p>\n<pre><code class=\"kotlin\">val ageRef: KMutableProperty1&lt;PersonKotlin, Int?&gt; = PersonKotlin::age\n//PersonKotlin::age 类名获取的属性引用不包含 receiver，操作时需要传递一个\nval personKotlin = PersonKotlin(18, &quot;Jay&quot;)\nageRef.set(personKotlin, 22)\nprintln(ageRef.get(personKotlin))\n//22\n//public actual fun set(receiver: T, value: V)\n//public actual fun get(receiver: T): V\n//receiver - 用于获取属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器\n\n//测试自定义属性委托后获取属性的委托信息\nval nameRef: KProperty0&lt;String?&gt; = personKotlin::name\nprintln(&quot;personKotlin: &quot; + personKotlin.hashCode())\nprintln(&quot;nameRef: &quot; + nameRef.hashCode())\nprintln(&quot;personKotlin.name: &quot; + personKotlin.name.hashCode())\n\n//取： is KMutableProperty -&gt; javaField?.isAccessible ?: true &amp;&amp; javaGetter?.isAccessible ?: true &amp;&amp;javaSetter?.isAccessible ?: true\n//存： is KMutableProperty -&gt; { javaField?.isAccessible = value javaGetter?.isAccessible = value javaSetter?.isAccessible = value }\n//设置是否访问，只有设置为 true 才可以拿到 属性引用中的委托信息（如果被委托了）这个属性需要单独引入 kotlin-reflect 库\nnameRef.isAccessible = true\n//如果这是一个委托属性，则返回委托的值，如果此属性未委托，则返回null\nval nameDelegate = nameRef.getDelegate()\nprintln(&quot;nameDelegate： $nameDelegate&quot;) //返回委托信息\nprintln(nameRef.getter.invoke()) //相当于调用 get 方法\n//personKotlin: 1751075886\n//nameRef: -954731934\n//thisRef:1751075886\n//property:-954731934\n//personKotlin.name: 88377\n//可以看到属性引用类和它的 receiver 在委托类和这里的 hashCode 相同\n\n//com.jay.lib_kotlin.delegate.MyDelegate@5a63f509\n//YYY\n\n//测试lazy 属性代理方式\nval sexRef: KProperty0&lt;String?&gt; = personKotlin::sex\npersonKotlin.sex\nsexRef.isAccessible = true\nprintln(sexRef.getDelegate())\n//获取的代理信息就是lazy代码块中的值：sex is male\n\n\n//测试 属性引用的类型\nval kMutableProperty0: KMutableProperty0&lt;Int&gt; = ::sex //sex 是顶级属性\nval s = kMutableProperty0 as CallableReference\nprintln(s.owner) //file class com.jay.lib_kotlin.property.PersonKotlinKt\n//属性引用的类型是 CallableReference</code></pre>\n<p><strong>receiver</strong>：属性值的接收器。 例如，如果这是该类的成员属性，则它应该是类实例，如果这是顶级扩展属性，则它应该是扩展接收器</p>\n<p><strong>CallableReference</strong>：是 Kotlin 编译器为可调用引用类生成的所有类的超类</p>\n<h3 id=\"3-2-属性委托实现原理\"><a href=\"#3-2-属性委托实现原理\" class=\"headerlink\" title=\"3.2 属性委托实现原理\"></a>3.2 属性委托实现原理</h3><pre><code class=\"kotlin\">public open class FooBy {\n    //只要在by关键字后面带有一个委托对象，这个对象不一定要实现特定的接口，只要包含了getValue/setValue方法、那它就能作为一个代理属性来使用。\n    val y by MyDelegate()\n    var w: String by MyDelegate()\n}\n\nclass MyDelegate {\n    var value: String = &quot;YYY&quot;\n    //todo 委托类里面必须提供 getValue 方法，或者扩展这个方法也可\n    operator fun getValue(thisRef: Any, property: KProperty&lt;*&gt;): String {\n        return value\n    }\n    operator fun setValue(thisRef: Any, property: KProperty&lt;*&gt;, s: String) {\n        value = s\n    }\n}</code></pre>\n<p>反编译Java后的代码</p>\n<pre><code class=\"java\">public class FooBy {\n   // $FF: synthetic field\n   static final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(FooBy.class, &quot;y&quot;, &quot;getY()Ljava/lang/String;&quot;, 0)), (KProperty)Reflection.mutableProperty1(new MutablePropertyReference1Impl(FooBy.class, &quot;w&quot;, &quot;getW()Ljava/lang/String;&quot;, 0))};\n   @NotNull\n   private final MyDelegate y$delegate = new MyDelegate();\n   @NotNull\n   private final MyDelegate w$delegate = new MyDelegate();\n   @NotNull\n   public final String getY() {\n      return this.y$delegate.getValue(this, $$delegatedProperties[0]);\n   }\n   @NotNull\n   public final String getW() {\n      return this.w$delegate.getValue(this, $$delegatedProperties[1]);\n   }\n\n   public final void setW(@NotNull String var1) {\n      Intrinsics.checkNotNullParameter(var1, &quot;&lt;set-?&gt;&quot;);\n      this.w$delegate.setValue(this, $$delegatedProperties[1], var1);\n   }\n}</code></pre>\n<p>当调用下面的代码时，就会调用到 FooBy.y 的 get 方法</p>\n<pre><code>val foo = FooBy()\nprintln(foo.y)</code></pre><p>看一下反编译后的 getY 方法，</p>\n<pre><code class=\"java\">@NotNull\npublic final String getY() {\n   return this.y$delegate.getValue(this, $$delegatedProperties[0]);\n}</code></pre>\n<p>看一下 <code>y$delegate</code> 是什么 ,其实就是我们的代理类并在 FooBy 类构建的时候已经初始化</p>\n<pre><code class=\"java\">@NotNull\nprivate final MyDelegate y$delegate = new MyDelegate();</code></pre>\n<p>再看看MyDelegate中的的 getValue 方法, 就是我们在代理类中必须提供的方法</p>\n<pre><code class=\"java\">//Java code\n@NotNull\npublic final String getValue(@NotNull Object thisRef, @NotNull KProperty property) {\n   Intrinsics.checkNotNullParameter(thisRef, &quot;thisRef&quot;);\n   Intrinsics.checkNotNullParameter(property, &quot;property&quot;);\n   return this.value;\n}</code></pre>\n<p>到这里我们就可以看清了整个委托流程了</p>\n<ul>\n<li>当类中有属性被委托时，Kotlin 会在当前类中添加委托类的实例并在实例化当前类时实例化委托类( y$delegate)，同时$$delegatedProperties 数组也是在类初始化时创建完成，里面方式所有属性的反射类信息</li>\n<li>当要获取委托属性时，会调用到它的 get 方法，而 get 方法返回的是代理类的 getValue 方法</li>\n<li>getValue 方法是我们自己实现的，最终代理属性就会通过 getValue  方法赋上值了</li>\n<li>setValue 时还会把 属性 的backing field 传过去</li>\n</ul>\n<h3 id=\"3-3-PropertyReferenceImpl\"><a href=\"#3-3-PropertyReferenceImpl\" class=\"headerlink\" title=\"3.3 PropertyReferenceImpl\"></a>3.3 PropertyReferenceImpl</h3><p>委托流程搞清楚了，我们再来看看 getValue 方法中 <code>thisRef: Any</code>， <code>property: KProperty&lt;*&gt;</code> 这两个参数是怎么来的，干什么用的</p>\n<p>thisRef 这个参数是业务类本身可以看到就是在调用 getValue 方法时传递的 this</p>\n<p>property 是委托属性的描述类 <code>KProperty</code> ,它是从这个数组里取的 <code>$$delegatedProperties[0]</code>，这个数组也是构建业务类时由Kotlin自动生成的，存放的是描述类属性的 KProperty 类型</p>\n<p><code>Reflection.property1</code>  是一个工厂函数，将传入的参数返回</p>\n<p>PropertyReference1Impl 的父类也间接实现了 KProperty 接口，所以这里可以强转</p>\n<pre><code class=\"java\">//$$delegatedProperties\nstatic final KProperty[] $$delegatedProperties =\n  new KProperty[]{(KProperty)Reflection.property1(\n  new PropertyReference1Impl(FooBy.class, &quot;y&quot;, &quot;getY()Ljava/lang/String;&quot;, 0)), (KProperty)Reflection.mutableProperty1(\n  new MutablePropertyReference1Impl(FooBy.class, &quot;w&quot;, &quot;getW()Ljava/lang/String;&quot;, 0))};\n</code></pre>\n<p>再看一下属性引用实现类 PropertyReference1Impl  的构造参数 </p>\n<p>PropertyReference1Impl 类的构造器最终会调用到它的父类  CallableReference</p>\n<p><strong>CallableReference</strong>：是 Kotlin 编译器为可调用引用类生成的所有类的超类。</p>\n<pre><code class=\"kotlin\">@SinceKotlin(version = &quot;1.4&quot;)\npublic PropertyReference1Impl(Class owner, String name, String signature, int flags) {\n    super(NO_RECEIVER, owner, name, signature, flags);\n}\n//NO_RECEIVER 如果属性没有 receiver 构造时会缺省添加一个 NO_RECEIVER\n@SinceKotlin(version = &quot;1.1&quot;)\npublic static final Object NO_RECEIVER = NoReceiver.INSTANCE;\n@SinceKotlin(version = &quot;1.2&quot;)\nprivate static class NoReceiver implements Serializable {\n    private static final NoReceiver INSTANCE = new NoReceiver();\n\n    private Object readResolve() throws ObjectStreamException {\n        return INSTANCE;\n    }\n}\n\n//CallableReference\n@SinceKotlin(version = &quot;1.4&quot;)\nprotected CallableReference(Object receiver, Class owner, String name, String signature, boolean isTopLevel) {\n    this.receiver = receiver; //可调用对象的属性值的接收器。 例如：类实例\n    this.owner = owner; //可调用对象所在的类或包\n    this.name = name; //可调用对象的 Kotlin 名称，即在源代码中声明的名\n    this.signature = signature; //可调用对象的 JVM 签名。如果这是一个属性引用，则返回其 getter 的 JVM 签名，例如“getFoo(LjavalangString;)I”。\n    this.isTopLevel = isTopLevel; //是否高等类型(文件中还是类中)，0 false; 1 true\n}</code></pre>\n<p>利用Java的实现方式简单总结以下Kotlin 属性委托的背后原理</p>\n<pre><code class=\"java\">class Person {\n  static final Field[] delegatedProperties = Person.class.getFields();\n  private final NameDelegate nameDelegate = new NameDelegate();\n  public final String getName() {\n    return this.nameDelegate.getValue(this, delegatedProperties[0]);\n  }\n}\nclass NameDelegate {\n  String getValue(Person thisRef, Field property) {\n    return &quot;Jay&quot;;\n  }\n}</code></pre>\n<h3 id=\"3-4-简化属性委托的内置接口们\"><a href=\"#3-4-简化属性委托的内置接口们\" class=\"headerlink\" title=\"3.4 简化属性委托的内置接口们\"></a>3.4 简化属性委托的内置接口们</h3><p>Kotlin 内置的属性委托功能是<strong>属性委托类</strong>，不能像普通的委托模式一样通过接口或集成的方式来约束交互的方法和类型，做不了两方约束，但是可以通过泛型+接口约束一下委托类，也能达到一部分约束的效果。</p>\n<p>Kotlin 标准库中提供了三个接口来简化委托类的实现</p>\n<pre><code class=\"kotlin\">//val 属性\npublic fun interface ReadOnlyProperty&lt;in T, out V&gt;\n//var 属性\npublic interface ReadWriteProperty&lt;in T, V&gt; : ReadOnlyProperty&lt;T, V&gt;\n//创建委托类的工厂接口\npublic fun interface PropertyDelegateProvider&lt;in T, out D&gt;\n//T：拥有委托属性的对象类型。 \n//V：属性值的类型。\n//D：委托类的类型</code></pre>\n<p>看一下三个接口的接口和方法签名</p>\n<pre><code class=\"kotlin\">public fun interface ReadOnlyProperty&lt;in T, out V&gt; {\n    public operator fun getValue(thisRef: T, property: KProperty&lt;*&gt;): V\n}\npublic interface ReadWriteProperty&lt;in T, V&gt; : ReadOnlyProperty&lt;T, V&gt; {\n    public override operator fun getValue(thisRef: T, property: KProperty&lt;*&gt;): V\n    public operator fun setValue(thisRef: T, property: KProperty&lt;*&gt;, value: V)\n}\n@SinceKotlin(&quot;1.4&quot;)\npublic fun interface PropertyDelegateProvider&lt;in T, out D&gt; {\n    public operator fun provideDelegate(thisRef: T, property: KProperty&lt;*&gt;): D\n}\n//前两个直接用就行，看一个 PropertyDelegateProvider 的使用场景\nprivate val provider = PropertyDelegateProvider&lt;FooBy, MyDelegate&gt; { thisRef, property -&gt;\n    if (thisRef.y == &quot;YYY&quot;) {\n        MyDelegate()\n    } else {\n        MyDelegate2() //MyDelegate2:MyDelegate\n    }\n}</code></pre>\n<p>看一下他们几个综合使用的情况，同时也可以看到kt语音的强大，同样的功能,代码可以从十几行到三行再到一行。yyds!!!</p>\n<pre><code class=\"kotlin\">val provider1 = object : PropertyDelegateProvider&lt;FooReadWrite, ReadWriteProperty&lt;FooReadWrite, Int&gt;&gt; {\n        override fun provideDelegate(\n            thisRef: FooReadWrite,\n            property: KProperty&lt;*&gt;\n        ): ReadWriteProperty&lt;FooReadWrite, Int&gt; {\n            return object : ReadWriteProperty&lt;FooReadWrite, Int&gt; {\n                var result=1024\n                override fun getValue(thisRef: FooReadWrite, property: KProperty&lt;*&gt;): Int {\n                    return result\n                }\n                override fun setValue(thisRef: FooReadWrite, property: KProperty&lt;*&gt;, value: Int) {\n                    result=value\n                }\n            }\n        }\n    }\n\n//lambda 简化版本\nval provider2: PropertyDelegateProvider&lt;FooReadWrite, ReadOnlyProperty&lt;FooReadWrite, Int&gt;&gt; =\n    PropertyDelegateProvider&lt;FooReadWrite, ReadOnlyProperty&lt;FooReadWrite, Int&gt;&gt; { pThisRef: Any?, pProperty: KProperty&lt;*&gt; -&gt;ReadOnlyProperty&lt;Any?, Int&gt; { thisRef, property -&gt; 1025 }\n\n//智能类型推导再简化版本\nprivate val provider3 =PropertyDelegateProvider { _: Any?, _ -&gt; ReadOnlyProperty&lt;Any?, Int&gt; { _, _ -&gt; 1026 } }\n\nval delegate1: Int by provider1\nval delegate2: Int by provider2\nval delegate3: Int by provider3</code></pre>\n<h2 id=\"4-属性委托在-Kotlin-Api-中的运用\"><a href=\"#4-属性委托在-Kotlin-Api-中的运用\" class=\"headerlink\" title=\"4. 属性委托在 Kotlin Api 中的运用\"></a>4. 属性委托在 Kotlin Api 中的运用</h2><p>Kotlin 标准库中提供了几种委托</p>\n<ul>\n<li>映射委托(Map delegation)</li>\n<li>延迟属性（lazy properties）: 其值只在首次访问时计算；</li>\n<li>可观察属性（observable properties）: 监听器会收到有关此属性变更的通知；</li>\n<li>非空属性(Delegates.notNull)</li>\n</ul>\n<h3 id=\"4-1-映射委托-Map-delegation\"><a href=\"#4-1-映射委托-Map-delegation\" class=\"headerlink\" title=\"4.1 映射委托(Map delegation)\"></a>4.1 映射委托(Map delegation)</h3><p>看一个map 作为属性委托方的示例</p>\n<pre><code class=\"kotlin\">class User {\n    //委托 val\n    val map: Map&lt;String, Any?&gt; = mapOf(&quot;name2&quot; to &quot;Jay&quot;, &quot;age&quot; to 18)\n\n    //可变 map 可以委托 val和var\n    val map2: MutableMap&lt;String, Any?&gt; = mutableMapOf(&quot;name2&quot; to &quot;Jay&quot;, &quot;age&quot; to 18)\n    val name: String by map\n    var age: Int by map2\n\n    //更新 age 的值，MutableMap 也会同步更新\n    fun setValues(age: Int) {\n        this.age = age\n    }\n}</code></pre>\n<p>map 中的 key 必须包含属性名，否则会报下面这个错</p>\n<pre><code class=\"kotlin\">Exception in thread &quot;main&quot; java.util.NoSuchElementException: Key name2 is missing in the map.</code></pre>\n<p>所以在使用这个特性时除非我们完全确定支持映射的结构，否则应该避免基于映射的属性委托，要不然委托的类可能会失败并抛出异常</p>\n<p>还有一种情况当value 为 null 时，只有第四种情况会发生：NullPointerException ，这个问题想了解的可以官方的 <a href=\"https://youtrack.jetbrains.com/issue/KT-27672\" target=\"_blank\" rel=\"noopener\">bug report</a></p>\n<pre><code class=\"kotlin\">val map: HashMap&lt;String, Any?&gt; = hashMapOf(&quot;name&quot; to null, &quot;age&quot; to null)\nval name: String by map\nval name: String？ by map\nvar age: Int? by map\nvar age: Int by map</code></pre>\n<p>再来窥探一下 Map delegation 的委托原理</p>\n<pre><code class=\"java\">// $FF: synthetic field\nstatic final KProperty[] $$delegatedProperties = new KProperty[]{(KProperty)Reflection.property1(new PropertyReference1Impl(User.class, &quot;name&quot;, &quot;getName()Ljava/lang/String;&quot;, 0)), (KProperty)Reflection.mutableProperty1(new MutablePropertyReference1Impl(User.class, &quot;age&quot;, &quot;getAge()Ljava/lang/Integer;&quot;, 0))};\n@Nullable\nprivate final Map age$delegate;\n@Nullable\npublic final Integer getAge() {\n   Map var1 = (Map)this.age$delegate;\n   KProperty var3 = $$delegatedProperties[1];\n   boolean var4 = false;\n   return (Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());\n}\npublic final void setAge(@Nullable Integer var1) {\n   Map var2 = (Map)this.age$delegate;\n   KProperty var4 = $$delegatedProperties[1];\n   boolean var5 = false;\n   var2.put(var4.getName(), var1);\n}</code></pre>\n<p>可以看到，Kotlin 编译器 也生成了KProperty[] 类型的 $$delegatedProperties 和 Map 类型 age$delegate，并在构造时实例化age$delegate </p>\n<p>Map相关的委托必要方法在<strong><a href=\"https://github.com/JetBrains/kotlin/blob/34e57a45f2/libraries/stdlib/src/kotlin/collections/MapAccessors.kt\" target=\"_blank\" rel=\"noopener\">MapAccessors</a></strong> 这个类里面</p>\n<pre><code class=\"kotlin\">//Map\n@kotlin.internal.InlineOnly\npublic inline operator fun &lt;V, V1 : V&gt; Map&lt;in String, @Exact V&gt;.getValue(thisRef: Any?, property: KProperty&lt;*&gt;): V1 =@Suppress(&quot;UNCHECKED_CAST&quot;) (getOrImplicitDefault(property.name) as V1)\n//MutableMap\n@kotlin.jvm.JvmName(&quot;getVar&quot;)\n@kotlin.internal.InlineOnly\npublic inline operator fun &lt;V, V1 : V&gt; MutableMap&lt;in String, out @Exact V&gt;.getValue(thisRef: Any?, property: KProperty&lt;*&gt;): V1 = @Suppress(&quot;UNCHECKED_CAST&quot;) (getOrImplicitDefault(property.name) as V1)\n//MutableMap\n@kotlin.internal.InlineOnly\npublic inline operator fun &lt;V&gt; MutableMap&lt;in String, in V&gt;.setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: V) {\n    this.put(property.name, value)\n}</code></pre>\n<p>在访问 age 的 get 时会调用委托 Map 的    <code>(Integer)MapsKt.getOrImplicitDefaultNullable(var1, var3.getName());</code></p>\n<p>在访问 age 的 set 时直接调用委托 Map 的put方法</p>\n<p>下面是 <strong>getOrImplicitDefaultNullable</strong> 函数</p>\n<pre><code class=\"kotlin\">//JvmName 这个注解是指定从此元素生成的 Java 类或方法的名称。\n//扩展方法编译后会将方法的 reciver 作为第一个参数传入\n@kotlin.jvm.JvmName(&quot;getOrImplicitDefaultNullable&quot;)\n@PublishedApi\ninternal fun &lt;K, V&gt; Map&lt;K, V&gt;.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)return this.getOrImplicitDefault(key)\n    return getOrElseNullable(key, { throw NoSuchElementException(&quot;Key $key is missing in the map.&quot;) })\n}</code></pre>\n<p>关于 map 的 put 和 get 操作是如何与委托的 getValue 和 setValue 如何联系在一起的 以及map 的 <code>getValue(thisRef: Any?, property: KProperty&lt;*&gt;)</code>方法为什么用 inline 修饰了，这里涉及到Kotlin 1.4 对委托属性的一个优化，稍后再解析 lazy 原理时会详细解释。</p>\n<p>Map delegation 的一个实践，将推送消息封装并通知APP</p>\n<pre><code class=\"kotlin\">override fun onNotificationReceivedInApp(\n    context: Context,\n    title: String,\n    summary: String,\n    extraMap: Map&lt;String, String&gt;,\n) {\n    val data = extraMap.withDefault { &quot;&quot; }\n    val params = NotificationParams(data)\n    EventBus.getDefault().post(params)\n}\n\nclass NotificationParams(val map: Map&lt;String, String&gt;) {\n    val title: String by map\n    val content: String by map\n}</code></pre>\n<h3 id=\"4-2-延迟属性-lazy-properties\"><a href=\"#4-2-延迟属性-lazy-properties\" class=\"headerlink\" title=\"4.2 延迟属性(lazy properties)\"></a>4.2 延迟属性(lazy properties)</h3><p>看一下lazy的简单使用</p>\n<pre><code class=\"kotlin\">val x: String by lazy(LazyThreadSafetyMode.SYNCHRONIZED) {\n    println(&quot;xxx——lazy&quot;)\n    &quot;xxx——${index++}&quot;\n}\nval y: String by lazy(LazyThreadSafetyMode.PUBLICATION) {\n    println(&quot;yyy——lazy&quot;)\n    &quot;yyy——${index++}&quot;\n}\nval z: String by lazy(LazyThreadSafetyMode.NONE) {\n    println(&quot;zzz——lazy&quot;)\n    &quot;zzz——${index++}&quot;\n}</code></pre>\n<pre><code class=\"kotlin\">val fooLazy = FooLazy()\nfor (i in 1..100) {\n    val thread = thread(true) {\n        Thread.sleep(100)\n        println(Thread.currentThread().name)\n        println(&quot;=&quot; + fooLazy.x)\n        println(&quot;====&quot; + fooLazy.y)\n        println(&quot;=========&quot; + fooLazy.z)\n    }\n}\n\n//xxx——lazy 和 yyy——lazy 都只执行一次，x=0, y=1\n//zzz——lazy 和 z 的值不能确定会执行几次</code></pre>\n<p>LazyThreadSafetyMode 有三种模式作用是指定 [Lazy] 实例如何在多个线程之间同步初始化。</p>\n<ul>\n<li>SYNCHRONIZED: 锁用于确保只有一个线程可以初始化[Lazy]实例。</li>\n<li>PUBLICATION: 并发访问未初始化的[Lazy]实例值时，可以多次调用Initializer函数，但是只有第一个返回的值将用作[Lazy]实例的值。</li>\n<li>NONE: 不使用锁来同步对 [Lazy] 实例值的访问；如果从多个线程访问该实例，可能会发生线程安全问题。除非保证 [Lazy] 实例永远不会从多个线程初始化，否则不应使用此模式。</li>\n</ul>\n<h4 id=\"lazy-原理解析\"><a href=\"#lazy-原理解析\" class=\"headerlink\" title=\"lazy 原理解析\"></a>lazy 原理解析</h4><p>受托对象是Lazy</p>\n<pre><code class=\"kotlin\">@NotNull\nprivate final Lazy x$delegate;</code></pre>\n<p>受托对象在委托者构造方法中实例化</p>\n<pre><code class=\"kotlin\">public FooLazy() {\n   this.x$delegate = LazyKt.lazy(LazyThreadSafetyMode.SYNCHRONIZED, (Function0)(new Function0() {\n      // $FF: synthetic method\n      // $FF: bridge method\n      public Object invoke() {\n         return this.invoke();\n      }\n      @NotNull\n      public final String invoke() {\n         String var1 = &quot;xxx——lazy&quot;;\n         boolean var2 = false;\n         System.out.println(var1);\n         StringBuilder var10000 = (new StringBuilder()).append(&quot;xxx——&quot;);\n         FooLazy var10001 = FooLazy.this;\n         int var3;\n         var10001.index = (var3 = var10001.index) + 1;\n         return var10000.append(var3).toString();\n      }\n   }));\n}</code></pre>\n<p>可以看到 <code>x$delegate</code>  是通过 LazyKt.lazy() 方法实例化的，两个参数分别是线程安全模式类型和一个接口回调</p>\n<p>当调用x 的 get 方法时 反回了受托者的 getValue 方法 并没有调用 lazy 的扩展方法：LazyKt.getValue(thisRef: Any?, property: KProperty&lt;*&gt;) </p>\n<pre><code class=\"java\">public final String getX() {\n   Lazy var1 = this.x$delegate;\n   return (String)var1.getValue();\n}</code></pre>\n<p>再看一下 lazy 是如何定义委托方法 getValue 的</p>\n<pre><code class=\"kotlin\">@kotlin.internal.InlineOnly\npublic inline operator fun &lt;T&gt; Lazy&lt;T&gt;.getValue(thisRef: Any?, property: KProperty&lt;*&gt;): T = value</code></pre>\n<p>这里有没有注意到 lazy 利用属性委托的方式是不同的</p>\n<ul>\n<li>没有自动生成属性数组  <code>KProperty[] $$delegatedProperties</code> </li>\n<li>getX 时最终返回时调用的也不是 <code>getValue(thisRef: Any?, property: KProperty&lt;*&gt;)</code></li>\n<li>lazy 的  <code>getValue(thisRef: Any?, property: KProperty&lt;*&gt;)</code> 方法是用 <strong>inline</strong> 修饰的 并且添加了<code>@kotlin.internal.InlineOnly</code> 注解，map 委托 也是这样的操作</li>\n</ul>\n<p>其实这里是Kotlin 1.4 做的优化，当某些委托属性不会使用 KProperty。对于他们来说，在 <code>$$delegatedProperties</code> 中生成一个KProperty对象是多余的。Kotlin 1.4 版本将优化此类情况。如果委托的属性运算符是内联的，并且没有使用 KProperty 参数，则不会生成相应的反射对象。如果委托属性中有没有采用 inline 修饰的 ， 最终生成的<code>$$delegatedProperties</code>  数组中也之会单独生成它自己的反射对象，详细说明可以看官方的这篇博客</p>\n<p><a href=\"https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/\" target=\"_blank\" rel=\"noopener\">What to Expect in Kotlin 1.4 and Beyond | Optimized delegated properties</a></p>\n<blockquote>\n<p>内联实际上是如何工作的？</p>\n<p>粗略地说，内联采用被内联的函数的字节码，并将其插入到调用处，因此内联函数声明不必在调用处可见。</p>\n<p><code>@kotlin.internal.InlineOnly</code> 注解的作用？</p>\n<p><code>InlineOnly</code> 意味着与此 Kotlin 函数对应的 Java 方法被标记为私有，因此 Java 代码无法访问它（这是调用内联函数而不实际内联它的唯一方法）。这个注释还没有得到很好的验证，官方目前只在内部使用，很有可能稍后将其公之于众。</p>\n</blockquote>\n<p>所以 lazy 和 map 的属性委托在 Kotlin 4.1 都是做了优化的，lazy 属性在调用 getter 时实际上是调用的的是 Lazy<T> 中 value 的 getter，map 属性在调用 getter/setter 时 实际上最终调用的也是 map 的 get/put 方法。</p>\n<p>看一下 lazy 函数签名</p>\n<pre><code class=\"kotlin\">public actual fun &lt;T&gt; lazy(mode: LazyThreadSafetyMode, initializer: () -&gt; T): Lazy&lt;T&gt; =\n    when (mode) {\n        LazyThreadSafetyMode.SYNCHRONIZED -&gt; SynchronizedLazyImpl(initializer)\n        LazyThreadSafetyMode.PUBLICATION -&gt; SafePublicationLazyImpl(initializer)\n        LazyThreadSafetyMode.NONE -&gt; UnsafeLazyImpl(initializer)\n    }</code></pre>\n<h4 id=\"SynchronizedLazyImpl\"><a href=\"#SynchronizedLazyImpl\" class=\"headerlink\" title=\"SynchronizedLazyImpl\"></a>SynchronizedLazyImpl</h4><p>SynchronizedLazyImpl 采用 DCL 方式确保线程安全</p>\n<pre><code class=\"kotlin\">private class SynchronizedLazyImpl&lt;out T&gt;(initializer: () -&gt; T, lock: Any? = null) : Lazy&lt;T&gt;, Serializable {\n    private var initializer: (() -&gt; T)? = initializer\n    @Volatile // 用内存可见性来检查是否在其他线程初始化过，同时也会禁止指令重排序防止_value拿到不完整的实例\n    private var _value: Any? = UNINITIALIZED_VALUE\n    //实例使用自身进行同步\n    private val lock = lock ?: this\n    //Lazy 接口的 value 属性用于获取当前 Lazy 实例的延迟初始化值。一旦初始化后，它不得在此 Lazy 实例的剩余生命周期内更改。\n    val value: T\n        // 重写 get 来保证懒加载，只在使用的时候才执行函数\n        get() {\n            //局部变量可以将性能提高25%以上\n            val _v1 = _value\n            //检查单例实例是否已初始化。如果它被初始化就返回实例。\n            if (_v1 !== UNINITIALIZED_VALUE) {\n                @Suppress(&quot;UNCHECKED_CAST&quot;)\n                return _v1 as T\n            }\n            //到这里还没有初始化，但我们不能确定，因为可能有多个其他线程可能同时初始化了它。\n            //所以为了以防万一，这里需要添加一把互斥锁来保证只有一个线程去实例化实例对象。\n            return synchronized(lock) {\n                //再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。\n                val _v2 = _value\n                //如果它已经被其它线程初始化了，当前线程也能感知他的存在了，直接返回实例\n                if (_v2 !== UNINITIALIZED_VALUE) {\n                    @Suppress(&quot;UNCHECKED_CAST&quot;)\n                    (_v2 as T)\n                } else {\n                    //到这里该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例了。\n                    val typedValue = initializer!!() //执行 Function 对象的 invoke 并将函数的返回值缓存起来\n                    _value = typedValue //_value赋值通知其它线程别进来了，拿走用吧\n                    initializer = null //initializer在当前类实例已经没用了\n                    typedValue // 返回最终的结果给 value\n                }\n            }\n        }\n}</code></pre>\n<p>看不惯这种DCL也可以恢复成传统方式看一下</p>\n<pre><code class=\"kotlin\">val value: T\n    get() {\n        //局部变量将性能提高了 25% Joshua Bloch “Effective Java, Second Edition”，第 3 页。 283-284\n        var _v1 = _value\n        if (_v1 == UNINITIALIZED_VALUE) {\n            synchronized(lock) {\n                // 再次将实例分配给局部变量以检查它是否被其他线程初始化，而当前线程被阻止进入锁定区域。\n                // 如果它被初始化，当前线程也能感知他的存在了。\n                _v1 = _value\n                if (_v1 == UNINITIALIZED_VALUE) {\n                    // 该实例仍未初始化，因此我们可以安全地（没有其他线程可以进入该区域）创建一个实例并将其赋值给我们的单例引用。\n                    _v1 = initializer!!()\n                    initializer = null\n                }\n            }\n        }\n        @Suppress(&quot;UNCHECKED_CAST&quot;)\n        return _v1 as T\n    }</code></pre>\n<h4 id=\"SafePublicationLazyImpl\"><a href=\"#SafePublicationLazyImpl\" class=\"headerlink\" title=\"SafePublicationLazyImpl\"></a>SafePublicationLazyImpl</h4><p><strong>AtomicReferenceFieldUpdater</strong> ：原子更新器是基于反射的工具类，用来对某个类中，被volatile修饰的字段进行原子更新。</p>\n<p>通过调用AtomicReferenceFieldUpdater的静态方法<code>newUpdater</code>就能创建它的实例，该方法要接收三个参数：包含该字段所在的类、将被更新的对象的类型、将被更新的字段的名称</p>\n<p><code>compareAndSet</code> 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新返回 true 同时原子地将字段设置为给定的更新值。</p>\n<p><code>getAndSet</code>原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。</p>\n<p>原子更新器的使用存在比较苛刻的条件如下</p>\n<ul>\n<li>操作的字段不能是static类型。</li>\n<li>操作的字段不能是final类型的，因为final根本没法修改。</li>\n<li>字段必须是volatile修饰的，也就是数据本身是读一致的。</li>\n<li>属性必须对当前的Updater所在的区域是可见的，如果不是当前类内部进行原子更新器操作不能使用private，protected子类操作父类时修饰符必须是protect权限及以上，如果在同一个package下则必须是default权限及以上，也就是说无论何时都应该保证操作类与被操作类间的可见性。</li>\n</ul>\n<blockquote>\n<p>CAS，Compare and Swap即比较并交换，设计并发算法时常用到的一种技术，java.util.concurrent包全完建立在CAS之上，没有CAS也就没有此包，可见CAS的重要性。当前的处理器基本都支持CAS，只不过不同的厂家的实现不一样罢了。<strong>CAS有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做并返回false</strong>。</p>\n<p>Unsafe，JDK中的一个类，它提供了硬件级别的<strong>原子操作</strong>。</p>\n</blockquote>\n<p>compareAndSet 方法调用流程</p>\n<pre><code class=\"java\">\nprivate static final sun.misc.Unsafe U = sun.misc.Unsafe.getUnsafe();\n\npublic final boolean compareAndSet(T obj, V expect, V update) {\n    accessCheck(obj);\n    valueCheck(update);\n    return U.compareAndSwapObject(obj, offset, expect, update);\n}\n\npublic final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);\n</code></pre>\n<p>看一个例子了解 <code>AtomicReferenceFieldUpdater</code> 的使用方式</p>\n<pre><code class=\"java\">public class AtomicReferenceFieldUpdaterTest {\n  public static void main(String[] args) throws Exception {\n    // T:持有可更新字段的对象的类型\n    // V:字段的类型\n    AtomicReferenceFieldUpdater&lt;Dog, String&gt; updater =\n        // 包含该字段所在的类、将被更新的对象的类、将被更新的字段的名称\n        AtomicReferenceFieldUpdater.newUpdater(Dog.class, String.class, &quot;name&quot;);\n    Dog dog = new Dog();\n\n    // 如果期望值和字段当前值相等，说明目前是最新的值可以进行更新，则原子地将字段设置为给定的更新值。\n    // 参数：\n    // obj: 字段所在对象\n    // expect - 期望值\n    // update - 新值\n    // 返回：如果成功则为true\n    System.out.println(dog.name); // dog1 默认值\n    boolean result = updater.compareAndSet(dog, &quot;dog1&quot;, &quot;dog2&quot;);\n    System.out.println(result); // true 修改成功\n    System.out.println(dog.name); // dog2 修改后的的值\n    boolean result2 = updater.compareAndSet(dog, &quot;dog1&quot;, &quot;dog3&quot;);\n    System.out.println(result2); // false 修改失败\n    System.out.println(dog.name); // dog2 还是原来的值\n\n    // 原子地将此更新程序管理的给定对象的字段设置为给定值并返回旧值。\n    // 参数：\n    // obj – 更新字段的对象\n    // newValue – 新值\n    // 返回：之前的的值\n    String result3 = updater.getAndSet(dog, &quot;dog4&quot;);\n    System.out.println(result3); // dog2  原来的值\n    System.out.println(dog.name); // dog4 修改后的值\n  }\n}\n\nclass Dog {\n  volatile String name = &quot;dog1&quot;;\n}</code></pre>\n<p>SafePublicationLazyImpl 使用 AtomicReferenceFieldUpdater 来保证 _value 属性的原子操作。支持同时多个线程调用，并且可以在全部或部分线程上同时进行初始化。如果某个值已由另一个线程初始化，则将返回该值而不执行初始化。</p>\n<pre><code class=\"kotlin\">private class SafePublicationLazyImpl&lt;out T&gt;(initializer: () -&gt; T) : Lazy&lt;T&gt;, Serializable {\n    @Volatile private var initializer: (() -&gt; T)? = initializer\n    @Volatile private var _value: Any? = UNINITIALIZED_VALUE\n    private val final: Any = UNINITIALIZED_VALUE\n    override val value: T\n        get() {\n            val value = _value\n            if (value !== UNINITIALIZED_VALUE) {\n                @Suppress(&quot;UNCHECKED_CAST&quot;)\n                return value as T\n            }\n            val initializerValue = initializer\n            //如果在这里看到初始值已经为 null，则表示该值已被另一个线程设置过了，直接返回 _value ，否则就初始化\n            if (initializerValue != null) {\n                val newValue = initializerValue() //执行 Function 对象的 invoke 并将函数返回值原子化赋值给 _value\n                //如果_value的值是UNINITIALIZED_VALUE说明还没有线程初始化它，此时可以将newValue设置给_value\n                  if (valueUpdater.compareAndSet(this, UNINITIALIZED_VALUE, newValue)) {\n                    initializer = null\n                    return newValue //只有唯一的线程会从这里返回，其它都走下面的返回了\n                }\n              //如果_value的值不是UNINITIALIZED_VALUE，说明其它线程已经初始化完了，当前线程直接返回_value就行了\n            }\n            @Suppress(&quot;UNCHECKED_CAST&quot;)\n            return _value as T\n        }\n\n        //如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n    companion object {\n          //初始化一个原子更新器：保证原子操作的字段是 _value\n        private val valueUpdater = java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater(\n            SafePublicationLazyImpl::class.java,\n            Any::class.java,\n            &quot;_value&quot;\n        )\n    }\n}</code></pre>\n<h4 id=\"UnsafeLazyImpl\"><a href=\"#UnsafeLazyImpl\" class=\"headerlink\" title=\"UnsafeLazyImpl\"></a>UnsafeLazyImpl</h4><pre><code class=\"kotlin\">internal class UnsafeLazyImpl&lt;out T&gt;(initializer: () -&gt; T) : Lazy&lt;T&gt;, Serializable {\n    private var initializer: (() -&gt; T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n    override val value: T\n        get() {\n              //普通的懒加载，只初始化一次，但是在多线程环境下不能保证只执行一次\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!() //多线程并发情况下可能出现空指针异常\n                initializer = null\n            }\n            @Suppress(&quot;UNCHECKED_CAST&quot;)\n            return _value as T\n        }\n      //如果一个序列化类中含有Object writeReplace()方法，那么实际序列化的对象将是作为writeReplace方法返回值的对象，\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}</code></pre>\n<h3 id=\"4-3-NotNullVar\"><a href=\"#4-3-NotNullVar\" class=\"headerlink\" title=\"4.3 NotNullVar\"></a>4.3 NotNullVar</h3><p>notNull 可以返回一个经过非空校验的属性值但是该属性值并没有初始化需要人为稍后setValue<br>在分配初始值之前尝试读取属性会导致异常，这也是返回非空属性的原理所在</p>\n<blockquote>\n<p>非空属性应用场景分析<br>通常，声明为非空类型的属性必须在构造函数中初始化。然而，这通常并不方便。 例如，可以通过依赖注入或在单元测试的 setup 方法中初始化属性。在这种情况下，您不能在构造函数中提供非 null 初始值设定项，但您仍然希望在引用类体内的属性时避免空检查。</p>\n<p>notNull VS lateinit<br>lateinit 不支持原始类型、只能用在可变属性var<br>notNull 会为每个属性创建委托类 NotNullVar</p>\n</blockquote>\n<p>notNull  的使用与原理</p>\n<pre><code class=\"kotlin\">    var name2: String by Delegates.notNull()\n    val age2: Int by Delegates.notNull() // notNull 会为每个属性创建委托类 NotNullVar\n//    lateinit var age3: Int //lateinit 不支持原始类型\n    lateinit var name3: String //lateinit 只能用在 var\n\n\npublic fun &lt;T : Any&gt; notNull(): ReadWriteProperty&lt;Any?, T&gt; = NotNullVar()\n\nprivate class NotNullVar&lt;T : Any&gt;() : ReadWriteProperty&lt;Any?, T&gt; {\n    private var value: T? = null\n\n    public override fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): T {\n        return value ?: throw IllegalStateException(&quot;Property ${property.name} should be initialized before get.&quot;)\n    }\n    public override fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: T) {\n        this.value = value\n    }\n}</code></pre>\n<h3 id=\"4-4-ObservableProperty\"><a href=\"#4-4-ObservableProperty\" class=\"headerlink\" title=\"4.4 ObservableProperty\"></a>4.4 ObservableProperty</h3><pre><code class=\"kotlin\">public abstract class ObservableProperty&lt;V&gt;(initialValue: V) : ReadWriteProperty&lt;Any?, V&gt; {\n    private var value = initialValue\n    protected open fun beforeChange(property: KProperty&lt;*&gt;, oldValue: V, newValue: V): Boolean = true\n    protected open fun afterChange(property: KProperty&lt;*&gt;, oldValue: V, newValue: V): Unit {}\n    public override fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): V {\n        return value\n    }\n    public override fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: V) {\n        val oldValue = this.value\n    //beforeChange: 在尝试更改属性值之前调用的回调。 调用此回调时，该属性的值尚未更改。 如果回调返回true ，则属性的值被设置为新值，如果回调返回false ，则丢弃新值，属性保持其旧值\n        if (!beforeChange(property, oldValue, value)) {\n            return\n        }\n        this.value = value\n    //afterChange: 进行属性更改后调用的回调。 调用此回调时，该属性的值已更改。\n        afterChange(property, oldValue, value)\n    }\n}</code></pre>\n<h4 id=\"observable-变量值更新后的监听\"><a href=\"#observable-变量值更新后的监听\" class=\"headerlink\" title=\"observable 变量值更新后的监听\"></a>observable 变量值更新后的监听</h4><pre><code class=\"kotlin\">public inline fun &lt;T&gt; observable(initialValue: T, crossinline onChange: (property: KProperty&lt;*&gt;, oldValue: T, newValue: T) -&gt; Unit): ReadWriteProperty&lt;Any?, T&gt; =\n    object : ObservableProperty&lt;T&gt;(initialValue) {\n        override fun afterChange(property: KProperty&lt;*&gt;, oldValue: T, newValue: T) = onChange(property, oldValue, newValue)\n    }</code></pre>\n<h4 id=\"vetoable变量值更新前的拦截\"><a href=\"#vetoable变量值更新前的拦截\" class=\"headerlink\" title=\"vetoable变量值更新前的拦截\"></a>vetoable变量值更新前的拦截</h4><pre><code class=\"kotlin\">public inline fun &lt;T&gt; vetoable(initialValue: T, crossinline onChange: (property: KProperty&lt;*&gt;, oldValue: T, newValue: T) -&gt; Boolean): ReadWriteProperty&lt;Any?, T&gt; =\n    object : ObservableProperty&lt;T&gt;(initialValue) {\n        override fun beforeChange(property: KProperty&lt;*&gt;, oldValue: T, newValue: T): Boolean = onChange(property, oldValue, newValue)\n    }</code></pre>\n<p>测试代码</p>\n<pre><code class=\"kotlin\">var items: List&lt;String&gt; by Delegates.observable(mutableListOf()) { property, oldValue, newValue -&gt;\n    println(&quot;${property.name} : $oldValue -&gt; $newValue&quot;)\n}\n\nvar nameAfter: String by Delegates.observable(&quot;no&quot;) { prop, old, new -&gt;\n    println(&quot;$old -&gt; $new&quot;)\n}\nvar nameBefore: String by Delegates.vetoable(&quot;no&quot;) { prop, old, new -&gt;\n    println(&quot;$old -&gt; $new&quot;)\n    true //返回true 表示 setValue 成功，否则不能覆盖原值\n}\n\nprivate fun &lt;T&gt; onChange(property: KProperty&lt;*&gt;, oldValue: T, newValue: T) {\n    println(&quot;${property.name} : $oldValue -&gt; $newValue&quot;)\n}\n\nvar age: Int by Delegates.observable(18, ::onChange)\n\n//运行结果\nno -&gt; first\nfirst -&gt; second\nno -&gt; 11111\n11111 -&gt; 2222\nage : 18 -&gt; 33\nage : 33 -&gt; 55\nitems : [] -&gt; [new val]\nitems : [new val] -&gt; [new val, new 111]</code></pre>\n<h2 id=\"5-属性委托在-Android-上的应用\"><a href=\"#5-属性委托在-Android-上的应用\" class=\"headerlink\" title=\"5. 属性委托在 Android 上的应用\"></a>5. 属性委托在 Android 上的应用</h2><h3 id=\"5-1-ViewBinding\"><a href=\"#5-1-ViewBinding\" class=\"headerlink\" title=\"5.1 ViewBinding\"></a>5.1 ViewBinding</h3><pre><code class=\"kotlin\">//1. 借助 lazy 属性委托  + 反射 VB 的 inflate 方法\nprivate val binding: ActivityMainBinding by vb()\n//2. 借助 lazy 属性委托  + 传递 inflate 方法引用\nprivate val binding: ActivityMainBinding by vb(ActivityMainBinding::inflate)</code></pre>\n<p><strong><a href=\"https://github.com/jaydroid1024/VBHelper\" target=\"_blank\" rel=\"noopener\">VBHelper</a></strong></p>\n<pre><code class=\"kotlin\">@MainThread\ninline fun &lt;reified T : ViewBinding&gt; ComponentActivity.vb(noinline inflateMethodRef: ((LayoutInflater) -&gt; T)? = null): Lazy&lt;T&gt; =\n    ActivityVBLazy(this, T::class, inflateMethodRef)\n\n\nclass ActivityVBLazy&lt;T : ViewBinding&gt;(\n    private val activity: ComponentActivity,\n    private val kClass: KClass&lt;*&gt;,\n    private val inflateMethodRef: ((LayoutInflater) -&gt; T)?\n) : Lazy&lt;T&gt; {\n    private var cachedBinding: T? = null\n    override val value: T\n        get() {\n            var viewBinding = cachedBinding\n            if (viewBinding == null) {\n                viewBinding = if (inflateMethodRef != null) {\n                    //借助 lazy 属性委托 + 传递 inflate 方法引用\n                    inflateMethodRef.invoke(activity.layoutInflater)\n                } else {\n                    //借助 lazy 属性委托  + 反射绑定类的 inflate 方法\n                    @Suppress(&quot;UNCHECKED_CAST&quot;)\n                    kClass.java.getMethod(METHOD_INFLATE, LayoutInflater::class.java)\n                        .invoke(null, activity.layoutInflater) as T\n                }\n                activity.setContentView(viewBinding.root)\n                cachedBinding = viewBinding\n            }\n            return viewBinding\n        }\n\n    override fun isInitialized() = cachedBinding != null\n}</code></pre>\n<h3 id=\"5-2-ViewModel\"><a href=\"#5-2-ViewModel\" class=\"headerlink\" title=\"5.2 ViewModel\"></a>5.2 ViewModel</h3><pre><code class=\"kotlin\">//借助 lazy 属性委托  + ViewModelProvider\nval model: MyViewModel by viewModels()</code></pre>\n<p><strong><a href=\"https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/activity/ktx/src/main/java/androidx/activity/ActivityViewModelLazy.kt\" target=\"_blank\" rel=\"noopener\">ActivityViewModelLazy</a></strong></p>\n<pre><code class=\"kotlin\">@MainThread\ninline fun &lt;reified VM : ViewModel&gt; ComponentActivity.viewModels(\n    factory: ViewModelProvider.Factory? = null\n): Lazy&lt;VM&gt; = ActivityViewModelLazy(this, VM::class, factory)\n\n/**\n * An implementation of [Lazy] used by [ComponentActivity.viewModels] tied to the given [activity],\n * [viewModelClass], [factory]\n */\nclass ActivityViewModelLazy&lt;VM : ViewModel&gt;(\n    private val activity: ComponentActivity,\n    private val viewModelClass: KClass&lt;VM&gt;,\n    private val factory: ViewModelProvider.Factory?\n) : Lazy&lt;VM&gt; {\n    private var cached: VM? = null\n    override val value: VM\n        get() {\n            var viewModel = cached\n            if (viewModel == null) {\n                val application = activity.application\n                    ?: throw IllegalArgumentException(\n                        &quot;ViewModel can be accessed &quot; +\n                                &quot;only when Activity is attached&quot;\n                    )\n                val resolvedFactory = factory ?: AndroidViewModelFactory.getInstance(application)\n                viewModel = ViewModelProvider(activity, resolvedFactory).get(viewModelClass.java)\n                cached = viewModel\n            }\n            return viewModel\n        }\n\n    override fun isInitialized() = cached != null\n}</code></pre>\n<p><strong><a href=\"https://android.googlesource.com/platform/frameworks/support/+/0699f8f5b5aa7d79ba48d57a3710989ae2f50ee3/fragment/ktx/src/main/java/androidx/fragment/app/FragmentViewModelLazy.kt\" target=\"_blank\" rel=\"noopener\">FragmentViewModelLazy</a></strong></p>\n<pre><code class=\"kotlin\">@MainThread\ninline fun &lt;reified VM : ViewModel&gt; Fragment.viewModels(factory: Factory? = null): Lazy&lt;VM&gt; =\n    FragmentViewModelLazy(this, VM::class, factory)\n\n/**\n * An implementation of [Lazy] used by [Fragment.viewModels] tied to the given [fragment],\n * [viewModelClass], [factory]\n */\nclass FragmentViewModelLazy&lt;VM : ViewModel&gt;(\n    private val fragment: Fragment,\n    private val viewModelClass: KClass&lt;VM&gt;,\n    private val factory: Factory?\n) : Lazy&lt;VM&gt; {\n    private var cached: VM? = null\n    override val value: VM\n        get() {\n            var viewModel = cached\n            if (viewModel == null) {\n                val application = fragment.activity?.application\n                    ?: throw IllegalArgumentException(\n                        &quot;ViewModel can be accessed &quot; +\n                                &quot;only when Fragment is attached&quot;\n                    )\n                val resolvedFactory = factory ?: AndroidViewModelFactory.getInstance(application)\n                viewModel = ViewModelProvider(fragment, resolvedFactory).get(viewModelClass.java)\n                cached = viewModel\n            }\n            return viewModel\n        }\n\n    override fun isInitialized() = cached != null\n}</code></pre>\n<h3 id=\"5-3-SP-delegates\"><a href=\"#5-3-SP-delegates\" class=\"headerlink\" title=\"5.3 SP delegates\"></a>5.3 SP delegates</h3><pre><code class=\"kotlin\">fun SharedPreferences.int(def: Int = 0, key: String? = null) =\n    delegate(def, key, SharedPreferences::getInt, SharedPreferences.Editor::putInt)\n\nfun SharedPreferences.long(def: Long = 0, key: String? = null) =\n    delegate(def, key, SharedPreferences::getLong, SharedPreferences.Editor::putLong)\n\nfun SharedPreferences.string(def: String = &quot;&quot;, key: String? = null) =\n    delegate(def, key, SharedPreferences::getString, SharedPreferences.Editor::putString)\n\n\nprivate inline fun &lt;T&gt; SharedPreferences.delegate(\n    defaultValue: T,\n    key: String?,\n    crossinline getter: SharedPreferences.(String, T) -&gt; T,\n    crossinline setter: SharedPreferences.Editor.(String, T) -&gt; SharedPreferences.Editor\n) = object : ReadWriteProperty&lt;Any, T&gt; {\n    override fun getValue(thisRef: Any, property: KProperty&lt;*&gt;) =\n        getter(key ?: property.name, defaultValue)\n\n    @SuppressLint(&quot;CommitPrefEdits&quot;)\n    override fun setValue(thisRef: Any, property: KProperty&lt;*&gt;, value: T) =\n        edit().setter(key ?: property.name, value).apply()\n}</code></pre>\n<p>测试代码</p>\n<pre><code class=\"kotlin\">class TokenHolder(prefs: SharedPreferences) {\n    var token: String by prefs.string()\n        private set\n    var count by prefs.int()\n        private set\n    fun saveToken(newToken: String) {\n        token = newToken\n        count++\n    }\n    override fun toString(): String {\n        return &quot;TokenHolder(token=&#39;$token&#39;, count=$count)&quot;\n    }\n}\n\nclass UserHolder(prefs: SharedPreferences) {\n    var name: String by prefs.string()\n        private set\n    var pwd: String by prefs.string()\n        private set\n    fun saveUserAccount(name: String, pwd: String) {\n        this.name = name\n        this.pwd = pwd\n    }\n    override fun toString(): String {\n        return &quot;UserHolder(name=&#39;$name&#39;, pwd=&#39;$pwd&#39;)&quot;\n    }\n}\n\nval prefs = getSharedPreferences(&quot;sp_app_jay&quot;, Context.MODE_PRIVATE)\n\n//缓存Token的场景\nval tokenHolder = TokenHolder(prefs)\nLog.d(&quot;Jay&quot;, &quot;tokenHolder:$tokenHolder&quot;)\ntokenHolder.saveToken(&quot;token_one&quot;)\ntokenHolder.saveToken(&quot;token_second&quot;)\n\n//缓存登录信息的场景\nval userHolder = UserHolder(prefs)\nLog.d(&quot;Jay&quot;, &quot;userHolder:$userHolder&quot;)\nuserHolder.saveUserAccount(&quot;jay&quot;, &quot;123456&quot;)</code></pre>\n<h2 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h2><p>本篇文章围绕 Kotlin 的内置委托(Delegation﻿) 特性并结合代码实践分别阐述了 Kotlin 委托的原理(包括属性委托和接口委托)，尤其是属性委托从属性到委托详细阐述了其实现原理，</p>\n<p>然后是实践部分，首先是Kotlin 标准库中利用属性委托为我们封装了很多简洁的API，比如：map、lazy、notNull、Observable 等；然后是Kotlin 属性委托在 Android 上的一些实践，包括 VB、VM、SP 等利用属性委托基本上都能完成一行代码实现set/get。Kotlin 委托显然在消除样板代码方面能发挥出强大的作用。但是这每个属性的背后却对应这一个委托类，所以在大量使用时也需要兼顾性能。</p>\n<h2 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h2><p><a href=\"https://www.kotlincn.net/docs/reference/delegation.html\" target=\"_blank\" rel=\"noopener\">官方文档 | 委托</a></p>\n<p><a href=\"https://www.kotlincn.net/docs/reference/delegated-properties.html\" target=\"_blank\" rel=\"noopener\">官方文档 | 属性委托</a></p>\n<p><a href=\"https://coding.imooc.com/class/398.html\" target=\"_blank\" rel=\"noopener\">慕课网 | 新版 Kotlin 从入门到精通</a></p>\n<p><a href=\"https://juejin.cn/post/6844904038589267982\" target=\"_blank\" rel=\"noopener\">一文彻底搞懂Kotlin中的委托</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Delegation_pattern\" target=\"_blank\" rel=\"noopener\">Wikipedia | Delegation pattern</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Proxy_pattern\" target=\"_blank\" rel=\"noopener\">Wikipedia | Proxy pattern</a></p>\n<p><a href=\"https://proandroiddev.com/kotlin-delegates-in-android-1ab0a715762d\" target=\"_blank\" rel=\"noopener\">Medium | Kotlin Delegates in Android</a></p>\n"},{"title":"筑基系列-算法大全（更新中...）","date":"2021-10-31T06:16:55.000Z","cover":true,"summary":"链表、排序、字符串、二叉树等等","_content":"\n\n\n<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n\t代码\n  </code></pre>\n</details>\n\n\n### 01 组中重复的数字\n\n| 剑指 Offer 03 | [数组中重复的数字](https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/) | [LeetCode 题解](https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/) |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n\n\n\n\n\n### 01 从尾到头打印链表\n\n| 剑指 Offer 06 | [从尾到头打印链表](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof) | [LeetCode 题解](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution) |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n\n<details>    \n  <summary> <b> Solution1：两次循环，时间：O(N)，空间：O(N)</b> </summary>      \n   <pre><code>\n/*\n  Solution1：两次循环，时间：O(N),空间：O(N)\n  1. while 循环遍历链表求出总长度 length\n  2. 根据length构建整数型数组 array\n  3. for 循环向 array 中后插法插入数据\n */\nclass Solution1 {\n    fun reversePrint(head: ListNode?): IntArray {\n        var temp = head\n        var length = 0\n        //1. while 循环遍历链表求出总长度 length\n        while (temp != null) {\n            length++\n            temp = temp.next\n        }\n        //2. 根据length构建整数型数组 array\n        val array = IntArray(length)\n        temp = head//temp指针指向头节点再利用\n        //3. for 循环向 array 中后插法插入数据\n        for (i in 0 until length) {\n            array[length - 1 - i] = temp?.`val` ?: 0\n            temp = temp?.next\n        }\n        return array\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution2：两次循环+栈，时间：O(N),空间：O(N)\n    1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n    2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n */\nclass Solution2 {\n    fun reversePrint(head: ListNode?): IntArray {\n        //stack.push(temp) / stack.pop() ，Java 中的Stack数据结构是继承自Vector，addElement方法是通过大锁保证线程安全的\n        //Stack<ListNode> stack = new Stack<>();\n        //通过 LinkedList 来模拟栈操作可以提高效率\n        var temp = head\n        val stack = LinkedList<Int>()\n        //1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n        while (temp != null) {\n            stack.addLast(temp.`val`)\n            temp = temp.next\n        }\n        val res = IntArray(stack.size)\n        //2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n        for (i in res.indices) {\n            res[i] = stack.removeLast()\n        }\n        return res\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution3：递归，时间：O(N)，空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution3：递归，时间：O(N),空间：O(N)\n    1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    3. 转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n */\nclass Solution3 {\n    var tmp = ArrayList<Int>()\n    fun reversePrint(head: ListNode?): IntArray {\n        recur(head)\n        //转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n        val res = IntArray(tmp.size)\n        for (i in res.indices) res[i] = tmp[i]\n        return res\n    }\n    fun recur(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    if (head == null) return\n    recur(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    tmp.add(head.`val`)\n\t}\n}\n//递归2\nclass Solution31 {\n    private lateinit var res: IntArray\n    private var i = 0 //测量栈深度，初始化数组\n    private var x = 0 //数组下标\n    fun reversePrint(head: ListNode?): IntArray {\n        solve(head)\n        return res\n    }\n    fun solve(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时获取了递归深度可以初始化数组再返回。\n    if (head == null) {\n        res = IntArray(i)\n        return\n    }\n    i++\n    solve(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    res[x] = head.`val`\n    x++\n\t}\n}\n  </code></pre>\n</details>\n\n\n\n\n\n\n\n\n","source":"_posts/code_all.md","raw":"---\ntitle: 筑基系列-算法大全（更新中...）\ndate: 2021-10-31 14:16:55\ncover: true\ntags: \n\n    - 算法\ncategory: \n\t- 算法\nsummary: 链表、排序、字符串、二叉树等等\n\n---\n\n\n\n<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n\t代码\n  </code></pre>\n</details>\n\n\n### 01 组中重复的数字\n\n| 剑指 Offer 03 | [数组中重复的数字](https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/) | [LeetCode 题解](https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/) |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n\n\n\n\n\n### 01 从尾到头打印链表\n\n| 剑指 Offer 06 | [从尾到头打印链表](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof) | [LeetCode 题解](https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution) |\n| ------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n\n<details>    \n  <summary> <b> Solution1：两次循环，时间：O(N)，空间：O(N)</b> </summary>      \n   <pre><code>\n/*\n  Solution1：两次循环，时间：O(N),空间：O(N)\n  1. while 循环遍历链表求出总长度 length\n  2. 根据length构建整数型数组 array\n  3. for 循环向 array 中后插法插入数据\n */\nclass Solution1 {\n    fun reversePrint(head: ListNode?): IntArray {\n        var temp = head\n        var length = 0\n        //1. while 循环遍历链表求出总长度 length\n        while (temp != null) {\n            length++\n            temp = temp.next\n        }\n        //2. 根据length构建整数型数组 array\n        val array = IntArray(length)\n        temp = head//temp指针指向头节点再利用\n        //3. for 循环向 array 中后插法插入数据\n        for (i in 0 until length) {\n            array[length - 1 - i] = temp?.`val` ?: 0\n            temp = temp?.next\n        }\n        return array\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution2：两次循环+栈，时间：O(N),空间：O(N)\n    1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n    2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n */\nclass Solution2 {\n    fun reversePrint(head: ListNode?): IntArray {\n        //stack.push(temp) / stack.pop() ，Java 中的Stack数据结构是继承自Vector，addElement方法是通过大锁保证线程安全的\n        //Stack<ListNode> stack = new Stack<>();\n        //通过 LinkedList 来模拟栈操作可以提高效率\n        var temp = head\n        val stack = LinkedList<Int>()\n        //1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n        while (temp != null) {\n            stack.addLast(temp.`val`)\n            temp = temp.next\n        }\n        val res = IntArray(stack.size)\n        //2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n        for (i in res.indices) {\n            res[i] = stack.removeLast()\n        }\n        return res\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution3：递归，时间：O(N)，空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution3：递归，时间：O(N),空间：O(N)\n    1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    3. 转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n */\nclass Solution3 {\n    var tmp = ArrayList<Int>()\n    fun reversePrint(head: ListNode?): IntArray {\n        recur(head)\n        //转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n        val res = IntArray(tmp.size)\n        for (i in res.indices) res[i] = tmp[i]\n        return res\n    }\n    fun recur(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    if (head == null) return\n    recur(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    tmp.add(head.`val`)\n\t}\n}\n//递归2\nclass Solution31 {\n    private lateinit var res: IntArray\n    private var i = 0 //测量栈深度，初始化数组\n    private var x = 0 //数组下标\n    fun reversePrint(head: ListNode?): IntArray {\n        solve(head)\n        return res\n    }\n    fun solve(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时获取了递归深度可以初始化数组再返回。\n    if (head == null) {\n        res = IntArray(i)\n        return\n    }\n    i++\n    solve(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    res[x] = head.`val`\n    x++\n\t}\n}\n  </code></pre>\n</details>\n\n\n\n\n\n\n\n\n","slug":"code_all","published":1,"updated":"2021-11-04T16:45:44.746Z","_id":"ckvjra5in0000w8xfdqm20mff","comments":1,"layout":"post","photos":[],"link":"","content":"<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n    代码\n  </code></pre>\n</details>\n\n\n<h3 id=\"01-组中重复的数字\"><a href=\"#01-组中重复的数字\" class=\"headerlink\" title=\"01 组中重复的数字\"></a>01 组中重复的数字</h3><table>\n<thead>\n<tr>\n<th>剑指 Offer 03</th>\n<th><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/\" target=\"_blank\" rel=\"noopener\">数组中重复的数字</a></th>\n<th><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/\" target=\"_blank\" rel=\"noopener\">LeetCode 题解</a></th>\n</tr>\n</thead>\n</table>\n<h3 id=\"01-从尾到头打印链表\"><a href=\"#01-从尾到头打印链表\" class=\"headerlink\" title=\"01 从尾到头打印链表\"></a>01 从尾到头打印链表</h3><table>\n<thead>\n<tr>\n<th>剑指 Offer 06</th>\n<th><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof\" target=\"_blank\" rel=\"noopener\">从尾到头打印链表</a></th>\n<th><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution\" target=\"_blank\" rel=\"noopener\">LeetCode 题解</a></th>\n</tr>\n</thead>\n</table>\n<details>    \n  <summary> <b> Solution1：两次循环，时间：O(N)，空间：O(N)</b> </summary>      \n   <pre><code>\n/*\n  Solution1：两次循环，时间：O(N),空间：O(N)\n  1. while 循环遍历链表求出总长度 length\n  2. 根据length构建整数型数组 array\n  3. for 循环向 array 中后插法插入数据\n */\nclass Solution1 {\n    fun reversePrint(head: ListNode?): IntArray {\n        var temp = head\n        var length = 0\n        //1. while 循环遍历链表求出总长度 length\n        while (temp != null) {\n            length++\n            temp = temp.next\n        }\n        //2. 根据length构建整数型数组 array\n        val array = IntArray(length)\n        temp = head//temp指针指向头节点再利用\n        //3. for 循环向 array 中后插法插入数据\n        for (i in 0 until length) {\n            array[length - 1 - i] = temp?.`val` ?: 0\n            temp = temp?.next\n        }\n        return array\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution2：两次循环+栈，时间：O(N),空间：O(N)\n    1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n    2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n */\nclass Solution2 {\n    fun reversePrint(head: ListNode?): IntArray {\n        //stack.push(temp) / stack.pop() ，Java 中的Stack数据结构是继承自Vector，addElement方法是通过大锁保证线程安全的\n        //Stack<listnode> stack = new Stack&lt;&gt;();\n        //通过 LinkedList 来模拟栈操作可以提高效率\n        var temp = head\n        val stack = LinkedList<int>()\n        //1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n        while (temp != null) {\n            stack.addLast(temp.`val`)\n            temp = temp.next\n        }\n        val res = IntArray(stack.size)\n        //2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n        for (i in res.indices) {\n            res[i] = stack.removeLast()\n        }\n        return res\n    }\n}\n  </int></listnode></code></pre>\n</details>\n<details>    \n  <summary> <b> Solution3：递归，时间：O(N)，空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution3：递归，时间：O(N),空间：O(N)\n    1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    3. 转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n */\nclass Solution3 {\n    var tmp = ArrayList<int>()\n    fun reversePrint(head: ListNode?): IntArray {\n        recur(head)\n        //转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n        val res = IntArray(tmp.size)\n        for (i in res.indices) res[i] = tmp[i]\n        return res\n    }\n    fun recur(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    if (head == null) return\n    recur(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    tmp.add(head.`val`)\n    }\n}\n//递归2\nclass Solution31 {\n    private lateinit var res: IntArray\n    private var i = 0 //测量栈深度，初始化数组\n    private var x = 0 //数组下标\n    fun reversePrint(head: ListNode?): IntArray {\n        solve(head)\n        return res\n    }\n    fun solve(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时获取了递归深度可以初始化数组再返回。\n    if (head == null) {\n        res = IntArray(i)\n        return\n    }\n    i++\n    solve(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    res[x] = head.`val`\n    x++\n    }\n}\n  </int></code></pre>\n</details>\n\n\n\n\n\n\n\n\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n    代码\n  </code></pre>\n</details>\n\n\n<h3 id=\"01-组中重复的数字\"><a href=\"#01-组中重复的数字\" class=\"headerlink\" title=\"01 组中重复的数字\"></a>01 组中重复的数字</h3><table>\n<thead>\n<tr>\n<th>剑指 Offer 03</th>\n<th><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/\" target=\"_blank\" rel=\"noopener\">数组中重复的数字</a></th>\n<th><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/\" target=\"_blank\" rel=\"noopener\">LeetCode 题解</a></th>\n</tr>\n</thead>\n</table>\n<h3 id=\"01-从尾到头打印链表\"><a href=\"#01-从尾到头打印链表\" class=\"headerlink\" title=\"01 从尾到头打印链表\"></a>01 从尾到头打印链表</h3><table>\n<thead>\n<tr>\n<th>剑指 Offer 06</th>\n<th><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof\" target=\"_blank\" rel=\"noopener\">从尾到头打印链表</a></th>\n<th><a href=\"https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/solution\" target=\"_blank\" rel=\"noopener\">LeetCode 题解</a></th>\n</tr>\n</thead>\n</table>\n<details>    \n  <summary> <b> Solution1：两次循环，时间：O(N)，空间：O(N)</b> </summary>      \n   <pre><code>\n/*\n  Solution1：两次循环，时间：O(N),空间：O(N)\n  1. while 循环遍历链表求出总长度 length\n  2. 根据length构建整数型数组 array\n  3. for 循环向 array 中后插法插入数据\n */\nclass Solution1 {\n    fun reversePrint(head: ListNode?): IntArray {\n        var temp = head\n        var length = 0\n        //1. while 循环遍历链表求出总长度 length\n        while (temp != null) {\n            length++\n            temp = temp.next\n        }\n        //2. 根据length构建整数型数组 array\n        val array = IntArray(length)\n        temp = head//temp指针指向头节点再利用\n        //3. for 循环向 array 中后插法插入数据\n        for (i in 0 until length) {\n            array[length - 1 - i] = temp?.`val` ?: 0\n            temp = temp?.next\n        }\n        return array\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution2：两次循环+栈，时间：O(N),空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution2：两次循环+栈，时间：O(N),空间：O(N)\n    1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n    2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n */\nclass Solution2 {\n    fun reversePrint(head: ListNode?): IntArray {\n        //stack.push(temp) / stack.pop() ，Java 中的Stack数据结构是继承自Vector，addElement方法是通过大锁保证线程安全的\n        //Stack<ListNode> stack = new Stack<>();\n        //通过 LinkedList 来模拟栈操作可以提高效率\n        var temp = head\n        val stack = LinkedList<Int>()\n        //1. 入栈： 遍历链表，将各节点值 addLast 入栈。（借助 LinkedList 的addLast()方法）。\n        while (temp != null) {\n            stack.addLast(temp.`val`)\n            temp = temp.next\n        }\n        val res = IntArray(stack.size)\n        //2. 出栈： 将各节点值 removeLast 出栈，存储于数组并返回。\n        for (i in res.indices) {\n            res[i] = stack.removeLast()\n        }\n        return res\n    }\n}\n  </code></pre>\n</details>\n<details>    \n  <summary> <b> Solution3：递归，时间：O(N)，空间：O(N) </b></summary>      \n   <pre><code>\n/*\n    Solution3：递归，时间：O(N),空间：O(N)\n    1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    3. 转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n */\nclass Solution3 {\n    var tmp = ArrayList<Int>()\n    fun reversePrint(head: ListNode?): IntArray {\n        recur(head)\n        //转换数据：将列表 tmp 转化为数组 res ，并返回即可。\n        val res = IntArray(tmp.size)\n        for (i in res.indices) res[i] = tmp[i]\n        return res\n    }\n    fun recur(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时直接返回。\n    if (head == null) return\n    recur(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    tmp.add(head.`val`)\n    }\n}\n//递归2\nclass Solution31 {\n    private lateinit var res: IntArray\n    private var i = 0 //测量栈深度，初始化数组\n    private var x = 0 //数组下标\n    fun reversePrint(head: ListNode?): IntArray {\n        solve(head)\n        return res\n    }\n    fun solve(head: ListNode?) {\n    //1. 递推阶段：每次传入 head.next ，以 head == null（即走过链表尾部节点）为递归终止条件，此时获取了递归深度可以初始化数组再返回。\n    if (head == null) {\n        res = IntArray(i)\n        return\n    }\n    i++\n    solve(head.next)\n    //2. 回溯阶段：层层回溯时，将当前节点值加入列表，即tmp.add(head.val)。\n    res[x] = head.`val`\n    x++\n    }\n}\n  </code></pre>\n</details>\n\n\n\n\n\n\n\n\n"},{"title":"EventBus 事件总线框架深入分析","date":"2021-01-31T06:16:55.000Z","cover":true,"summary":"EventBus 事件总线框架从应用场景到原理深入分析","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# EventBus 事件总线框架深入分析\n\n## 1. EventBus 关键词云\n\n设计模式、数据结构、内存占用、查找效率、线程安全、对象池、事件继承问题、事件发布器、线程模式、同步、异步\n\n## 2. EventBus 快问快答\n\nEventBus 中运用了那些设计模式\n\n- 观察者、单例、构建者、门面、策略\n\nEventBus 中运用了那些数据结构\n\n- ThreadLocal、CopyOnWriteArrayList、ConcurrentHashMap、HashMap、PendingPostQueue\n\nEventBus 中的对象池\n\n- FindState/FIND_STATE_POOL、PendingPost/pendingPostPool\n\nEventBus 中的锁与线程安全问题\n\n- 并发容器、同步锁、ThreadLocal\n\n如何设计一个最小原型 EventBus 框架需要考虑哪些问题\n\n- 内存占用、查找效率、线程安全\n\nEventBus 中的事件发布时如何实现同步、异步的\n\n- 同步：主线程、Handler；异步：子线程\n\n## 3. EventBus 总结\n\n#### 3.1 编译时APT流程总结\n\nEventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。\n\n通过APT方式收集订阅者的大体流程如下：\n\n- 在编码阶段添加订阅者方法时我们需要通过 **@Subscribe** 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：**enum ThreadMode、boolean sticky，int priority** 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。\n- EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。\n- 注解处理器注解处理流程主要分为：**收集订阅者、校验订阅者、生成索引类**三个过程。\n  - **收集订阅者**：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 **正好只有一个参数的非静态的公开的方法** 的规则。然后将找到的订阅者方法和订阅者类存入 **ListMap<TypeElement, ExecutableElement> methodsByClass **  容器中。该容器的数据结构是：`HashMap<K, List<V>>()` key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。\n  - **校验订阅者**（包括订阅者类/订阅者类的父类和订阅者方法）：\n    - 校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足**public/default+索引类和订阅者类的包名一样** 的规则，不满足的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n    - 校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n      - 订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。\n      - 订阅者方法的参数类型是类类型但是对索引类不可见。\n  - **生成索引类**：遍历最终收集到的 **methodsByClass** 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。\n\n#### 3.2 初始化EventBus 总结\n\n总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。\n\n单例模式常用于构建全局唯一类并提供全局唯一访问点。\n\n构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。\n\nEventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。\n\n需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。\n\n你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。\n\n可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。\n\n#### 3.3 注册订阅者流程总结\n\n注册订阅者分为查找和订阅两个过程\n\n查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。\n\n还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。\n\n订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。\n\n#### 3.4 事件发布流程总结\n\n发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。\n\n具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。\n\n#### 3.5 注销订阅者流程总结\n\n注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。\n\n\n\n## 4. 概述\n\n> 框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。\n\nEventBus 翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现**观察者模式**，从而减少样板代码。其中，[Google Guava EventBus](https://github.com/google/guava/wiki/EventBusExplained)  就是一个比较著名的 EventBus 框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式。\n\n而我们今天要分析的 [**GreenRobot EventBus**](https://github.com/greenrobot/EventBus) 是同时适用于 Android 和 Java 平台的事件总线框架，它可简化Activities, Fragments, Threads, Services之间的通信且轻量，它的核心设计理念是对观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）的封装。传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调等，相比之下EventBus的优点是代码简洁，使用简单，并将事件发布和订阅充分解耦。\n\n> **观察者模式 **\n>\n> 定义：定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。\n>\n> 作用：解耦观察者和被观察者。\n>\n> 实现：\n>\n> - **同步阻塞**是最经典的实现方式，主要是为了代码解耦；观察者和被观察者代码在同一个线程内执行，被观察者发送更新通知后就一直阻塞着，直到所有的观察者代码都执行完成之后，才会执行后续的代码。\n>\n> - **异步非阻塞**除了能实现代码解耦之外，还能提高代码的执行效率；实现方式是被观察者发送更新通知后启动一个新的线程来执行观察者的回调函数。\n>\n\n**EventBus 观察者模式框架 VS 自己实现观察模式**\n\n利用 EventBus 框架实现的观察者模式，跟从零开始编写的观察者模式相比，从大的流程上来说，实现思路大致一样，都需要定义观察者（Observer），并且通过 register() 函数注册Observer，也都需要通过调用某个函数（比如，EventBus 中的 post() 函数）来给 Observer 发送消息（在 EventBus 中消息被称作事件 event）。\n\n但在实现细节方面，它们又有些区别。基于 EventBus，我们不需要定义 Observer 接口，任意类型的对象都可以注册到 EventBus 中，通过 @Subscribe 注解来标明类中哪个函数可以接收被观察者发送的消息。\n\n跟经典的观察者模式的不同之处在于，当我们调用 post() 函数发送消息的时候，并非把消息发送给所有的观察者，而是发送给可匹配的观察者。所谓可匹配指的是，能接收的消息类型是发送消息（post 函数定义中的 event）类型或是其父类。\n\n\n\n## 5. 工作机制\n\n![EventBus-Android-Publish-Subscribe](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211107112804.png)\n\n**发布者(Publisher)**：发布者主动生成事件发布事件给指定订阅者。\n\n```java\nEventBus.getDefault().post(new MessageEvent());\n```\n\n**事件总线(EventBus)**：统筹所有事件的调度工作，如：收集、注册、切换、分发、解注册等操作。\n\n```java\nEventBus.getDefault().register(this);\nEventBus.getDefault().unregister(this);\n```\n\n**订阅者(Subscriber)**：声明订阅方法并通过注释标记，可指定线程模式。\n\n```java\n@Subscribe(threadMode = ThreadMode.MAIN)  \npublic void onMessageEvent(MessageEvent event) {/* Do something */};\n```\n\n## 6. EventBus 优势\n\n- 简化组件之间的通信，同进程内随便发，组件化中需要考虑 Event Object 的存放位置。\n- 解耦事件的发送者和接收者，仅通过 Event Object 进行链接发送者和接受者。\n- 在 UI 组件和后台线程切换中表现良好的性能\n- 避免复杂且容易出错的依赖关系和生命周期问题，提供解注册订阅者。\n- 很快；专为高性能而优化，很小（~60k jar）\n- [在实践中被证明通过应用与1,000,000,000+安装](http://www.appbrain.com/stats/libraries/details/eventbus/greenrobot-eventbus)\n- 具有分发指定线程、设置订阅者优先级等功能。\n\n##  7. EventBus 功能\n\n- **简单而强大：** EventBus 是一个小型库，其 API 非常容易学习。然而，通过解耦组件，您的软件架构可能会受益匪浅：订阅者在使用事件时并不了解发送者。\n- 实战**测试：** EventBus 是最常用的 Android 库之一：数以千计的应用程序使用 EventBus，包括非常流行的应用程序。超过 10 亿次应用安装不言而喻。\n- **高性能：**尤其是在 Android 上，性能很重要。EventBus 进行了大量分析和优化；可能使其成为同类中最快的解决方案。\n- **方便的基于注释的 API** （不牺牲性能）**：**只需将 @Subscribe 注释放在您的订阅者方法中。由于注释的构建时索引，EventBus 不需要在您的应用程序运行时进行注释反射，这在 Android 上非常慢。\n- **Android 主线程传递：**在与 UI 交互时，EventBus 可以在主线程中传递事件，而不管事件是如何发布的。\n- **后台线程传递：**如果您的订阅者执行长时间运行的任务，EventBus 还可以使用后台线程来避免 UI 阻塞。\n- **事件和订阅者继承：**在 EventBus 中，面向对象的范式适用于事件和订阅者类。假设事件类 A 是 B 的超类。发布的 B 类事件也将发布给对 A 感兴趣的订阅者。类似地考虑订阅者类的继承。\n- **零配置：** 您可以立即开始使用代码中任何位置可用的默认 EventBus 实例。\n- **可配置：** 要根据您的要求调整 EventBus，您可以使用构建器模式调整其行为。\n\n## 8. EventBus 应用\n\n- 如果使用 EventBus 的页面比较多，可以在 Acitivity/Fragment  基类里面绑定和解绑，并添加一个默认接收事件。\n- 跨界面修改值\n  - 你有一个主界面，里面有一些信息可能会修改，但触发源不在该界面，是在其他的界面触发了一些事件后，首页的内容需要做修改。\n  - 如果没有EventBus，也有很多的方式可以实现，譬如定义全局静态变量、或者onResume时获取触发源的值修改界面值、或者定义个CallBack接口传出去等。\n  - 譬如微信首页你有未读消息3个时，界面会有3个小红点点，当你点开一个未读消息后，进入了下个界面，那么此时未读消息就是2了，但你并不在首页了，你需要在你打开消息并阅读完毕后通知首页改成2.这就是一种跨界面修改值。\n- Activity/Fragment 与 Fragment 之间通信\n- 注册页面回退逻辑\n  - 在注册页面填写了手机号、个人信息，传头像操作后，注册成功了，进入了主界面。此时我们需要在主界面关闭之前的注册的所有页面，此时就可以使用eventbus来通知前几个注册用的activity来关闭自己。这样的目的就是当注册失败时，用户按返回键还是能回到填写信息页。当注册成功后，按返回键就直接退出程序，不再保留注册填信息页了。\n- 推送/消息功能\n  - 收到推送后需要不同的页面来做处理的。例如：微信PC登录时，手机端的确认登录页面是可以随时随地弹出的，\n- 组件化通讯\n  - 组件之间的交互，例如：测试环境中环境切换组件，切换后需要重新登录并重置环境信息等。\n- EventBus最好的使用方式就是替代某些 BroadcastReceiver 和 Interface；如fragment之间进行通信，用广播和接口都比较麻烦，而用EventBus则比较简单。\n- 以下场景可以考虑不用\n  - Event 会根据传递的参数给所有接收者都传递消息，这就导致如果你想给指定一个类里发布消息就得自己写一个接口类，要不然就会好多执行者都会执行该方法，所以一般能用Intent组件传值时还是用Intent。\n  - EventBus相对于BroadcastReceiver，广播是相对消耗时间、空间最多的一种方式，但是大家都知道，广播是四大组件之一，许多系统级的事件都是通过广播来通知的，比如说网络的变化、电量的变化，短信发送和接收的状态，所以，如果与android系统进行相关的通知，还是要选择本地广播；在BroadcastReceiver的 onReceive方法中，可以获得Context 、intent参数，这两个参数可以调用许多的sdk中的方法，而eventbus获得这两个参数相对比较困难。\n  - EventBus相对于handler，可以实现handler的方式，但是也会面对有许多接收者的问题，所以如果是线程回调的话，我觉得还是用handler比较好。\n\n## 9. EventBus 使用\n\n### 9.1 订阅者索引\n\n使用订阅者索引可以避免在运行时使用反射对订阅者方法进行昂贵的查找。EventBus 注释处理器在编译时查找它们。\n\n#### 符合注解收集的要求\n\n- @Subscribe 方法及其类**必须是 public**。\n- 事件类**必须是 public**。\n- @Subscribe可以**不**被使用**匿名类的内部**。\n- 当 EventBus 不能使用索引时，例如不满足上述要求，它会在运行时降级为通过反射查找订阅者。这确保@Subscribe 方法接收事件，即使它们不是索引的一部分。\n\n#### 配置注解处理器\n\n```groovy\n//java\nandroid {\n    defaultConfig {\n        javaCompileOptions {\n            annotationProcessorOptions {\n                arguments = [ eventBusIndex : 'com.example.myapp.MyEventBusIndex' ]\n            }\n        }\n    }\n}\n \ndependencies {\n    def eventbus_version = '3.2.0'\n    implementation \"org.greenrobot:eventbus:$eventbus_version\"\n    annotationProcessor \"org.greenrobot:eventbus-annotation-processor:$eventbus_version\"\n}\n\n//kotlin \napply plugin: 'kotlin-kapt' // ensure kapt plugin is applied\n\ndependencies {\n    def eventbus_version = '3.2.0'\n    implementation \"org.greenrobot:eventbus:$eventbus_version\"\n    kapt \"org.greenrobot:eventbus-annotation-processor:$eventbus_version\"\n}\n\nkapt {\n    arguments {\n        arg('eventBusIndex', 'com.example.myapp.MyEventBusIndex')\n    }\n}\n```\n\n#### 使用订阅者索引类\n\n在您的*Application*类中，使用*EventBus.builder().addIndex(indexInstance)*将索引类的实例传递给 EventBus。组件中的索引类也可以通过addIndex方法添加到 EventBus 实例中。\n\n```kotlin\n//创建一个新实例并配置索引类\nval eventBus = EventBus.builder().addIndex(MyEventBusIndex()).build()\n//使用单例模式并配置索引类\nEventBus.builder().addIndex(MyEventBusIndex()).installDefaultEventBus()\n// Now the default instance uses the given index. Use it like this:\nval eventBus = EventBus.getDefault()\n```\n\n#### 防止混淆订阅者\n\n```java\n-keepattributes *Annotation*\n-keepclassmembers class * {\n    @org.greenrobot.eventbus.Subscribe <methods>;\n}\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\n \n# And if you use AsyncExecutor:\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\n    <init>(java.lang.Throwable);\n}\n```\n\n### 9.2 配置EventBus\n\nEventBusBuilder 类可以配置 EventBus 的各个方面。例如\n\n使用 EventBus.getDefault() 是一种从应用程序中的任何位置获取共享 EventBus 实例的简单方法。EventBusBuilder 还允许使用installDefaultEventBus ( )方法配置此默认实例。可以在 Application 类中在使用 EventBus 之前配置默认 EventBus 实例。\n\n```kotlin\nclass App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        EventBus.builder()\n            //将此与 BuildConfig.DEBUG 一起使用可让应用程序尽在在 DEBUG 模式下崩溃。默认为false\n            // 这样就不会在开发过程中错过异常（Invoking subscriber failed）\n            .throwSubscriberException(false)\n            //如果发送了没有订阅者的event,是否需要打印提示哪一个 event bean 的log,默认为true\n            //提示信息： No subscribers registered for event class org.greenrobot.eventbusperf.jay.bus.SubEvent\n            .logNoSubscriberMessages(true)\n            .installDefaultEventBus()\n    }\n}\n```\n\n### 9.3 ThreadMode\n\n在 EventBus 中，您可以使用四种 ThreadMode 来指定订阅者方法所在的线程。\n\n- [1 ThreadMode: POSTING](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_POSTING) ：发布者和订阅者在同一个线程。\n  - 这是默认设置。事件传递是同步完成的，需要注意避免阻塞主线程。\n  - 避免了线程切换意味着开销较小。\n- [2 ThreadMode: MAIN](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN) ：订阅者将在 Android 的主线程（UI 线程）中调用。\n  - 事件传递是同步完成的，需要注意避免阻塞主线程。\n- [3 ThreadMode: MAIN_ORDERED](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN_ORDERED) ：订阅者将在 Android 的主线程中被调用，该事件总是通过Handler排队等待稍后传递给订阅者。\n  - 为事件处理提供了更严格和更一致的顺序。\n  - 如果前一个也是main_ordered 需要等前一个执行完成后才执行。\n  - 事件传递是异步完成的。\n- [4 ThreadMode: BACKGROUND](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_BACKGROUND) ：如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。\n  - 事件传递是异步完成的。\n- [5 ThreadMode: ASYNC](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_ASYNC) ：无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。\n  - EventBus 使用线程池来有效地重用线程。\n  - 事件传递是异步完成的。\n  - 如果事件处理程序方法的执行可能需要一些时间，则应使用此模式，例如用于网络访问\n\n```kotlin\n //在主线程发消息\n 发布者所在线程:Thread-2, 订阅者所在线程: Thread-2, 订阅者线程模式: BACKGROUND \n 发布者所在线程:Thread-2, 订阅者所在线程: pool-1-thread-1, 订阅者线程模式: ASYNC \n 发布者所在线程:Thread-2, 订阅者所在线程: Thread-2, 订阅者线程模式: POSTING \n 发布者所在线程:Thread-2, 订阅者所在线程: main, 订阅者线程模式: MAIN \n 发布者所在线程:Thread-2, 订阅者所在线程: main, 订阅者线程模式: MAIN_ORDERED \n //在子线程发消息\n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN \n 发布者所在线程:main, 订阅者所在线程: pool-1-thread-2, 订阅者线程模式: BACKGROUND \n 发布者所在线程:main, 订阅者所在线程: pool-1-thread-1, 订阅者线程模式: ASYNC \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN_ORDERED \n```\n\n### 9.4 订阅者优先级\n\n订阅者优先级影响事件传递的顺序。 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。注意：优先级不影响具有不同ThreadMode的订阅者之间的传递顺序！\n\n```kotlin\n@Subscribe(threadMode = ThreadMode.POSTING, priority = 2)\nfun onMessageEvent_POSTING1(event: MessageEvent) {\n    showMsg(event, \"POSTING1\")\n}\n\n@Subscribe(threadMode = ThreadMode.POSTING, priority = 4)\nfun onMessageEvent_POSTING2(event: MessageEvent) {\n    showMsg(event, \"POSTING2\")\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, priority = 1)\nfun onMessageEvent_MAIN1(event: MessageEvent) {\n    showMsg(event, \"MAIN1\")\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, priority = 3)\nfun onMessageEvent_MAIN2(event: MessageEvent) {\n    showMsg(event, \"MAIN2\")\n}\n\n //打印结果\n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING2 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN2 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING1 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN1 \n```\n\n**取消事件传递**\n\n您可以通过从订阅者的事件处理方法调用cancelEventDelivery ( Object event ) 来取消事件传递过程。任何进一步的事件传递都将被取消，后续订阅者将不会收到该事件。\n\n```java\n// Prevent delivery to other subscribers*\nEventBus.getDefault().cancelEventDelivery(event) ;\n```\n\n事件通常由更高优先级的订阅者取消。取消仅限于在发布线程 ( ThreadMode . PostThread ) 中运行的事件处理方法。\n\n### 9.5 粘性事件 \n\n普通事件都是需要先注册(register)，再post才能接受到事件；如果你使用 postSticky 发送事件，那么可以不需要先注册，也能接受到事件，也就是一个延迟注册的过程。 \n\n普通的事件我们通过post发送给EventBus，发送过后之后当前已经订阅过的方法可以收到。但是如果有些事件需要所有订阅了该事件的方法都能执行呢？例如一个Activity，要求它管理的所有Fragment都能执行某一个事件，但是当前我只初始化了3个Fragment，如果这时候通过post发送了事件，那么当前的3个Fragment当然能收到。但是这个时候又初始化了2个Fragment，那么我必须重新发送事件，这两个Fragment才能执行到订阅方法。 \n\n粘性事件就是为了解决这个问题，通过 postSticky 发送粘性事件，这个事件不会只被消费一次就消失，而是一直存在系统中，直到被 removeStickyEvent 删除掉。那么只要订阅了该粘性事件的所有方法，只要被register 的时候就会被检测到并且执行。订阅的方法需要添加 sticky = true 属性。\n\n```kotlin\nEventBus.getDefault().postSticky(MessageEvent(Thread.currentThread().name))\n\n//消费粘性事件方式一：\nval stickyEvent = EventBus.getDefault().getStickyEvent(MessageEvent::class.java)\n// 最好检查之前是否实际发布过事件\nif (stickyEvent != null) {\n    // 消费掉粘性事件\n    EventBus.getDefault().removeStickyEvent(stickyEvent)\n}\n//消费粘性事件方式二：\nval stickyEvent2 = EventBus.getDefault().removeStickyEvent(MessageEvent::class.java)\n// 最好检查之前是否实际发布过事件\nif (stickyEvent2 != null) {\n    //已经消费了\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, sticky = true)\nfun onMessageEvent_sticky(event: MessageEvent) {\n    showMsg(event, \"MAIN\")\n    //消费粘性事件方式三：\n    EventBus.getDefault().removeStickyEvent(event)\n}\n```\n\n### 9.6 异步执行器\n\nAsyncExecutor 就像一个线程池，但具有失败（异常）处理功能。失败会引发异常，AsyncExecutor 会将这些异常包装在一个事件中，该事件会自动发布。\n\n *AsyncExecutor 是一个非核心实用程序类。它可能会为您节省一些在后台线程中进行错误处理的代码，但它不是核心 EventBus 类。*\n\n调用 AsyncExecutor.create() 来创建一个实例并将其保存在应用程序范围内。然后要执行某些操作，请实现 RunnableEx接口并将其传递给AsyncExecutor的execute方法。与Runnable不同，RunnableEx可能抛出异常。\n\n```kotlin\n//AsyncExecutor类似于线程池，但具有失败(异常)处理。失败是抛出异常，AsyncExecutor将把这些异常封装在一个事件中，该事件将自动发布。\nAsyncExecutor.create().execute {\n    EventBus.getDefault().postSticky(SubEvent<String>())\n}\n\n//线程池中发出的时间\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun handleLoginEvent(event: SubEvent<String>) {\n    // do something\n}\n\n//线程池中任务异常时发出的时间\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun handleFailureEvent(event: ThrowableFailureEvent) {\n    // do something\n}\n```\n\n\n\n## 10 EventBus 原理\n\n了解框架之前我们先定义几个核心角色用于描述整个流程\n\n- 发布者类：调用 post/postSticky 发布事件的类\n\n- 发布者方法：调用 post/postSticky 发布事件的方法\n\n- 事件类： post/postSticky 方法参数类以及订阅者方法参数类型\n- 订阅者类：订阅者方法所在的类\n- 订阅者方法：通过注解标注的订阅者方法\n\n![image-20211111000620374](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211111000627.png)\n\n\n\n### 10.1 编译时部分-通过 APT 收集订阅者注解并生成索引类\n\n注解类 Subscribe 用于标注订阅者方法\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\npublic @interface Subscribe {\n    //用来指定指定订阅者方法所在的线程。\n    ThreadMode threadMode() default ThreadMode.POSTING;\n    //如果为 true，则将最近的粘性事件（通过EventBus.postSticky(Object) ）传递给该订阅者。\n    boolean sticky() default false;\n    //订阅者优先级影响事件传递的顺序。\n    // 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。\n    // 注意：优先级不会影响具有不同ThreadMode的订阅者之间的传递顺序！\n    int priority() default 0;\n}\n```\n\n收集那些代码元素：订阅者类&订阅者方法\n\n```java\nclass BusTestActivity : Activity() {\n  \t//定义一个订阅者方法\n    @Subscribe(sticky = true, threadMode = ThreadMode.POSTING, priority = 2)\n    fun onMessageEvent_POSTING1(event: MessageEvent) {\n        showMsg(event, \"POSTING1\")\n    }\n}\n```\n\n注解处理器通过继承 Java AbstractProcessor 抽象类并配置注解和选项参数实现\n\n```java\n@SupportedAnnotationTypes(\"org.greenrobot.eventbus.Subscribe\")\n@SupportedOptions(value = {\"eventBusIndex\", \"verbose\"})\n@IncrementalAnnotationProcessor(AGGREGATING)\npublic class EventBusAnnotationProcessor extends AbstractProcessor {\n  ...\n}\n```\n\n- 通过处理器参数获取配置的订阅者索引全类名，没有配置该参数但是却依赖了注解处理组件会抛异常\n\n```java\n//设置apt参数\njavaCompileOptions {\n    annotationProcessorOptions {\n        arguments = [\n                eventBusIndex: 'org.greenrobot.eventbusperf.MyEventBusIndex',\n                verbose: 'true',\n        ]\n    }\n}\n//获取apt参数\nString index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);\nif (index == null) {\n    messager.printMessage(Diagnostic.Kind.ERROR, \"No option \" + OPTION_EVENT_BUS_INDEX +\n            \" passed to annotation processor\");\n    return false;\n}\n\n//没有配置的错误信息\n> Task :EventBusPerformance:compileDebugJavaWithJavac FAILED\n错误: No option eventBusIndex passed to annotation processor\n```\n\n- 收集注解流程\n\n```java\nprivate void collectSubscribers(Set<? extends TypeElement> annotations, RoundEnvironment env, Messager messager{\n    for (TypeElement annotation : annotations) {\n        //获取目标注解标注的所有元素，这里是所有的订阅者方法\n        Set<? extends Element> elements = env.getElementsAnnotatedWith(annotation);\n        for (Element element : elements) {\n            //ExecutableElement 可执行元素指的是方法类型\n            if (element instanceof ExecutableElement) {\n                ExecutableElement method = (ExecutableElement) element;\n                //检查方法:正好只有一个参数的非静态的公开的方法\n                if (checkHasNoErrors(method, messager)) {\n                    //获取方法所在的类元素\n                    TypeElement classElement = (TypeElement) method.getEnclosingElement();\n                    //存入容器\n                    methodsByClass.putElement(classElement, method);\n                }\n            } else {\n                messager.printMessage(Diagnostic.Kind.ERROR, \"@Subscribe is only valid for methods\", element);\n            }\n        }\n    }\n}\n```\n\n- 校验某个类对索引类包是否可访问\n\n```java\nprivate boolean isVisible(String myPackage, TypeElement typeElement) {\n    //类的修饰符\n    Set<Modifier> modifiers = typeElement.getModifiers();\n    boolean visible;\n    if (modifiers.contains(Modifier.PUBLIC)) {\n        visible = true;\n    } else if (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) {\n        visible = false;\n    } else {\n        //类所在的包\n        String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();\n        //处理器参数没有指定索引类\n        if (myPackage == null) {\n            //todo 没有包名什么情况\n            visible = subscriberPackage.length() == 0;\n        } else {\n            //索引类和观察者包名一样\n            visible = myPackage.equals(subscriberPackage);\n        }\n    }\n    return visible;\n}\n```\n\n- 校验收集到的注解元素信息是否符合预期\n\n```java\nprivate void checkForSubscribersToSkip(Messager messager, String myPackage) {\n    //遍历所有订阅者方法所在的类\n    for (TypeElement skipCandidate : methodsByClass.keySet()) {\n        //方法所在的类，\n        TypeElement subscriberClass = skipCandidate; //循环获取父类\n        while (subscriberClass != null) {//所有观察者\n            //校验某个类类对索引类包是否可访问\n            if (!isVisible(myPackage, subscriberClass)) {\n                //索引类访问不到观察者类，跳过\n                boolean added = classesToSkip.add(skipCandidate);\n                if (added) {//存在不可访问观察者\n                    String msg;\n                    //由于类不是公开的，所以回退到反射\n                    if (subscriberClass.equals(skipCandidate)) { //没有继承关系存在\n                        msg = \"Falling back to reflection because class is not public\";\n                    } else { //父类\n                        msg = \"Falling back to reflection because \" + skipCandidate +\n                                \" has a non-public super class\";\n                    }\n                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);\n                }\n                break;\n            }\n            //观察者类中的所有观察方法\n            List<ExecutableElement> methods = methodsByClass.get(subscriberClass);\n            if (methods != null) {\n                for (ExecutableElement method : methods) {\n                    String skipReason = null;\n                    //方法第一个参数\n                    VariableElement param = method.getParameters().get(0);\n                    //参数类型\n                    TypeMirror typeMirror = getParamTypeMirror(param, messager);\n                    //不是类类型报错\n                    if (!(typeMirror instanceof DeclaredType) || !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {\n                        skipReason = \"event type cannot be processed\";\n                    }\n                    //是类类型但是对索引类不可见\n                    if (skipReason == null) {\n                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();\n                        //参数类对索引类不可见\n                        if (!isVisible(myPackage, eventTypeElement)) {\n                            skipReason = \"event type is not public\";\n                        }\n                    }\n                    //存在观察者方法但是不可见先存下来，用于过滤\n                    if (skipReason != null) {\n                        boolean added = classesToSkip.add(skipCandidate);\n                        if (added) {\n                            String msg = \"Falling back to reflection because \" + skipReason;\n                            if (!subscriberClass.equals(skipCandidate)) {\n                                msg += \" (found in super class for \" + skipCandidate + \")\";\n                            }\n                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);\n                        }\n                        break;\n                    }\n                }\n            }\n            //获取观察者类的父类，继续循环\n            subscriberClass = getSuperclass(subscriberClass);\n        }\n    }\n}\n```\n\n- 将收集到的索引信息写入索引类中的 map 容器中\n\n```java\nprivate void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException {\n    for (TypeElement subscriberTypeElement : methodsByClass.keySet()) {\n        //只生成可访问的\n        if (classesToSkip.contains(subscriberTypeElement)) {\n            continue;\n        }\n        String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n        if (isVisible(myPackage, subscriberTypeElement)) {\n            writeLine(writer, 2,\n                    \"putIndex(new SimpleSubscriberInfo(\" + subscriberClass + \".class,\",\n                    \"true,\", \"new SubscriberMethodInfo[] {\");\n            List<ExecutableElement> methods = methodsByClass.get(subscriberTypeElement);\n            writeCreateSubscriberMethods(writer, methods, \"new SubscriberMethodInfo\", myPackage);\n            writer.write(\"        }));\\n\\n\");\n        } else {\n            writer.write(\"        // Subscriber not visible to index: \" + subscriberClass + \"\\n\");\n        }\n    }\n}\n```\n\n- 生成的 MyEventBusIndex 文件\n\n```java\n//通过注释处理创建的生成索引类的接口。\npublic interface SubscriberInfo {\n    Class<?> getSubscriberClass();\n    SubscriberMethod[] getSubscriberMethods();\n    SubscriberInfo getSuperSubscriberInfo();\n    boolean shouldCheckSuperclass();\n}\n\npublic class MyEventBusIndex implements SubscriberInfoIndex {\n    private static final Map<Class<?>, SubscriberInfo> SUBSCRIBER_INDEX;\n\n    static {\n        SUBSCRIBER_INDEX = new HashMap<Class<?>, SubscriberInfo>();\n        putIndex(new SimpleSubscriberInfo(org.greenrobot.eventbusperf.testsubject.PerfTestEventBus.SubscriberClassEventBusAsync.class,true, new SubscriberMethodInfo[] {\n            new SubscriberMethodInfo(\"onEventAsync\", TestEvent.class, ThreadMode.ASYNC),\n        }));\n      //其它索引信息......\n      }\n\nprivate static void putIndex(SubscriberInfo info) {\n    SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\n}\n  \n@Override\npublic SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {\n    SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\n    if (info != null) {\n        return info;\n    } else {\n        return null;\n    }\n}\n      \n```\n\n#### 编译时APT流程总结\n\nEventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。\n\n通过APT方式收集订阅者的大体流程如下：\n\n- 在编码阶段添加订阅者方法时我们需要通过 **@Subscribe** 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：**enum ThreadMode、boolean sticky，int priority** 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。\n- EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。\n- 注解处理器注解处理流程主要分为：**收集订阅者、校验订阅者、生成索引类**三个过程。\n  - 收集订阅者：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 **正好只有一个参数的非静态的公开的方法** 的规则。然后将找到的订阅者方法和订阅者类存入 **ListMap<TypeElement, ExecutableElement> methodsByClass **  容器中。该容器的数据结构是：`HashMap<K, List<V>>()` key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。\n  - 校验订阅者（包括订阅者类/订阅者类的父类和订阅者方法）：\n    - 校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足**public/default+索引类和订阅者类的包名一样** 的规则，不满足的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n    - 校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n      - 订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。\n      - 订阅者方法的参数类型是类类型但是对索引类不可见。\n  - 生成索引类：遍历最终收集到的 **methodsByClass** 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。\n\n### 10.2 运行时部分-初始化、注册/查找订阅者等\n\n#### 10.2.1 初始化EventBus\n\n构建 EventBus 实例的三种方式：\n- EventBus.getDefault() + 默认Builder\n\n- EventBus.builder().installDefaultEventBus() + 自定义配置\n\n- EventBus.builder().build() + 自定义配置\n\n方式一：DCL单例方式创建进程唯一实例\n\n```java\nstatic volatile EventBus defaultInstance;\n\n//使用进程范围的 EventBus 实例的应用程序的便捷单例。\npublic static EventBus getDefault() {\n \t //通过局部变量中转可节省性能\n    EventBus instance = defaultInstance;\n    if (instance == null) {\n        synchronized (EventBus.class) {\n            instance = EventBus.defaultInstance;\n            if (instance == null) {\n                instance = EventBus.defaultInstance = new EventBus();\n            }\n        }\n    }\n    return instance;\n}\n```\n\n其它两种方式\n\n```java\n//EventBus.builder().build() + 自定义配置\nEventBus.builder()\n    .throwSubscriberException(false)\n    .logNoSubscriberMessages(true)\n    //添加索引类，减少运行时反射\n    .addIndex(MyEventBusIndex())\n    .build()\n  \npublic EventBus build() {\n    return new EventBus(this);\n}\n\n//EventBus.builder().installDefaultEventBus() + 自定义配置\nEventBus.builder()\n    .throwSubscriberException(false)\n    .logNoSubscriberMessages(true)\n    //添加索引类，减少运行时反射\n    .addIndex(MyEventBusIndex())\n    .installDefaultEventBus()\n  \npublic EventBus installDefaultEventBus() {\n    synchronized (EventBus.class) {\n        if (EventBus.defaultInstance != null) {\n            throw new EventBusException(\"Default instance already exists.\" +\n                    \" It may be only set once before it's used the first time to ensure consistent behavior.\");\n        }\n        EventBus.defaultInstance = build();\n        return EventBus.defaultInstance;\n    }\n}\n```\n\n**构建EventBus时的默认配置**\n\n```java\nEventBus(EventBusBuilder builder) {\n    logger = builder.getLogger();\n    //通过事件类找所有该事件的订阅者，\n    subscriptionsByEventType = new HashMap<>();\n    //通过订阅者类找所有Event\n    typesBySubscriber = new HashMap<>();\n    //通过粘性事件类查找所有粘性事件对象\n    stickyEvents = new ConcurrentHashMap<>();\n    //构建 AndroidHandlerMainThreadSupport\n    mainThreadSupport = builder.getMainThreadSupport();\n    //构建 HandlerPoster\n    mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;\n    //在后台发布事件\n    backgroundPoster = new BackgroundPoster(this);\n    //在后台发布事件\n    asyncPoster = new AsyncPoster(this);\n    indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;\n    //通过反射或APT查找订阅者\n    subscriberMethodFinder = new SubscriberMethodFinder(\n            //添加由 EventBus 的注释预处理器生成的索引。默认空集合\n            builder.subscriberInfoIndexes,\n            //启用严格的方法验证（默认值：false）\n            builder.strictMethodVerification,\n            //即使有生成的索引也强制使用反射（默认值：false）\n            builder.ignoreGeneratedIndex);\n    //无法分发事件时是否打印错误信息\n    logSubscriberExceptions = builder.logSubscriberExceptions;\n    //没有订阅者注册事件是否打印错误信息\n    logNoSubscriberMessages = builder.logNoSubscriberMessages;\n    //在调用订阅者时如果发生异常是否 发送一个 SubscriberExceptionEvent 通知订阅者\n    sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;\n    //没有订阅者注册事件是否是否通知订阅者类的父类\n    sendNoSubscriberEvent = builder.sendNoSubscriberEvent;\n    //在调用订阅者时如果发生异常是否抛出 RuntimeException\n    throwSubscriberException = builder.throwSubscriberException;\n    //是否通知订阅者类的父类中的订阅者方法\n    eventInheritance = builder.eventInheritance;\n    //订阅者执行在工作线程时用到的线程池：Executors.newCachedThreadPool()\n    executorService = builder.executorService;\n}\n```\n\n##### 初始化EventBus 总结\n\n总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。\n\n单例模式常用于构建全局唯一类并提供全局唯一访问点。\n\n构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。\n\nEventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。\n\n需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。\n\n你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。\n\n可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。\n\n#### 10.2.2 注册订阅者：查找订阅者方法\n\n```java\npublic override fun onStart() {\n    super.onStart()\n    EventBus.getDefault().register(this)\n}\n//注册给定的订阅者以接收事件。 订阅者一旦对接收事件不再感兴趣，须调用 unregister(Object) 。\npublic void register(Object subscriber) {\n    Class<?> subscriberClass = subscriber.getClass();\n    //通过订阅者类找出该类中所有的订阅者方法\n    List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);//01\n    synchronized (this) {\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            subscribe(subscriber, subscriberMethod);//02\n        }\n    }\n}\n```\n\n01查找订阅者方法流程：通过APT或反射方式查找订阅者方法并内存缓存\n\n```java\n//ConcurrentHashMap 内存缓存保证线程安全\nprivate static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();\n\n//通过订阅者类查找订阅者方法\nList<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n    //先从内存缓存尝试取，节省查找开销\n    List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n    if (subscriberMethods != null) {\n        return subscriberMethods;\n    }\n    if (ignoreGeneratedIndex) {\n        //运行时反射查找\n        subscriberMethods = findUsingReflection(subscriberClass);\n    } else {\n        //从APT中收集的备选中查找\n        subscriberMethods = findUsingInfo(subscriberClass);\n    }\n    if (subscriberMethods.isEmpty()) {\n        //订阅者类中至少有一个订阅者方法，否则运行时报错\n        throw new EventBusException(\"Subscriber \" + subscriberClass\n                + \" and its super classes have no public methods with the @Subscribe annotation\");\n    } else {\n        //找到后缓存到内存\n        METHOD_CACHE.put(subscriberClass, subscriberMethods);\n        return subscriberMethods;\n    }\n}\n```\n\n**运行时反射查找** \n\n```java\nprivate List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n    //准备一个 FindState 实例，如果对象池中没有就new,一个FindState对应一个订阅者类，用于表示查找状态\n    FindState findState = prepareFindState();\n    //存入订阅者 class\n    findState.initForSubscriber(subscriberClass);\n    //遍历subscriberClass的超类体系，调用findUsingReflectionInSingleClass查找当前clazz的所有订阅函数\n    while (findState.clazz != null) {\n        //在订阅者类中通过反射的方式查找订阅者方法\n        findUsingReflectionInSingleClass(findState);\n        findState.moveToSuperclass();//获取父类继续查找\n    }\n    //循环结束 findState.subscriberMethods 中保存了这个类中的所有订阅者方法\n    return getMethodsAndRelease(findState);\n}\n\n\n```\n\n在订阅者类中通过反射的方式查找订阅者方法\n\n```java\nprivate void findUsingReflectionInSingleClass(FindState findState) {\n    Method[] methods;\n    //getDeclaredMethods 在某些设备上也会出现 NoClassDefFoundError\n    try {\n        //getDeclaredMethods 要比 getMethods 快，尤其是当订阅者是像 Activities 这样的胖类时\n        methods = findState.clazz.getDeclaredMethods();\n    } catch (Throwable th) {\n        //getMethods 在某些设备上也会出现 NoClassDefFoundError，可能会在 getMethods 周围添加 catch\n        try {\n            methods = findState.clazz.getMethods();\n        } catch (LinkageError error) { // super class of NoClassDefFoundError to be a bit more broad...\n            throw new EventBusException(msg, error);\n        }\n        //clazz.getDeclaredMethods()只返回当前clazz中声明的函数，\n        // 而clazz.getMethods()将返回clazz的所有函数(包括继承自父类和接口的函数)，\n        // 因此，此时skipSuperClasses被置为true，阻止递归查找父类。\n        findState.skipSuperClasses = true;\n    }\n\n    //遍历所有方法\n    for (Method method : methods) {\n        int modifiers = method.getModifiers(); //修饰符\n        //MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n        //校验订阅者方法：must be public, non-static, and non-abstract\"\n        if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n            Class<?>[] parameterTypes = method.getParameterTypes();//参数类型\n            if (parameterTypes.length == 1) {//正好一个参数\n                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);\n                if (subscribeAnnotation != null) {\n                    // 恰好一个参数的非静态的公开类并且有Subscribe注解标记\n                    Class<?> eventType = parameterTypes[0];// 参数为事件类\n                    //检查重名方法（本类或父类之间可能重复）用于控制findState.subscriberMethods是否添加找到的method\n                    //如果不校验，如果子类重写订阅者方法会导致执行两次子类的订阅者方法\n                    if (findState.checkAdd(method, eventType)) {\n                        ThreadMode threadMode = subscribeAnnotation.threadMode();\n                        //收集订阅者方法，封装 SubscriberMethod\n                        findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,\n                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));\n                    }\n                }\n            } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n                String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                throw new EventBusException(\"@Subscribe method \" + methodName +\n                        \"must have exactly 1 parameter but has \" + parameterTypes.length);\n            }\n        } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n            String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n            throw new EventBusException(methodName +\n                    \" is a illegal @Subscribe method: must be public, non-static, and non-abstract\");\n        }\n    }\n}\n```\n\n为啥不直接用Class.getMethods直接获取该类的全部方法呢？\n\n如果这个类比较庞大，用getMethods查找所有的方法就显得很笨重了，\n如果使用的是getDeclaredMethods（该类声明的方法不包括从父类那里继承来的public方法），速度就会快一些，因为找的方法变少了，没有什么 equals,toString,hashCode等Object类的方法。\n\nClass#getMethods()，不检查方法签名（对于诸如不存在的参数类型之类的东西）。这已更改为 use Class#getDeclaredMethods()，它会检查并在出现问题时抛出异常。\n\n\n\nFindState 对象和对象池\n\n```java\nprivate static final int POOL_SIZE = 4;\nprivate static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];\n\nprivate List<SubscriberMethod> getMethodsAndRelease(FindState findState) {\n    List<SubscriberMethod> subscriberMethods = new ArrayList<>(findState.subscriberMethods);\n    findState.recycle(); //findState 回收数据\n    synchronized (FIND_STATE_POOL) {\n        for (int i = 0; i < POOL_SIZE; i++) {\n            if (FIND_STATE_POOL[i] == null) {\n                //将当前用过的 findState 缓存回去，下次注册时不用 new\n                FIND_STATE_POOL[i] = findState;\n                break;\n            }\n        }\n    }\n    return subscriberMethods;\n}\n\n//先从对象池中随便找一个，没有才创建\nprivate FindState prepareFindState() {\n    //用的时候隔离开，用完了放回去。\n    synchronized (FIND_STATE_POOL) { //FindState[] FIND_STATE_POOL\n        for (int i = 0; i < POOL_SIZE; i++) { //POOL_SIZE = 4\n            FindState state = FIND_STATE_POOL[i];\n            if (state != null) {\n                FIND_STATE_POOL[i] = null; //在原来的位置用null占位\n                return state; // 遍历FindState对象池，只要找到一个空对象就返回，\n            }\n        }\n    }\n    return new FindState(); \n}\n\nstatic class FindState {\n    final List<SubscriberMethod> subscriberMethods = new ArrayList<>();\n    final Map<Class, Object> anyMethodByEventType = new HashMap<>();\n    final Map<String, Class> subscriberClassByMethodKey = new HashMap<>();\n    final StringBuilder methodKeyBuilder = new StringBuilder(128);\n    Class<?> subscriberClass;\n    Class<?> clazz;\n    boolean skipSuperClasses;\n    SubscriberInfo subscriberInfo;\n\n    void initForSubscriber(Class<?> subscriberClass) {\n        this.subscriberClass = clazz = subscriberClass;\n        skipSuperClasses = false;\n        subscriberInfo = null;\n    }\n\n    void recycle() {\n        subscriberMethods.clear();\n        anyMethodByEventType.clear();\n        subscriberClassByMethodKey.clear();\n        methodKeyBuilder.setLength(0);\n        subscriberClass = null;\n        clazz = null;\n        skipSuperClasses = false;\n        subscriberInfo = null;\n    }\n\n    // 检查是否已经添加过这个订阅者方法\n    boolean checkAdd(Method method, Class<?> eventType) {\n        //2 级检查：仅具有事件类型的第一级（快速），在需要时具有完整签名的第二级。\n        // 通常订阅者没有侦听相同事件类型的方法。\n        //第一层判断有无method监听此eventType,如果没有则可直接把找到的method加到subscriberMethods中。\n        //第二层检查的是从MethodSignature（方法签名）判断能否把找到的method加进去。是为了防止在找父类时覆盖了子类的方法，因为此方法是子类是重写，方法名参数名完全一样（方法签名）；另一个原因是可能是当一个类有多个方法监听同一个event(尽管一般不会这样做)，也能将这些方法加进去。\n        Object existing = anyMethodByEventType.put(eventType, method);\n        if (existing == null) { //没有添加过，\n            //anyMethodByEventType存储<eventType, method>映射关系，\n            // 若existing为空，则表示eventType第一次出现。\n            // 一般情况下，一个对象只会有一个订阅函数处理特定eventType。\n            return true;\n        } else {//一个类有多个方法监听同一个事件类型\n            if (existing instanceof Method) {\n                //处理一个对象有多个订阅函数处理eventType的情况，\n                // 此时，anyMethodByEventType中eventType被映射到一个非Method对象(即this)。\n                if (!checkAddWithMethodSignature((Method) existing, eventType)) {\n                    // Paranoia check\n                    throw new IllegalStateException();\n                }\n                // Put any non-Method object to \"consume\" the existing Method\n                //将任何非 Method 对象“使用”现有的 Method\n                anyMethodByEventType.put(eventType, this);\n            }\n            return checkAddWithMethodSignature(method, eventType);\n        }\n    }\n\n    //由于存在多个订阅函数处理eventType，此时，单纯使用eventType作为key已经无法满足要求了，\n    // 因此，使用method.getName() + \">\" + eventType.getName()作为methodKey，\n    // 并使用subscriberClassByMethodKey存储<methodKey, methodClass>的映射关系。\n    private boolean checkAddWithMethodSignature(Method method, Class<?> eventType) {\n        methodKeyBuilder.setLength(0);\n        methodKeyBuilder.append(method.getName());\n        methodKeyBuilder.append('>').append(eventType.getName());\n        //onEvent>TestEvent\n        String methodKey = methodKeyBuilder.toString();\n        //getDeclaringClass: 返回表示类或接口的 Class 对象，该类或接口声明了由此对象表示的可执行文件。\n        Class<?> methodClass = method.getDeclaringClass();\n        //map[\"onEvent>TestEvent\"]=\n        //如果methodClassOld或者methodClass是methodClassOld的子类，\n        // 则将<methodKey, methodClass>放入，否则不放入。\n        // 满足函数名相同、参数类型相同且被@Subscribe修饰的函数，\n        // 在一个类中不可能存在两个；考虑类继承体系，若这样的两个函数分别来自父类和子类，\n        // 则最终被加入的是子类的函数。\n        Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);\n        //确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。\n        if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {\n            // Only add if not already found in a sub class\n            //仅在子类中未找到时才添加\n            return true;\n        } else {\n            // Revert the put, old class is further down the class hierarchy\n            //还原放置，旧类在类层次结构中更靠后\n            subscriberClassByMethodKey.put(methodKey, methodClassOld);\n            return false;\n        }\n    }\n\n    void moveToSuperclass() {\n        if (skipSuperClasses) { //反射方法时是通过getMethod 方式，已经包含父类方法了\n            clazz = null;\n        } else {\n            clazz = clazz.getSuperclass();\n            String clazzName = clazz.getName();\n            // Skip system classes, this degrades performance.\n            // Also we might avoid some ClassNotFoundException (see FAQ for background).\n            if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") ||\n                    clazzName.startsWith(\"android.\") || clazzName.startsWith(\"androidx.\")) {\n                clazz = null;\n            }\n        }\n    }\n}\n```\n\n**通过APT中收集数据中查找**\n\n```java\nprivate List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n    FindState findState = prepareFindState();\n    findState.initForSubscriber(subscriberClass);\n    while (findState.clazz != null) {\n        //通过订阅者类从索引类中查找订阅者方法信息:subscriberInfo\n        findState.subscriberInfo = getSubscriberInfo(findState);\n        if (findState.subscriberInfo != null) {\n            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n            for (SubscriberMethod subscriberMethod : array) {\n                // 检查重名方法（本类或父类之间都可能重复\n                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                    findState.subscriberMethods.add(subscriberMethod);\n                }\n            }\n        } else {\n            //apt 没有正常收集该类，降级为反射方式查找\n            findUsingReflectionInSingleClass(findState);\n        }\n        findState.moveToSuperclass();\n    }\n    return getMethodsAndRelease(findState);\n}\n\nprivate SubscriberInfo getSubscriberInfo(FindState findState) {\n\t\t//找完子类找父类\n    if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {\n        SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();\n        if (findState.clazz == superclassInfo.getSubscriberClass()) {\n            return superclassInfo;\n        }\n    }\n\n    //apt 收集的索引类\n    if (subscriberInfoIndexes != null) {\n        //通过订阅者类从索引类中查找订阅者方法信息\n        for (SubscriberInfoIndex index : subscriberInfoIndexes) {\n            SubscriberInfo info = index.getSubscriberInfo(findState.clazz);\n            if (info != null) {\n                return info;\n            }\n        }\n    }\n    return null;\n}\n```\n\n**查找流程小结**\n\n注册订阅者分为查找和订阅两个过程\n\n查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。\n\n还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。\n\n亮点整理：\n\n- METHOD_CACHE 缓存了查找过的进程内所有订阅者的键值对(订阅者类，类中的订阅者方法)信息，使用ConcurrentHashMap即保证的查找效率也避免了线程安全问题。\n\n```java\nprivate static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();\n```\n\n- FIND_STATE_POOL 是 FindState 对象池的一维静态数组，FindState 对查找的状态值做了一些封装以及对订阅者方法的检查逻辑。\n  - 为什么要使用FindState呢？首先是面向对象封装的采用\n  - 在JVM系统中频繁地创建对象，是非常消耗资源的，在jvm垃圾回收时候，有可能会出现内存抖动的问题。使用对象池数组就有效的避免了内存抖动的问题。\n  - 对 FIND_STATE_POOL  的操作需要考虑线程同步问题，这里使用了`synchronized`关键字来保证线程安全。\n\n```java\nprivate static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];\n```\n\n\n\n**订阅流程**\n\n查找到当前注册的订阅者类中的所有订阅者方法后，下一步就是为每一个订阅者方法执行订阅流程了。\n\n```java\npublic void register(Object subscriber) {\n    Class<?> subscriberClass = subscriber.getClass();\n    // 01查找订阅者方法流程\n    // 通过订阅者类找出该类中所有的订阅者方法\n    List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n    synchronized (this) {\n        //遍历该订阅者类中所有订阅者方法，执行订阅操作\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            // 02订阅流程\n            // 收集订阅者，事件类，分发粘性事件等\n            subscribe(subscriber, subscriberMethod);\n        }\n    }\n}\n```\n\n订阅流程大题分为三步\n\n- 通过事件类找所有已经订阅过该事件的订阅者们，目的是为了进行优先级排序,全局缓存已注册订阅者等\n- 通过订阅者类找所有已经注册过的 Event 们， 用于判断是否注册、解注册等\n- 当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发\n\n```java\n\nprivate void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n    //事件类\n    Class<?> eventType = subscriberMethod.eventType;\n    //封装订阅者\n    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n    //Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\n    //通过事件类找所有该事件的订阅者，\n    CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    //还没缓存该事件就存且只能存一次\n    if (subscriptions == null) {\n        subscriptions = new CopyOnWriteArrayList<>();\n        subscriptionsByEventType.put(eventType, subscriptions);\n    } else {\n        //不能有重复订阅者\n        if (subscriptions.contains(newSubscription)) {\n            throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n                    + eventType);\n        }\n    }\n\n    int size = subscriptions.size();\n    for (int i = 0; i <= size; i++) {\n        //优先级排序，要么最小查到最后，要么之前的某个位置\n        if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n            //向事件对应的订阅者列表中添加当前订阅者，完成排序操作\n            subscriptions.add(i, newSubscription);\n            break;\n        }\n    }\n\n    //Map<Object, List<Class<?>>> typesBySubscriber;\n    //通过订阅者类找所有Event\n    List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n    if (subscribedEvents == null) {\n        subscribedEvents = new ArrayList<>();\n        typesBySubscriber.put(subscriber, subscribedEvents);\n    }\n    //将当前订阅者方法的 event 存到指定订阅者类下的列表里\n    subscribedEvents.add(eventType);\n\n    //粘性事件：先pst 后 订阅\n    //当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发\n    if (subscriberMethod.sticky) {\n        //eventInheritance: 默认true\n        // 默认情况下，EventBus 考虑事件类层次结构（将通知超类的订阅者）。 关闭此功能将改进事件的发布。\n        // 对于直接扩展 Object 的简单事件类，我们测得事件发布速度提高了 20%。 对于更复杂的事件层次结构，加速应该大于 20%。\n        //但是，请记住，事件发布通常只消耗应用程序内一小部分 CPU 时间，除非它以高速率发布，例如每秒数百/数千个事件\n\n        if (eventInheritance) { //\n            //必须考虑 eventType 的所有子类的现有粘性事件。注意：对于大量粘性事件，迭代所有事件可能效率低下，\n            // 因此应更改数据结构以允许更有效的查找（例如，存储超类的子类的附加映射：Class -> List<Class>）。\n            //stickyEvents = new ConcurrentHashMap<>();\n            Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();\n            for (Map.Entry<Class<?>, Object> entry : entries) {\n                //key: event.getClass(), value: event\n                Class<?> candidateEventType = entry.getKey();\n                //isAssignableFrom: 确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。 如果是，则返回true ； 否则返回false 。 如果此Class对象表示原始类型，则如果指定的Class参数正是此Class对象，则此方法返回true ； 否则返回false 。\n                //具体来说，此方法测试是否可以通过标识转换或通过扩展引用转换将指定Class参数表示的类型转换为此Class对象表示的类型。 有关详细信息，请参阅Java 语言规范5.1.1 和 5.1.4 节\n                if (eventType.isAssignableFrom(candidateEventType)) { //比较class\n                    Object stickyEvent = entry.getValue();\n                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                }\n            }\n        } else {\n            //通过粘性事件类查找所有粘性事件对象\n            Object stickyEvent = stickyEvents.get(eventType);\n            checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n        }\n    }\n}\n\nprivate void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {\n    if (stickyEvent != null) {\n        // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)\n        // --> Strange corner case, which we don't take care of here.\n        //如果订阅者试图中止事件，它将失败（事件在发布状态下不被跟踪）--> 奇怪的极端情况，我们在这里不处理。\n        postToSubscription(newSubscription, stickyEvent, isMainThread());\n    }\n}\n```\n\n##### 注册订阅者流程总结\n\n注册订阅者分为查找和订阅两个过程\n\n查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。\n\n还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。\n\n订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。\n\n亮点整理：\n\n- CopyOnWriteArrayList 保证线程安全\n\n```java\nprivate final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\n```\n\n- ConcurrentHashMap 保证了效率和安全\n\n```java\nstickyEvents = new ConcurrentHashMap<>();\n```\n\n#### 10.2.3 事件发布\n\n发布粘性事件，粘性事件特别之处在于发布前存到了一个map中，当注册时直接执行粘性事件的发布\n\n```java\npublic void postSticky(Object event) {\n    synchronized (stickyEvents) {\n        stickyEvents.put(event.getClass(), event);\n    }\n    //放置后应发布，以防订阅者想立即删除\n    post(event);\n}\n```\n\n发布普通事件，通过ThreadLocal保证发送时的同步问题\n\n```java\npublic void post(Object event) {\n    //currentPostingThreadState = new ThreadLocal<PostingThreadState>()\n    //每个线程都有一份 postingState 实例，\n    //封装 PostingThreadState 对于 ThreadLocal，设置（并获得多个值）要快得多。\n    PostingThreadState postingState = currentPostingThreadState.get();\n    List<Object> eventQueue = postingState.eventQueue;\n    eventQueue.add(event);\n    if (!postingState.isPosting) { // 默认 false\n        postingState.isMainThread = isMainThread(); //判断主线程还是子线程\n        postingState.isPosting = true; //这里保证 cancelEventDelivery 是在同一个线程调用的\n        if (postingState.canceled) { //cancelEventDelivery\n            throw new EventBusException(\"Internal error. Abort state was not reset\");\n        }\n        try {\n            //可能发送了多个事件\n            while (!eventQueue.isEmpty()) {\n                //发送队列依次取出第一个事件执行发布\n                postSingleEvent(eventQueue.remove(0), postingState);\n            }\n        } finally {\n            //发送完事件后重置标志位\n            postingState.isPosting = false;\n            postingState.isMainThread = false;\n        }\n    }\n}\n```\n\n事件发布时考虑事件的继承关系\n\n```java\n//发送队列的第一个事件\nprivate void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n    Class<?> eventClass = event.getClass();\n    boolean subscriptionFound = false;\n    //是否考虑订阅者的继承关系\n    if (eventInheritance) {\n        //事件类和事件类的父类们\n        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\n        int countTypes = eventTypes.size();\n        for (int h = 0; h < countTypes; h++) {\n            Class<?> clazz = eventTypes.get(h);\n            //当前类和父类有一个没收到就算失败\n            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n        }\n    } else {\n        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n    }\n    if (!subscriptionFound) {\n        if (logNoSubscriberMessages) {\n            logger.log(Level.FINE, \"No subscribers registered for event \" + eventClass);\n        }\n        //兜底方案，发送一个通知事件，告诉订阅者刚才的事件没发送成功\n        if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&\n                eventClass != SubscriberExceptionEvent.class) {\n            post(new NoSubscriberEvent(this, event));\n        }\n    }\n}\n```\n\n通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作\n\n```java\nprivate boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {\n    CopyOnWriteArrayList<Subscription> subscriptions;\n    synchronized (this) {\n        //通过单事件，找到所有观察者\n        subscriptions = subscriptionsByEventType.get(eventClass);\n    }\n    if (subscriptions != null && !subscriptions.isEmpty()) {\n        for (Subscription subscription : subscriptions) {\n            //存入线程\n            postingState.event = event;\n            postingState.subscription = subscription;\n            boolean aborted;\n            try {\n                postToSubscription(subscription, event, postingState.isMainThread);\n                aborted = postingState.canceled;\n            } finally {\n                //重置状态\n                postingState.event = null;\n                postingState.subscription = null;\n                postingState.canceled = false;\n            }\n            if (aborted) {\n                break;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n```\n\n发布时会根据订阅者的线程模型做出不同处理\n\n```java\n//发布到订阅\nprivate void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\n    //根据线程模型不同处理\n    switch (subscription.subscriberMethod.threadMode) {\n        case POSTING: //订阅和发布是同一个线程\n            invokeSubscriber(subscription, event);\n            break;\n        case MAIN: //订阅在主线程\n            if (isMainThread) {\n                invokeSubscriber(subscription, event);\n            } else {\n                //通过Handler 发送到主线程\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            break;\n        case MAIN_ORDERED: //订阅在主线程排队\n            if (mainThreadPoster != null) {\n                mainThreadPoster.enqueue(subscription, event);\n            } else {\n                //临时：技术上不正确，因为海报没有与订阅者分离\n                // temporary: technically not correct as poster not decoupled from subscriber\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        case BACKGROUND:////如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。\n            if (isMainThread) {\n                backgroundPoster.enqueue(subscription, event);\n            } else {\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        case ASYNC://无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。\n            asyncPoster.enqueue(subscription, event);\n            break;\n        default:\n            throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\n    }\n}\n```\n\n三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  对应四种线程模型\n\n反射调用观察者\n\n```java\n//同一个线程执行订阅者方法\nvoid invokeSubscriber(Subscription subscription, Object event) {\n    try {\n        //方法、类、参数\n        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n    } catch (InvocationTargetException e) {\n        handleSubscriberException(subscription, event, e.getCause());\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Unexpected exception\", e);\n    }\n}\n```\n\n##### 事件发布流程总结\n\n发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。\n\n具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。\n\n\n\n#### 10.2.4 注销订阅者\n\n```java\npublic override fun onStop() {\n    super.onStop()\n    EventBus.getDefault().unregister(this)\n}\n```\n\n根据订阅者类找该类的所有事件\n\n```java\npublic synchronized void unregister(Object subscriber) {\n    //找到订阅者类对应的事件类列表\n    List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);\n    if (subscribedTypes != null) {\n        //根据每个事件类解除每个订阅者\n        for (Class<?> eventType : subscribedTypes) {\n            unsubscribeByEventType(subscriber, eventType);\n        }\n        //从内存map 移除\n        typesBySubscriber.remove(subscriber);\n    } else {\n        logger.log(Level.WARNING, \"Subscriber to unregister was not registered before: \" + subscriber.getClass());\n    }\n}\n```\n\n根据每个事件找对应的所有订阅者，如果订阅者中的订阅者类和当前类一样才执行解除订阅\n\n```java\nprivate void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n    //根据每个事件类找到所有该事件的订阅者\n    List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    if (subscriptions != null) {\n        int size = subscriptions.size();\n        for (int i = 0; i < size; i++) {\n            //每个订阅者：类+方法\n            Subscription subscription = subscriptions.get(i);\n            //确认是当前类的订阅者\n            if (subscription.subscriber == subscriber) {\n                //修改解除订阅标志位\n                subscription.active = false;\n                subscriptions.remove(i);\n                i--; //防止越界\n                size--;\n            }\n        }\n    }\n}\n```\n\n##### 注销订阅者流程总结\n\n注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。\n\n\n\n## 11. 参考\n\n**[Github | EventBus](https://github.com/greenrobot/EventBus)**\n\n[EventBus Documentation](https://greenrobot.org/eventbus/documentation/)\n\n[极客时间| 设计模式之美](https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D)\n\n[EventBus 如何使用及一些常见场景](https://cloud.tencent.com/developer/article/1383971)\n\n[EventBus使用总结和使用场景](https://blog.csdn.net/f552126367/article/details/86571012)\n\n","source":"_posts/lib_eventbus.md","raw":"---\ntitle: EventBus 事件总线框架深入分析\ndate: 2021-01-31 14:16:55\ncover: true\ntags: \n    - 观察者模式\n    - EventBus\n    - 事件总线\n    - 框架\ncategory: \n\t- 框架\nsummary: EventBus 事件总线框架从应用场景到原理深入分析\n\n\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# EventBus 事件总线框架深入分析\n\n## 1. EventBus 关键词云\n\n设计模式、数据结构、内存占用、查找效率、线程安全、对象池、事件继承问题、事件发布器、线程模式、同步、异步\n\n## 2. EventBus 快问快答\n\nEventBus 中运用了那些设计模式\n\n- 观察者、单例、构建者、门面、策略\n\nEventBus 中运用了那些数据结构\n\n- ThreadLocal、CopyOnWriteArrayList、ConcurrentHashMap、HashMap、PendingPostQueue\n\nEventBus 中的对象池\n\n- FindState/FIND_STATE_POOL、PendingPost/pendingPostPool\n\nEventBus 中的锁与线程安全问题\n\n- 并发容器、同步锁、ThreadLocal\n\n如何设计一个最小原型 EventBus 框架需要考虑哪些问题\n\n- 内存占用、查找效率、线程安全\n\nEventBus 中的事件发布时如何实现同步、异步的\n\n- 同步：主线程、Handler；异步：子线程\n\n## 3. EventBus 总结\n\n#### 3.1 编译时APT流程总结\n\nEventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。\n\n通过APT方式收集订阅者的大体流程如下：\n\n- 在编码阶段添加订阅者方法时我们需要通过 **@Subscribe** 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：**enum ThreadMode、boolean sticky，int priority** 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。\n- EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。\n- 注解处理器注解处理流程主要分为：**收集订阅者、校验订阅者、生成索引类**三个过程。\n  - **收集订阅者**：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 **正好只有一个参数的非静态的公开的方法** 的规则。然后将找到的订阅者方法和订阅者类存入 **ListMap<TypeElement, ExecutableElement> methodsByClass **  容器中。该容器的数据结构是：`HashMap<K, List<V>>()` key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。\n  - **校验订阅者**（包括订阅者类/订阅者类的父类和订阅者方法）：\n    - 校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足**public/default+索引类和订阅者类的包名一样** 的规则，不满足的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n    - 校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n      - 订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。\n      - 订阅者方法的参数类型是类类型但是对索引类不可见。\n  - **生成索引类**：遍历最终收集到的 **methodsByClass** 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。\n\n#### 3.2 初始化EventBus 总结\n\n总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。\n\n单例模式常用于构建全局唯一类并提供全局唯一访问点。\n\n构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。\n\nEventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。\n\n需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。\n\n你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。\n\n可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。\n\n#### 3.3 注册订阅者流程总结\n\n注册订阅者分为查找和订阅两个过程\n\n查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。\n\n还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。\n\n订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。\n\n#### 3.4 事件发布流程总结\n\n发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。\n\n具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。\n\n#### 3.5 注销订阅者流程总结\n\n注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。\n\n\n\n## 4. 概述\n\n> 框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。\n\nEventBus 翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现**观察者模式**，从而减少样板代码。其中，[Google Guava EventBus](https://github.com/google/guava/wiki/EventBusExplained)  就是一个比较著名的 EventBus 框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式。\n\n而我们今天要分析的 [**GreenRobot EventBus**](https://github.com/greenrobot/EventBus) 是同时适用于 Android 和 Java 平台的事件总线框架，它可简化Activities, Fragments, Threads, Services之间的通信且轻量，它的核心设计理念是对观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）的封装。传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调等，相比之下EventBus的优点是代码简洁，使用简单，并将事件发布和订阅充分解耦。\n\n> **观察者模式 **\n>\n> 定义：定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。\n>\n> 作用：解耦观察者和被观察者。\n>\n> 实现：\n>\n> - **同步阻塞**是最经典的实现方式，主要是为了代码解耦；观察者和被观察者代码在同一个线程内执行，被观察者发送更新通知后就一直阻塞着，直到所有的观察者代码都执行完成之后，才会执行后续的代码。\n>\n> - **异步非阻塞**除了能实现代码解耦之外，还能提高代码的执行效率；实现方式是被观察者发送更新通知后启动一个新的线程来执行观察者的回调函数。\n>\n\n**EventBus 观察者模式框架 VS 自己实现观察模式**\n\n利用 EventBus 框架实现的观察者模式，跟从零开始编写的观察者模式相比，从大的流程上来说，实现思路大致一样，都需要定义观察者（Observer），并且通过 register() 函数注册Observer，也都需要通过调用某个函数（比如，EventBus 中的 post() 函数）来给 Observer 发送消息（在 EventBus 中消息被称作事件 event）。\n\n但在实现细节方面，它们又有些区别。基于 EventBus，我们不需要定义 Observer 接口，任意类型的对象都可以注册到 EventBus 中，通过 @Subscribe 注解来标明类中哪个函数可以接收被观察者发送的消息。\n\n跟经典的观察者模式的不同之处在于，当我们调用 post() 函数发送消息的时候，并非把消息发送给所有的观察者，而是发送给可匹配的观察者。所谓可匹配指的是，能接收的消息类型是发送消息（post 函数定义中的 event）类型或是其父类。\n\n\n\n## 5. 工作机制\n\n![EventBus-Android-Publish-Subscribe](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211107112804.png)\n\n**发布者(Publisher)**：发布者主动生成事件发布事件给指定订阅者。\n\n```java\nEventBus.getDefault().post(new MessageEvent());\n```\n\n**事件总线(EventBus)**：统筹所有事件的调度工作，如：收集、注册、切换、分发、解注册等操作。\n\n```java\nEventBus.getDefault().register(this);\nEventBus.getDefault().unregister(this);\n```\n\n**订阅者(Subscriber)**：声明订阅方法并通过注释标记，可指定线程模式。\n\n```java\n@Subscribe(threadMode = ThreadMode.MAIN)  \npublic void onMessageEvent(MessageEvent event) {/* Do something */};\n```\n\n## 6. EventBus 优势\n\n- 简化组件之间的通信，同进程内随便发，组件化中需要考虑 Event Object 的存放位置。\n- 解耦事件的发送者和接收者，仅通过 Event Object 进行链接发送者和接受者。\n- 在 UI 组件和后台线程切换中表现良好的性能\n- 避免复杂且容易出错的依赖关系和生命周期问题，提供解注册订阅者。\n- 很快；专为高性能而优化，很小（~60k jar）\n- [在实践中被证明通过应用与1,000,000,000+安装](http://www.appbrain.com/stats/libraries/details/eventbus/greenrobot-eventbus)\n- 具有分发指定线程、设置订阅者优先级等功能。\n\n##  7. EventBus 功能\n\n- **简单而强大：** EventBus 是一个小型库，其 API 非常容易学习。然而，通过解耦组件，您的软件架构可能会受益匪浅：订阅者在使用事件时并不了解发送者。\n- 实战**测试：** EventBus 是最常用的 Android 库之一：数以千计的应用程序使用 EventBus，包括非常流行的应用程序。超过 10 亿次应用安装不言而喻。\n- **高性能：**尤其是在 Android 上，性能很重要。EventBus 进行了大量分析和优化；可能使其成为同类中最快的解决方案。\n- **方便的基于注释的 API** （不牺牲性能）**：**只需将 @Subscribe 注释放在您的订阅者方法中。由于注释的构建时索引，EventBus 不需要在您的应用程序运行时进行注释反射，这在 Android 上非常慢。\n- **Android 主线程传递：**在与 UI 交互时，EventBus 可以在主线程中传递事件，而不管事件是如何发布的。\n- **后台线程传递：**如果您的订阅者执行长时间运行的任务，EventBus 还可以使用后台线程来避免 UI 阻塞。\n- **事件和订阅者继承：**在 EventBus 中，面向对象的范式适用于事件和订阅者类。假设事件类 A 是 B 的超类。发布的 B 类事件也将发布给对 A 感兴趣的订阅者。类似地考虑订阅者类的继承。\n- **零配置：** 您可以立即开始使用代码中任何位置可用的默认 EventBus 实例。\n- **可配置：** 要根据您的要求调整 EventBus，您可以使用构建器模式调整其行为。\n\n## 8. EventBus 应用\n\n- 如果使用 EventBus 的页面比较多，可以在 Acitivity/Fragment  基类里面绑定和解绑，并添加一个默认接收事件。\n- 跨界面修改值\n  - 你有一个主界面，里面有一些信息可能会修改，但触发源不在该界面，是在其他的界面触发了一些事件后，首页的内容需要做修改。\n  - 如果没有EventBus，也有很多的方式可以实现，譬如定义全局静态变量、或者onResume时获取触发源的值修改界面值、或者定义个CallBack接口传出去等。\n  - 譬如微信首页你有未读消息3个时，界面会有3个小红点点，当你点开一个未读消息后，进入了下个界面，那么此时未读消息就是2了，但你并不在首页了，你需要在你打开消息并阅读完毕后通知首页改成2.这就是一种跨界面修改值。\n- Activity/Fragment 与 Fragment 之间通信\n- 注册页面回退逻辑\n  - 在注册页面填写了手机号、个人信息，传头像操作后，注册成功了，进入了主界面。此时我们需要在主界面关闭之前的注册的所有页面，此时就可以使用eventbus来通知前几个注册用的activity来关闭自己。这样的目的就是当注册失败时，用户按返回键还是能回到填写信息页。当注册成功后，按返回键就直接退出程序，不再保留注册填信息页了。\n- 推送/消息功能\n  - 收到推送后需要不同的页面来做处理的。例如：微信PC登录时，手机端的确认登录页面是可以随时随地弹出的，\n- 组件化通讯\n  - 组件之间的交互，例如：测试环境中环境切换组件，切换后需要重新登录并重置环境信息等。\n- EventBus最好的使用方式就是替代某些 BroadcastReceiver 和 Interface；如fragment之间进行通信，用广播和接口都比较麻烦，而用EventBus则比较简单。\n- 以下场景可以考虑不用\n  - Event 会根据传递的参数给所有接收者都传递消息，这就导致如果你想给指定一个类里发布消息就得自己写一个接口类，要不然就会好多执行者都会执行该方法，所以一般能用Intent组件传值时还是用Intent。\n  - EventBus相对于BroadcastReceiver，广播是相对消耗时间、空间最多的一种方式，但是大家都知道，广播是四大组件之一，许多系统级的事件都是通过广播来通知的，比如说网络的变化、电量的变化，短信发送和接收的状态，所以，如果与android系统进行相关的通知，还是要选择本地广播；在BroadcastReceiver的 onReceive方法中，可以获得Context 、intent参数，这两个参数可以调用许多的sdk中的方法，而eventbus获得这两个参数相对比较困难。\n  - EventBus相对于handler，可以实现handler的方式，但是也会面对有许多接收者的问题，所以如果是线程回调的话，我觉得还是用handler比较好。\n\n## 9. EventBus 使用\n\n### 9.1 订阅者索引\n\n使用订阅者索引可以避免在运行时使用反射对订阅者方法进行昂贵的查找。EventBus 注释处理器在编译时查找它们。\n\n#### 符合注解收集的要求\n\n- @Subscribe 方法及其类**必须是 public**。\n- 事件类**必须是 public**。\n- @Subscribe可以**不**被使用**匿名类的内部**。\n- 当 EventBus 不能使用索引时，例如不满足上述要求，它会在运行时降级为通过反射查找订阅者。这确保@Subscribe 方法接收事件，即使它们不是索引的一部分。\n\n#### 配置注解处理器\n\n```groovy\n//java\nandroid {\n    defaultConfig {\n        javaCompileOptions {\n            annotationProcessorOptions {\n                arguments = [ eventBusIndex : 'com.example.myapp.MyEventBusIndex' ]\n            }\n        }\n    }\n}\n \ndependencies {\n    def eventbus_version = '3.2.0'\n    implementation \"org.greenrobot:eventbus:$eventbus_version\"\n    annotationProcessor \"org.greenrobot:eventbus-annotation-processor:$eventbus_version\"\n}\n\n//kotlin \napply plugin: 'kotlin-kapt' // ensure kapt plugin is applied\n\ndependencies {\n    def eventbus_version = '3.2.0'\n    implementation \"org.greenrobot:eventbus:$eventbus_version\"\n    kapt \"org.greenrobot:eventbus-annotation-processor:$eventbus_version\"\n}\n\nkapt {\n    arguments {\n        arg('eventBusIndex', 'com.example.myapp.MyEventBusIndex')\n    }\n}\n```\n\n#### 使用订阅者索引类\n\n在您的*Application*类中，使用*EventBus.builder().addIndex(indexInstance)*将索引类的实例传递给 EventBus。组件中的索引类也可以通过addIndex方法添加到 EventBus 实例中。\n\n```kotlin\n//创建一个新实例并配置索引类\nval eventBus = EventBus.builder().addIndex(MyEventBusIndex()).build()\n//使用单例模式并配置索引类\nEventBus.builder().addIndex(MyEventBusIndex()).installDefaultEventBus()\n// Now the default instance uses the given index. Use it like this:\nval eventBus = EventBus.getDefault()\n```\n\n#### 防止混淆订阅者\n\n```java\n-keepattributes *Annotation*\n-keepclassmembers class * {\n    @org.greenrobot.eventbus.Subscribe <methods>;\n}\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\n \n# And if you use AsyncExecutor:\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\n    <init>(java.lang.Throwable);\n}\n```\n\n### 9.2 配置EventBus\n\nEventBusBuilder 类可以配置 EventBus 的各个方面。例如\n\n使用 EventBus.getDefault() 是一种从应用程序中的任何位置获取共享 EventBus 实例的简单方法。EventBusBuilder 还允许使用installDefaultEventBus ( )方法配置此默认实例。可以在 Application 类中在使用 EventBus 之前配置默认 EventBus 实例。\n\n```kotlin\nclass App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        EventBus.builder()\n            //将此与 BuildConfig.DEBUG 一起使用可让应用程序尽在在 DEBUG 模式下崩溃。默认为false\n            // 这样就不会在开发过程中错过异常（Invoking subscriber failed）\n            .throwSubscriberException(false)\n            //如果发送了没有订阅者的event,是否需要打印提示哪一个 event bean 的log,默认为true\n            //提示信息： No subscribers registered for event class org.greenrobot.eventbusperf.jay.bus.SubEvent\n            .logNoSubscriberMessages(true)\n            .installDefaultEventBus()\n    }\n}\n```\n\n### 9.3 ThreadMode\n\n在 EventBus 中，您可以使用四种 ThreadMode 来指定订阅者方法所在的线程。\n\n- [1 ThreadMode: POSTING](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_POSTING) ：发布者和订阅者在同一个线程。\n  - 这是默认设置。事件传递是同步完成的，需要注意避免阻塞主线程。\n  - 避免了线程切换意味着开销较小。\n- [2 ThreadMode: MAIN](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN) ：订阅者将在 Android 的主线程（UI 线程）中调用。\n  - 事件传递是同步完成的，需要注意避免阻塞主线程。\n- [3 ThreadMode: MAIN_ORDERED](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN_ORDERED) ：订阅者将在 Android 的主线程中被调用，该事件总是通过Handler排队等待稍后传递给订阅者。\n  - 为事件处理提供了更严格和更一致的顺序。\n  - 如果前一个也是main_ordered 需要等前一个执行完成后才执行。\n  - 事件传递是异步完成的。\n- [4 ThreadMode: BACKGROUND](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_BACKGROUND) ：如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。\n  - 事件传递是异步完成的。\n- [5 ThreadMode: ASYNC](https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_ASYNC) ：无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。\n  - EventBus 使用线程池来有效地重用线程。\n  - 事件传递是异步完成的。\n  - 如果事件处理程序方法的执行可能需要一些时间，则应使用此模式，例如用于网络访问\n\n```kotlin\n //在主线程发消息\n 发布者所在线程:Thread-2, 订阅者所在线程: Thread-2, 订阅者线程模式: BACKGROUND \n 发布者所在线程:Thread-2, 订阅者所在线程: pool-1-thread-1, 订阅者线程模式: ASYNC \n 发布者所在线程:Thread-2, 订阅者所在线程: Thread-2, 订阅者线程模式: POSTING \n 发布者所在线程:Thread-2, 订阅者所在线程: main, 订阅者线程模式: MAIN \n 发布者所在线程:Thread-2, 订阅者所在线程: main, 订阅者线程模式: MAIN_ORDERED \n //在子线程发消息\n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN \n 发布者所在线程:main, 订阅者所在线程: pool-1-thread-2, 订阅者线程模式: BACKGROUND \n 发布者所在线程:main, 订阅者所在线程: pool-1-thread-1, 订阅者线程模式: ASYNC \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN_ORDERED \n```\n\n### 9.4 订阅者优先级\n\n订阅者优先级影响事件传递的顺序。 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。注意：优先级不影响具有不同ThreadMode的订阅者之间的传递顺序！\n\n```kotlin\n@Subscribe(threadMode = ThreadMode.POSTING, priority = 2)\nfun onMessageEvent_POSTING1(event: MessageEvent) {\n    showMsg(event, \"POSTING1\")\n}\n\n@Subscribe(threadMode = ThreadMode.POSTING, priority = 4)\nfun onMessageEvent_POSTING2(event: MessageEvent) {\n    showMsg(event, \"POSTING2\")\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, priority = 1)\nfun onMessageEvent_MAIN1(event: MessageEvent) {\n    showMsg(event, \"MAIN1\")\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, priority = 3)\nfun onMessageEvent_MAIN2(event: MessageEvent) {\n    showMsg(event, \"MAIN2\")\n}\n\n //打印结果\n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING2 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN2 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING1 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN1 \n```\n\n**取消事件传递**\n\n您可以通过从订阅者的事件处理方法调用cancelEventDelivery ( Object event ) 来取消事件传递过程。任何进一步的事件传递都将被取消，后续订阅者将不会收到该事件。\n\n```java\n// Prevent delivery to other subscribers*\nEventBus.getDefault().cancelEventDelivery(event) ;\n```\n\n事件通常由更高优先级的订阅者取消。取消仅限于在发布线程 ( ThreadMode . PostThread ) 中运行的事件处理方法。\n\n### 9.5 粘性事件 \n\n普通事件都是需要先注册(register)，再post才能接受到事件；如果你使用 postSticky 发送事件，那么可以不需要先注册，也能接受到事件，也就是一个延迟注册的过程。 \n\n普通的事件我们通过post发送给EventBus，发送过后之后当前已经订阅过的方法可以收到。但是如果有些事件需要所有订阅了该事件的方法都能执行呢？例如一个Activity，要求它管理的所有Fragment都能执行某一个事件，但是当前我只初始化了3个Fragment，如果这时候通过post发送了事件，那么当前的3个Fragment当然能收到。但是这个时候又初始化了2个Fragment，那么我必须重新发送事件，这两个Fragment才能执行到订阅方法。 \n\n粘性事件就是为了解决这个问题，通过 postSticky 发送粘性事件，这个事件不会只被消费一次就消失，而是一直存在系统中，直到被 removeStickyEvent 删除掉。那么只要订阅了该粘性事件的所有方法，只要被register 的时候就会被检测到并且执行。订阅的方法需要添加 sticky = true 属性。\n\n```kotlin\nEventBus.getDefault().postSticky(MessageEvent(Thread.currentThread().name))\n\n//消费粘性事件方式一：\nval stickyEvent = EventBus.getDefault().getStickyEvent(MessageEvent::class.java)\n// 最好检查之前是否实际发布过事件\nif (stickyEvent != null) {\n    // 消费掉粘性事件\n    EventBus.getDefault().removeStickyEvent(stickyEvent)\n}\n//消费粘性事件方式二：\nval stickyEvent2 = EventBus.getDefault().removeStickyEvent(MessageEvent::class.java)\n// 最好检查之前是否实际发布过事件\nif (stickyEvent2 != null) {\n    //已经消费了\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, sticky = true)\nfun onMessageEvent_sticky(event: MessageEvent) {\n    showMsg(event, \"MAIN\")\n    //消费粘性事件方式三：\n    EventBus.getDefault().removeStickyEvent(event)\n}\n```\n\n### 9.6 异步执行器\n\nAsyncExecutor 就像一个线程池，但具有失败（异常）处理功能。失败会引发异常，AsyncExecutor 会将这些异常包装在一个事件中，该事件会自动发布。\n\n *AsyncExecutor 是一个非核心实用程序类。它可能会为您节省一些在后台线程中进行错误处理的代码，但它不是核心 EventBus 类。*\n\n调用 AsyncExecutor.create() 来创建一个实例并将其保存在应用程序范围内。然后要执行某些操作，请实现 RunnableEx接口并将其传递给AsyncExecutor的execute方法。与Runnable不同，RunnableEx可能抛出异常。\n\n```kotlin\n//AsyncExecutor类似于线程池，但具有失败(异常)处理。失败是抛出异常，AsyncExecutor将把这些异常封装在一个事件中，该事件将自动发布。\nAsyncExecutor.create().execute {\n    EventBus.getDefault().postSticky(SubEvent<String>())\n}\n\n//线程池中发出的时间\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun handleLoginEvent(event: SubEvent<String>) {\n    // do something\n}\n\n//线程池中任务异常时发出的时间\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun handleFailureEvent(event: ThrowableFailureEvent) {\n    // do something\n}\n```\n\n\n\n## 10 EventBus 原理\n\n了解框架之前我们先定义几个核心角色用于描述整个流程\n\n- 发布者类：调用 post/postSticky 发布事件的类\n\n- 发布者方法：调用 post/postSticky 发布事件的方法\n\n- 事件类： post/postSticky 方法参数类以及订阅者方法参数类型\n- 订阅者类：订阅者方法所在的类\n- 订阅者方法：通过注解标注的订阅者方法\n\n![image-20211111000620374](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211111000627.png)\n\n\n\n### 10.1 编译时部分-通过 APT 收集订阅者注解并生成索引类\n\n注解类 Subscribe 用于标注订阅者方法\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\npublic @interface Subscribe {\n    //用来指定指定订阅者方法所在的线程。\n    ThreadMode threadMode() default ThreadMode.POSTING;\n    //如果为 true，则将最近的粘性事件（通过EventBus.postSticky(Object) ）传递给该订阅者。\n    boolean sticky() default false;\n    //订阅者优先级影响事件传递的顺序。\n    // 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。\n    // 注意：优先级不会影响具有不同ThreadMode的订阅者之间的传递顺序！\n    int priority() default 0;\n}\n```\n\n收集那些代码元素：订阅者类&订阅者方法\n\n```java\nclass BusTestActivity : Activity() {\n  \t//定义一个订阅者方法\n    @Subscribe(sticky = true, threadMode = ThreadMode.POSTING, priority = 2)\n    fun onMessageEvent_POSTING1(event: MessageEvent) {\n        showMsg(event, \"POSTING1\")\n    }\n}\n```\n\n注解处理器通过继承 Java AbstractProcessor 抽象类并配置注解和选项参数实现\n\n```java\n@SupportedAnnotationTypes(\"org.greenrobot.eventbus.Subscribe\")\n@SupportedOptions(value = {\"eventBusIndex\", \"verbose\"})\n@IncrementalAnnotationProcessor(AGGREGATING)\npublic class EventBusAnnotationProcessor extends AbstractProcessor {\n  ...\n}\n```\n\n- 通过处理器参数获取配置的订阅者索引全类名，没有配置该参数但是却依赖了注解处理组件会抛异常\n\n```java\n//设置apt参数\njavaCompileOptions {\n    annotationProcessorOptions {\n        arguments = [\n                eventBusIndex: 'org.greenrobot.eventbusperf.MyEventBusIndex',\n                verbose: 'true',\n        ]\n    }\n}\n//获取apt参数\nString index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);\nif (index == null) {\n    messager.printMessage(Diagnostic.Kind.ERROR, \"No option \" + OPTION_EVENT_BUS_INDEX +\n            \" passed to annotation processor\");\n    return false;\n}\n\n//没有配置的错误信息\n> Task :EventBusPerformance:compileDebugJavaWithJavac FAILED\n错误: No option eventBusIndex passed to annotation processor\n```\n\n- 收集注解流程\n\n```java\nprivate void collectSubscribers(Set<? extends TypeElement> annotations, RoundEnvironment env, Messager messager{\n    for (TypeElement annotation : annotations) {\n        //获取目标注解标注的所有元素，这里是所有的订阅者方法\n        Set<? extends Element> elements = env.getElementsAnnotatedWith(annotation);\n        for (Element element : elements) {\n            //ExecutableElement 可执行元素指的是方法类型\n            if (element instanceof ExecutableElement) {\n                ExecutableElement method = (ExecutableElement) element;\n                //检查方法:正好只有一个参数的非静态的公开的方法\n                if (checkHasNoErrors(method, messager)) {\n                    //获取方法所在的类元素\n                    TypeElement classElement = (TypeElement) method.getEnclosingElement();\n                    //存入容器\n                    methodsByClass.putElement(classElement, method);\n                }\n            } else {\n                messager.printMessage(Diagnostic.Kind.ERROR, \"@Subscribe is only valid for methods\", element);\n            }\n        }\n    }\n}\n```\n\n- 校验某个类对索引类包是否可访问\n\n```java\nprivate boolean isVisible(String myPackage, TypeElement typeElement) {\n    //类的修饰符\n    Set<Modifier> modifiers = typeElement.getModifiers();\n    boolean visible;\n    if (modifiers.contains(Modifier.PUBLIC)) {\n        visible = true;\n    } else if (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) {\n        visible = false;\n    } else {\n        //类所在的包\n        String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();\n        //处理器参数没有指定索引类\n        if (myPackage == null) {\n            //todo 没有包名什么情况\n            visible = subscriberPackage.length() == 0;\n        } else {\n            //索引类和观察者包名一样\n            visible = myPackage.equals(subscriberPackage);\n        }\n    }\n    return visible;\n}\n```\n\n- 校验收集到的注解元素信息是否符合预期\n\n```java\nprivate void checkForSubscribersToSkip(Messager messager, String myPackage) {\n    //遍历所有订阅者方法所在的类\n    for (TypeElement skipCandidate : methodsByClass.keySet()) {\n        //方法所在的类，\n        TypeElement subscriberClass = skipCandidate; //循环获取父类\n        while (subscriberClass != null) {//所有观察者\n            //校验某个类类对索引类包是否可访问\n            if (!isVisible(myPackage, subscriberClass)) {\n                //索引类访问不到观察者类，跳过\n                boolean added = classesToSkip.add(skipCandidate);\n                if (added) {//存在不可访问观察者\n                    String msg;\n                    //由于类不是公开的，所以回退到反射\n                    if (subscriberClass.equals(skipCandidate)) { //没有继承关系存在\n                        msg = \"Falling back to reflection because class is not public\";\n                    } else { //父类\n                        msg = \"Falling back to reflection because \" + skipCandidate +\n                                \" has a non-public super class\";\n                    }\n                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);\n                }\n                break;\n            }\n            //观察者类中的所有观察方法\n            List<ExecutableElement> methods = methodsByClass.get(subscriberClass);\n            if (methods != null) {\n                for (ExecutableElement method : methods) {\n                    String skipReason = null;\n                    //方法第一个参数\n                    VariableElement param = method.getParameters().get(0);\n                    //参数类型\n                    TypeMirror typeMirror = getParamTypeMirror(param, messager);\n                    //不是类类型报错\n                    if (!(typeMirror instanceof DeclaredType) || !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {\n                        skipReason = \"event type cannot be processed\";\n                    }\n                    //是类类型但是对索引类不可见\n                    if (skipReason == null) {\n                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();\n                        //参数类对索引类不可见\n                        if (!isVisible(myPackage, eventTypeElement)) {\n                            skipReason = \"event type is not public\";\n                        }\n                    }\n                    //存在观察者方法但是不可见先存下来，用于过滤\n                    if (skipReason != null) {\n                        boolean added = classesToSkip.add(skipCandidate);\n                        if (added) {\n                            String msg = \"Falling back to reflection because \" + skipReason;\n                            if (!subscriberClass.equals(skipCandidate)) {\n                                msg += \" (found in super class for \" + skipCandidate + \")\";\n                            }\n                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);\n                        }\n                        break;\n                    }\n                }\n            }\n            //获取观察者类的父类，继续循环\n            subscriberClass = getSuperclass(subscriberClass);\n        }\n    }\n}\n```\n\n- 将收集到的索引信息写入索引类中的 map 容器中\n\n```java\nprivate void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException {\n    for (TypeElement subscriberTypeElement : methodsByClass.keySet()) {\n        //只生成可访问的\n        if (classesToSkip.contains(subscriberTypeElement)) {\n            continue;\n        }\n        String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n        if (isVisible(myPackage, subscriberTypeElement)) {\n            writeLine(writer, 2,\n                    \"putIndex(new SimpleSubscriberInfo(\" + subscriberClass + \".class,\",\n                    \"true,\", \"new SubscriberMethodInfo[] {\");\n            List<ExecutableElement> methods = methodsByClass.get(subscriberTypeElement);\n            writeCreateSubscriberMethods(writer, methods, \"new SubscriberMethodInfo\", myPackage);\n            writer.write(\"        }));\\n\\n\");\n        } else {\n            writer.write(\"        // Subscriber not visible to index: \" + subscriberClass + \"\\n\");\n        }\n    }\n}\n```\n\n- 生成的 MyEventBusIndex 文件\n\n```java\n//通过注释处理创建的生成索引类的接口。\npublic interface SubscriberInfo {\n    Class<?> getSubscriberClass();\n    SubscriberMethod[] getSubscriberMethods();\n    SubscriberInfo getSuperSubscriberInfo();\n    boolean shouldCheckSuperclass();\n}\n\npublic class MyEventBusIndex implements SubscriberInfoIndex {\n    private static final Map<Class<?>, SubscriberInfo> SUBSCRIBER_INDEX;\n\n    static {\n        SUBSCRIBER_INDEX = new HashMap<Class<?>, SubscriberInfo>();\n        putIndex(new SimpleSubscriberInfo(org.greenrobot.eventbusperf.testsubject.PerfTestEventBus.SubscriberClassEventBusAsync.class,true, new SubscriberMethodInfo[] {\n            new SubscriberMethodInfo(\"onEventAsync\", TestEvent.class, ThreadMode.ASYNC),\n        }));\n      //其它索引信息......\n      }\n\nprivate static void putIndex(SubscriberInfo info) {\n    SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\n}\n  \n@Override\npublic SubscriberInfo getSubscriberInfo(Class<?> subscriberClass) {\n    SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\n    if (info != null) {\n        return info;\n    } else {\n        return null;\n    }\n}\n      \n```\n\n#### 编译时APT流程总结\n\nEventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。\n\n通过APT方式收集订阅者的大体流程如下：\n\n- 在编码阶段添加订阅者方法时我们需要通过 **@Subscribe** 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：**enum ThreadMode、boolean sticky，int priority** 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。\n- EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。\n- 注解处理器注解处理流程主要分为：**收集订阅者、校验订阅者、生成索引类**三个过程。\n  - 收集订阅者：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 **正好只有一个参数的非静态的公开的方法** 的规则。然后将找到的订阅者方法和订阅者类存入 **ListMap<TypeElement, ExecutableElement> methodsByClass **  容器中。该容器的数据结构是：`HashMap<K, List<V>>()` key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。\n  - 校验订阅者（包括订阅者类/订阅者类的父类和订阅者方法）：\n    - 校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足**public/default+索引类和订阅者类的包名一样** 的规则，不满足的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n    - 校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 **Set<TypeElement> classesToSkip** 容器中标记。\n      - 订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。\n      - 订阅者方法的参数类型是类类型但是对索引类不可见。\n  - 生成索引类：遍历最终收集到的 **methodsByClass** 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。\n\n### 10.2 运行时部分-初始化、注册/查找订阅者等\n\n#### 10.2.1 初始化EventBus\n\n构建 EventBus 实例的三种方式：\n- EventBus.getDefault() + 默认Builder\n\n- EventBus.builder().installDefaultEventBus() + 自定义配置\n\n- EventBus.builder().build() + 自定义配置\n\n方式一：DCL单例方式创建进程唯一实例\n\n```java\nstatic volatile EventBus defaultInstance;\n\n//使用进程范围的 EventBus 实例的应用程序的便捷单例。\npublic static EventBus getDefault() {\n \t //通过局部变量中转可节省性能\n    EventBus instance = defaultInstance;\n    if (instance == null) {\n        synchronized (EventBus.class) {\n            instance = EventBus.defaultInstance;\n            if (instance == null) {\n                instance = EventBus.defaultInstance = new EventBus();\n            }\n        }\n    }\n    return instance;\n}\n```\n\n其它两种方式\n\n```java\n//EventBus.builder().build() + 自定义配置\nEventBus.builder()\n    .throwSubscriberException(false)\n    .logNoSubscriberMessages(true)\n    //添加索引类，减少运行时反射\n    .addIndex(MyEventBusIndex())\n    .build()\n  \npublic EventBus build() {\n    return new EventBus(this);\n}\n\n//EventBus.builder().installDefaultEventBus() + 自定义配置\nEventBus.builder()\n    .throwSubscriberException(false)\n    .logNoSubscriberMessages(true)\n    //添加索引类，减少运行时反射\n    .addIndex(MyEventBusIndex())\n    .installDefaultEventBus()\n  \npublic EventBus installDefaultEventBus() {\n    synchronized (EventBus.class) {\n        if (EventBus.defaultInstance != null) {\n            throw new EventBusException(\"Default instance already exists.\" +\n                    \" It may be only set once before it's used the first time to ensure consistent behavior.\");\n        }\n        EventBus.defaultInstance = build();\n        return EventBus.defaultInstance;\n    }\n}\n```\n\n**构建EventBus时的默认配置**\n\n```java\nEventBus(EventBusBuilder builder) {\n    logger = builder.getLogger();\n    //通过事件类找所有该事件的订阅者，\n    subscriptionsByEventType = new HashMap<>();\n    //通过订阅者类找所有Event\n    typesBySubscriber = new HashMap<>();\n    //通过粘性事件类查找所有粘性事件对象\n    stickyEvents = new ConcurrentHashMap<>();\n    //构建 AndroidHandlerMainThreadSupport\n    mainThreadSupport = builder.getMainThreadSupport();\n    //构建 HandlerPoster\n    mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;\n    //在后台发布事件\n    backgroundPoster = new BackgroundPoster(this);\n    //在后台发布事件\n    asyncPoster = new AsyncPoster(this);\n    indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;\n    //通过反射或APT查找订阅者\n    subscriberMethodFinder = new SubscriberMethodFinder(\n            //添加由 EventBus 的注释预处理器生成的索引。默认空集合\n            builder.subscriberInfoIndexes,\n            //启用严格的方法验证（默认值：false）\n            builder.strictMethodVerification,\n            //即使有生成的索引也强制使用反射（默认值：false）\n            builder.ignoreGeneratedIndex);\n    //无法分发事件时是否打印错误信息\n    logSubscriberExceptions = builder.logSubscriberExceptions;\n    //没有订阅者注册事件是否打印错误信息\n    logNoSubscriberMessages = builder.logNoSubscriberMessages;\n    //在调用订阅者时如果发生异常是否 发送一个 SubscriberExceptionEvent 通知订阅者\n    sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;\n    //没有订阅者注册事件是否是否通知订阅者类的父类\n    sendNoSubscriberEvent = builder.sendNoSubscriberEvent;\n    //在调用订阅者时如果发生异常是否抛出 RuntimeException\n    throwSubscriberException = builder.throwSubscriberException;\n    //是否通知订阅者类的父类中的订阅者方法\n    eventInheritance = builder.eventInheritance;\n    //订阅者执行在工作线程时用到的线程池：Executors.newCachedThreadPool()\n    executorService = builder.executorService;\n}\n```\n\n##### 初始化EventBus 总结\n\n总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。\n\n单例模式常用于构建全局唯一类并提供全局唯一访问点。\n\n构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。\n\nEventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。\n\n需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。\n\n你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。\n\n可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。\n\n#### 10.2.2 注册订阅者：查找订阅者方法\n\n```java\npublic override fun onStart() {\n    super.onStart()\n    EventBus.getDefault().register(this)\n}\n//注册给定的订阅者以接收事件。 订阅者一旦对接收事件不再感兴趣，须调用 unregister(Object) 。\npublic void register(Object subscriber) {\n    Class<?> subscriberClass = subscriber.getClass();\n    //通过订阅者类找出该类中所有的订阅者方法\n    List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);//01\n    synchronized (this) {\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            subscribe(subscriber, subscriberMethod);//02\n        }\n    }\n}\n```\n\n01查找订阅者方法流程：通过APT或反射方式查找订阅者方法并内存缓存\n\n```java\n//ConcurrentHashMap 内存缓存保证线程安全\nprivate static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();\n\n//通过订阅者类查找订阅者方法\nList<SubscriberMethod> findSubscriberMethods(Class<?> subscriberClass) {\n    //先从内存缓存尝试取，节省查找开销\n    List<SubscriberMethod> subscriberMethods = METHOD_CACHE.get(subscriberClass);\n    if (subscriberMethods != null) {\n        return subscriberMethods;\n    }\n    if (ignoreGeneratedIndex) {\n        //运行时反射查找\n        subscriberMethods = findUsingReflection(subscriberClass);\n    } else {\n        //从APT中收集的备选中查找\n        subscriberMethods = findUsingInfo(subscriberClass);\n    }\n    if (subscriberMethods.isEmpty()) {\n        //订阅者类中至少有一个订阅者方法，否则运行时报错\n        throw new EventBusException(\"Subscriber \" + subscriberClass\n                + \" and its super classes have no public methods with the @Subscribe annotation\");\n    } else {\n        //找到后缓存到内存\n        METHOD_CACHE.put(subscriberClass, subscriberMethods);\n        return subscriberMethods;\n    }\n}\n```\n\n**运行时反射查找** \n\n```java\nprivate List<SubscriberMethod> findUsingReflection(Class<?> subscriberClass) {\n    //准备一个 FindState 实例，如果对象池中没有就new,一个FindState对应一个订阅者类，用于表示查找状态\n    FindState findState = prepareFindState();\n    //存入订阅者 class\n    findState.initForSubscriber(subscriberClass);\n    //遍历subscriberClass的超类体系，调用findUsingReflectionInSingleClass查找当前clazz的所有订阅函数\n    while (findState.clazz != null) {\n        //在订阅者类中通过反射的方式查找订阅者方法\n        findUsingReflectionInSingleClass(findState);\n        findState.moveToSuperclass();//获取父类继续查找\n    }\n    //循环结束 findState.subscriberMethods 中保存了这个类中的所有订阅者方法\n    return getMethodsAndRelease(findState);\n}\n\n\n```\n\n在订阅者类中通过反射的方式查找订阅者方法\n\n```java\nprivate void findUsingReflectionInSingleClass(FindState findState) {\n    Method[] methods;\n    //getDeclaredMethods 在某些设备上也会出现 NoClassDefFoundError\n    try {\n        //getDeclaredMethods 要比 getMethods 快，尤其是当订阅者是像 Activities 这样的胖类时\n        methods = findState.clazz.getDeclaredMethods();\n    } catch (Throwable th) {\n        //getMethods 在某些设备上也会出现 NoClassDefFoundError，可能会在 getMethods 周围添加 catch\n        try {\n            methods = findState.clazz.getMethods();\n        } catch (LinkageError error) { // super class of NoClassDefFoundError to be a bit more broad...\n            throw new EventBusException(msg, error);\n        }\n        //clazz.getDeclaredMethods()只返回当前clazz中声明的函数，\n        // 而clazz.getMethods()将返回clazz的所有函数(包括继承自父类和接口的函数)，\n        // 因此，此时skipSuperClasses被置为true，阻止递归查找父类。\n        findState.skipSuperClasses = true;\n    }\n\n    //遍历所有方法\n    for (Method method : methods) {\n        int modifiers = method.getModifiers(); //修饰符\n        //MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n        //校验订阅者方法：must be public, non-static, and non-abstract\"\n        if ((modifiers & Modifier.PUBLIC) != 0 && (modifiers & MODIFIERS_IGNORE) == 0) {\n            Class<?>[] parameterTypes = method.getParameterTypes();//参数类型\n            if (parameterTypes.length == 1) {//正好一个参数\n                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);\n                if (subscribeAnnotation != null) {\n                    // 恰好一个参数的非静态的公开类并且有Subscribe注解标记\n                    Class<?> eventType = parameterTypes[0];// 参数为事件类\n                    //检查重名方法（本类或父类之间可能重复）用于控制findState.subscriberMethods是否添加找到的method\n                    //如果不校验，如果子类重写订阅者方法会导致执行两次子类的订阅者方法\n                    if (findState.checkAdd(method, eventType)) {\n                        ThreadMode threadMode = subscribeAnnotation.threadMode();\n                        //收集订阅者方法，封装 SubscriberMethod\n                        findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,\n                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));\n                    }\n                }\n            } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n                String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n                throw new EventBusException(\"@Subscribe method \" + methodName +\n                        \"must have exactly 1 parameter but has \" + parameterTypes.length);\n            }\n        } else if (strictMethodVerification && method.isAnnotationPresent(Subscribe.class)) {\n            String methodName = method.getDeclaringClass().getName() + \".\" + method.getName();\n            throw new EventBusException(methodName +\n                    \" is a illegal @Subscribe method: must be public, non-static, and non-abstract\");\n        }\n    }\n}\n```\n\n为啥不直接用Class.getMethods直接获取该类的全部方法呢？\n\n如果这个类比较庞大，用getMethods查找所有的方法就显得很笨重了，\n如果使用的是getDeclaredMethods（该类声明的方法不包括从父类那里继承来的public方法），速度就会快一些，因为找的方法变少了，没有什么 equals,toString,hashCode等Object类的方法。\n\nClass#getMethods()，不检查方法签名（对于诸如不存在的参数类型之类的东西）。这已更改为 use Class#getDeclaredMethods()，它会检查并在出现问题时抛出异常。\n\n\n\nFindState 对象和对象池\n\n```java\nprivate static final int POOL_SIZE = 4;\nprivate static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];\n\nprivate List<SubscriberMethod> getMethodsAndRelease(FindState findState) {\n    List<SubscriberMethod> subscriberMethods = new ArrayList<>(findState.subscriberMethods);\n    findState.recycle(); //findState 回收数据\n    synchronized (FIND_STATE_POOL) {\n        for (int i = 0; i < POOL_SIZE; i++) {\n            if (FIND_STATE_POOL[i] == null) {\n                //将当前用过的 findState 缓存回去，下次注册时不用 new\n                FIND_STATE_POOL[i] = findState;\n                break;\n            }\n        }\n    }\n    return subscriberMethods;\n}\n\n//先从对象池中随便找一个，没有才创建\nprivate FindState prepareFindState() {\n    //用的时候隔离开，用完了放回去。\n    synchronized (FIND_STATE_POOL) { //FindState[] FIND_STATE_POOL\n        for (int i = 0; i < POOL_SIZE; i++) { //POOL_SIZE = 4\n            FindState state = FIND_STATE_POOL[i];\n            if (state != null) {\n                FIND_STATE_POOL[i] = null; //在原来的位置用null占位\n                return state; // 遍历FindState对象池，只要找到一个空对象就返回，\n            }\n        }\n    }\n    return new FindState(); \n}\n\nstatic class FindState {\n    final List<SubscriberMethod> subscriberMethods = new ArrayList<>();\n    final Map<Class, Object> anyMethodByEventType = new HashMap<>();\n    final Map<String, Class> subscriberClassByMethodKey = new HashMap<>();\n    final StringBuilder methodKeyBuilder = new StringBuilder(128);\n    Class<?> subscriberClass;\n    Class<?> clazz;\n    boolean skipSuperClasses;\n    SubscriberInfo subscriberInfo;\n\n    void initForSubscriber(Class<?> subscriberClass) {\n        this.subscriberClass = clazz = subscriberClass;\n        skipSuperClasses = false;\n        subscriberInfo = null;\n    }\n\n    void recycle() {\n        subscriberMethods.clear();\n        anyMethodByEventType.clear();\n        subscriberClassByMethodKey.clear();\n        methodKeyBuilder.setLength(0);\n        subscriberClass = null;\n        clazz = null;\n        skipSuperClasses = false;\n        subscriberInfo = null;\n    }\n\n    // 检查是否已经添加过这个订阅者方法\n    boolean checkAdd(Method method, Class<?> eventType) {\n        //2 级检查：仅具有事件类型的第一级（快速），在需要时具有完整签名的第二级。\n        // 通常订阅者没有侦听相同事件类型的方法。\n        //第一层判断有无method监听此eventType,如果没有则可直接把找到的method加到subscriberMethods中。\n        //第二层检查的是从MethodSignature（方法签名）判断能否把找到的method加进去。是为了防止在找父类时覆盖了子类的方法，因为此方法是子类是重写，方法名参数名完全一样（方法签名）；另一个原因是可能是当一个类有多个方法监听同一个event(尽管一般不会这样做)，也能将这些方法加进去。\n        Object existing = anyMethodByEventType.put(eventType, method);\n        if (existing == null) { //没有添加过，\n            //anyMethodByEventType存储<eventType, method>映射关系，\n            // 若existing为空，则表示eventType第一次出现。\n            // 一般情况下，一个对象只会有一个订阅函数处理特定eventType。\n            return true;\n        } else {//一个类有多个方法监听同一个事件类型\n            if (existing instanceof Method) {\n                //处理一个对象有多个订阅函数处理eventType的情况，\n                // 此时，anyMethodByEventType中eventType被映射到一个非Method对象(即this)。\n                if (!checkAddWithMethodSignature((Method) existing, eventType)) {\n                    // Paranoia check\n                    throw new IllegalStateException();\n                }\n                // Put any non-Method object to \"consume\" the existing Method\n                //将任何非 Method 对象“使用”现有的 Method\n                anyMethodByEventType.put(eventType, this);\n            }\n            return checkAddWithMethodSignature(method, eventType);\n        }\n    }\n\n    //由于存在多个订阅函数处理eventType，此时，单纯使用eventType作为key已经无法满足要求了，\n    // 因此，使用method.getName() + \">\" + eventType.getName()作为methodKey，\n    // 并使用subscriberClassByMethodKey存储<methodKey, methodClass>的映射关系。\n    private boolean checkAddWithMethodSignature(Method method, Class<?> eventType) {\n        methodKeyBuilder.setLength(0);\n        methodKeyBuilder.append(method.getName());\n        methodKeyBuilder.append('>').append(eventType.getName());\n        //onEvent>TestEvent\n        String methodKey = methodKeyBuilder.toString();\n        //getDeclaringClass: 返回表示类或接口的 Class 对象，该类或接口声明了由此对象表示的可执行文件。\n        Class<?> methodClass = method.getDeclaringClass();\n        //map[\"onEvent>TestEvent\"]=\n        //如果methodClassOld或者methodClass是methodClassOld的子类，\n        // 则将<methodKey, methodClass>放入，否则不放入。\n        // 满足函数名相同、参数类型相同且被@Subscribe修饰的函数，\n        // 在一个类中不可能存在两个；考虑类继承体系，若这样的两个函数分别来自父类和子类，\n        // 则最终被加入的是子类的函数。\n        Class<?> methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);\n        //确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。\n        if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {\n            // Only add if not already found in a sub class\n            //仅在子类中未找到时才添加\n            return true;\n        } else {\n            // Revert the put, old class is further down the class hierarchy\n            //还原放置，旧类在类层次结构中更靠后\n            subscriberClassByMethodKey.put(methodKey, methodClassOld);\n            return false;\n        }\n    }\n\n    void moveToSuperclass() {\n        if (skipSuperClasses) { //反射方法时是通过getMethod 方式，已经包含父类方法了\n            clazz = null;\n        } else {\n            clazz = clazz.getSuperclass();\n            String clazzName = clazz.getName();\n            // Skip system classes, this degrades performance.\n            // Also we might avoid some ClassNotFoundException (see FAQ for background).\n            if (clazzName.startsWith(\"java.\") || clazzName.startsWith(\"javax.\") ||\n                    clazzName.startsWith(\"android.\") || clazzName.startsWith(\"androidx.\")) {\n                clazz = null;\n            }\n        }\n    }\n}\n```\n\n**通过APT中收集数据中查找**\n\n```java\nprivate List<SubscriberMethod> findUsingInfo(Class<?> subscriberClass) {\n    FindState findState = prepareFindState();\n    findState.initForSubscriber(subscriberClass);\n    while (findState.clazz != null) {\n        //通过订阅者类从索引类中查找订阅者方法信息:subscriberInfo\n        findState.subscriberInfo = getSubscriberInfo(findState);\n        if (findState.subscriberInfo != null) {\n            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n            for (SubscriberMethod subscriberMethod : array) {\n                // 检查重名方法（本类或父类之间都可能重复\n                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                    findState.subscriberMethods.add(subscriberMethod);\n                }\n            }\n        } else {\n            //apt 没有正常收集该类，降级为反射方式查找\n            findUsingReflectionInSingleClass(findState);\n        }\n        findState.moveToSuperclass();\n    }\n    return getMethodsAndRelease(findState);\n}\n\nprivate SubscriberInfo getSubscriberInfo(FindState findState) {\n\t\t//找完子类找父类\n    if (findState.subscriberInfo != null && findState.subscriberInfo.getSuperSubscriberInfo() != null) {\n        SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();\n        if (findState.clazz == superclassInfo.getSubscriberClass()) {\n            return superclassInfo;\n        }\n    }\n\n    //apt 收集的索引类\n    if (subscriberInfoIndexes != null) {\n        //通过订阅者类从索引类中查找订阅者方法信息\n        for (SubscriberInfoIndex index : subscriberInfoIndexes) {\n            SubscriberInfo info = index.getSubscriberInfo(findState.clazz);\n            if (info != null) {\n                return info;\n            }\n        }\n    }\n    return null;\n}\n```\n\n**查找流程小结**\n\n注册订阅者分为查找和订阅两个过程\n\n查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。\n\n还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。\n\n亮点整理：\n\n- METHOD_CACHE 缓存了查找过的进程内所有订阅者的键值对(订阅者类，类中的订阅者方法)信息，使用ConcurrentHashMap即保证的查找效率也避免了线程安全问题。\n\n```java\nprivate static final Map<Class<?>, List<SubscriberMethod>> METHOD_CACHE = new ConcurrentHashMap<>();\n```\n\n- FIND_STATE_POOL 是 FindState 对象池的一维静态数组，FindState 对查找的状态值做了一些封装以及对订阅者方法的检查逻辑。\n  - 为什么要使用FindState呢？首先是面向对象封装的采用\n  - 在JVM系统中频繁地创建对象，是非常消耗资源的，在jvm垃圾回收时候，有可能会出现内存抖动的问题。使用对象池数组就有效的避免了内存抖动的问题。\n  - 对 FIND_STATE_POOL  的操作需要考虑线程同步问题，这里使用了`synchronized`关键字来保证线程安全。\n\n```java\nprivate static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];\n```\n\n\n\n**订阅流程**\n\n查找到当前注册的订阅者类中的所有订阅者方法后，下一步就是为每一个订阅者方法执行订阅流程了。\n\n```java\npublic void register(Object subscriber) {\n    Class<?> subscriberClass = subscriber.getClass();\n    // 01查找订阅者方法流程\n    // 通过订阅者类找出该类中所有的订阅者方法\n    List<SubscriberMethod> subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n    synchronized (this) {\n        //遍历该订阅者类中所有订阅者方法，执行订阅操作\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            // 02订阅流程\n            // 收集订阅者，事件类，分发粘性事件等\n            subscribe(subscriber, subscriberMethod);\n        }\n    }\n}\n```\n\n订阅流程大题分为三步\n\n- 通过事件类找所有已经订阅过该事件的订阅者们，目的是为了进行优先级排序,全局缓存已注册订阅者等\n- 通过订阅者类找所有已经注册过的 Event 们， 用于判断是否注册、解注册等\n- 当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发\n\n```java\n\nprivate void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n    //事件类\n    Class<?> eventType = subscriberMethod.eventType;\n    //封装订阅者\n    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n    //Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\n    //通过事件类找所有该事件的订阅者，\n    CopyOnWriteArrayList<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    //还没缓存该事件就存且只能存一次\n    if (subscriptions == null) {\n        subscriptions = new CopyOnWriteArrayList<>();\n        subscriptionsByEventType.put(eventType, subscriptions);\n    } else {\n        //不能有重复订阅者\n        if (subscriptions.contains(newSubscription)) {\n            throw new EventBusException(\"Subscriber \" + subscriber.getClass() + \" already registered to event \"\n                    + eventType);\n        }\n    }\n\n    int size = subscriptions.size();\n    for (int i = 0; i <= size; i++) {\n        //优先级排序，要么最小查到最后，要么之前的某个位置\n        if (i == size || subscriberMethod.priority > subscriptions.get(i).subscriberMethod.priority) {\n            //向事件对应的订阅者列表中添加当前订阅者，完成排序操作\n            subscriptions.add(i, newSubscription);\n            break;\n        }\n    }\n\n    //Map<Object, List<Class<?>>> typesBySubscriber;\n    //通过订阅者类找所有Event\n    List<Class<?>> subscribedEvents = typesBySubscriber.get(subscriber);\n    if (subscribedEvents == null) {\n        subscribedEvents = new ArrayList<>();\n        typesBySubscriber.put(subscriber, subscribedEvents);\n    }\n    //将当前订阅者方法的 event 存到指定订阅者类下的列表里\n    subscribedEvents.add(eventType);\n\n    //粘性事件：先pst 后 订阅\n    //当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发\n    if (subscriberMethod.sticky) {\n        //eventInheritance: 默认true\n        // 默认情况下，EventBus 考虑事件类层次结构（将通知超类的订阅者）。 关闭此功能将改进事件的发布。\n        // 对于直接扩展 Object 的简单事件类，我们测得事件发布速度提高了 20%。 对于更复杂的事件层次结构，加速应该大于 20%。\n        //但是，请记住，事件发布通常只消耗应用程序内一小部分 CPU 时间，除非它以高速率发布，例如每秒数百/数千个事件\n\n        if (eventInheritance) { //\n            //必须考虑 eventType 的所有子类的现有粘性事件。注意：对于大量粘性事件，迭代所有事件可能效率低下，\n            // 因此应更改数据结构以允许更有效的查找（例如，存储超类的子类的附加映射：Class -> List<Class>）。\n            //stickyEvents = new ConcurrentHashMap<>();\n            Set<Map.Entry<Class<?>, Object>> entries = stickyEvents.entrySet();\n            for (Map.Entry<Class<?>, Object> entry : entries) {\n                //key: event.getClass(), value: event\n                Class<?> candidateEventType = entry.getKey();\n                //isAssignableFrom: 确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。 如果是，则返回true ； 否则返回false 。 如果此Class对象表示原始类型，则如果指定的Class参数正是此Class对象，则此方法返回true ； 否则返回false 。\n                //具体来说，此方法测试是否可以通过标识转换或通过扩展引用转换将指定Class参数表示的类型转换为此Class对象表示的类型。 有关详细信息，请参阅Java 语言规范5.1.1 和 5.1.4 节\n                if (eventType.isAssignableFrom(candidateEventType)) { //比较class\n                    Object stickyEvent = entry.getValue();\n                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                }\n            }\n        } else {\n            //通过粘性事件类查找所有粘性事件对象\n            Object stickyEvent = stickyEvents.get(eventType);\n            checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n        }\n    }\n}\n\nprivate void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {\n    if (stickyEvent != null) {\n        // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)\n        // --> Strange corner case, which we don't take care of here.\n        //如果订阅者试图中止事件，它将失败（事件在发布状态下不被跟踪）--> 奇怪的极端情况，我们在这里不处理。\n        postToSubscription(newSubscription, stickyEvent, isMainThread());\n    }\n}\n```\n\n##### 注册订阅者流程总结\n\n注册订阅者分为查找和订阅两个过程\n\n查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。\n\n还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。\n\n订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。\n\n亮点整理：\n\n- CopyOnWriteArrayList 保证线程安全\n\n```java\nprivate final Map<Class<?>, CopyOnWriteArrayList<Subscription>> subscriptionsByEventType;\n```\n\n- ConcurrentHashMap 保证了效率和安全\n\n```java\nstickyEvents = new ConcurrentHashMap<>();\n```\n\n#### 10.2.3 事件发布\n\n发布粘性事件，粘性事件特别之处在于发布前存到了一个map中，当注册时直接执行粘性事件的发布\n\n```java\npublic void postSticky(Object event) {\n    synchronized (stickyEvents) {\n        stickyEvents.put(event.getClass(), event);\n    }\n    //放置后应发布，以防订阅者想立即删除\n    post(event);\n}\n```\n\n发布普通事件，通过ThreadLocal保证发送时的同步问题\n\n```java\npublic void post(Object event) {\n    //currentPostingThreadState = new ThreadLocal<PostingThreadState>()\n    //每个线程都有一份 postingState 实例，\n    //封装 PostingThreadState 对于 ThreadLocal，设置（并获得多个值）要快得多。\n    PostingThreadState postingState = currentPostingThreadState.get();\n    List<Object> eventQueue = postingState.eventQueue;\n    eventQueue.add(event);\n    if (!postingState.isPosting) { // 默认 false\n        postingState.isMainThread = isMainThread(); //判断主线程还是子线程\n        postingState.isPosting = true; //这里保证 cancelEventDelivery 是在同一个线程调用的\n        if (postingState.canceled) { //cancelEventDelivery\n            throw new EventBusException(\"Internal error. Abort state was not reset\");\n        }\n        try {\n            //可能发送了多个事件\n            while (!eventQueue.isEmpty()) {\n                //发送队列依次取出第一个事件执行发布\n                postSingleEvent(eventQueue.remove(0), postingState);\n            }\n        } finally {\n            //发送完事件后重置标志位\n            postingState.isPosting = false;\n            postingState.isMainThread = false;\n        }\n    }\n}\n```\n\n事件发布时考虑事件的继承关系\n\n```java\n//发送队列的第一个事件\nprivate void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n    Class<?> eventClass = event.getClass();\n    boolean subscriptionFound = false;\n    //是否考虑订阅者的继承关系\n    if (eventInheritance) {\n        //事件类和事件类的父类们\n        List<Class<?>> eventTypes = lookupAllEventTypes(eventClass);\n        int countTypes = eventTypes.size();\n        for (int h = 0; h < countTypes; h++) {\n            Class<?> clazz = eventTypes.get(h);\n            //当前类和父类有一个没收到就算失败\n            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n        }\n    } else {\n        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n    }\n    if (!subscriptionFound) {\n        if (logNoSubscriberMessages) {\n            logger.log(Level.FINE, \"No subscribers registered for event \" + eventClass);\n        }\n        //兜底方案，发送一个通知事件，告诉订阅者刚才的事件没发送成功\n        if (sendNoSubscriberEvent && eventClass != NoSubscriberEvent.class &&\n                eventClass != SubscriberExceptionEvent.class) {\n            post(new NoSubscriberEvent(this, event));\n        }\n    }\n}\n```\n\n通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作\n\n```java\nprivate boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class<?> eventClass) {\n    CopyOnWriteArrayList<Subscription> subscriptions;\n    synchronized (this) {\n        //通过单事件，找到所有观察者\n        subscriptions = subscriptionsByEventType.get(eventClass);\n    }\n    if (subscriptions != null && !subscriptions.isEmpty()) {\n        for (Subscription subscription : subscriptions) {\n            //存入线程\n            postingState.event = event;\n            postingState.subscription = subscription;\n            boolean aborted;\n            try {\n                postToSubscription(subscription, event, postingState.isMainThread);\n                aborted = postingState.canceled;\n            } finally {\n                //重置状态\n                postingState.event = null;\n                postingState.subscription = null;\n                postingState.canceled = false;\n            }\n            if (aborted) {\n                break;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n```\n\n发布时会根据订阅者的线程模型做出不同处理\n\n```java\n//发布到订阅\nprivate void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\n    //根据线程模型不同处理\n    switch (subscription.subscriberMethod.threadMode) {\n        case POSTING: //订阅和发布是同一个线程\n            invokeSubscriber(subscription, event);\n            break;\n        case MAIN: //订阅在主线程\n            if (isMainThread) {\n                invokeSubscriber(subscription, event);\n            } else {\n                //通过Handler 发送到主线程\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            break;\n        case MAIN_ORDERED: //订阅在主线程排队\n            if (mainThreadPoster != null) {\n                mainThreadPoster.enqueue(subscription, event);\n            } else {\n                //临时：技术上不正确，因为海报没有与订阅者分离\n                // temporary: technically not correct as poster not decoupled from subscriber\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        case BACKGROUND:////如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。\n            if (isMainThread) {\n                backgroundPoster.enqueue(subscription, event);\n            } else {\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        case ASYNC://无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。\n            asyncPoster.enqueue(subscription, event);\n            break;\n        default:\n            throw new IllegalStateException(\"Unknown thread mode: \" + subscription.subscriberMethod.threadMode);\n    }\n}\n```\n\n三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  对应四种线程模型\n\n反射调用观察者\n\n```java\n//同一个线程执行订阅者方法\nvoid invokeSubscriber(Subscription subscription, Object event) {\n    try {\n        //方法、类、参数\n        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n    } catch (InvocationTargetException e) {\n        handleSubscriberException(subscription, event, e.getCause());\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(\"Unexpected exception\", e);\n    }\n}\n```\n\n##### 事件发布流程总结\n\n发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。\n\n具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。\n\n\n\n#### 10.2.4 注销订阅者\n\n```java\npublic override fun onStop() {\n    super.onStop()\n    EventBus.getDefault().unregister(this)\n}\n```\n\n根据订阅者类找该类的所有事件\n\n```java\npublic synchronized void unregister(Object subscriber) {\n    //找到订阅者类对应的事件类列表\n    List<Class<?>> subscribedTypes = typesBySubscriber.get(subscriber);\n    if (subscribedTypes != null) {\n        //根据每个事件类解除每个订阅者\n        for (Class<?> eventType : subscribedTypes) {\n            unsubscribeByEventType(subscriber, eventType);\n        }\n        //从内存map 移除\n        typesBySubscriber.remove(subscriber);\n    } else {\n        logger.log(Level.WARNING, \"Subscriber to unregister was not registered before: \" + subscriber.getClass());\n    }\n}\n```\n\n根据每个事件找对应的所有订阅者，如果订阅者中的订阅者类和当前类一样才执行解除订阅\n\n```java\nprivate void unsubscribeByEventType(Object subscriber, Class<?> eventType) {\n    //根据每个事件类找到所有该事件的订阅者\n    List<Subscription> subscriptions = subscriptionsByEventType.get(eventType);\n    if (subscriptions != null) {\n        int size = subscriptions.size();\n        for (int i = 0; i < size; i++) {\n            //每个订阅者：类+方法\n            Subscription subscription = subscriptions.get(i);\n            //确认是当前类的订阅者\n            if (subscription.subscriber == subscriber) {\n                //修改解除订阅标志位\n                subscription.active = false;\n                subscriptions.remove(i);\n                i--; //防止越界\n                size--;\n            }\n        }\n    }\n}\n```\n\n##### 注销订阅者流程总结\n\n注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。\n\n\n\n## 11. 参考\n\n**[Github | EventBus](https://github.com/greenrobot/EventBus)**\n\n[EventBus Documentation](https://greenrobot.org/eventbus/documentation/)\n\n[极客时间| 设计模式之美](https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D)\n\n[EventBus 如何使用及一些常见场景](https://cloud.tencent.com/developer/article/1383971)\n\n[EventBus使用总结和使用场景](https://blog.csdn.net/f552126367/article/details/86571012)\n\n","slug":"lib_eventbus","published":1,"updated":"2021-11-19T18:33:41.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw6q26n400004zxf72td75j8","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"EventBus-事件总线框架深入分析\"><a href=\"#EventBus-事件总线框架深入分析\" class=\"headerlink\" title=\"EventBus 事件总线框架深入分析\"></a>EventBus 事件总线框架深入分析</h1><h2 id=\"1-EventBus-关键词云\"><a href=\"#1-EventBus-关键词云\" class=\"headerlink\" title=\"1. EventBus 关键词云\"></a>1. EventBus 关键词云</h2><p>设计模式、数据结构、内存占用、查找效率、线程安全、对象池、事件继承问题、事件发布器、线程模式、同步、异步</p>\n<h2 id=\"2-EventBus-快问快答\"><a href=\"#2-EventBus-快问快答\" class=\"headerlink\" title=\"2. EventBus 快问快答\"></a>2. EventBus 快问快答</h2><p>EventBus 中运用了那些设计模式</p>\n<ul>\n<li>观察者、单例、构建者、门面、策略</li>\n</ul>\n<p>EventBus 中运用了那些数据结构</p>\n<ul>\n<li>ThreadLocal、CopyOnWriteArrayList、ConcurrentHashMap、HashMap、PendingPostQueue</li>\n</ul>\n<p>EventBus 中的对象池</p>\n<ul>\n<li>FindState/FIND_STATE_POOL、PendingPost/pendingPostPool</li>\n</ul>\n<p>EventBus 中的锁与线程安全问题</p>\n<ul>\n<li>并发容器、同步锁、ThreadLocal</li>\n</ul>\n<p>如何设计一个最小原型 EventBus 框架需要考虑哪些问题</p>\n<ul>\n<li>内存占用、查找效率、线程安全</li>\n</ul>\n<p>EventBus 中的事件发布时如何实现同步、异步的</p>\n<ul>\n<li>同步：主线程、Handler；异步：子线程</li>\n</ul>\n<h2 id=\"3-EventBus-总结\"><a href=\"#3-EventBus-总结\" class=\"headerlink\" title=\"3. EventBus 总结\"></a>3. EventBus 总结</h2><h4 id=\"3-1-编译时APT流程总结\"><a href=\"#3-1-编译时APT流程总结\" class=\"headerlink\" title=\"3.1 编译时APT流程总结\"></a>3.1 编译时APT流程总结</h4><p>EventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。</p>\n<p>通过APT方式收集订阅者的大体流程如下：</p>\n<ul>\n<li>在编码阶段添加订阅者方法时我们需要通过 <strong>@Subscribe</strong> 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：<strong>enum ThreadMode、boolean sticky，int priority</strong> 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。</li>\n<li>EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。</li>\n<li>注解处理器注解处理流程主要分为：<strong>收集订阅者、校验订阅者、生成索引类</strong>三个过程。<ul>\n<li><strong>收集订阅者</strong>：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 <strong>正好只有一个参数的非静态的公开的方法</strong> 的规则。然后将找到的订阅者方法和订阅者类存入 *<em>ListMap&lt;TypeElement, ExecutableElement&gt; methodsByClass *</em>  容器中。该容器的数据结构是：<code>HashMap&lt;K, List&lt;V&gt;&gt;()</code> key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。</li>\n<li><strong>校验订阅者</strong>（包括订阅者类/订阅者类的父类和订阅者方法）：<ul>\n<li>校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足<strong>public/default+索引类和订阅者类的包名一样</strong> 的规则，不满足的订阅者类需要添加到 <strong>Set<typeelement> classesToSkip</typeelement></strong> 容器中标记。</li>\n<li>校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 <strong>Set<typeelement> classesToSkip</typeelement></strong> 容器中标记。<ul>\n<li>订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。</li>\n<li>订阅者方法的参数类型是类类型但是对索引类不可见。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>生成索引类</strong>：遍历最终收集到的 <strong>methodsByClass</strong> 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-2-初始化EventBus-总结\"><a href=\"#3-2-初始化EventBus-总结\" class=\"headerlink\" title=\"3.2 初始化EventBus 总结\"></a>3.2 初始化EventBus 总结</h4><p>总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。</p>\n<p>单例模式常用于构建全局唯一类并提供全局唯一访问点。</p>\n<p>构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。</p>\n<p>EventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。</p>\n<p>需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。</p>\n<p>你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。</p>\n<p>可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。</p>\n<h4 id=\"3-3-注册订阅者流程总结\"><a href=\"#3-3-注册订阅者流程总结\" class=\"headerlink\" title=\"3.3 注册订阅者流程总结\"></a>3.3 注册订阅者流程总结</h4><p>注册订阅者分为查找和订阅两个过程</p>\n<p>查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。</p>\n<p>还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。</p>\n<p>订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。</p>\n<h4 id=\"3-4-事件发布流程总结\"><a href=\"#3-4-事件发布流程总结\" class=\"headerlink\" title=\"3.4 事件发布流程总结\"></a>3.4 事件发布流程总结</h4><p>发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。</p>\n<p>具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。</p>\n<h4 id=\"3-5-注销订阅者流程总结\"><a href=\"#3-5-注销订阅者流程总结\" class=\"headerlink\" title=\"3.5 注销订阅者流程总结\"></a>3.5 注销订阅者流程总结</h4><p>注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。</p>\n<h2 id=\"4-概述\"><a href=\"#4-概述\" class=\"headerlink\" title=\"4. 概述\"></a>4. 概述</h2><blockquote>\n<p>框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。</p>\n</blockquote>\n<p>EventBus 翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现<strong>观察者模式</strong>，从而减少样板代码。其中，<a href=\"https://github.com/google/guava/wiki/EventBusExplained\" target=\"_blank\" rel=\"noopener\">Google Guava EventBus</a>  就是一个比较著名的 EventBus 框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式。</p>\n<p>而我们今天要分析的 <a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\"><strong>GreenRobot EventBus</strong></a> 是同时适用于 Android 和 Java 平台的事件总线框架，它可简化Activities, Fragments, Threads, Services之间的通信且轻量，它的核心设计理念是对观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）的封装。传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调等，相比之下EventBus的优点是代码简洁，使用简单，并将事件发布和订阅充分解耦。</p>\n<blockquote>\n<p>*<em>观察者模式 *</em></p>\n<p>定义：定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。</p>\n<p>作用：解耦观察者和被观察者。</p>\n<p>实现：</p>\n<ul>\n<li><p><strong>同步阻塞</strong>是最经典的实现方式，主要是为了代码解耦；观察者和被观察者代码在同一个线程内执行，被观察者发送更新通知后就一直阻塞着，直到所有的观察者代码都执行完成之后，才会执行后续的代码。</p>\n</li>\n<li><p><strong>异步非阻塞</strong>除了能实现代码解耦之外，还能提高代码的执行效率；实现方式是被观察者发送更新通知后启动一个新的线程来执行观察者的回调函数。</p>\n</li>\n</ul>\n</blockquote>\n<p><strong>EventBus 观察者模式框架 VS 自己实现观察模式</strong></p>\n<p>利用 EventBus 框架实现的观察者模式，跟从零开始编写的观察者模式相比，从大的流程上来说，实现思路大致一样，都需要定义观察者（Observer），并且通过 register() 函数注册Observer，也都需要通过调用某个函数（比如，EventBus 中的 post() 函数）来给 Observer 发送消息（在 EventBus 中消息被称作事件 event）。</p>\n<p>但在实现细节方面，它们又有些区别。基于 EventBus，我们不需要定义 Observer 接口，任意类型的对象都可以注册到 EventBus 中，通过 @Subscribe 注解来标明类中哪个函数可以接收被观察者发送的消息。</p>\n<p>跟经典的观察者模式的不同之处在于，当我们调用 post() 函数发送消息的时候，并非把消息发送给所有的观察者，而是发送给可匹配的观察者。所谓可匹配指的是，能接收的消息类型是发送消息（post 函数定义中的 event）类型或是其父类。</p>\n<h2 id=\"5-工作机制\"><a href=\"#5-工作机制\" class=\"headerlink\" title=\"5. 工作机制\"></a>5. 工作机制</h2><p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211107112804.png\" alt=\"EventBus-Android-Publish-Subscribe\"></p>\n<p><strong>发布者(Publisher)</strong>：发布者主动生成事件发布事件给指定订阅者。</p>\n<pre class=\" language-java\"><code class=\"language-java\">EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MessageEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>事件总线(EventBus)</strong>：统筹所有事件的调度工作，如：收集、注册、切换、分发、解注册等操作。</p>\n<pre class=\" language-java\"><code class=\"language-java\">EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>订阅者(Subscriber)</strong>：声明订阅方法并通过注释标记，可指定线程模式。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>MAIN<span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessageEvent</span><span class=\"token punctuation\">(</span>MessageEvent event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">/* Do something */</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"6-EventBus-优势\"><a href=\"#6-EventBus-优势\" class=\"headerlink\" title=\"6. EventBus 优势\"></a>6. EventBus 优势</h2><ul>\n<li>简化组件之间的通信，同进程内随便发，组件化中需要考虑 Event Object 的存放位置。</li>\n<li>解耦事件的发送者和接收者，仅通过 Event Object 进行链接发送者和接受者。</li>\n<li>在 UI 组件和后台线程切换中表现良好的性能</li>\n<li>避免复杂且容易出错的依赖关系和生命周期问题，提供解注册订阅者。</li>\n<li>很快；专为高性能而优化，很小（~60k jar）</li>\n<li><a href=\"http://www.appbrain.com/stats/libraries/details/eventbus/greenrobot-eventbus\" target=\"_blank\" rel=\"noopener\">在实践中被证明通过应用与1,000,000,000+安装</a></li>\n<li>具有分发指定线程、设置订阅者优先级等功能。</li>\n</ul>\n<h2 id=\"7-EventBus-功能\"><a href=\"#7-EventBus-功能\" class=\"headerlink\" title=\"7. EventBus 功能\"></a>7. EventBus 功能</h2><ul>\n<li><strong>简单而强大：</strong> EventBus 是一个小型库，其 API 非常容易学习。然而，通过解耦组件，您的软件架构可能会受益匪浅：订阅者在使用事件时并不了解发送者。</li>\n<li>实战<strong>测试：</strong> EventBus 是最常用的 Android 库之一：数以千计的应用程序使用 EventBus，包括非常流行的应用程序。超过 10 亿次应用安装不言而喻。</li>\n<li><strong>高性能：</strong>尤其是在 Android 上，性能很重要。EventBus 进行了大量分析和优化；可能使其成为同类中最快的解决方案。</li>\n<li><strong>方便的基于注释的 API</strong> （不牺牲性能）<strong>：</strong>只需将 @Subscribe 注释放在您的订阅者方法中。由于注释的构建时索引，EventBus 不需要在您的应用程序运行时进行注释反射，这在 Android 上非常慢。</li>\n<li><strong>Android 主线程传递：</strong>在与 UI 交互时，EventBus 可以在主线程中传递事件，而不管事件是如何发布的。</li>\n<li><strong>后台线程传递：</strong>如果您的订阅者执行长时间运行的任务，EventBus 还可以使用后台线程来避免 UI 阻塞。</li>\n<li><strong>事件和订阅者继承：</strong>在 EventBus 中，面向对象的范式适用于事件和订阅者类。假设事件类 A 是 B 的超类。发布的 B 类事件也将发布给对 A 感兴趣的订阅者。类似地考虑订阅者类的继承。</li>\n<li><strong>零配置：</strong> 您可以立即开始使用代码中任何位置可用的默认 EventBus 实例。</li>\n<li><strong>可配置：</strong> 要根据您的要求调整 EventBus，您可以使用构建器模式调整其行为。</li>\n</ul>\n<h2 id=\"8-EventBus-应用\"><a href=\"#8-EventBus-应用\" class=\"headerlink\" title=\"8. EventBus 应用\"></a>8. EventBus 应用</h2><ul>\n<li>如果使用 EventBus 的页面比较多，可以在 Acitivity/Fragment  基类里面绑定和解绑，并添加一个默认接收事件。</li>\n<li>跨界面修改值<ul>\n<li>你有一个主界面，里面有一些信息可能会修改，但触发源不在该界面，是在其他的界面触发了一些事件后，首页的内容需要做修改。</li>\n<li>如果没有EventBus，也有很多的方式可以实现，譬如定义全局静态变量、或者onResume时获取触发源的值修改界面值、或者定义个CallBack接口传出去等。</li>\n<li>譬如微信首页你有未读消息3个时，界面会有3个小红点点，当你点开一个未读消息后，进入了下个界面，那么此时未读消息就是2了，但你并不在首页了，你需要在你打开消息并阅读完毕后通知首页改成2.这就是一种跨界面修改值。</li>\n</ul>\n</li>\n<li>Activity/Fragment 与 Fragment 之间通信</li>\n<li>注册页面回退逻辑<ul>\n<li>在注册页面填写了手机号、个人信息，传头像操作后，注册成功了，进入了主界面。此时我们需要在主界面关闭之前的注册的所有页面，此时就可以使用eventbus来通知前几个注册用的activity来关闭自己。这样的目的就是当注册失败时，用户按返回键还是能回到填写信息页。当注册成功后，按返回键就直接退出程序，不再保留注册填信息页了。</li>\n</ul>\n</li>\n<li>推送/消息功能<ul>\n<li>收到推送后需要不同的页面来做处理的。例如：微信PC登录时，手机端的确认登录页面是可以随时随地弹出的，</li>\n</ul>\n</li>\n<li>组件化通讯<ul>\n<li>组件之间的交互，例如：测试环境中环境切换组件，切换后需要重新登录并重置环境信息等。</li>\n</ul>\n</li>\n<li>EventBus最好的使用方式就是替代某些 BroadcastReceiver 和 Interface；如fragment之间进行通信，用广播和接口都比较麻烦，而用EventBus则比较简单。</li>\n<li>以下场景可以考虑不用<ul>\n<li>Event 会根据传递的参数给所有接收者都传递消息，这就导致如果你想给指定一个类里发布消息就得自己写一个接口类，要不然就会好多执行者都会执行该方法，所以一般能用Intent组件传值时还是用Intent。</li>\n<li>EventBus相对于BroadcastReceiver，广播是相对消耗时间、空间最多的一种方式，但是大家都知道，广播是四大组件之一，许多系统级的事件都是通过广播来通知的，比如说网络的变化、电量的变化，短信发送和接收的状态，所以，如果与android系统进行相关的通知，还是要选择本地广播；在BroadcastReceiver的 onReceive方法中，可以获得Context 、intent参数，这两个参数可以调用许多的sdk中的方法，而eventbus获得这两个参数相对比较困难。</li>\n<li>EventBus相对于handler，可以实现handler的方式，但是也会面对有许多接收者的问题，所以如果是线程回调的话，我觉得还是用handler比较好。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-EventBus-使用\"><a href=\"#9-EventBus-使用\" class=\"headerlink\" title=\"9. EventBus 使用\"></a>9. EventBus 使用</h2><h3 id=\"9-1-订阅者索引\"><a href=\"#9-1-订阅者索引\" class=\"headerlink\" title=\"9.1 订阅者索引\"></a>9.1 订阅者索引</h3><p>使用订阅者索引可以避免在运行时使用反射对订阅者方法进行昂贵的查找。EventBus 注释处理器在编译时查找它们。</p>\n<h4 id=\"符合注解收集的要求\"><a href=\"#符合注解收集的要求\" class=\"headerlink\" title=\"符合注解收集的要求\"></a>符合注解收集的要求</h4><ul>\n<li>@Subscribe 方法及其类<strong>必须是 public</strong>。</li>\n<li>事件类<strong>必须是 public</strong>。</li>\n<li>@Subscribe可以<strong>不</strong>被使用<strong>匿名类的内部</strong>。</li>\n<li>当 EventBus 不能使用索引时，例如不满足上述要求，它会在运行时降级为通过反射查找订阅者。这确保@Subscribe 方法接收事件，即使它们不是索引的一部分。</li>\n</ul>\n<h4 id=\"配置注解处理器\"><a href=\"#配置注解处理器\" class=\"headerlink\" title=\"配置注解处理器\"></a>配置注解处理器</h4><pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\" spellcheck=\"true\">//java</span>\nandroid <span class=\"token punctuation\">{</span>\n    defaultConfig <span class=\"token punctuation\">{</span>\n        javaCompileOptions <span class=\"token punctuation\">{</span>\n            annotationProcessorOptions <span class=\"token punctuation\">{</span>\n                arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> eventBusIndex <span class=\"token punctuation\">:</span> <span class=\"token string\">'com.example.myapp.MyEventBusIndex'</span> <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> eventbus_version <span class=\"token operator\">=</span> <span class=\"token string\">'3.2.0'</span>\n    implementation <span class=\"token string\">\"org.greenrobot:eventbus:$eventbus_version\"</span>\n    annotationProcessor <span class=\"token string\">\"org.greenrobot:eventbus-annotation-processor:$eventbus_version\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//kotlin </span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'kotlin-kapt'</span> <span class=\"token comment\" spellcheck=\"true\">// ensure kapt plugin is applied</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> eventbus_version <span class=\"token operator\">=</span> <span class=\"token string\">'3.2.0'</span>\n    implementation <span class=\"token string\">\"org.greenrobot:eventbus:$eventbus_version\"</span>\n    kapt <span class=\"token string\">\"org.greenrobot:eventbus-annotation-processor:$eventbus_version\"</span>\n<span class=\"token punctuation\">}</span>\n\nkapt <span class=\"token punctuation\">{</span>\n    arguments <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">arg</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eventBusIndex'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'com.example.myapp.MyEventBusIndex'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"使用订阅者索引类\"><a href=\"#使用订阅者索引类\" class=\"headerlink\" title=\"使用订阅者索引类\"></a>使用订阅者索引类</h4><p>在您的<em>Application</em>类中，使用<em>EventBus.builder().addIndex(indexInstance)</em>将索引类的实例传递给 EventBus。组件中的索引类也可以通过addIndex方法添加到 EventBus 实例中。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//创建一个新实例并配置索引类</span>\n<span class=\"token keyword\">val</span> eventBus <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyEventBusIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//使用单例模式并配置索引类</span>\nEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyEventBusIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">installDefaultEventBus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// Now the default instance uses the given index. Use it like this:</span>\n<span class=\"token keyword\">val</span> eventBus <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h4 id=\"防止混淆订阅者\"><a href=\"#防止混淆订阅者\" class=\"headerlink\" title=\"防止混淆订阅者\"></a>防止混淆订阅者</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span>keepattributes <span class=\"token operator\">*</span>Annotation<span class=\"token operator\">*</span>\n<span class=\"token operator\">-</span>keepclassmembers <span class=\"token keyword\">class</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@org</span><span class=\"token punctuation\">.</span>greenrobot<span class=\"token punctuation\">.</span>eventbus<span class=\"token punctuation\">.</span>Subscribe <span class=\"token operator\">&lt;</span>methods<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">-</span>keep <span class=\"token keyword\">enum</span> org<span class=\"token punctuation\">.</span>greenrobot<span class=\"token punctuation\">.</span>eventbus<span class=\"token punctuation\">.</span>ThreadMode <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n# And <span class=\"token keyword\">if</span> you use AsyncExecutor<span class=\"token operator\">:</span>\n<span class=\"token operator\">-</span>keepclassmembers <span class=\"token keyword\">class</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">org<span class=\"token punctuation\">.</span>greenrobot<span class=\"token punctuation\">.</span>eventbus<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ThrowableFailureEvent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;</span>init<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"9-2-配置EventBus\"><a href=\"#9-2-配置EventBus\" class=\"headerlink\" title=\"9.2 配置EventBus\"></a>9.2 配置EventBus</h3><p>EventBusBuilder 类可以配置 EventBus 的各个方面。例如</p>\n<p>使用 EventBus.getDefault() 是一种从应用程序中的任何位置获取共享 EventBus 实例的简单方法。EventBusBuilder 还允许使用installDefaultEventBus ( )方法配置此默认实例。可以在 Application 类中在使用 EventBus 之前配置默认 EventBus 实例。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> App <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">//将此与 BuildConfig.DEBUG 一起使用可让应用程序尽在在 DEBUG 模式下崩溃。默认为false</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 这样就不会在开发过程中错过异常（Invoking subscriber failed）</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">throwSubscriberException</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果发送了没有订阅者的event,是否需要打印提示哪一个 event bean 的log,默认为true</span>\n            <span class=\"token comment\" spellcheck=\"true\">//提示信息： No subscribers registered for event class org.greenrobot.eventbusperf.jay.bus.SubEvent</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">logNoSubscriberMessages</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">installDefaultEventBus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"9-3-ThreadMode\"><a href=\"#9-3-ThreadMode\" class=\"headerlink\" title=\"9.3 ThreadMode\"></a>9.3 ThreadMode</h3><p>在 EventBus 中，您可以使用四种 ThreadMode 来指定订阅者方法所在的线程。</p>\n<ul>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_POSTING\" target=\"_blank\" rel=\"noopener\">1 ThreadMode: POSTING</a> ：发布者和订阅者在同一个线程。<ul>\n<li>这是默认设置。事件传递是同步完成的，需要注意避免阻塞主线程。</li>\n<li>避免了线程切换意味着开销较小。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN\" target=\"_blank\" rel=\"noopener\">2 ThreadMode: MAIN</a> ：订阅者将在 Android 的主线程（UI 线程）中调用。<ul>\n<li>事件传递是同步完成的，需要注意避免阻塞主线程。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN_ORDERED\" target=\"_blank\" rel=\"noopener\">3 ThreadMode: MAIN_ORDERED</a> ：订阅者将在 Android 的主线程中被调用，该事件总是通过Handler排队等待稍后传递给订阅者。<ul>\n<li>为事件处理提供了更严格和更一致的顺序。</li>\n<li>如果前一个也是main_ordered 需要等前一个执行完成后才执行。</li>\n<li>事件传递是异步完成的。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_BACKGROUND\" target=\"_blank\" rel=\"noopener\">4 ThreadMode: BACKGROUND</a> ：如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。<ul>\n<li>事件传递是异步完成的。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_ASYNC\" target=\"_blank\" rel=\"noopener\">5 ThreadMode: ASYNC</a> ：无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。<ul>\n<li>EventBus 使用线程池来有效地重用线程。</li>\n<li>事件传递是异步完成的。</li>\n<li>如果事件处理程序方法的执行可能需要一些时间，则应使用此模式，例如用于网络访问</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"> <span class=\"token comment\" spellcheck=\"true\">//在主线程发消息</span>\n 发布者所在线程<span class=\"token operator\">:</span>Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> BACKGROUND \n 发布者所在线程<span class=\"token operator\">:</span>Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> ASYNC \n 发布者所在线程<span class=\"token operator\">:</span>Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> POSTING \n 发布者所在线程<span class=\"token operator\">:</span>Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> MAIN \n 发布者所在线程<span class=\"token operator\">:</span>Thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> MAIN_ORDERED \n <span class=\"token comment\" spellcheck=\"true\">//在子线程发消息</span>\n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> MAIN \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> BACKGROUND \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> pool<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>thread<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> ASYNC \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> POSTING \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> MAIN_ORDERED </code></pre>\n<h3 id=\"9-4-订阅者优先级\"><a href=\"#9-4-订阅者优先级\" class=\"headerlink\" title=\"9.4 订阅者优先级\"></a>9.4 订阅者优先级</h3><p>订阅者优先级影响事件传递的顺序。 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。注意：优先级不影响具有不同ThreadMode的订阅者之间的传递顺序！</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>POSTING<span class=\"token punctuation\">,</span> priority <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">onMessageEvent_POSTING1</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MessageEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">\"POSTING1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>POSTING<span class=\"token punctuation\">,</span> priority <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">onMessageEvent_POSTING2</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MessageEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">\"POSTING2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>MAIN<span class=\"token punctuation\">,</span> priority <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">onMessageEvent_MAIN1</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MessageEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MAIN1\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>MAIN<span class=\"token punctuation\">,</span> priority <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">onMessageEvent_MAIN2</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MessageEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MAIN2\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\" spellcheck=\"true\">//打印结果</span>\n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> POSTING2 \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> MAIN2 \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> POSTING1 \n 发布者所在线程<span class=\"token operator\">:</span>main<span class=\"token punctuation\">,</span> 订阅者所在线程<span class=\"token operator\">:</span> main<span class=\"token punctuation\">,</span> 订阅者线程模式<span class=\"token operator\">:</span> MAIN1 </code></pre>\n<p><strong>取消事件传递</strong></p>\n<p>您可以通过从订阅者的事件处理方法调用cancelEventDelivery ( Object event ) 来取消事件传递过程。任何进一步的事件传递都将被取消，后续订阅者将不会收到该事件。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// Prevent delivery to other subscribers*</span>\nEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cancelEventDelivery</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></code></pre>\n<p>事件通常由更高优先级的订阅者取消。取消仅限于在发布线程 ( ThreadMode . PostThread ) 中运行的事件处理方法。</p>\n<h3 id=\"9-5-粘性事件\"><a href=\"#9-5-粘性事件\" class=\"headerlink\" title=\"9.5 粘性事件\"></a>9.5 粘性事件</h3><p>普通事件都是需要先注册(register)，再post才能接受到事件；如果你使用 postSticky 发送事件，那么可以不需要先注册，也能接受到事件，也就是一个延迟注册的过程。 </p>\n<p>普通的事件我们通过post发送给EventBus，发送过后之后当前已经订阅过的方法可以收到。但是如果有些事件需要所有订阅了该事件的方法都能执行呢？例如一个Activity，要求它管理的所有Fragment都能执行某一个事件，但是当前我只初始化了3个Fragment，如果这时候通过post发送了事件，那么当前的3个Fragment当然能收到。但是这个时候又初始化了2个Fragment，那么我必须重新发送事件，这两个Fragment才能执行到订阅方法。 </p>\n<p>粘性事件就是为了解决这个问题，通过 postSticky 发送粘性事件，这个事件不会只被消费一次就消失，而是一直存在系统中，直到被 removeStickyEvent 删除掉。那么只要订阅了该粘性事件的所有方法，只要被register 的时候就会被检测到并且执行。订阅的方法需要添加 sticky = true 属性。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postSticky</span><span class=\"token punctuation\">(</span><span class=\"token function\">MessageEvent</span><span class=\"token punctuation\">(</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//消费粘性事件方式一：</span>\n<span class=\"token keyword\">val</span> stickyEvent <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStickyEvent</span><span class=\"token punctuation\">(</span>MessageEvent<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 最好检查之前是否实际发布过事件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stickyEvent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 消费掉粘性事件</span>\n    EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeStickyEvent</span><span class=\"token punctuation\">(</span>stickyEvent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//消费粘性事件方式二：</span>\n<span class=\"token keyword\">val</span> stickyEvent2 <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeStickyEvent</span><span class=\"token punctuation\">(</span>MessageEvent<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// 最好检查之前是否实际发布过事件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stickyEvent2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//已经消费了</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>MAIN<span class=\"token punctuation\">,</span> sticky <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">onMessageEvent_sticky</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MessageEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">\"MAIN\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">//消费粘性事件方式三：</span>\n    EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeStickyEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"9-6-异步执行器\"><a href=\"#9-6-异步执行器\" class=\"headerlink\" title=\"9.6 异步执行器\"></a>9.6 异步执行器</h3><p>AsyncExecutor 就像一个线程池，但具有失败（异常）处理功能。失败会引发异常，AsyncExecutor 会将这些异常包装在一个事件中，该事件会自动发布。</p>\n<p> <em>AsyncExecutor 是一个非核心实用程序类。它可能会为您节省一些在后台线程中进行错误处理的代码，但它不是核心 EventBus 类。</em></p>\n<p>调用 AsyncExecutor.create() 来创建一个实例并将其保存在应用程序范围内。然后要执行某些操作，请实现 RunnableEx接口并将其传递给AsyncExecutor的execute方法。与Runnable不同，RunnableEx可能抛出异常。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//AsyncExecutor类似于线程池，但具有失败(异常)处理。失败是抛出异常，AsyncExecutor将把这些异常封装在一个事件中，该事件将自动发布。</span>\nAsyncExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span> <span class=\"token punctuation\">{</span>\n    EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">postSticky</span><span class=\"token punctuation\">(</span>SubEvent<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//线程池中发出的时间</span>\n<span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>MAIN<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">handleLoginEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> SubEvent<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// do something</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//线程池中任务异常时发出的时间</span>\n<span class=\"token annotation builtin\">@Subscribe</span><span class=\"token punctuation\">(</span>threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>MAIN<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">handleFailureEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ThrowableFailureEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// do something</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"10-EventBus-原理\"><a href=\"#10-EventBus-原理\" class=\"headerlink\" title=\"10 EventBus 原理\"></a>10 EventBus 原理</h2><p>了解框架之前我们先定义几个核心角色用于描述整个流程</p>\n<ul>\n<li><p>发布者类：调用 post/postSticky 发布事件的类</p>\n</li>\n<li><p>发布者方法：调用 post/postSticky 发布事件的方法</p>\n</li>\n<li><p>事件类： post/postSticky 方法参数类以及订阅者方法参数类型</p>\n</li>\n<li><p>订阅者类：订阅者方法所在的类</p>\n</li>\n<li><p>订阅者方法：通过注解标注的订阅者方法</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211111000627.png\" alt=\"image-20211111000620374\"></p>\n<h3 id=\"10-1-编译时部分-通过-APT-收集订阅者注解并生成索引类\"><a href=\"#10-1-编译时部分-通过-APT-收集订阅者注解并生成索引类\" class=\"headerlink\" title=\"10.1 编译时部分-通过 APT 收集订阅者注解并生成索引类\"></a>10.1 编译时部分-通过 APT 收集订阅者注解并生成索引类</h3><p>注解类 Subscribe 用于标注订阅者方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span>RetentionPolicy<span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>ElementType<span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> @<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Subscribe</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//用来指定指定订阅者方法所在的线程。</span>\n    ThreadMode <span class=\"token function\">threadMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> ThreadMode<span class=\"token punctuation\">.</span>POSTING<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果为 true，则将最近的粘性事件（通过EventBus.postSticky(Object) ）传递给该订阅者。</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">sticky</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//订阅者优先级影响事件传递的顺序。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 注意：优先级不会影响具有不同ThreadMode的订阅者之间的传递顺序！</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>收集那些代码元素：订阅者类&amp;订阅者方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BusTestActivity</span> <span class=\"token operator\">:</span> <span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//定义一个订阅者方法</span>\n    <span class=\"token annotation punctuation\">@Subscribe</span><span class=\"token punctuation\">(</span>sticky <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> threadMode <span class=\"token operator\">=</span> ThreadMode<span class=\"token punctuation\">.</span>POSTING<span class=\"token punctuation\">,</span> priority <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    fun <span class=\"token function\">onMessageEvent_POSTING1</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> MessageEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">showMsg</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">\"POSTING1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>注解处理器通过继承 Java AbstractProcessor 抽象类并配置注解和选项参数实现</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SupportedAnnotationTypes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"org.greenrobot.eventbus.Subscribe\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@SupportedOptions</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"eventBusIndex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"verbose\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@IncrementalAnnotationProcessor</span><span class=\"token punctuation\">(</span>AGGREGATING<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventBusAnnotationProcessor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractProcessor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>通过处理器参数获取配置的订阅者索引全类名，没有配置该参数但是却依赖了注解处理组件会抛异常</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//设置apt参数</span>\njavaCompileOptions <span class=\"token punctuation\">{</span>\n    annotationProcessorOptions <span class=\"token punctuation\">{</span>\n        arguments <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                eventBusIndex<span class=\"token operator\">:</span> <span class=\"token string\">'org.greenrobot.eventbusperf.MyEventBusIndex'</span><span class=\"token punctuation\">,</span>\n                verbose<span class=\"token operator\">:</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//获取apt参数</span>\nString index <span class=\"token operator\">=</span> processingEnv<span class=\"token punctuation\">.</span><span class=\"token function\">getOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>OPTION_EVENT_BUS_INDEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    messager<span class=\"token punctuation\">.</span><span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>Diagnostic<span class=\"token punctuation\">.</span>Kind<span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No option \"</span> <span class=\"token operator\">+</span> OPTION_EVENT_BUS_INDEX <span class=\"token operator\">+</span>\n            <span class=\"token string\">\" passed to annotation processor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//没有配置的错误信息</span>\n<span class=\"token operator\">></span> Task <span class=\"token operator\">:</span>EventBusPerformance<span class=\"token operator\">:</span>compileDebugJavaWithJavac FAILED\n错误<span class=\"token operator\">:</span> No option eventBusIndex passed to annotation processor</code></pre>\n<ul>\n<li>收集注解流程</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">collectSubscribers</span><span class=\"token punctuation\">(</span>Set<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TypeElement</span><span class=\"token operator\">></span> annotations<span class=\"token punctuation\">,</span> RoundEnvironment env<span class=\"token punctuation\">,</span> Messager messager<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TypeElement annotation <span class=\"token operator\">:</span> annotations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取目标注解标注的所有元素，这里是所有的订阅者方法</span>\n        Set<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Element</span><span class=\"token operator\">></span> elements <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsAnnotatedWith</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Element element <span class=\"token operator\">:</span> elements<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//ExecutableElement 可执行元素指的是方法类型</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ExecutableElement</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ExecutableElement method <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ExecutableElement<span class=\"token punctuation\">)</span> element<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//检查方法:正好只有一个参数的非静态的公开的方法</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkHasNoErrors</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> messager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//获取方法所在的类元素</span>\n                    TypeElement classElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TypeElement<span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getEnclosingElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//存入容器</span>\n                    methodsByClass<span class=\"token punctuation\">.</span><span class=\"token function\">putElement</span><span class=\"token punctuation\">(</span>classElement<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                messager<span class=\"token punctuation\">.</span><span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>Diagnostic<span class=\"token punctuation\">.</span>Kind<span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"@Subscribe is only valid for methods\"</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>校验某个类对索引类包是否可访问</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isVisible</span><span class=\"token punctuation\">(</span>String myPackage<span class=\"token punctuation\">,</span> TypeElement typeElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//类的修饰符</span>\n    Set<span class=\"token operator\">&lt;</span>Modifier<span class=\"token operator\">></span> modifiers <span class=\"token operator\">=</span> typeElement<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> visible<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modifiers<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>Modifier<span class=\"token punctuation\">.</span>PUBLIC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        visible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modifiers<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>Modifier<span class=\"token punctuation\">.</span>PRIVATE<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> modifiers<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>Modifier<span class=\"token punctuation\">.</span>PROTECTED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        visible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//类所在的包</span>\n        String subscriberPackage <span class=\"token operator\">=</span> <span class=\"token function\">getPackageElement</span><span class=\"token punctuation\">(</span>typeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQualifiedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//处理器参数没有指定索引类</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myPackage <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//todo 没有包名什么情况</span>\n            visible <span class=\"token operator\">=</span> subscriberPackage<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//索引类和观察者包名一样</span>\n            visible <span class=\"token operator\">=</span> myPackage<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>subscriberPackage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> visible<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>校验收集到的注解元素信息是否符合预期</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkForSubscribersToSkip</span><span class=\"token punctuation\">(</span>Messager messager<span class=\"token punctuation\">,</span> String myPackage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//遍历所有订阅者方法所在的类</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TypeElement skipCandidate <span class=\"token operator\">:</span> methodsByClass<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//方法所在的类，</span>\n        TypeElement subscriberClass <span class=\"token operator\">=</span> skipCandidate<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//循环获取父类</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>subscriberClass <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//所有观察者</span>\n            <span class=\"token comment\" spellcheck=\"true\">//校验某个类类对索引类包是否可访问</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isVisible</span><span class=\"token punctuation\">(</span>myPackage<span class=\"token punctuation\">,</span> subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//索引类访问不到观察者类，跳过</span>\n                <span class=\"token keyword\">boolean</span> added <span class=\"token operator\">=</span> classesToSkip<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>skipCandidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//存在不可访问观察者</span>\n                    String msg<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//由于类不是公开的，所以回退到反射</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>skipCandidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//没有继承关系存在</span>\n                        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Falling back to reflection because class is not public\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//父类</span>\n                        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Falling back to reflection because \"</span> <span class=\"token operator\">+</span> skipCandidate <span class=\"token operator\">+</span>\n                                <span class=\"token string\">\" has a non-public super class\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    messager<span class=\"token punctuation\">.</span><span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>Diagnostic<span class=\"token punctuation\">.</span>Kind<span class=\"token punctuation\">.</span>NOTE<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//观察者类中的所有观察方法</span>\n            List<span class=\"token operator\">&lt;</span>ExecutableElement<span class=\"token operator\">></span> methods <span class=\"token operator\">=</span> methodsByClass<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methods <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ExecutableElement method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    String skipReason <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//方法第一个参数</span>\n                    VariableElement param <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//参数类型</span>\n                    TypeMirror typeMirror <span class=\"token operator\">=</span> <span class=\"token function\">getParamTypeMirror</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">,</span> messager<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//不是类类型报错</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>typeMirror <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">DeclaredType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DeclaredType<span class=\"token punctuation\">)</span> typeMirror<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TypeElement</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        skipReason <span class=\"token operator\">=</span> <span class=\"token string\">\"event type cannot be processed\"</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//是类类型但是对索引类不可见</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skipReason <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        TypeElement eventTypeElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>TypeElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>DeclaredType<span class=\"token punctuation\">)</span> typeMirror<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//参数类对索引类不可见</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isVisible</span><span class=\"token punctuation\">(</span>myPackage<span class=\"token punctuation\">,</span> eventTypeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            skipReason <span class=\"token operator\">=</span> <span class=\"token string\">\"event type is not public\"</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//存在观察者方法但是不可见先存下来，用于过滤</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skipReason <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">boolean</span> added <span class=\"token operator\">=</span> classesToSkip<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>skipCandidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>added<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            String msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Falling back to reflection because \"</span> <span class=\"token operator\">+</span> skipReason<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>subscriberClass<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>skipCandidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                msg <span class=\"token operator\">+=</span> <span class=\"token string\">\" (found in super class for \"</span> <span class=\"token operator\">+</span> skipCandidate <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                            messager<span class=\"token punctuation\">.</span><span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>Diagnostic<span class=\"token punctuation\">.</span>Kind<span class=\"token punctuation\">.</span>NOTE<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取观察者类的父类，继续循环</span>\n            subscriberClass <span class=\"token operator\">=</span> <span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>将收集到的索引信息写入索引类中的 map 容器中</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeIndexLines</span><span class=\"token punctuation\">(</span>BufferedWriter writer<span class=\"token punctuation\">,</span> String myPackage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TypeElement subscriberTypeElement <span class=\"token operator\">:</span> methodsByClass<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//只生成可访问的</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>classesToSkip<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>subscriberTypeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        String subscriberClass <span class=\"token operator\">=</span> <span class=\"token function\">getClassString</span><span class=\"token punctuation\">(</span>subscriberTypeElement<span class=\"token punctuation\">,</span> myPackage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isVisible</span><span class=\"token punctuation\">(</span>myPackage<span class=\"token punctuation\">,</span> subscriberTypeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">writeLine</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"putIndex(new SimpleSubscriberInfo(\"</span> <span class=\"token operator\">+</span> subscriberClass <span class=\"token operator\">+</span> <span class=\"token string\">\".class,\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">\"true,\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"new SubscriberMethodInfo[] {\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            List<span class=\"token operator\">&lt;</span>ExecutableElement<span class=\"token operator\">></span> methods <span class=\"token operator\">=</span> methodsByClass<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subscriberTypeElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">writeCreateSubscriberMethods</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> methods<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new SubscriberMethodInfo\"</span><span class=\"token punctuation\">,</span> myPackage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"        }));\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"        // Subscriber not visible to index: \"</span> <span class=\"token operator\">+</span> subscriberClass <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>生成的 MyEventBusIndex 文件</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//通过注释处理创建的生成索引类的接口。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SubscriberInfo</span> <span class=\"token punctuation\">{</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getSubscriberClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SubscriberMethod<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getSubscriberMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    SubscriberInfo <span class=\"token function\">getSuperSubscriberInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldCheckSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEventBusIndex</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SubscriberInfoIndex</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> SubscriberInfo<span class=\"token operator\">></span> SUBSCRIBER_INDEX<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        SUBSCRIBER_INDEX <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> SubscriberInfo<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">putIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleSubscriberInfo</span><span class=\"token punctuation\">(</span>org<span class=\"token punctuation\">.</span>greenrobot<span class=\"token punctuation\">.</span>eventbusperf<span class=\"token punctuation\">.</span>testsubject<span class=\"token punctuation\">.</span>PerfTestEventBus<span class=\"token punctuation\">.</span>SubscriberClassEventBusAsync<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubscriberMethodInfo</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubscriberMethodInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onEventAsync\"</span><span class=\"token punctuation\">,</span> TestEvent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> ThreadMode<span class=\"token punctuation\">.</span>ASYNC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//其它索引信息......</span>\n      <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putIndex</span><span class=\"token punctuation\">(</span>SubscriberInfo info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    SUBSCRIBER_INDEX<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscriberClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> SubscriberInfo <span class=\"token function\">getSubscriberInfo</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    SubscriberInfo info <span class=\"token operator\">=</span> SUBSCRIBER_INDEX<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h4 id=\"编译时APT流程总结\"><a href=\"#编译时APT流程总结\" class=\"headerlink\" title=\"编译时APT流程总结\"></a>编译时APT流程总结</h4><p>EventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。</p>\n<p>通过APT方式收集订阅者的大体流程如下：</p>\n<ul>\n<li>在编码阶段添加订阅者方法时我们需要通过 <strong>@Subscribe</strong> 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：<strong>enum ThreadMode、boolean sticky，int priority</strong> 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。</li>\n<li>EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。</li>\n<li>注解处理器注解处理流程主要分为：<strong>收集订阅者、校验订阅者、生成索引类</strong>三个过程。<ul>\n<li>收集订阅者：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 <strong>正好只有一个参数的非静态的公开的方法</strong> 的规则。然后将找到的订阅者方法和订阅者类存入 *<em>ListMap&lt;TypeElement, ExecutableElement&gt; methodsByClass *</em>  容器中。该容器的数据结构是：<code>HashMap&lt;K, List&lt;V&gt;&gt;()</code> key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。</li>\n<li>校验订阅者（包括订阅者类/订阅者类的父类和订阅者方法）：<ul>\n<li>校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足<strong>public/default+索引类和订阅者类的包名一样</strong> 的规则，不满足的订阅者类需要添加到 <strong>Set<typeelement> classesToSkip</typeelement></strong> 容器中标记。</li>\n<li>校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 <strong>Set<typeelement> classesToSkip</typeelement></strong> 容器中标记。<ul>\n<li>订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。</li>\n<li>订阅者方法的参数类型是类类型但是对索引类不可见。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>生成索引类：遍历最终收集到的 <strong>methodsByClass</strong> 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-2-运行时部分-初始化、注册-查找订阅者等\"><a href=\"#10-2-运行时部分-初始化、注册-查找订阅者等\" class=\"headerlink\" title=\"10.2 运行时部分-初始化、注册/查找订阅者等\"></a>10.2 运行时部分-初始化、注册/查找订阅者等</h3><h4 id=\"10-2-1-初始化EventBus\"><a href=\"#10-2-1-初始化EventBus\" class=\"headerlink\" title=\"10.2.1 初始化EventBus\"></a>10.2.1 初始化EventBus</h4><p>构建 EventBus 实例的三种方式：</p>\n<ul>\n<li><p>EventBus.getDefault() + 默认Builder</p>\n</li>\n<li><p>EventBus.builder().installDefaultEventBus() + 自定义配置</p>\n</li>\n<li><p>EventBus.builder().build() + 自定义配置</p>\n</li>\n</ul>\n<p>方式一：DCL单例方式创建进程唯一实例</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> EventBus defaultInstance<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//使用进程范围的 EventBus 实例的应用程序的便捷单例。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> EventBus <span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//通过局部变量中转可节省性能</span>\n    EventBus instance <span class=\"token operator\">=</span> defaultInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>EventBus<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            instance <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span>defaultInstance<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                instance <span class=\"token operator\">=</span> EventBus<span class=\"token punctuation\">.</span>defaultInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>其它两种方式</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//EventBus.builder().build() + 自定义配置</span>\nEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">throwSubscriberException</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">logNoSubscriberMessages</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">//添加索引类，减少运行时反射</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyEventBusIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> EventBus <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//EventBus.builder().installDefaultEventBus() + 自定义配置</span>\nEventBus<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">throwSubscriberException</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">logNoSubscriberMessages</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">//添加索引类，减少运行时反射</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyEventBusIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">installDefaultEventBus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">public</span> EventBus <span class=\"token function\">installDefaultEventBus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>EventBus<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EventBus<span class=\"token punctuation\">.</span>defaultInstance <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Default instance already exists.\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\" It may be only set once before it's used the first time to ensure consistent behavior.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        EventBus<span class=\"token punctuation\">.</span>defaultInstance <span class=\"token operator\">=</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> EventBus<span class=\"token punctuation\">.</span>defaultInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>构建EventBus时的默认配置</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token function\">EventBus</span><span class=\"token punctuation\">(</span>EventBusBuilder builder<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    logger <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过事件类找所有该事件的订阅者，</span>\n    subscriptionsByEventType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过订阅者类找所有Event</span>\n    typesBySubscriber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过粘性事件类查找所有粘性事件对象</span>\n    stickyEvents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//构建 AndroidHandlerMainThreadSupport</span>\n    mainThreadSupport <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">getMainThreadSupport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//构建 HandlerPoster</span>\n    mainThreadPoster <span class=\"token operator\">=</span> mainThreadSupport <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> mainThreadSupport<span class=\"token punctuation\">.</span><span class=\"token function\">createPoster</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//在后台发布事件</span>\n    backgroundPoster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BackgroundPoster</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//在后台发布事件</span>\n    asyncPoster <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncPoster</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    indexCount <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>subscriberInfoIndexes <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> builder<span class=\"token punctuation\">.</span>subscriberInfoIndexes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过反射或APT查找订阅者</span>\n    subscriberMethodFinder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubscriberMethodFinder</span><span class=\"token punctuation\">(</span>\n            <span class=\"token comment\" spellcheck=\"true\">//添加由 EventBus 的注释预处理器生成的索引。默认空集合</span>\n            builder<span class=\"token punctuation\">.</span>subscriberInfoIndexes<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">//启用严格的方法验证（默认值：false）</span>\n            builder<span class=\"token punctuation\">.</span>strictMethodVerification<span class=\"token punctuation\">,</span>\n            <span class=\"token comment\" spellcheck=\"true\">//即使有生成的索引也强制使用反射（默认值：false）</span>\n            builder<span class=\"token punctuation\">.</span>ignoreGeneratedIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//无法分发事件时是否打印错误信息</span>\n    logSubscriberExceptions <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>logSubscriberExceptions<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//没有订阅者注册事件是否打印错误信息</span>\n    logNoSubscriberMessages <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>logNoSubscriberMessages<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//在调用订阅者时如果发生异常是否 发送一个 SubscriberExceptionEvent 通知订阅者</span>\n    sendSubscriberExceptionEvent <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sendSubscriberExceptionEvent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//没有订阅者注册事件是否是否通知订阅者类的父类</span>\n    sendNoSubscriberEvent <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>sendNoSubscriberEvent<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//在调用订阅者时如果发生异常是否抛出 RuntimeException</span>\n    throwSubscriberException <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>throwSubscriberException<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//是否通知订阅者类的父类中的订阅者方法</span>\n    eventInheritance <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>eventInheritance<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//订阅者执行在工作线程时用到的线程池：Executors.newCachedThreadPool()</span>\n    executorService <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span>executorService<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"初始化EventBus-总结\"><a href=\"#初始化EventBus-总结\" class=\"headerlink\" title=\"初始化EventBus 总结\"></a>初始化EventBus 总结</h5><p>总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。</p>\n<p>单例模式常用于构建全局唯一类并提供全局唯一访问点。</p>\n<p>构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。</p>\n<p>EventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。</p>\n<p>需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。</p>\n<p>你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。</p>\n<p>可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。</p>\n<h4 id=\"10-2-2-注册订阅者：查找订阅者方法\"><a href=\"#10-2-2-注册订阅者：查找订阅者方法\" class=\"headerlink\" title=\"10.2.2 注册订阅者：查找订阅者方法\"></a>10.2.2 注册订阅者：查找订阅者方法</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> override fun <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//注册给定的订阅者以接收事件。 订阅者一旦对接收事件不再感兴趣，须调用 unregister(Object) 。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>Object subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass <span class=\"token operator\">=</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过订阅者类找出该类中所有的订阅者方法</span>\n    List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> subscriberMethods <span class=\"token operator\">=</span> subscriberMethodFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findSubscriberMethods</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//01</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>SubscriberMethod subscriberMethod <span class=\"token operator\">:</span> subscriberMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">,</span> subscriberMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//02</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>01查找订阅者方法流程：通过APT或反射方式查找订阅者方法并内存缓存</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//ConcurrentHashMap 内存缓存保证线程安全</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">>></span> METHOD_CACHE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//通过订阅者类查找订阅者方法</span>\nList<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> <span class=\"token function\">findSubscriberMethods</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//先从内存缓存尝试取，节省查找开销</span>\n    List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> subscriberMethods <span class=\"token operator\">=</span> METHOD_CACHE<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriberMethods <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> subscriberMethods<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ignoreGeneratedIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//运行时反射查找</span>\n        subscriberMethods <span class=\"token operator\">=</span> <span class=\"token function\">findUsingReflection</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//从APT中收集的备选中查找</span>\n        subscriberMethods <span class=\"token operator\">=</span> <span class=\"token function\">findUsingInfo</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriberMethods<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//订阅者类中至少有一个订阅者方法，否则运行时报错</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Subscriber \"</span> <span class=\"token operator\">+</span> subscriberClass\n                <span class=\"token operator\">+</span> <span class=\"token string\">\" and its super classes have no public methods with the @Subscribe annotation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//找到后缓存到内存</span>\n        METHOD_CACHE<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">,</span> subscriberMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> subscriberMethods<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>运行时反射查找</strong> </p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> <span class=\"token function\">findUsingReflection</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//准备一个 FindState 实例，如果对象池中没有就new,一个FindState对应一个订阅者类，用于表示查找状态</span>\n    FindState findState <span class=\"token operator\">=</span> <span class=\"token function\">prepareFindState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//存入订阅者 class</span>\n    findState<span class=\"token punctuation\">.</span><span class=\"token function\">initForSubscriber</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//遍历subscriberClass的超类体系，调用findUsingReflectionInSingleClass查找当前clazz的所有订阅函数</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>clazz <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//在订阅者类中通过反射的方式查找订阅者方法</span>\n        <span class=\"token function\">findUsingReflectionInSingleClass</span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        findState<span class=\"token punctuation\">.</span><span class=\"token function\">moveToSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取父类继续查找</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//循环结束 findState.subscriberMethods 中保存了这个类中的所有订阅者方法</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getMethodsAndRelease</span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>在订阅者类中通过反射的方式查找订阅者方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">findUsingReflectionInSingleClass</span><span class=\"token punctuation\">(</span>FindState findState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Method<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> methods<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//getDeclaredMethods 在某些设备上也会出现 NoClassDefFoundError</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//getDeclaredMethods 要比 getMethods 快，尤其是当订阅者是像 Activities 这样的胖类时</span>\n        methods <span class=\"token operator\">=</span> findState<span class=\"token punctuation\">.</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> th<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//getMethods 在某些设备上也会出现 NoClassDefFoundError，可能会在 getMethods 周围添加 catch</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            methods <span class=\"token operator\">=</span> findState<span class=\"token punctuation\">.</span>clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkageError</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// super class of NoClassDefFoundError to be a bit more broad...</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//clazz.getDeclaredMethods()只返回当前clazz中声明的函数，</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 而clazz.getMethods()将返回clazz的所有函数(包括继承自父类和接口的函数)，</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 因此，此时skipSuperClasses被置为true，阻止递归查找父类。</span>\n        findState<span class=\"token punctuation\">.</span>skipSuperClasses <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//遍历所有方法</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Method method <span class=\"token operator\">:</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> modifiers <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//修饰符</span>\n        <span class=\"token comment\" spellcheck=\"true\">//MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//校验订阅者方法：must be public, non-static, and non-abstract\"</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>modifiers <span class=\"token operator\">&amp;</span> Modifier<span class=\"token punctuation\">.</span>PUBLIC<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>modifiers <span class=\"token operator\">&amp;</span> MODIFIERS_IGNORE<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parameterTypes <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//参数类型</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parameterTypes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//正好一个参数</span>\n                Subscribe subscribeAnnotation <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>Subscribe<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscribeAnnotation <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 恰好一个参数的非静态的公开类并且有Subscribe注解标记</span>\n                    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventType <span class=\"token operator\">=</span> parameterTypes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 参数为事件类</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//检查重名方法（本类或父类之间可能重复）用于控制findState.subscriberMethods是否添加找到的method</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//如果不校验，如果子类重写订阅者方法会导致执行两次子类的订阅者方法</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span><span class=\"token function\">checkAdd</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        ThreadMode threadMode <span class=\"token operator\">=</span> subscribeAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">threadMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//收集订阅者方法，封装 SubscriberMethod</span>\n                        findState<span class=\"token punctuation\">.</span>subscriberMethods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SubscriberMethod</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">,</span> threadMode<span class=\"token punctuation\">,</span>\n                                subscribeAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">priority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> subscribeAnnotation<span class=\"token punctuation\">.</span><span class=\"token function\">sticky</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strictMethodVerification <span class=\"token operator\">&amp;&amp;</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>Subscribe<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                String methodName <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@Subscribe method \"</span> <span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"must have exactly 1 parameter but has \"</span> <span class=\"token operator\">+</span> parameterTypes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strictMethodVerification <span class=\"token operator\">&amp;&amp;</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span>Subscribe<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            String methodName <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span>methodName <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\" is a illegal @Subscribe method: must be public, non-static, and non-abstract\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>为啥不直接用Class.getMethods直接获取该类的全部方法呢？</p>\n<p>如果这个类比较庞大，用getMethods查找所有的方法就显得很笨重了，<br>如果使用的是getDeclaredMethods（该类声明的方法不包括从父类那里继承来的public方法），速度就会快一些，因为找的方法变少了，没有什么 equals,toString,hashCode等Object类的方法。</p>\n<p>Class#getMethods()，不检查方法签名（对于诸如不存在的参数类型之类的东西）。这已更改为 use Class#getDeclaredMethods()，它会检查并在出现问题时抛出异常。</p>\n<p>FindState 对象和对象池</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> POOL_SIZE <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> FindState<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> FIND_STATE_POOL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FindState</span><span class=\"token punctuation\">[</span>POOL_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> <span class=\"token function\">getMethodsAndRelease</span><span class=\"token punctuation\">(</span>FindState findState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> subscriberMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>subscriberMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    findState<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//findState 回收数据</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>FIND_STATE_POOL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> POOL_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FIND_STATE_POOL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//将当前用过的 findState 缓存回去，下次注册时不用 new</span>\n                FIND_STATE_POOL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> findState<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> subscriberMethods<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//先从对象池中随便找一个，没有才创建</span>\n<span class=\"token keyword\">private</span> FindState <span class=\"token function\">prepareFindState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//用的时候隔离开，用完了放回去。</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>FIND_STATE_POOL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//FindState[] FIND_STATE_POOL</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> POOL_SIZE<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//POOL_SIZE = 4</span>\n            FindState state <span class=\"token operator\">=</span> FIND_STATE_POOL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                FIND_STATE_POOL<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//在原来的位置用null占位</span>\n                <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 遍历FindState对象池，只要找到一个空对象就返回，</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FindState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FindState</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> subscriberMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Class<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> anyMethodByEventType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">></span> subscriberClassByMethodKey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> StringBuilder methodKeyBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass<span class=\"token punctuation\">;</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> skipSuperClasses<span class=\"token punctuation\">;</span>\n    SubscriberInfo subscriberInfo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">initForSubscriber</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscriberClass <span class=\"token operator\">=</span> clazz <span class=\"token operator\">=</span> subscriberClass<span class=\"token punctuation\">;</span>\n        skipSuperClasses <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        subscriberInfo <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        subscriberMethods<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        anyMethodByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subscriberClassByMethodKey<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        methodKeyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subscriberClass <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        clazz <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        skipSuperClasses <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        subscriberInfo <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 检查是否已经添加过这个订阅者方法</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkAdd</span><span class=\"token punctuation\">(</span>Method method<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//2 级检查：仅具有事件类型的第一级（快速），在需要时具有完整签名的第二级。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 通常订阅者没有侦听相同事件类型的方法。</span>\n        <span class=\"token comment\" spellcheck=\"true\">//第一层判断有无method监听此eventType,如果没有则可直接把找到的method加到subscriberMethods中。</span>\n        <span class=\"token comment\" spellcheck=\"true\">//第二层检查的是从MethodSignature（方法签名）判断能否把找到的method加进去。是为了防止在找父类时覆盖了子类的方法，因为此方法是子类是重写，方法名参数名完全一样（方法签名）；另一个原因是可能是当一个类有多个方法监听同一个event(尽管一般不会这样做)，也能将这些方法加进去。</span>\n        Object existing <span class=\"token operator\">=</span> anyMethodByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//没有添加过，</span>\n            <span class=\"token comment\" spellcheck=\"true\">//anyMethodByEventType存储&lt;eventType, method>映射关系，</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 若existing为空，则表示eventType第一次出现。</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 一般情况下，一个对象只会有一个订阅函数处理特定eventType。</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//一个类有多个方法监听同一个事件类型</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Method</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//处理一个对象有多个订阅函数处理eventType的情况，</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 此时，anyMethodByEventType中eventType被映射到一个非Method对象(即this)。</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkAddWithMethodSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Method<span class=\"token punctuation\">)</span> existing<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// Paranoia check</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Put any non-Method object to \"consume\" the existing Method</span>\n                <span class=\"token comment\" spellcheck=\"true\">//将任何非 Method 对象“使用”现有的 Method</span>\n                anyMethodByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">checkAddWithMethodSignature</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//由于存在多个订阅函数处理eventType，此时，单纯使用eventType作为key已经无法满足要求了，</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 因此，使用method.getName() + \">\" + eventType.getName()作为methodKey，</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 并使用subscriberClassByMethodKey存储&lt;methodKey, methodClass>的映射关系。</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkAddWithMethodSignature</span><span class=\"token punctuation\">(</span>Method method<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        methodKeyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        methodKeyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        methodKeyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//onEvent>TestEvent</span>\n        String methodKey <span class=\"token operator\">=</span> methodKeyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//getDeclaringClass: 返回表示类或接口的 Class 对象，该类或接口声明了由此对象表示的可执行文件。</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> methodClass <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaringClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//map[\"onEvent>TestEvent\"]=</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果methodClassOld或者methodClass是methodClassOld的子类，</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 则将&lt;methodKey, methodClass>放入，否则不放入。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 满足函数名相同、参数类型相同且被@Subscribe修饰的函数，</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 在一个类中不可能存在两个；考虑类继承体系，若这样的两个函数分别来自父类和子类，</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 则最终被加入的是子类的函数。</span>\n        Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> methodClassOld <span class=\"token operator\">=</span> subscriberClassByMethodKey<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> methodClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodClassOld <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> methodClassOld<span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>methodClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Only add if not already found in a sub class</span>\n            <span class=\"token comment\" spellcheck=\"true\">//仅在子类中未找到时才添加</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Revert the put, old class is further down the class hierarchy</span>\n            <span class=\"token comment\" spellcheck=\"true\">//还原放置，旧类在类层次结构中更靠后</span>\n            subscriberClassByMethodKey<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>methodKey<span class=\"token punctuation\">,</span> methodClassOld<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">moveToSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skipSuperClasses<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//反射方法时是通过getMethod 方式，已经包含父类方法了</span>\n            clazz <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            clazz <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            String clazzName <span class=\"token operator\">=</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Skip system classes, this degrades performance.</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Also we might avoid some ClassNotFoundException (see FAQ for background).</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clazzName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> clazzName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"javax.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n                    clazzName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"android.\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> clazzName<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"androidx.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                clazz <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>通过APT中收集数据中查找</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> <span class=\"token function\">findUsingInfo</span><span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    FindState findState <span class=\"token operator\">=</span> <span class=\"token function\">prepareFindState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    findState<span class=\"token punctuation\">.</span><span class=\"token function\">initForSubscriber</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>clazz <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过订阅者类从索引类中查找订阅者方法信息:subscriberInfo</span>\n        findState<span class=\"token punctuation\">.</span>subscriberInfo <span class=\"token operator\">=</span> <span class=\"token function\">getSubscriberInfo</span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>subscriberInfo <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            SubscriberMethod<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> findState<span class=\"token punctuation\">.</span>subscriberInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscriberMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>SubscriberMethod subscriberMethod <span class=\"token operator\">:</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 检查重名方法（本类或父类之间都可能重复</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span><span class=\"token function\">checkAdd</span><span class=\"token punctuation\">(</span>subscriberMethod<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span> subscriberMethod<span class=\"token punctuation\">.</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    findState<span class=\"token punctuation\">.</span>subscriberMethods<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>subscriberMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//apt 没有正常收集该类，降级为反射方式查找</span>\n            <span class=\"token function\">findUsingReflectionInSingleClass</span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        findState<span class=\"token punctuation\">.</span><span class=\"token function\">moveToSuperclass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">getMethodsAndRelease</span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> SubscriberInfo <span class=\"token function\">getSubscriberInfo</span><span class=\"token punctuation\">(</span>FindState findState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//找完子类找父类</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>subscriberInfo <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> findState<span class=\"token punctuation\">.</span>subscriberInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperSubscriberInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        SubscriberInfo superclassInfo <span class=\"token operator\">=</span> findState<span class=\"token punctuation\">.</span>subscriberInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getSuperSubscriberInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>clazz <span class=\"token operator\">==</span> superclassInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscriberClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> superclassInfo<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//apt 收集的索引类</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriberInfoIndexes <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过订阅者类从索引类中查找订阅者方法信息</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>SubscriberInfoIndex index <span class=\"token operator\">:</span> subscriberInfoIndexes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            SubscriberInfo info <span class=\"token operator\">=</span> index<span class=\"token punctuation\">.</span><span class=\"token function\">getSubscriberInfo</span><span class=\"token punctuation\">(</span>findState<span class=\"token punctuation\">.</span>clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> info<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>查找流程小结</strong></p>\n<p>注册订阅者分为查找和订阅两个过程</p>\n<p>查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。</p>\n<p>还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。</p>\n<p>亮点整理：</p>\n<ul>\n<li>METHOD_CACHE 缓存了查找过的进程内所有订阅者的键值对(订阅者类，类中的订阅者方法)信息，使用ConcurrentHashMap即保证的查找效率也避免了线程安全问题。</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">>></span> METHOD_CACHE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>FIND_STATE_POOL 是 FindState 对象池的一维静态数组，FindState 对查找的状态值做了一些封装以及对订阅者方法的检查逻辑。<ul>\n<li>为什么要使用FindState呢？首先是面向对象封装的采用</li>\n<li>在JVM系统中频繁地创建对象，是非常消耗资源的，在jvm垃圾回收时候，有可能会出现内存抖动的问题。使用对象池数组就有效的避免了内存抖动的问题。</li>\n<li>对 FIND_STATE_POOL  的操作需要考虑线程同步问题，这里使用了<code>synchronized</code>关键字来保证线程安全。</li>\n</ul>\n</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> FindState<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> FIND_STATE_POOL <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FindState</span><span class=\"token punctuation\">[</span>POOL_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>订阅流程</strong></p>\n<p>查找到当前注册的订阅者类中的所有订阅者方法后，下一步就是为每一个订阅者方法执行订阅流程了。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>Object subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> subscriberClass <span class=\"token operator\">=</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 01查找订阅者方法流程</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 通过订阅者类找出该类中所有的订阅者方法</span>\n    List<span class=\"token operator\">&lt;</span>SubscriberMethod<span class=\"token operator\">></span> subscriberMethods <span class=\"token operator\">=</span> subscriberMethodFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findSubscriberMethods</span><span class=\"token punctuation\">(</span>subscriberClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//遍历该订阅者类中所有订阅者方法，执行订阅操作</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>SubscriberMethod subscriberMethod <span class=\"token operator\">:</span> subscriberMethods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 02订阅流程</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 收集订阅者，事件类，分发粘性事件等</span>\n            <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">,</span> subscriberMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>订阅流程大题分为三步</p>\n<ul>\n<li>通过事件类找所有已经订阅过该事件的订阅者们，目的是为了进行优先级排序,全局缓存已注册订阅者等</li>\n<li>通过订阅者类找所有已经注册过的 Event 们， 用于判断是否注册、解注册等</li>\n<li>当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>Object subscriber<span class=\"token punctuation\">,</span> SubscriberMethod subscriberMethod<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//事件类</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventType <span class=\"token operator\">=</span> subscriberMethod<span class=\"token punctuation\">.</span>eventType<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//封装订阅者</span>\n    Subscription newSubscription <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">,</span> subscriberMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//Map&lt;Class&lt;?>, CopyOnWriteArrayList&lt;Subscription>> subscriptionsByEventType;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过事件类找所有该事件的订阅者，</span>\n    CopyOnWriteArrayList<span class=\"token operator\">&lt;</span>Subscription<span class=\"token operator\">></span> subscriptions <span class=\"token operator\">=</span> subscriptionsByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//还没缓存该事件就存且只能存一次</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriptions <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        subscriptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CopyOnWriteArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        subscriptionsByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> subscriptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//不能有重复订阅者</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>newSubscription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Subscriber \"</span> <span class=\"token operator\">+</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" already registered to event \"</span>\n                    <span class=\"token operator\">+</span> eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//优先级排序，要么最小查到最后，要么之前的某个位置</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> size <span class=\"token operator\">||</span> subscriberMethod<span class=\"token punctuation\">.</span>priority <span class=\"token operator\">></span> subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>subscriberMethod<span class=\"token punctuation\">.</span>priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//向事件对应的订阅者列表中添加当前订阅者，完成排序操作</span>\n            subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> newSubscription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//Map&lt;Object, List&lt;Class&lt;?>>> typesBySubscriber;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过订阅者类找所有Event</span>\n    List<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">>></span> subscribedEvents <span class=\"token operator\">=</span> typesBySubscriber<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscribedEvents <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        subscribedEvents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        typesBySubscriber<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">,</span> subscribedEvents<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//将当前订阅者方法的 event 存到指定订阅者类下的列表里</span>\n    subscribedEvents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//粘性事件：先pst 后 订阅</span>\n    <span class=\"token comment\" spellcheck=\"true\">//当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriberMethod<span class=\"token punctuation\">.</span>sticky<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//eventInheritance: 默认true</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 默认情况下，EventBus 考虑事件类层次结构（将通知超类的订阅者）。 关闭此功能将改进事件的发布。</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 对于直接扩展 Object 的简单事件类，我们测得事件发布速度提高了 20%。 对于更复杂的事件层次结构，加速应该大于 20%。</span>\n        <span class=\"token comment\" spellcheck=\"true\">//但是，请记住，事件发布通常只消耗应用程序内一小部分 CPU 时间，除非它以高速率发布，例如每秒数百/数千个事件</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventInheritance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//</span>\n            <span class=\"token comment\" spellcheck=\"true\">//必须考虑 eventType 的所有子类的现有粘性事件。注意：对于大量粘性事件，迭代所有事件可能效率低下，</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 因此应更改数据结构以允许更有效的查找（例如，存储超类的子类的附加映射：Class -> List&lt;Class>）。</span>\n            <span class=\"token comment\" spellcheck=\"true\">//stickyEvents = new ConcurrentHashMap&lt;>();</span>\n            Set<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Object<span class=\"token operator\">>></span> entries <span class=\"token operator\">=</span> stickyEvents<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> entry <span class=\"token operator\">:</span> entries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//key: event.getClass(), value: event</span>\n                Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> candidateEventType <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//isAssignableFrom: 确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。 如果是，则返回true ； 否则返回false 。 如果此Class对象表示原始类型，则如果指定的Class参数正是此Class对象，则此方法返回true ； 否则返回false 。</span>\n                <span class=\"token comment\" spellcheck=\"true\">//具体来说，此方法测试是否可以通过标识转换或通过扩展引用转换将指定Class参数表示的类型转换为此Class对象表示的类型。 有关详细信息，请参阅Java 语言规范5.1.1 和 5.1.4 节</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">.</span><span class=\"token function\">isAssignableFrom</span><span class=\"token punctuation\">(</span>candidateEventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//比较class</span>\n                    Object stickyEvent <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">checkPostStickyEventToSubscription</span><span class=\"token punctuation\">(</span>newSubscription<span class=\"token punctuation\">,</span> stickyEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//通过粘性事件类查找所有粘性事件对象</span>\n            Object stickyEvent <span class=\"token operator\">=</span> stickyEvents<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">checkPostStickyEventToSubscription</span><span class=\"token punctuation\">(</span>newSubscription<span class=\"token punctuation\">,</span> stickyEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkPostStickyEventToSubscription</span><span class=\"token punctuation\">(</span>Subscription newSubscription<span class=\"token punctuation\">,</span> Object stickyEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stickyEvent <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// --> Strange corner case, which we don't take care of here.</span>\n        <span class=\"token comment\" spellcheck=\"true\">//如果订阅者试图中止事件，它将失败（事件在发布状态下不被跟踪）--> 奇怪的极端情况，我们在这里不处理。</span>\n        <span class=\"token function\">postToSubscription</span><span class=\"token punctuation\">(</span>newSubscription<span class=\"token punctuation\">,</span> stickyEvent<span class=\"token punctuation\">,</span> <span class=\"token function\">isMainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"注册订阅者流程总结\"><a href=\"#注册订阅者流程总结\" class=\"headerlink\" title=\"注册订阅者流程总结\"></a>注册订阅者流程总结</h5><p>注册订阅者分为查找和订阅两个过程</p>\n<p>查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。</p>\n<p>还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。</p>\n<p>订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。</p>\n<p>亮点整理：</p>\n<ul>\n<li>CopyOnWriteArrayList 保证线程安全</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Map<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> CopyOnWriteArrayList<span class=\"token operator\">&lt;</span>Subscription<span class=\"token operator\">>></span> subscriptionsByEventType<span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>ConcurrentHashMap 保证了效率和安全</li>\n</ul>\n<pre class=\" language-java\"><code class=\"language-java\">stickyEvents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentHashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"10-2-3-事件发布\"><a href=\"#10-2-3-事件发布\" class=\"headerlink\" title=\"10.2.3 事件发布\"></a>10.2.3 事件发布</h4><p>发布粘性事件，粘性事件特别之处在于发布前存到了一个map中，当注册时直接执行粘性事件的发布</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postSticky</span><span class=\"token punctuation\">(</span>Object event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>stickyEvents<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stickyEvents<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//放置后应发布，以防订阅者想立即删除</span>\n    <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>发布普通事件，通过ThreadLocal保证发送时的同步问题</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>Object event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//currentPostingThreadState = new ThreadLocal&lt;PostingThreadState>()</span>\n    <span class=\"token comment\" spellcheck=\"true\">//每个线程都有一份 postingState 实例，</span>\n    <span class=\"token comment\" spellcheck=\"true\">//封装 PostingThreadState 对于 ThreadLocal，设置（并获得多个值）要快得多。</span>\n    PostingThreadState postingState <span class=\"token operator\">=</span> currentPostingThreadState<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    List<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span> eventQueue <span class=\"token operator\">=</span> postingState<span class=\"token punctuation\">.</span>eventQueue<span class=\"token punctuation\">;</span>\n    eventQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>postingState<span class=\"token punctuation\">.</span>isPosting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 默认 false</span>\n        postingState<span class=\"token punctuation\">.</span>isMainThread <span class=\"token operator\">=</span> <span class=\"token function\">isMainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//判断主线程还是子线程</span>\n        postingState<span class=\"token punctuation\">.</span>isPosting <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//这里保证 cancelEventDelivery 是在同一个线程调用的</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postingState<span class=\"token punctuation\">.</span>canceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//cancelEventDelivery</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventBusException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal error. Abort state was not reset\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//可能发送了多个事件</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>eventQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//发送队列依次取出第一个事件执行发布</span>\n                <span class=\"token function\">postSingleEvent</span><span class=\"token punctuation\">(</span>eventQueue<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> postingState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//发送完事件后重置标志位</span>\n            postingState<span class=\"token punctuation\">.</span>isPosting <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            postingState<span class=\"token punctuation\">.</span>isMainThread <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>事件发布时考虑事件的继承关系</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//发送队列的第一个事件</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postSingleEvent</span><span class=\"token punctuation\">(</span>Object event<span class=\"token punctuation\">,</span> PostingThreadState postingState<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Error <span class=\"token punctuation\">{</span>\n    Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventClass <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> subscriptionFound <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//是否考虑订阅者的继承关系</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventInheritance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//事件类和事件类的父类们</span>\n        List<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">>></span> eventTypes <span class=\"token operator\">=</span> <span class=\"token function\">lookupAllEventTypes</span><span class=\"token punctuation\">(</span>eventClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> countTypes <span class=\"token operator\">=</span> eventTypes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> h <span class=\"token operator\">&lt;</span> countTypes<span class=\"token punctuation\">;</span> h<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> eventTypes<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//当前类和父类有一个没收到就算失败</span>\n            subscriptionFound <span class=\"token operator\">|=</span> <span class=\"token function\">postSingleEventForEventType</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> postingState<span class=\"token punctuation\">,</span> clazz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        subscriptionFound <span class=\"token operator\">=</span> <span class=\"token function\">postSingleEventForEventType</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> postingState<span class=\"token punctuation\">,</span> eventClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>subscriptionFound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>logNoSubscriberMessages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Level<span class=\"token punctuation\">.</span>FINE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No subscribers registered for event \"</span> <span class=\"token operator\">+</span> eventClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//兜底方案，发送一个通知事件，告诉订阅者刚才的事件没发送成功</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sendNoSubscriberEvent <span class=\"token operator\">&amp;&amp;</span> eventClass <span class=\"token operator\">!=</span> NoSubscriberEvent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> <span class=\"token operator\">&amp;&amp;</span>\n                eventClass <span class=\"token operator\">!=</span> SubscriberExceptionEvent<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NoSubscriberEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">postSingleEventForEventType</span><span class=\"token punctuation\">(</span>Object event<span class=\"token punctuation\">,</span> PostingThreadState postingState<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    CopyOnWriteArrayList<span class=\"token operator\">&lt;</span>Subscription<span class=\"token operator\">></span> subscriptions<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过单事件，找到所有观察者</span>\n        subscriptions <span class=\"token operator\">=</span> subscriptionsByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>eventClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriptions <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Subscription subscription <span class=\"token operator\">:</span> subscriptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//存入线程</span>\n            postingState<span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n            postingState<span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> subscription<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">boolean</span> aborted<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">postToSubscription</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> postingState<span class=\"token punctuation\">.</span>isMainThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                aborted <span class=\"token operator\">=</span> postingState<span class=\"token punctuation\">.</span>canceled<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//重置状态</span>\n                postingState<span class=\"token punctuation\">.</span>event <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                postingState<span class=\"token punctuation\">.</span>subscription <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                postingState<span class=\"token punctuation\">.</span>canceled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aborted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>发布时会根据订阅者的线程模型做出不同处理</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//发布到订阅</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postToSubscription</span><span class=\"token punctuation\">(</span>Subscription subscription<span class=\"token punctuation\">,</span> Object event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isMainThread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//根据线程模型不同处理</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">.</span>subscriberMethod<span class=\"token punctuation\">.</span>threadMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> POSTING<span class=\"token operator\">:</span> <span class=\"token comment\" spellcheck=\"true\">//订阅和发布是同一个线程</span>\n            <span class=\"token function\">invokeSubscriber</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> MAIN<span class=\"token operator\">:</span> <span class=\"token comment\" spellcheck=\"true\">//订阅在主线程</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMainThread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">invokeSubscriber</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//通过Handler 发送到主线程</span>\n                mainThreadPoster<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> MAIN_ORDERED<span class=\"token operator\">:</span> <span class=\"token comment\" spellcheck=\"true\">//订阅在主线程排队</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mainThreadPoster <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mainThreadPoster<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//临时：技术上不正确，因为海报没有与订阅者分离</span>\n                <span class=\"token comment\" spellcheck=\"true\">// temporary: technically not correct as poster not decoupled from subscriber</span>\n                <span class=\"token function\">invokeSubscriber</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> BACKGROUND<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token comment\" spellcheck=\"true\">///如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMainThread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                backgroundPoster<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">invokeSubscriber</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ASYNC<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。\n            asyncPoster<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown thread mode: \"</span> <span class=\"token operator\">+</span> subscription<span class=\"token punctuation\">.</span>subscriberMethod<span class=\"token punctuation\">.</span>threadMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  对应四种线程模型</p>\n<p>反射调用观察者</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//同一个线程执行订阅者方法</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">invokeSubscriber</span><span class=\"token punctuation\">(</span>Subscription subscription<span class=\"token punctuation\">,</span> Object event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//方法、类、参数</span>\n        subscription<span class=\"token punctuation\">.</span>subscriberMethod<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">.</span>subscriber<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">handleSubscriberException</span><span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unexpected exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"事件发布流程总结\"><a href=\"#事件发布流程总结\" class=\"headerlink\" title=\"事件发布流程总结\"></a>事件发布流程总结</h5><p>发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。</p>\n<p>具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。</p>\n<h4 id=\"10-2-4-注销订阅者\"><a href=\"#10-2-4-注销订阅者\" class=\"headerlink\" title=\"10.2.4 注销订阅者\"></a>10.2.4 注销订阅者</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> override fun <span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    EventBus<span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>根据订阅者类找该类的所有事件</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unregister</span><span class=\"token punctuation\">(</span>Object subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//找到订阅者类对应的事件类列表</span>\n    List<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">>></span> subscribedTypes <span class=\"token operator\">=</span> typesBySubscriber<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscribedTypes <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//根据每个事件类解除每个订阅者</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventType <span class=\"token operator\">:</span> subscribedTypes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">unsubscribeByEventType</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">,</span> eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//从内存map 移除</span>\n        typesBySubscriber<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>subscriber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Level<span class=\"token punctuation\">.</span>WARNING<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Subscriber to unregister was not registered before: \"</span> <span class=\"token operator\">+</span> subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>根据每个事件找对应的所有订阅者，如果订阅者中的订阅者类和当前类一样才执行解除订阅</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unsubscribeByEventType</span><span class=\"token punctuation\">(</span>Object subscriber<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> eventType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//根据每个事件类找到所有该事件的订阅者</span>\n    List<span class=\"token operator\">&lt;</span>Subscription<span class=\"token operator\">></span> subscriptions <span class=\"token operator\">=</span> subscriptionsByEventType<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscriptions <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//每个订阅者：类+方法</span>\n            Subscription subscription <span class=\"token operator\">=</span> subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//确认是当前类的订阅者</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subscription<span class=\"token punctuation\">.</span>subscriber <span class=\"token operator\">==</span> subscriber<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//修改解除订阅标志位</span>\n                subscription<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//防止越界</span>\n                size<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"注销订阅者流程总结\"><a href=\"#注销订阅者流程总结\" class=\"headerlink\" title=\"注销订阅者流程总结\"></a>注销订阅者流程总结</h5><p>注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。</p>\n<h2 id=\"11-参考\"><a href=\"#11-参考\" class=\"headerlink\" title=\"11. 参考\"></a>11. 参考</h2><p><strong><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\">Github | EventBus</a></strong></p>\n<p><a href=\"https://greenrobot.org/eventbus/documentation/\" target=\"_blank\" rel=\"noopener\">EventBus Documentation</a></p>\n<p><a href=\"https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D\" target=\"_blank\" rel=\"noopener\">极客时间| 设计模式之美</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1383971\" target=\"_blank\" rel=\"noopener\">EventBus 如何使用及一些常见场景</a></p>\n<p><a href=\"https://blog.csdn.net/f552126367/article/details/86571012\" target=\"_blank\" rel=\"noopener\">EventBus使用总结和使用场景</a></p>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"EventBus-事件总线框架深入分析\"><a href=\"#EventBus-事件总线框架深入分析\" class=\"headerlink\" title=\"EventBus 事件总线框架深入分析\"></a>EventBus 事件总线框架深入分析</h1><h2 id=\"1-EventBus-关键词云\"><a href=\"#1-EventBus-关键词云\" class=\"headerlink\" title=\"1. EventBus 关键词云\"></a>1. EventBus 关键词云</h2><p>设计模式、数据结构、内存占用、查找效率、线程安全、对象池、事件继承问题、事件发布器、线程模式、同步、异步</p>\n<h2 id=\"2-EventBus-快问快答\"><a href=\"#2-EventBus-快问快答\" class=\"headerlink\" title=\"2. EventBus 快问快答\"></a>2. EventBus 快问快答</h2><p>EventBus 中运用了那些设计模式</p>\n<ul>\n<li>观察者、单例、构建者、门面、策略</li>\n</ul>\n<p>EventBus 中运用了那些数据结构</p>\n<ul>\n<li>ThreadLocal、CopyOnWriteArrayList、ConcurrentHashMap、HashMap、PendingPostQueue</li>\n</ul>\n<p>EventBus 中的对象池</p>\n<ul>\n<li>FindState/FIND_STATE_POOL、PendingPost/pendingPostPool</li>\n</ul>\n<p>EventBus 中的锁与线程安全问题</p>\n<ul>\n<li>并发容器、同步锁、ThreadLocal</li>\n</ul>\n<p>如何设计一个最小原型 EventBus 框架需要考虑哪些问题</p>\n<ul>\n<li>内存占用、查找效率、线程安全</li>\n</ul>\n<p>EventBus 中的事件发布时如何实现同步、异步的</p>\n<ul>\n<li>同步：主线程、Handler；异步：子线程</li>\n</ul>\n<h2 id=\"3-EventBus-总结\"><a href=\"#3-EventBus-总结\" class=\"headerlink\" title=\"3. EventBus 总结\"></a>3. EventBus 总结</h2><h4 id=\"3-1-编译时APT流程总结\"><a href=\"#3-1-编译时APT流程总结\" class=\"headerlink\" title=\"3.1 编译时APT流程总结\"></a>3.1 编译时APT流程总结</h4><p>EventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。</p>\n<p>通过APT方式收集订阅者的大体流程如下：</p>\n<ul>\n<li>在编码阶段添加订阅者方法时我们需要通过 <strong>@Subscribe</strong> 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：<strong>enum ThreadMode、boolean sticky，int priority</strong> 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。</li>\n<li>EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。</li>\n<li>注解处理器注解处理流程主要分为：<strong>收集订阅者、校验订阅者、生成索引类</strong>三个过程。<ul>\n<li><strong>收集订阅者</strong>：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 <strong>正好只有一个参数的非静态的公开的方法</strong> 的规则。然后将找到的订阅者方法和订阅者类存入 *<em>ListMap&lt;TypeElement, ExecutableElement&gt; methodsByClass *</em>  容器中。该容器的数据结构是：<code>HashMap&lt;K, List&lt;V&gt;&gt;()</code> key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。</li>\n<li><strong>校验订阅者</strong>（包括订阅者类/订阅者类的父类和订阅者方法）：<ul>\n<li>校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足<strong>public/default+索引类和订阅者类的包名一样</strong> 的规则，不满足的订阅者类需要添加到 <strong>Set<TypeElement> classesToSkip</strong> 容器中标记。</li>\n<li>校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 <strong>Set<TypeElement> classesToSkip</strong> 容器中标记。<ul>\n<li>订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。</li>\n<li>订阅者方法的参数类型是类类型但是对索引类不可见。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>生成索引类</strong>：遍历最终收集到的 <strong>methodsByClass</strong> 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-2-初始化EventBus-总结\"><a href=\"#3-2-初始化EventBus-总结\" class=\"headerlink\" title=\"3.2 初始化EventBus 总结\"></a>3.2 初始化EventBus 总结</h4><p>总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。</p>\n<p>单例模式常用于构建全局唯一类并提供全局唯一访问点。</p>\n<p>构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。</p>\n<p>EventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。</p>\n<p>需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。</p>\n<p>你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。</p>\n<p>可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。</p>\n<h4 id=\"3-3-注册订阅者流程总结\"><a href=\"#3-3-注册订阅者流程总结\" class=\"headerlink\" title=\"3.3 注册订阅者流程总结\"></a>3.3 注册订阅者流程总结</h4><p>注册订阅者分为查找和订阅两个过程</p>\n<p>查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。</p>\n<p>还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。</p>\n<p>订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。</p>\n<h4 id=\"3-4-事件发布流程总结\"><a href=\"#3-4-事件发布流程总结\" class=\"headerlink\" title=\"3.4 事件发布流程总结\"></a>3.4 事件发布流程总结</h4><p>发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。</p>\n<p>具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。</p>\n<h4 id=\"3-5-注销订阅者流程总结\"><a href=\"#3-5-注销订阅者流程总结\" class=\"headerlink\" title=\"3.5 注销订阅者流程总结\"></a>3.5 注销订阅者流程总结</h4><p>注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。</p>\n<h2 id=\"4-概述\"><a href=\"#4-概述\" class=\"headerlink\" title=\"4. 概述\"></a>4. 概述</h2><blockquote>\n<p>框架的作用有：隐藏实现细节，降低开发难度，做到代码复用，解耦业务与非业务代码，让程序员聚焦业务开发。</p>\n</blockquote>\n<p>EventBus 翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现<strong>观察者模式</strong>，从而减少样板代码。其中，<a href=\"https://github.com/google/guava/wiki/EventBusExplained\" target=\"_blank\" rel=\"noopener\">Google Guava EventBus</a>  就是一个比较著名的 EventBus 框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式。</p>\n<p>而我们今天要分析的 <a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\"><strong>GreenRobot EventBus</strong></a> 是同时适用于 Android 和 Java 平台的事件总线框架，它可简化Activities, Fragments, Threads, Services之间的通信且轻量，它的核心设计理念是对观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）的封装。传统的事件传递方式包括：Handler、BroadcastReceiver、Interface回调等，相比之下EventBus的优点是代码简洁，使用简单，并将事件发布和订阅充分解耦。</p>\n<blockquote>\n<p>*<em>观察者模式 *</em></p>\n<p>定义：定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。</p>\n<p>作用：解耦观察者和被观察者。</p>\n<p>实现：</p>\n<ul>\n<li><p><strong>同步阻塞</strong>是最经典的实现方式，主要是为了代码解耦；观察者和被观察者代码在同一个线程内执行，被观察者发送更新通知后就一直阻塞着，直到所有的观察者代码都执行完成之后，才会执行后续的代码。</p>\n</li>\n<li><p><strong>异步非阻塞</strong>除了能实现代码解耦之外，还能提高代码的执行效率；实现方式是被观察者发送更新通知后启动一个新的线程来执行观察者的回调函数。</p>\n</li>\n</ul>\n</blockquote>\n<p><strong>EventBus 观察者模式框架 VS 自己实现观察模式</strong></p>\n<p>利用 EventBus 框架实现的观察者模式，跟从零开始编写的观察者模式相比，从大的流程上来说，实现思路大致一样，都需要定义观察者（Observer），并且通过 register() 函数注册Observer，也都需要通过调用某个函数（比如，EventBus 中的 post() 函数）来给 Observer 发送消息（在 EventBus 中消息被称作事件 event）。</p>\n<p>但在实现细节方面，它们又有些区别。基于 EventBus，我们不需要定义 Observer 接口，任意类型的对象都可以注册到 EventBus 中，通过 @Subscribe 注解来标明类中哪个函数可以接收被观察者发送的消息。</p>\n<p>跟经典的观察者模式的不同之处在于，当我们调用 post() 函数发送消息的时候，并非把消息发送给所有的观察者，而是发送给可匹配的观察者。所谓可匹配指的是，能接收的消息类型是发送消息（post 函数定义中的 event）类型或是其父类。</p>\n<h2 id=\"5-工作机制\"><a href=\"#5-工作机制\" class=\"headerlink\" title=\"5. 工作机制\"></a>5. 工作机制</h2><p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211107112804.png\" alt=\"EventBus-Android-Publish-Subscribe\"></p>\n<p><strong>发布者(Publisher)</strong>：发布者主动生成事件发布事件给指定订阅者。</p>\n<pre><code class=\"java\">EventBus.getDefault().post(new MessageEvent());</code></pre>\n<p><strong>事件总线(EventBus)</strong>：统筹所有事件的调度工作，如：收集、注册、切换、分发、解注册等操作。</p>\n<pre><code class=\"java\">EventBus.getDefault().register(this);\nEventBus.getDefault().unregister(this);</code></pre>\n<p><strong>订阅者(Subscriber)</strong>：声明订阅方法并通过注释标记，可指定线程模式。</p>\n<pre><code class=\"java\">@Subscribe(threadMode = ThreadMode.MAIN)  \npublic void onMessageEvent(MessageEvent event) {/* Do something */};</code></pre>\n<h2 id=\"6-EventBus-优势\"><a href=\"#6-EventBus-优势\" class=\"headerlink\" title=\"6. EventBus 优势\"></a>6. EventBus 优势</h2><ul>\n<li>简化组件之间的通信，同进程内随便发，组件化中需要考虑 Event Object 的存放位置。</li>\n<li>解耦事件的发送者和接收者，仅通过 Event Object 进行链接发送者和接受者。</li>\n<li>在 UI 组件和后台线程切换中表现良好的性能</li>\n<li>避免复杂且容易出错的依赖关系和生命周期问题，提供解注册订阅者。</li>\n<li>很快；专为高性能而优化，很小（~60k jar）</li>\n<li><a href=\"http://www.appbrain.com/stats/libraries/details/eventbus/greenrobot-eventbus\" target=\"_blank\" rel=\"noopener\">在实践中被证明通过应用与1,000,000,000+安装</a></li>\n<li>具有分发指定线程、设置订阅者优先级等功能。</li>\n</ul>\n<h2 id=\"7-EventBus-功能\"><a href=\"#7-EventBus-功能\" class=\"headerlink\" title=\"7. EventBus 功能\"></a>7. EventBus 功能</h2><ul>\n<li><strong>简单而强大：</strong> EventBus 是一个小型库，其 API 非常容易学习。然而，通过解耦组件，您的软件架构可能会受益匪浅：订阅者在使用事件时并不了解发送者。</li>\n<li>实战<strong>测试：</strong> EventBus 是最常用的 Android 库之一：数以千计的应用程序使用 EventBus，包括非常流行的应用程序。超过 10 亿次应用安装不言而喻。</li>\n<li><strong>高性能：</strong>尤其是在 Android 上，性能很重要。EventBus 进行了大量分析和优化；可能使其成为同类中最快的解决方案。</li>\n<li><strong>方便的基于注释的 API</strong> （不牺牲性能）<strong>：</strong>只需将 @Subscribe 注释放在您的订阅者方法中。由于注释的构建时索引，EventBus 不需要在您的应用程序运行时进行注释反射，这在 Android 上非常慢。</li>\n<li><strong>Android 主线程传递：</strong>在与 UI 交互时，EventBus 可以在主线程中传递事件，而不管事件是如何发布的。</li>\n<li><strong>后台线程传递：</strong>如果您的订阅者执行长时间运行的任务，EventBus 还可以使用后台线程来避免 UI 阻塞。</li>\n<li><strong>事件和订阅者继承：</strong>在 EventBus 中，面向对象的范式适用于事件和订阅者类。假设事件类 A 是 B 的超类。发布的 B 类事件也将发布给对 A 感兴趣的订阅者。类似地考虑订阅者类的继承。</li>\n<li><strong>零配置：</strong> 您可以立即开始使用代码中任何位置可用的默认 EventBus 实例。</li>\n<li><strong>可配置：</strong> 要根据您的要求调整 EventBus，您可以使用构建器模式调整其行为。</li>\n</ul>\n<h2 id=\"8-EventBus-应用\"><a href=\"#8-EventBus-应用\" class=\"headerlink\" title=\"8. EventBus 应用\"></a>8. EventBus 应用</h2><ul>\n<li>如果使用 EventBus 的页面比较多，可以在 Acitivity/Fragment  基类里面绑定和解绑，并添加一个默认接收事件。</li>\n<li>跨界面修改值<ul>\n<li>你有一个主界面，里面有一些信息可能会修改，但触发源不在该界面，是在其他的界面触发了一些事件后，首页的内容需要做修改。</li>\n<li>如果没有EventBus，也有很多的方式可以实现，譬如定义全局静态变量、或者onResume时获取触发源的值修改界面值、或者定义个CallBack接口传出去等。</li>\n<li>譬如微信首页你有未读消息3个时，界面会有3个小红点点，当你点开一个未读消息后，进入了下个界面，那么此时未读消息就是2了，但你并不在首页了，你需要在你打开消息并阅读完毕后通知首页改成2.这就是一种跨界面修改值。</li>\n</ul>\n</li>\n<li>Activity/Fragment 与 Fragment 之间通信</li>\n<li>注册页面回退逻辑<ul>\n<li>在注册页面填写了手机号、个人信息，传头像操作后，注册成功了，进入了主界面。此时我们需要在主界面关闭之前的注册的所有页面，此时就可以使用eventbus来通知前几个注册用的activity来关闭自己。这样的目的就是当注册失败时，用户按返回键还是能回到填写信息页。当注册成功后，按返回键就直接退出程序，不再保留注册填信息页了。</li>\n</ul>\n</li>\n<li>推送/消息功能<ul>\n<li>收到推送后需要不同的页面来做处理的。例如：微信PC登录时，手机端的确认登录页面是可以随时随地弹出的，</li>\n</ul>\n</li>\n<li>组件化通讯<ul>\n<li>组件之间的交互，例如：测试环境中环境切换组件，切换后需要重新登录并重置环境信息等。</li>\n</ul>\n</li>\n<li>EventBus最好的使用方式就是替代某些 BroadcastReceiver 和 Interface；如fragment之间进行通信，用广播和接口都比较麻烦，而用EventBus则比较简单。</li>\n<li>以下场景可以考虑不用<ul>\n<li>Event 会根据传递的参数给所有接收者都传递消息，这就导致如果你想给指定一个类里发布消息就得自己写一个接口类，要不然就会好多执行者都会执行该方法，所以一般能用Intent组件传值时还是用Intent。</li>\n<li>EventBus相对于BroadcastReceiver，广播是相对消耗时间、空间最多的一种方式，但是大家都知道，广播是四大组件之一，许多系统级的事件都是通过广播来通知的，比如说网络的变化、电量的变化，短信发送和接收的状态，所以，如果与android系统进行相关的通知，还是要选择本地广播；在BroadcastReceiver的 onReceive方法中，可以获得Context 、intent参数，这两个参数可以调用许多的sdk中的方法，而eventbus获得这两个参数相对比较困难。</li>\n<li>EventBus相对于handler，可以实现handler的方式，但是也会面对有许多接收者的问题，所以如果是线程回调的话，我觉得还是用handler比较好。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9-EventBus-使用\"><a href=\"#9-EventBus-使用\" class=\"headerlink\" title=\"9. EventBus 使用\"></a>9. EventBus 使用</h2><h3 id=\"9-1-订阅者索引\"><a href=\"#9-1-订阅者索引\" class=\"headerlink\" title=\"9.1 订阅者索引\"></a>9.1 订阅者索引</h3><p>使用订阅者索引可以避免在运行时使用反射对订阅者方法进行昂贵的查找。EventBus 注释处理器在编译时查找它们。</p>\n<h4 id=\"符合注解收集的要求\"><a href=\"#符合注解收集的要求\" class=\"headerlink\" title=\"符合注解收集的要求\"></a>符合注解收集的要求</h4><ul>\n<li>@Subscribe 方法及其类<strong>必须是 public</strong>。</li>\n<li>事件类<strong>必须是 public</strong>。</li>\n<li>@Subscribe可以<strong>不</strong>被使用<strong>匿名类的内部</strong>。</li>\n<li>当 EventBus 不能使用索引时，例如不满足上述要求，它会在运行时降级为通过反射查找订阅者。这确保@Subscribe 方法接收事件，即使它们不是索引的一部分。</li>\n</ul>\n<h4 id=\"配置注解处理器\"><a href=\"#配置注解处理器\" class=\"headerlink\" title=\"配置注解处理器\"></a>配置注解处理器</h4><pre><code class=\"groovy\">//java\nandroid {\n    defaultConfig {\n        javaCompileOptions {\n            annotationProcessorOptions {\n                arguments = [ eventBusIndex : &#39;com.example.myapp.MyEventBusIndex&#39; ]\n            }\n        }\n    }\n}\n\ndependencies {\n    def eventbus_version = &#39;3.2.0&#39;\n    implementation &quot;org.greenrobot:eventbus:$eventbus_version&quot;\n    annotationProcessor &quot;org.greenrobot:eventbus-annotation-processor:$eventbus_version&quot;\n}\n\n//kotlin \napply plugin: &#39;kotlin-kapt&#39; // ensure kapt plugin is applied\n\ndependencies {\n    def eventbus_version = &#39;3.2.0&#39;\n    implementation &quot;org.greenrobot:eventbus:$eventbus_version&quot;\n    kapt &quot;org.greenrobot:eventbus-annotation-processor:$eventbus_version&quot;\n}\n\nkapt {\n    arguments {\n        arg(&#39;eventBusIndex&#39;, &#39;com.example.myapp.MyEventBusIndex&#39;)\n    }\n}</code></pre>\n<h4 id=\"使用订阅者索引类\"><a href=\"#使用订阅者索引类\" class=\"headerlink\" title=\"使用订阅者索引类\"></a>使用订阅者索引类</h4><p>在您的<em>Application</em>类中，使用<em>EventBus.builder().addIndex(indexInstance)</em>将索引类的实例传递给 EventBus。组件中的索引类也可以通过addIndex方法添加到 EventBus 实例中。</p>\n<pre><code class=\"kotlin\">//创建一个新实例并配置索引类\nval eventBus = EventBus.builder().addIndex(MyEventBusIndex()).build()\n//使用单例模式并配置索引类\nEventBus.builder().addIndex(MyEventBusIndex()).installDefaultEventBus()\n// Now the default instance uses the given index. Use it like this:\nval eventBus = EventBus.getDefault()</code></pre>\n<h4 id=\"防止混淆订阅者\"><a href=\"#防止混淆订阅者\" class=\"headerlink\" title=\"防止混淆订阅者\"></a>防止混淆订阅者</h4><pre><code class=\"java\">-keepattributes *Annotation*\n-keepclassmembers class * {\n    @org.greenrobot.eventbus.Subscribe &lt;methods&gt;;\n}\n-keep enum org.greenrobot.eventbus.ThreadMode { *; }\n\n# And if you use AsyncExecutor:\n-keepclassmembers class * extends org.greenrobot.eventbus.util.ThrowableFailureEvent {\n    &lt;init&gt;(java.lang.Throwable);\n}</code></pre>\n<h3 id=\"9-2-配置EventBus\"><a href=\"#9-2-配置EventBus\" class=\"headerlink\" title=\"9.2 配置EventBus\"></a>9.2 配置EventBus</h3><p>EventBusBuilder 类可以配置 EventBus 的各个方面。例如</p>\n<p>使用 EventBus.getDefault() 是一种从应用程序中的任何位置获取共享 EventBus 实例的简单方法。EventBusBuilder 还允许使用installDefaultEventBus ( )方法配置此默认实例。可以在 Application 类中在使用 EventBus 之前配置默认 EventBus 实例。</p>\n<pre><code class=\"kotlin\">class App : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        EventBus.builder()\n            //将此与 BuildConfig.DEBUG 一起使用可让应用程序尽在在 DEBUG 模式下崩溃。默认为false\n            // 这样就不会在开发过程中错过异常（Invoking subscriber failed）\n            .throwSubscriberException(false)\n            //如果发送了没有订阅者的event,是否需要打印提示哪一个 event bean 的log,默认为true\n            //提示信息： No subscribers registered for event class org.greenrobot.eventbusperf.jay.bus.SubEvent\n            .logNoSubscriberMessages(true)\n            .installDefaultEventBus()\n    }\n}</code></pre>\n<h3 id=\"9-3-ThreadMode\"><a href=\"#9-3-ThreadMode\" class=\"headerlink\" title=\"9.3 ThreadMode\"></a>9.3 ThreadMode</h3><p>在 EventBus 中，您可以使用四种 ThreadMode 来指定订阅者方法所在的线程。</p>\n<ul>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_POSTING\" target=\"_blank\" rel=\"noopener\">1 ThreadMode: POSTING</a> ：发布者和订阅者在同一个线程。<ul>\n<li>这是默认设置。事件传递是同步完成的，需要注意避免阻塞主线程。</li>\n<li>避免了线程切换意味着开销较小。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN\" target=\"_blank\" rel=\"noopener\">2 ThreadMode: MAIN</a> ：订阅者将在 Android 的主线程（UI 线程）中调用。<ul>\n<li>事件传递是同步完成的，需要注意避免阻塞主线程。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_MAIN_ORDERED\" target=\"_blank\" rel=\"noopener\">3 ThreadMode: MAIN_ORDERED</a> ：订阅者将在 Android 的主线程中被调用，该事件总是通过Handler排队等待稍后传递给订阅者。<ul>\n<li>为事件处理提供了更严格和更一致的顺序。</li>\n<li>如果前一个也是main_ordered 需要等前一个执行完成后才执行。</li>\n<li>事件传递是异步完成的。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_BACKGROUND\" target=\"_blank\" rel=\"noopener\">4 ThreadMode: BACKGROUND</a> ：如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。<ul>\n<li>事件传递是异步完成的。</li>\n</ul>\n</li>\n<li><a href=\"https://greenrobot.org/eventbus/documentation/delivery-threads-threadmode/#ThreadMode_ASYNC\" target=\"_blank\" rel=\"noopener\">5 ThreadMode: ASYNC</a> ：无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。<ul>\n<li>EventBus 使用线程池来有效地重用线程。</li>\n<li>事件传递是异步完成的。</li>\n<li>如果事件处理程序方法的执行可能需要一些时间，则应使用此模式，例如用于网络访问</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"kotlin\"> //在主线程发消息\n 发布者所在线程:Thread-2, 订阅者所在线程: Thread-2, 订阅者线程模式: BACKGROUND \n 发布者所在线程:Thread-2, 订阅者所在线程: pool-1-thread-1, 订阅者线程模式: ASYNC \n 发布者所在线程:Thread-2, 订阅者所在线程: Thread-2, 订阅者线程模式: POSTING \n 发布者所在线程:Thread-2, 订阅者所在线程: main, 订阅者线程模式: MAIN \n 发布者所在线程:Thread-2, 订阅者所在线程: main, 订阅者线程模式: MAIN_ORDERED \n //在子线程发消息\n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN \n 发布者所在线程:main, 订阅者所在线程: pool-1-thread-2, 订阅者线程模式: BACKGROUND \n 发布者所在线程:main, 订阅者所在线程: pool-1-thread-1, 订阅者线程模式: ASYNC \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN_ORDERED </code></pre>\n<h3 id=\"9-4-订阅者优先级\"><a href=\"#9-4-订阅者优先级\" class=\"headerlink\" title=\"9.4 订阅者优先级\"></a>9.4 订阅者优先级</h3><p>订阅者优先级影响事件传递的顺序。 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。注意：优先级不影响具有不同ThreadMode的订阅者之间的传递顺序！</p>\n<pre><code class=\"kotlin\">@Subscribe(threadMode = ThreadMode.POSTING, priority = 2)\nfun onMessageEvent_POSTING1(event: MessageEvent) {\n    showMsg(event, &quot;POSTING1&quot;)\n}\n\n@Subscribe(threadMode = ThreadMode.POSTING, priority = 4)\nfun onMessageEvent_POSTING2(event: MessageEvent) {\n    showMsg(event, &quot;POSTING2&quot;)\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, priority = 1)\nfun onMessageEvent_MAIN1(event: MessageEvent) {\n    showMsg(event, &quot;MAIN1&quot;)\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, priority = 3)\nfun onMessageEvent_MAIN2(event: MessageEvent) {\n    showMsg(event, &quot;MAIN2&quot;)\n}\n\n //打印结果\n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING2 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN2 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: POSTING1 \n 发布者所在线程:main, 订阅者所在线程: main, 订阅者线程模式: MAIN1 </code></pre>\n<p><strong>取消事件传递</strong></p>\n<p>您可以通过从订阅者的事件处理方法调用cancelEventDelivery ( Object event ) 来取消事件传递过程。任何进一步的事件传递都将被取消，后续订阅者将不会收到该事件。</p>\n<pre><code class=\"java\">// Prevent delivery to other subscribers*\nEventBus.getDefault().cancelEventDelivery(event) ;</code></pre>\n<p>事件通常由更高优先级的订阅者取消。取消仅限于在发布线程 ( ThreadMode . PostThread ) 中运行的事件处理方法。</p>\n<h3 id=\"9-5-粘性事件\"><a href=\"#9-5-粘性事件\" class=\"headerlink\" title=\"9.5 粘性事件\"></a>9.5 粘性事件</h3><p>普通事件都是需要先注册(register)，再post才能接受到事件；如果你使用 postSticky 发送事件，那么可以不需要先注册，也能接受到事件，也就是一个延迟注册的过程。 </p>\n<p>普通的事件我们通过post发送给EventBus，发送过后之后当前已经订阅过的方法可以收到。但是如果有些事件需要所有订阅了该事件的方法都能执行呢？例如一个Activity，要求它管理的所有Fragment都能执行某一个事件，但是当前我只初始化了3个Fragment，如果这时候通过post发送了事件，那么当前的3个Fragment当然能收到。但是这个时候又初始化了2个Fragment，那么我必须重新发送事件，这两个Fragment才能执行到订阅方法。 </p>\n<p>粘性事件就是为了解决这个问题，通过 postSticky 发送粘性事件，这个事件不会只被消费一次就消失，而是一直存在系统中，直到被 removeStickyEvent 删除掉。那么只要订阅了该粘性事件的所有方法，只要被register 的时候就会被检测到并且执行。订阅的方法需要添加 sticky = true 属性。</p>\n<pre><code class=\"kotlin\">EventBus.getDefault().postSticky(MessageEvent(Thread.currentThread().name))\n\n//消费粘性事件方式一：\nval stickyEvent = EventBus.getDefault().getStickyEvent(MessageEvent::class.java)\n// 最好检查之前是否实际发布过事件\nif (stickyEvent != null) {\n    // 消费掉粘性事件\n    EventBus.getDefault().removeStickyEvent(stickyEvent)\n}\n//消费粘性事件方式二：\nval stickyEvent2 = EventBus.getDefault().removeStickyEvent(MessageEvent::class.java)\n// 最好检查之前是否实际发布过事件\nif (stickyEvent2 != null) {\n    //已经消费了\n}\n\n@Subscribe(threadMode = ThreadMode.MAIN, sticky = true)\nfun onMessageEvent_sticky(event: MessageEvent) {\n    showMsg(event, &quot;MAIN&quot;)\n    //消费粘性事件方式三：\n    EventBus.getDefault().removeStickyEvent(event)\n}</code></pre>\n<h3 id=\"9-6-异步执行器\"><a href=\"#9-6-异步执行器\" class=\"headerlink\" title=\"9.6 异步执行器\"></a>9.6 异步执行器</h3><p>AsyncExecutor 就像一个线程池，但具有失败（异常）处理功能。失败会引发异常，AsyncExecutor 会将这些异常包装在一个事件中，该事件会自动发布。</p>\n<p> <em>AsyncExecutor 是一个非核心实用程序类。它可能会为您节省一些在后台线程中进行错误处理的代码，但它不是核心 EventBus 类。</em></p>\n<p>调用 AsyncExecutor.create() 来创建一个实例并将其保存在应用程序范围内。然后要执行某些操作，请实现 RunnableEx接口并将其传递给AsyncExecutor的execute方法。与Runnable不同，RunnableEx可能抛出异常。</p>\n<pre><code class=\"kotlin\">//AsyncExecutor类似于线程池，但具有失败(异常)处理。失败是抛出异常，AsyncExecutor将把这些异常封装在一个事件中，该事件将自动发布。\nAsyncExecutor.create().execute {\n    EventBus.getDefault().postSticky(SubEvent&lt;String&gt;())\n}\n\n//线程池中发出的时间\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun handleLoginEvent(event: SubEvent&lt;String&gt;) {\n    // do something\n}\n\n//线程池中任务异常时发出的时间\n@Subscribe(threadMode = ThreadMode.MAIN)\nfun handleFailureEvent(event: ThrowableFailureEvent) {\n    // do something\n}</code></pre>\n<h2 id=\"10-EventBus-原理\"><a href=\"#10-EventBus-原理\" class=\"headerlink\" title=\"10 EventBus 原理\"></a>10 EventBus 原理</h2><p>了解框架之前我们先定义几个核心角色用于描述整个流程</p>\n<ul>\n<li><p>发布者类：调用 post/postSticky 发布事件的类</p>\n</li>\n<li><p>发布者方法：调用 post/postSticky 发布事件的方法</p>\n</li>\n<li><p>事件类： post/postSticky 方法参数类以及订阅者方法参数类型</p>\n</li>\n<li><p>订阅者类：订阅者方法所在的类</p>\n</li>\n<li><p>订阅者方法：通过注解标注的订阅者方法</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211111000627.png\" alt=\"image-20211111000620374\"></p>\n<h3 id=\"10-1-编译时部分-通过-APT-收集订阅者注解并生成索引类\"><a href=\"#10-1-编译时部分-通过-APT-收集订阅者注解并生成索引类\" class=\"headerlink\" title=\"10.1 编译时部分-通过 APT 收集订阅者注解并生成索引类\"></a>10.1 编译时部分-通过 APT 收集订阅者注解并生成索引类</h3><p>注解类 Subscribe 用于标注订阅者方法</p>\n<pre><code class=\"java\">@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\npublic @interface Subscribe {\n    //用来指定指定订阅者方法所在的线程。\n    ThreadMode threadMode() default ThreadMode.POSTING;\n    //如果为 true，则将最近的粘性事件（通过EventBus.postSticky(Object) ）传递给该订阅者。\n    boolean sticky() default false;\n    //订阅者优先级影响事件传递的顺序。\n    // 在同一个交付线程 ( ThreadMode ) 中，较高优先级的订阅者将在其他具有较低优先级的订阅者之前收到事件。 默认优先级为 0。\n    // 注意：优先级不会影响具有不同ThreadMode的订阅者之间的传递顺序！\n    int priority() default 0;\n}</code></pre>\n<p>收集那些代码元素：订阅者类&amp;订阅者方法</p>\n<pre><code class=\"java\">class BusTestActivity : Activity() {\n      //定义一个订阅者方法\n    @Subscribe(sticky = true, threadMode = ThreadMode.POSTING, priority = 2)\n    fun onMessageEvent_POSTING1(event: MessageEvent) {\n        showMsg(event, &quot;POSTING1&quot;)\n    }\n}</code></pre>\n<p>注解处理器通过继承 Java AbstractProcessor 抽象类并配置注解和选项参数实现</p>\n<pre><code class=\"java\">@SupportedAnnotationTypes(&quot;org.greenrobot.eventbus.Subscribe&quot;)\n@SupportedOptions(value = {&quot;eventBusIndex&quot;, &quot;verbose&quot;})\n@IncrementalAnnotationProcessor(AGGREGATING)\npublic class EventBusAnnotationProcessor extends AbstractProcessor {\n  ...\n}</code></pre>\n<ul>\n<li>通过处理器参数获取配置的订阅者索引全类名，没有配置该参数但是却依赖了注解处理组件会抛异常</li>\n</ul>\n<pre><code class=\"java\">//设置apt参数\njavaCompileOptions {\n    annotationProcessorOptions {\n        arguments = [\n                eventBusIndex: &#39;org.greenrobot.eventbusperf.MyEventBusIndex&#39;,\n                verbose: &#39;true&#39;,\n        ]\n    }\n}\n//获取apt参数\nString index = processingEnv.getOptions().get(OPTION_EVENT_BUS_INDEX);\nif (index == null) {\n    messager.printMessage(Diagnostic.Kind.ERROR, &quot;No option &quot; + OPTION_EVENT_BUS_INDEX +\n            &quot; passed to annotation processor&quot;);\n    return false;\n}\n\n//没有配置的错误信息\n&gt; Task :EventBusPerformance:compileDebugJavaWithJavac FAILED\n错误: No option eventBusIndex passed to annotation processor</code></pre>\n<ul>\n<li>收集注解流程</li>\n</ul>\n<pre><code class=\"java\">private void collectSubscribers(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment env, Messager messager{\n    for (TypeElement annotation : annotations) {\n        //获取目标注解标注的所有元素，这里是所有的订阅者方法\n        Set&lt;? extends Element&gt; elements = env.getElementsAnnotatedWith(annotation);\n        for (Element element : elements) {\n            //ExecutableElement 可执行元素指的是方法类型\n            if (element instanceof ExecutableElement) {\n                ExecutableElement method = (ExecutableElement) element;\n                //检查方法:正好只有一个参数的非静态的公开的方法\n                if (checkHasNoErrors(method, messager)) {\n                    //获取方法所在的类元素\n                    TypeElement classElement = (TypeElement) method.getEnclosingElement();\n                    //存入容器\n                    methodsByClass.putElement(classElement, method);\n                }\n            } else {\n                messager.printMessage(Diagnostic.Kind.ERROR, &quot;@Subscribe is only valid for methods&quot;, element);\n            }\n        }\n    }\n}</code></pre>\n<ul>\n<li>校验某个类对索引类包是否可访问</li>\n</ul>\n<pre><code class=\"java\">private boolean isVisible(String myPackage, TypeElement typeElement) {\n    //类的修饰符\n    Set&lt;Modifier&gt; modifiers = typeElement.getModifiers();\n    boolean visible;\n    if (modifiers.contains(Modifier.PUBLIC)) {\n        visible = true;\n    } else if (modifiers.contains(Modifier.PRIVATE) || modifiers.contains(Modifier.PROTECTED)) {\n        visible = false;\n    } else {\n        //类所在的包\n        String subscriberPackage = getPackageElement(typeElement).getQualifiedName().toString();\n        //处理器参数没有指定索引类\n        if (myPackage == null) {\n            //todo 没有包名什么情况\n            visible = subscriberPackage.length() == 0;\n        } else {\n            //索引类和观察者包名一样\n            visible = myPackage.equals(subscriberPackage);\n        }\n    }\n    return visible;\n}</code></pre>\n<ul>\n<li>校验收集到的注解元素信息是否符合预期</li>\n</ul>\n<pre><code class=\"java\">private void checkForSubscribersToSkip(Messager messager, String myPackage) {\n    //遍历所有订阅者方法所在的类\n    for (TypeElement skipCandidate : methodsByClass.keySet()) {\n        //方法所在的类，\n        TypeElement subscriberClass = skipCandidate; //循环获取父类\n        while (subscriberClass != null) {//所有观察者\n            //校验某个类类对索引类包是否可访问\n            if (!isVisible(myPackage, subscriberClass)) {\n                //索引类访问不到观察者类，跳过\n                boolean added = classesToSkip.add(skipCandidate);\n                if (added) {//存在不可访问观察者\n                    String msg;\n                    //由于类不是公开的，所以回退到反射\n                    if (subscriberClass.equals(skipCandidate)) { //没有继承关系存在\n                        msg = &quot;Falling back to reflection because class is not public&quot;;\n                    } else { //父类\n                        msg = &quot;Falling back to reflection because &quot; + skipCandidate +\n                                &quot; has a non-public super class&quot;;\n                    }\n                    messager.printMessage(Diagnostic.Kind.NOTE, msg, subscriberClass);\n                }\n                break;\n            }\n            //观察者类中的所有观察方法\n            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberClass);\n            if (methods != null) {\n                for (ExecutableElement method : methods) {\n                    String skipReason = null;\n                    //方法第一个参数\n                    VariableElement param = method.getParameters().get(0);\n                    //参数类型\n                    TypeMirror typeMirror = getParamTypeMirror(param, messager);\n                    //不是类类型报错\n                    if (!(typeMirror instanceof DeclaredType) || !(((DeclaredType) typeMirror).asElement() instanceof TypeElement)) {\n                        skipReason = &quot;event type cannot be processed&quot;;\n                    }\n                    //是类类型但是对索引类不可见\n                    if (skipReason == null) {\n                        TypeElement eventTypeElement = (TypeElement) ((DeclaredType) typeMirror).asElement();\n                        //参数类对索引类不可见\n                        if (!isVisible(myPackage, eventTypeElement)) {\n                            skipReason = &quot;event type is not public&quot;;\n                        }\n                    }\n                    //存在观察者方法但是不可见先存下来，用于过滤\n                    if (skipReason != null) {\n                        boolean added = classesToSkip.add(skipCandidate);\n                        if (added) {\n                            String msg = &quot;Falling back to reflection because &quot; + skipReason;\n                            if (!subscriberClass.equals(skipCandidate)) {\n                                msg += &quot; (found in super class for &quot; + skipCandidate + &quot;)&quot;;\n                            }\n                            messager.printMessage(Diagnostic.Kind.NOTE, msg, param);\n                        }\n                        break;\n                    }\n                }\n            }\n            //获取观察者类的父类，继续循环\n            subscriberClass = getSuperclass(subscriberClass);\n        }\n    }\n}</code></pre>\n<ul>\n<li>将收集到的索引信息写入索引类中的 map 容器中</li>\n</ul>\n<pre><code class=\"java\">private void writeIndexLines(BufferedWriter writer, String myPackage) throws IOException {\n    for (TypeElement subscriberTypeElement : methodsByClass.keySet()) {\n        //只生成可访问的\n        if (classesToSkip.contains(subscriberTypeElement)) {\n            continue;\n        }\n        String subscriberClass = getClassString(subscriberTypeElement, myPackage);\n        if (isVisible(myPackage, subscriberTypeElement)) {\n            writeLine(writer, 2,\n                    &quot;putIndex(new SimpleSubscriberInfo(&quot; + subscriberClass + &quot;.class,&quot;,\n                    &quot;true,&quot;, &quot;new SubscriberMethodInfo[] {&quot;);\n            List&lt;ExecutableElement&gt; methods = methodsByClass.get(subscriberTypeElement);\n            writeCreateSubscriberMethods(writer, methods, &quot;new SubscriberMethodInfo&quot;, myPackage);\n            writer.write(&quot;        }));\\n\\n&quot;);\n        } else {\n            writer.write(&quot;        // Subscriber not visible to index: &quot; + subscriberClass + &quot;\\n&quot;);\n        }\n    }\n}</code></pre>\n<ul>\n<li>生成的 MyEventBusIndex 文件</li>\n</ul>\n<pre><code class=\"java\">//通过注释处理创建的生成索引类的接口。\npublic interface SubscriberInfo {\n    Class&lt;?&gt; getSubscriberClass();\n    SubscriberMethod[] getSubscriberMethods();\n    SubscriberInfo getSuperSubscriberInfo();\n    boolean shouldCheckSuperclass();\n}\n\npublic class MyEventBusIndex implements SubscriberInfoIndex {\n    private static final Map&lt;Class&lt;?&gt;, SubscriberInfo&gt; SUBSCRIBER_INDEX;\n\n    static {\n        SUBSCRIBER_INDEX = new HashMap&lt;Class&lt;?&gt;, SubscriberInfo&gt;();\n        putIndex(new SimpleSubscriberInfo(org.greenrobot.eventbusperf.testsubject.PerfTestEventBus.SubscriberClassEventBusAsync.class,true, new SubscriberMethodInfo[] {\n            new SubscriberMethodInfo(&quot;onEventAsync&quot;, TestEvent.class, ThreadMode.ASYNC),\n        }));\n      //其它索引信息......\n      }\n\nprivate static void putIndex(SubscriberInfo info) {\n    SUBSCRIBER_INDEX.put(info.getSubscriberClass(), info);\n}\n\n@Override\npublic SubscriberInfo getSubscriberInfo(Class&lt;?&gt; subscriberClass) {\n    SubscriberInfo info = SUBSCRIBER_INDEX.get(subscriberClass);\n    if (info != null) {\n        return info;\n    } else {\n        return null;\n    }\n}\n</code></pre>\n<h4 id=\"编译时APT流程总结\"><a href=\"#编译时APT流程总结\" class=\"headerlink\" title=\"编译时APT流程总结\"></a>编译时APT流程总结</h4><p>EventBus 中订阅者的收集是通过两种方式，一种是运行时反射收集，另一种是通过注解处理器收集。通过apt收集相比通过运行时反射的方式可以减少因为反射带来的性能开销，但是会影响编译时的时间。综合考量必然还是推荐通过APT方式。</p>\n<p>通过APT方式收集订阅者的大体流程如下：</p>\n<ul>\n<li>在编码阶段添加订阅者方法时我们需要通过 <strong>@Subscribe</strong> 注解类标注订阅者，该注解类提供三个参数用来个性化配置订阅者，三个参数分别是：<strong>enum ThreadMode、boolean sticky，int priority</strong> 。注解处理器所做的工作就是收集订阅者方法以及这些方法所在的类信息。</li>\n<li>EventBus 规定生成的索引类的全类名是由开发者自行定义传入的，所以在编译之前还模块的 build.gradle 中需要配置索引类，否则会编译错误。</li>\n<li>注解处理器注解处理流程主要分为：<strong>收集订阅者、校验订阅者、生成索引类</strong>三个过程。<ul>\n<li>收集订阅者：遍历所有可执行元素 ExecutableElement，校验订阅者方法签名，订阅者方法签名需要满足 <strong>正好只有一个参数的非静态的公开的方法</strong> 的规则。然后将找到的订阅者方法和订阅者类存入 *<em>ListMap&lt;TypeElement, ExecutableElement&gt; methodsByClass *</em>  容器中。该容器的数据结构是：<code>HashMap&lt;K, List&lt;V&gt;&gt;()</code> key 存入的是订阅者类，value 是该类中所有订阅者方法的集合。</li>\n<li>校验订阅者（包括订阅者类/订阅者类的父类和订阅者方法）：<ul>\n<li>校验订阅者类：遍历所有上一步收集到的订阅者类，校验订阅者类，订阅者类需要满足<strong>public/default+索引类和订阅者类的包名一样</strong> 的规则，不满足的订阅者类需要添加到 <strong>Set<TypeElement> classesToSkip</strong> 容器中标记。</li>\n<li>校验订阅者类中的方法：满足上一步的订阅者类中任何一个订阅者方法满足以下情况的直接将对应的订阅者类需要添加到 <strong>Set<TypeElement> classesToSkip</strong> 容器中标记。<ul>\n<li>订阅者方法的参数类型(也就是Event 类型)不是 DeclaredType 或者是 DeclaredType 但不是 TypeElement。</li>\n<li>订阅者方法的参数类型是类类型但是对索引类不可见。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>生成索引类：遍历最终收集到的 <strong>methodsByClass</strong> 订阅者信息通过字符串拼接的方式生成索引类。这里换成Javapoet的方式更容易维护，EventBus 可能是为了节省框架包的体积没有采用Javapoet的方式生成java文件。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"10-2-运行时部分-初始化、注册-查找订阅者等\"><a href=\"#10-2-运行时部分-初始化、注册-查找订阅者等\" class=\"headerlink\" title=\"10.2 运行时部分-初始化、注册/查找订阅者等\"></a>10.2 运行时部分-初始化、注册/查找订阅者等</h3><h4 id=\"10-2-1-初始化EventBus\"><a href=\"#10-2-1-初始化EventBus\" class=\"headerlink\" title=\"10.2.1 初始化EventBus\"></a>10.2.1 初始化EventBus</h4><p>构建 EventBus 实例的三种方式：</p>\n<ul>\n<li><p>EventBus.getDefault() + 默认Builder</p>\n</li>\n<li><p>EventBus.builder().installDefaultEventBus() + 自定义配置</p>\n</li>\n<li><p>EventBus.builder().build() + 自定义配置</p>\n</li>\n</ul>\n<p>方式一：DCL单例方式创建进程唯一实例</p>\n<pre><code class=\"java\">static volatile EventBus defaultInstance;\n\n//使用进程范围的 EventBus 实例的应用程序的便捷单例。\npublic static EventBus getDefault() {\n      //通过局部变量中转可节省性能\n    EventBus instance = defaultInstance;\n    if (instance == null) {\n        synchronized (EventBus.class) {\n            instance = EventBus.defaultInstance;\n            if (instance == null) {\n                instance = EventBus.defaultInstance = new EventBus();\n            }\n        }\n    }\n    return instance;\n}</code></pre>\n<p>其它两种方式</p>\n<pre><code class=\"java\">//EventBus.builder().build() + 自定义配置\nEventBus.builder()\n    .throwSubscriberException(false)\n    .logNoSubscriberMessages(true)\n    //添加索引类，减少运行时反射\n    .addIndex(MyEventBusIndex())\n    .build()\n\npublic EventBus build() {\n    return new EventBus(this);\n}\n\n//EventBus.builder().installDefaultEventBus() + 自定义配置\nEventBus.builder()\n    .throwSubscriberException(false)\n    .logNoSubscriberMessages(true)\n    //添加索引类，减少运行时反射\n    .addIndex(MyEventBusIndex())\n    .installDefaultEventBus()\n\npublic EventBus installDefaultEventBus() {\n    synchronized (EventBus.class) {\n        if (EventBus.defaultInstance != null) {\n            throw new EventBusException(&quot;Default instance already exists.&quot; +\n                    &quot; It may be only set once before it&#39;s used the first time to ensure consistent behavior.&quot;);\n        }\n        EventBus.defaultInstance = build();\n        return EventBus.defaultInstance;\n    }\n}</code></pre>\n<p><strong>构建EventBus时的默认配置</strong></p>\n<pre><code class=\"java\">EventBus(EventBusBuilder builder) {\n    logger = builder.getLogger();\n    //通过事件类找所有该事件的订阅者，\n    subscriptionsByEventType = new HashMap&lt;&gt;();\n    //通过订阅者类找所有Event\n    typesBySubscriber = new HashMap&lt;&gt;();\n    //通过粘性事件类查找所有粘性事件对象\n    stickyEvents = new ConcurrentHashMap&lt;&gt;();\n    //构建 AndroidHandlerMainThreadSupport\n    mainThreadSupport = builder.getMainThreadSupport();\n    //构建 HandlerPoster\n    mainThreadPoster = mainThreadSupport != null ? mainThreadSupport.createPoster(this) : null;\n    //在后台发布事件\n    backgroundPoster = new BackgroundPoster(this);\n    //在后台发布事件\n    asyncPoster = new AsyncPoster(this);\n    indexCount = builder.subscriberInfoIndexes != null ? builder.subscriberInfoIndexes.size() : 0;\n    //通过反射或APT查找订阅者\n    subscriberMethodFinder = new SubscriberMethodFinder(\n            //添加由 EventBus 的注释预处理器生成的索引。默认空集合\n            builder.subscriberInfoIndexes,\n            //启用严格的方法验证（默认值：false）\n            builder.strictMethodVerification,\n            //即使有生成的索引也强制使用反射（默认值：false）\n            builder.ignoreGeneratedIndex);\n    //无法分发事件时是否打印错误信息\n    logSubscriberExceptions = builder.logSubscriberExceptions;\n    //没有订阅者注册事件是否打印错误信息\n    logNoSubscriberMessages = builder.logNoSubscriberMessages;\n    //在调用订阅者时如果发生异常是否 发送一个 SubscriberExceptionEvent 通知订阅者\n    sendSubscriberExceptionEvent = builder.sendSubscriberExceptionEvent;\n    //没有订阅者注册事件是否是否通知订阅者类的父类\n    sendNoSubscriberEvent = builder.sendNoSubscriberEvent;\n    //在调用订阅者时如果发生异常是否抛出 RuntimeException\n    throwSubscriberException = builder.throwSubscriberException;\n    //是否通知订阅者类的父类中的订阅者方法\n    eventInheritance = builder.eventInheritance;\n    //订阅者执行在工作线程时用到的线程池：Executors.newCachedThreadPool()\n    executorService = builder.executorService;\n}</code></pre>\n<h5 id=\"初始化EventBus-总结\"><a href=\"#初始化EventBus-总结\" class=\"headerlink\" title=\"初始化EventBus 总结\"></a>初始化EventBus 总结</h5><p>总的来说 EventBus 的初始化流程不是很复杂， EventBus 对象的创建结合了单例模式和构建者模式。</p>\n<p>单例模式常用于构建全局唯一类并提供全局唯一访问点。</p>\n<p>构建者模式常用于构建可以通过设置不同的可选参数，定制化地创建一个复杂对象。</p>\n<p>EventBus 恰好需要全局唯一且配置复杂，此时就可以结合两个设计模式应对不同的构建场景。</p>\n<p>需要全局唯一默认配置的实例直接通过单例获取，需要为前面的单例个性化定制也可以通过构建者模式配置参数。</p>\n<p>你自己维护全局唯一或者需要局部唯一的场景也可以通过构建者模式个性化定制。</p>\n<p>可能是因为 EventBus  的应用场景多样，他的DCL单例模式并没有显示私有构造方法和静态实例变量，也就是说直接 new EventBus 也是可以的。</p>\n<h4 id=\"10-2-2-注册订阅者：查找订阅者方法\"><a href=\"#10-2-2-注册订阅者：查找订阅者方法\" class=\"headerlink\" title=\"10.2.2 注册订阅者：查找订阅者方法\"></a>10.2.2 注册订阅者：查找订阅者方法</h4><pre><code class=\"java\">public override fun onStart() {\n    super.onStart()\n    EventBus.getDefault().register(this)\n}\n//注册给定的订阅者以接收事件。 订阅者一旦对接收事件不再感兴趣，须调用 unregister(Object) 。\npublic void register(Object subscriber) {\n    Class&lt;?&gt; subscriberClass = subscriber.getClass();\n    //通过订阅者类找出该类中所有的订阅者方法\n    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);//01\n    synchronized (this) {\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            subscribe(subscriber, subscriberMethod);//02\n        }\n    }\n}</code></pre>\n<p>01查找订阅者方法流程：通过APT或反射方式查找订阅者方法并内存缓存</p>\n<pre><code class=\"java\">//ConcurrentHashMap 内存缓存保证线程安全\nprivate static final Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = new ConcurrentHashMap&lt;&gt;();\n\n//通过订阅者类查找订阅者方法\nList&lt;SubscriberMethod&gt; findSubscriberMethods(Class&lt;?&gt; subscriberClass) {\n    //先从内存缓存尝试取，节省查找开销\n    List&lt;SubscriberMethod&gt; subscriberMethods = METHOD_CACHE.get(subscriberClass);\n    if (subscriberMethods != null) {\n        return subscriberMethods;\n    }\n    if (ignoreGeneratedIndex) {\n        //运行时反射查找\n        subscriberMethods = findUsingReflection(subscriberClass);\n    } else {\n        //从APT中收集的备选中查找\n        subscriberMethods = findUsingInfo(subscriberClass);\n    }\n    if (subscriberMethods.isEmpty()) {\n        //订阅者类中至少有一个订阅者方法，否则运行时报错\n        throw new EventBusException(&quot;Subscriber &quot; + subscriberClass\n                + &quot; and its super classes have no public methods with the @Subscribe annotation&quot;);\n    } else {\n        //找到后缓存到内存\n        METHOD_CACHE.put(subscriberClass, subscriberMethods);\n        return subscriberMethods;\n    }\n}</code></pre>\n<p><strong>运行时反射查找</strong> </p>\n<pre><code class=\"java\">private List&lt;SubscriberMethod&gt; findUsingReflection(Class&lt;?&gt; subscriberClass) {\n    //准备一个 FindState 实例，如果对象池中没有就new,一个FindState对应一个订阅者类，用于表示查找状态\n    FindState findState = prepareFindState();\n    //存入订阅者 class\n    findState.initForSubscriber(subscriberClass);\n    //遍历subscriberClass的超类体系，调用findUsingReflectionInSingleClass查找当前clazz的所有订阅函数\n    while (findState.clazz != null) {\n        //在订阅者类中通过反射的方式查找订阅者方法\n        findUsingReflectionInSingleClass(findState);\n        findState.moveToSuperclass();//获取父类继续查找\n    }\n    //循环结束 findState.subscriberMethods 中保存了这个类中的所有订阅者方法\n    return getMethodsAndRelease(findState);\n}\n\n</code></pre>\n<p>在订阅者类中通过反射的方式查找订阅者方法</p>\n<pre><code class=\"java\">private void findUsingReflectionInSingleClass(FindState findState) {\n    Method[] methods;\n    //getDeclaredMethods 在某些设备上也会出现 NoClassDefFoundError\n    try {\n        //getDeclaredMethods 要比 getMethods 快，尤其是当订阅者是像 Activities 这样的胖类时\n        methods = findState.clazz.getDeclaredMethods();\n    } catch (Throwable th) {\n        //getMethods 在某些设备上也会出现 NoClassDefFoundError，可能会在 getMethods 周围添加 catch\n        try {\n            methods = findState.clazz.getMethods();\n        } catch (LinkageError error) { // super class of NoClassDefFoundError to be a bit more broad...\n            throw new EventBusException(msg, error);\n        }\n        //clazz.getDeclaredMethods()只返回当前clazz中声明的函数，\n        // 而clazz.getMethods()将返回clazz的所有函数(包括继承自父类和接口的函数)，\n        // 因此，此时skipSuperClasses被置为true，阻止递归查找父类。\n        findState.skipSuperClasses = true;\n    }\n\n    //遍历所有方法\n    for (Method method : methods) {\n        int modifiers = method.getModifiers(); //修饰符\n        //MODIFIERS_IGNORE = Modifier.ABSTRACT | Modifier.STATIC | BRIDGE | SYNTHETIC;\n        //校验订阅者方法：must be public, non-static, and non-abstract&quot;\n        if ((modifiers &amp; Modifier.PUBLIC) != 0 &amp;&amp; (modifiers &amp; MODIFIERS_IGNORE) == 0) {\n            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();//参数类型\n            if (parameterTypes.length == 1) {//正好一个参数\n                Subscribe subscribeAnnotation = method.getAnnotation(Subscribe.class);\n                if (subscribeAnnotation != null) {\n                    // 恰好一个参数的非静态的公开类并且有Subscribe注解标记\n                    Class&lt;?&gt; eventType = parameterTypes[0];// 参数为事件类\n                    //检查重名方法（本类或父类之间可能重复）用于控制findState.subscriberMethods是否添加找到的method\n                    //如果不校验，如果子类重写订阅者方法会导致执行两次子类的订阅者方法\n                    if (findState.checkAdd(method, eventType)) {\n                        ThreadMode threadMode = subscribeAnnotation.threadMode();\n                        //收集订阅者方法，封装 SubscriberMethod\n                        findState.subscriberMethods.add(new SubscriberMethod(method, eventType, threadMode,\n                                subscribeAnnotation.priority(), subscribeAnnotation.sticky()));\n                    }\n                }\n            } else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) {\n                String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName();\n                throw new EventBusException(&quot;@Subscribe method &quot; + methodName +\n                        &quot;must have exactly 1 parameter but has &quot; + parameterTypes.length);\n            }\n        } else if (strictMethodVerification &amp;&amp; method.isAnnotationPresent(Subscribe.class)) {\n            String methodName = method.getDeclaringClass().getName() + &quot;.&quot; + method.getName();\n            throw new EventBusException(methodName +\n                    &quot; is a illegal @Subscribe method: must be public, non-static, and non-abstract&quot;);\n        }\n    }\n}</code></pre>\n<p>为啥不直接用Class.getMethods直接获取该类的全部方法呢？</p>\n<p>如果这个类比较庞大，用getMethods查找所有的方法就显得很笨重了，<br>如果使用的是getDeclaredMethods（该类声明的方法不包括从父类那里继承来的public方法），速度就会快一些，因为找的方法变少了，没有什么 equals,toString,hashCode等Object类的方法。</p>\n<p>Class#getMethods()，不检查方法签名（对于诸如不存在的参数类型之类的东西）。这已更改为 use Class#getDeclaredMethods()，它会检查并在出现问题时抛出异常。</p>\n<p>FindState 对象和对象池</p>\n<pre><code class=\"java\">private static final int POOL_SIZE = 4;\nprivate static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];\n\nprivate List&lt;SubscriberMethod&gt; getMethodsAndRelease(FindState findState) {\n    List&lt;SubscriberMethod&gt; subscriberMethods = new ArrayList&lt;&gt;(findState.subscriberMethods);\n    findState.recycle(); //findState 回收数据\n    synchronized (FIND_STATE_POOL) {\n        for (int i = 0; i &lt; POOL_SIZE; i++) {\n            if (FIND_STATE_POOL[i] == null) {\n                //将当前用过的 findState 缓存回去，下次注册时不用 new\n                FIND_STATE_POOL[i] = findState;\n                break;\n            }\n        }\n    }\n    return subscriberMethods;\n}\n\n//先从对象池中随便找一个，没有才创建\nprivate FindState prepareFindState() {\n    //用的时候隔离开，用完了放回去。\n    synchronized (FIND_STATE_POOL) { //FindState[] FIND_STATE_POOL\n        for (int i = 0; i &lt; POOL_SIZE; i++) { //POOL_SIZE = 4\n            FindState state = FIND_STATE_POOL[i];\n            if (state != null) {\n                FIND_STATE_POOL[i] = null; //在原来的位置用null占位\n                return state; // 遍历FindState对象池，只要找到一个空对象就返回，\n            }\n        }\n    }\n    return new FindState(); \n}\n\nstatic class FindState {\n    final List&lt;SubscriberMethod&gt; subscriberMethods = new ArrayList&lt;&gt;();\n    final Map&lt;Class, Object&gt; anyMethodByEventType = new HashMap&lt;&gt;();\n    final Map&lt;String, Class&gt; subscriberClassByMethodKey = new HashMap&lt;&gt;();\n    final StringBuilder methodKeyBuilder = new StringBuilder(128);\n    Class&lt;?&gt; subscriberClass;\n    Class&lt;?&gt; clazz;\n    boolean skipSuperClasses;\n    SubscriberInfo subscriberInfo;\n\n    void initForSubscriber(Class&lt;?&gt; subscriberClass) {\n        this.subscriberClass = clazz = subscriberClass;\n        skipSuperClasses = false;\n        subscriberInfo = null;\n    }\n\n    void recycle() {\n        subscriberMethods.clear();\n        anyMethodByEventType.clear();\n        subscriberClassByMethodKey.clear();\n        methodKeyBuilder.setLength(0);\n        subscriberClass = null;\n        clazz = null;\n        skipSuperClasses = false;\n        subscriberInfo = null;\n    }\n\n    // 检查是否已经添加过这个订阅者方法\n    boolean checkAdd(Method method, Class&lt;?&gt; eventType) {\n        //2 级检查：仅具有事件类型的第一级（快速），在需要时具有完整签名的第二级。\n        // 通常订阅者没有侦听相同事件类型的方法。\n        //第一层判断有无method监听此eventType,如果没有则可直接把找到的method加到subscriberMethods中。\n        //第二层检查的是从MethodSignature（方法签名）判断能否把找到的method加进去。是为了防止在找父类时覆盖了子类的方法，因为此方法是子类是重写，方法名参数名完全一样（方法签名）；另一个原因是可能是当一个类有多个方法监听同一个event(尽管一般不会这样做)，也能将这些方法加进去。\n        Object existing = anyMethodByEventType.put(eventType, method);\n        if (existing == null) { //没有添加过，\n            //anyMethodByEventType存储&lt;eventType, method&gt;映射关系，\n            // 若existing为空，则表示eventType第一次出现。\n            // 一般情况下，一个对象只会有一个订阅函数处理特定eventType。\n            return true;\n        } else {//一个类有多个方法监听同一个事件类型\n            if (existing instanceof Method) {\n                //处理一个对象有多个订阅函数处理eventType的情况，\n                // 此时，anyMethodByEventType中eventType被映射到一个非Method对象(即this)。\n                if (!checkAddWithMethodSignature((Method) existing, eventType)) {\n                    // Paranoia check\n                    throw new IllegalStateException();\n                }\n                // Put any non-Method object to &quot;consume&quot; the existing Method\n                //将任何非 Method 对象“使用”现有的 Method\n                anyMethodByEventType.put(eventType, this);\n            }\n            return checkAddWithMethodSignature(method, eventType);\n        }\n    }\n\n    //由于存在多个订阅函数处理eventType，此时，单纯使用eventType作为key已经无法满足要求了，\n    // 因此，使用method.getName() + &quot;&gt;&quot; + eventType.getName()作为methodKey，\n    // 并使用subscriberClassByMethodKey存储&lt;methodKey, methodClass&gt;的映射关系。\n    private boolean checkAddWithMethodSignature(Method method, Class&lt;?&gt; eventType) {\n        methodKeyBuilder.setLength(0);\n        methodKeyBuilder.append(method.getName());\n        methodKeyBuilder.append(&#39;&gt;&#39;).append(eventType.getName());\n        //onEvent&gt;TestEvent\n        String methodKey = methodKeyBuilder.toString();\n        //getDeclaringClass: 返回表示类或接口的 Class 对象，该类或接口声明了由此对象表示的可执行文件。\n        Class&lt;?&gt; methodClass = method.getDeclaringClass();\n        //map[&quot;onEvent&gt;TestEvent&quot;]=\n        //如果methodClassOld或者methodClass是methodClassOld的子类，\n        // 则将&lt;methodKey, methodClass&gt;放入，否则不放入。\n        // 满足函数名相同、参数类型相同且被@Subscribe修饰的函数，\n        // 在一个类中不可能存在两个；考虑类继承体系，若这样的两个函数分别来自父类和子类，\n        // 则最终被加入的是子类的函数。\n        Class&lt;?&gt; methodClassOld = subscriberClassByMethodKey.put(methodKey, methodClass);\n        //确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。\n        if (methodClassOld == null || methodClassOld.isAssignableFrom(methodClass)) {\n            // Only add if not already found in a sub class\n            //仅在子类中未找到时才添加\n            return true;\n        } else {\n            // Revert the put, old class is further down the class hierarchy\n            //还原放置，旧类在类层次结构中更靠后\n            subscriberClassByMethodKey.put(methodKey, methodClassOld);\n            return false;\n        }\n    }\n\n    void moveToSuperclass() {\n        if (skipSuperClasses) { //反射方法时是通过getMethod 方式，已经包含父类方法了\n            clazz = null;\n        } else {\n            clazz = clazz.getSuperclass();\n            String clazzName = clazz.getName();\n            // Skip system classes, this degrades performance.\n            // Also we might avoid some ClassNotFoundException (see FAQ for background).\n            if (clazzName.startsWith(&quot;java.&quot;) || clazzName.startsWith(&quot;javax.&quot;) ||\n                    clazzName.startsWith(&quot;android.&quot;) || clazzName.startsWith(&quot;androidx.&quot;)) {\n                clazz = null;\n            }\n        }\n    }\n}</code></pre>\n<p><strong>通过APT中收集数据中查找</strong></p>\n<pre><code class=\"java\">private List&lt;SubscriberMethod&gt; findUsingInfo(Class&lt;?&gt; subscriberClass) {\n    FindState findState = prepareFindState();\n    findState.initForSubscriber(subscriberClass);\n    while (findState.clazz != null) {\n        //通过订阅者类从索引类中查找订阅者方法信息:subscriberInfo\n        findState.subscriberInfo = getSubscriberInfo(findState);\n        if (findState.subscriberInfo != null) {\n            SubscriberMethod[] array = findState.subscriberInfo.getSubscriberMethods();\n            for (SubscriberMethod subscriberMethod : array) {\n                // 检查重名方法（本类或父类之间都可能重复\n                if (findState.checkAdd(subscriberMethod.method, subscriberMethod.eventType)) {\n                    findState.subscriberMethods.add(subscriberMethod);\n                }\n            }\n        } else {\n            //apt 没有正常收集该类，降级为反射方式查找\n            findUsingReflectionInSingleClass(findState);\n        }\n        findState.moveToSuperclass();\n    }\n    return getMethodsAndRelease(findState);\n}\n\nprivate SubscriberInfo getSubscriberInfo(FindState findState) {\n        //找完子类找父类\n    if (findState.subscriberInfo != null &amp;&amp; findState.subscriberInfo.getSuperSubscriberInfo() != null) {\n        SubscriberInfo superclassInfo = findState.subscriberInfo.getSuperSubscriberInfo();\n        if (findState.clazz == superclassInfo.getSubscriberClass()) {\n            return superclassInfo;\n        }\n    }\n\n    //apt 收集的索引类\n    if (subscriberInfoIndexes != null) {\n        //通过订阅者类从索引类中查找订阅者方法信息\n        for (SubscriberInfoIndex index : subscriberInfoIndexes) {\n            SubscriberInfo info = index.getSubscriberInfo(findState.clazz);\n            if (info != null) {\n                return info;\n            }\n        }\n    }\n    return null;\n}</code></pre>\n<p><strong>查找流程小结</strong></p>\n<p>注册订阅者分为查找和订阅两个过程</p>\n<p>查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。</p>\n<p>还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。</p>\n<p>亮点整理：</p>\n<ul>\n<li>METHOD_CACHE 缓存了查找过的进程内所有订阅者的键值对(订阅者类，类中的订阅者方法)信息，使用ConcurrentHashMap即保证的查找效率也避免了线程安全问题。</li>\n</ul>\n<pre><code class=\"java\">private static final Map&lt;Class&lt;?&gt;, List&lt;SubscriberMethod&gt;&gt; METHOD_CACHE = new ConcurrentHashMap&lt;&gt;();</code></pre>\n<ul>\n<li>FIND_STATE_POOL 是 FindState 对象池的一维静态数组，FindState 对查找的状态值做了一些封装以及对订阅者方法的检查逻辑。<ul>\n<li>为什么要使用FindState呢？首先是面向对象封装的采用</li>\n<li>在JVM系统中频繁地创建对象，是非常消耗资源的，在jvm垃圾回收时候，有可能会出现内存抖动的问题。使用对象池数组就有效的避免了内存抖动的问题。</li>\n<li>对 FIND_STATE_POOL  的操作需要考虑线程同步问题，这里使用了<code>synchronized</code>关键字来保证线程安全。</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"java\">private static final FindState[] FIND_STATE_POOL = new FindState[POOL_SIZE];</code></pre>\n<p><strong>订阅流程</strong></p>\n<p>查找到当前注册的订阅者类中的所有订阅者方法后，下一步就是为每一个订阅者方法执行订阅流程了。</p>\n<pre><code class=\"java\">public void register(Object subscriber) {\n    Class&lt;?&gt; subscriberClass = subscriber.getClass();\n    // 01查找订阅者方法流程\n    // 通过订阅者类找出该类中所有的订阅者方法\n    List&lt;SubscriberMethod&gt; subscriberMethods = subscriberMethodFinder.findSubscriberMethods(subscriberClass);\n    synchronized (this) {\n        //遍历该订阅者类中所有订阅者方法，执行订阅操作\n        for (SubscriberMethod subscriberMethod : subscriberMethods) {\n            // 02订阅流程\n            // 收集订阅者，事件类，分发粘性事件等\n            subscribe(subscriber, subscriberMethod);\n        }\n    }\n}</code></pre>\n<p>订阅流程大题分为三步</p>\n<ul>\n<li>通过事件类找所有已经订阅过该事件的订阅者们，目的是为了进行优先级排序,全局缓存已注册订阅者等</li>\n<li>通过订阅者类找所有已经注册过的 Event 们， 用于判断是否注册、解注册等</li>\n<li>当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发</li>\n</ul>\n<pre><code class=\"java\">\nprivate void subscribe(Object subscriber, SubscriberMethod subscriberMethod) {\n    //事件类\n    Class&lt;?&gt; eventType = subscriberMethod.eventType;\n    //封装订阅者\n    Subscription newSubscription = new Subscription(subscriber, subscriberMethod);\n    //Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;\n    //通过事件类找所有该事件的订阅者，\n    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);\n    //还没缓存该事件就存且只能存一次\n    if (subscriptions == null) {\n        subscriptions = new CopyOnWriteArrayList&lt;&gt;();\n        subscriptionsByEventType.put(eventType, subscriptions);\n    } else {\n        //不能有重复订阅者\n        if (subscriptions.contains(newSubscription)) {\n            throw new EventBusException(&quot;Subscriber &quot; + subscriber.getClass() + &quot; already registered to event &quot;\n                    + eventType);\n        }\n    }\n\n    int size = subscriptions.size();\n    for (int i = 0; i &lt;= size; i++) {\n        //优先级排序，要么最小查到最后，要么之前的某个位置\n        if (i == size || subscriberMethod.priority &gt; subscriptions.get(i).subscriberMethod.priority) {\n            //向事件对应的订阅者列表中添加当前订阅者，完成排序操作\n            subscriptions.add(i, newSubscription);\n            break;\n        }\n    }\n\n    //Map&lt;Object, List&lt;Class&lt;?&gt;&gt;&gt; typesBySubscriber;\n    //通过订阅者类找所有Event\n    List&lt;Class&lt;?&gt;&gt; subscribedEvents = typesBySubscriber.get(subscriber);\n    if (subscribedEvents == null) {\n        subscribedEvents = new ArrayList&lt;&gt;();\n        typesBySubscriber.put(subscriber, subscribedEvents);\n    }\n    //将当前订阅者方法的 event 存到指定订阅者类下的列表里\n    subscribedEvents.add(eventType);\n\n    //粘性事件：先pst 后 订阅\n    //当前订阅者中有粘性事件，在 register 的时候根据当前订阅者方法的 event 直接执行分发\n    if (subscriberMethod.sticky) {\n        //eventInheritance: 默认true\n        // 默认情况下，EventBus 考虑事件类层次结构（将通知超类的订阅者）。 关闭此功能将改进事件的发布。\n        // 对于直接扩展 Object 的简单事件类，我们测得事件发布速度提高了 20%。 对于更复杂的事件层次结构，加速应该大于 20%。\n        //但是，请记住，事件发布通常只消耗应用程序内一小部分 CPU 时间，除非它以高速率发布，例如每秒数百/数千个事件\n\n        if (eventInheritance) { //\n            //必须考虑 eventType 的所有子类的现有粘性事件。注意：对于大量粘性事件，迭代所有事件可能效率低下，\n            // 因此应更改数据结构以允许更有效的查找（例如，存储超类的子类的附加映射：Class -&gt; List&lt;Class&gt;）。\n            //stickyEvents = new ConcurrentHashMap&lt;&gt;();\n            Set&lt;Map.Entry&lt;Class&lt;?&gt;, Object&gt;&gt; entries = stickyEvents.entrySet();\n            for (Map.Entry&lt;Class&lt;?&gt;, Object&gt; entry : entries) {\n                //key: event.getClass(), value: event\n                Class&lt;?&gt; candidateEventType = entry.getKey();\n                //isAssignableFrom: 确定此Class对象表示的类或接口是否与指定的Class参数表示的类或接口相同，或者是其超类或超接口。 如果是，则返回true ； 否则返回false 。 如果此Class对象表示原始类型，则如果指定的Class参数正是此Class对象，则此方法返回true ； 否则返回false 。\n                //具体来说，此方法测试是否可以通过标识转换或通过扩展引用转换将指定Class参数表示的类型转换为此Class对象表示的类型。 有关详细信息，请参阅Java 语言规范5.1.1 和 5.1.4 节\n                if (eventType.isAssignableFrom(candidateEventType)) { //比较class\n                    Object stickyEvent = entry.getValue();\n                    checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n                }\n            }\n        } else {\n            //通过粘性事件类查找所有粘性事件对象\n            Object stickyEvent = stickyEvents.get(eventType);\n            checkPostStickyEventToSubscription(newSubscription, stickyEvent);\n        }\n    }\n}\n\nprivate void checkPostStickyEventToSubscription(Subscription newSubscription, Object stickyEvent) {\n    if (stickyEvent != null) {\n        // If the subscriber is trying to abort the event, it will fail (event is not tracked in posting state)\n        // --&gt; Strange corner case, which we don&#39;t take care of here.\n        //如果订阅者试图中止事件，它将失败（事件在发布状态下不被跟踪）--&gt; 奇怪的极端情况，我们在这里不处理。\n        postToSubscription(newSubscription, stickyEvent, isMainThread());\n    }\n}</code></pre>\n<h5 id=\"注册订阅者流程总结\"><a href=\"#注册订阅者流程总结\" class=\"headerlink\" title=\"注册订阅者流程总结\"></a>注册订阅者流程总结</h5><p>注册订阅者分为查找和订阅两个过程</p>\n<p>查找过程具体是通过当前订阅者类找出该类中声明的所有订阅者方法。查找逻辑封装在 SubscriberMethodFinder 类中，查找方式有两中，如果使用了注解处理器模块就可以通过生成的索引类查找，这种方式不需要通过反射就能收集到所有订阅者方法，效率较高。</p>\n<p>还有一种就是运行时通过反射订阅者类的getMethods 或者getDeclaredMethods这两个方法收集订阅者方法，这种方式效率低，不推荐使用。</p>\n<p>订阅过程具体是针对当前订阅者的每一个订阅者方法（查找流程得到）以事件类为范围进行全局排序，收集当前订阅者类的所有事件以及对粘性事件的分发。</p>\n<p>亮点整理：</p>\n<ul>\n<li>CopyOnWriteArrayList 保证线程安全</li>\n</ul>\n<pre><code class=\"java\">private final Map&lt;Class&lt;?&gt;, CopyOnWriteArrayList&lt;Subscription&gt;&gt; subscriptionsByEventType;</code></pre>\n<ul>\n<li>ConcurrentHashMap 保证了效率和安全</li>\n</ul>\n<pre><code class=\"java\">stickyEvents = new ConcurrentHashMap&lt;&gt;();</code></pre>\n<h4 id=\"10-2-3-事件发布\"><a href=\"#10-2-3-事件发布\" class=\"headerlink\" title=\"10.2.3 事件发布\"></a>10.2.3 事件发布</h4><p>发布粘性事件，粘性事件特别之处在于发布前存到了一个map中，当注册时直接执行粘性事件的发布</p>\n<pre><code class=\"java\">public void postSticky(Object event) {\n    synchronized (stickyEvents) {\n        stickyEvents.put(event.getClass(), event);\n    }\n    //放置后应发布，以防订阅者想立即删除\n    post(event);\n}</code></pre>\n<p>发布普通事件，通过ThreadLocal保证发送时的同步问题</p>\n<pre><code class=\"java\">public void post(Object event) {\n    //currentPostingThreadState = new ThreadLocal&lt;PostingThreadState&gt;()\n    //每个线程都有一份 postingState 实例，\n    //封装 PostingThreadState 对于 ThreadLocal，设置（并获得多个值）要快得多。\n    PostingThreadState postingState = currentPostingThreadState.get();\n    List&lt;Object&gt; eventQueue = postingState.eventQueue;\n    eventQueue.add(event);\n    if (!postingState.isPosting) { // 默认 false\n        postingState.isMainThread = isMainThread(); //判断主线程还是子线程\n        postingState.isPosting = true; //这里保证 cancelEventDelivery 是在同一个线程调用的\n        if (postingState.canceled) { //cancelEventDelivery\n            throw new EventBusException(&quot;Internal error. Abort state was not reset&quot;);\n        }\n        try {\n            //可能发送了多个事件\n            while (!eventQueue.isEmpty()) {\n                //发送队列依次取出第一个事件执行发布\n                postSingleEvent(eventQueue.remove(0), postingState);\n            }\n        } finally {\n            //发送完事件后重置标志位\n            postingState.isPosting = false;\n            postingState.isMainThread = false;\n        }\n    }\n}</code></pre>\n<p>事件发布时考虑事件的继承关系</p>\n<pre><code class=\"java\">//发送队列的第一个事件\nprivate void postSingleEvent(Object event, PostingThreadState postingState) throws Error {\n    Class&lt;?&gt; eventClass = event.getClass();\n    boolean subscriptionFound = false;\n    //是否考虑订阅者的继承关系\n    if (eventInheritance) {\n        //事件类和事件类的父类们\n        List&lt;Class&lt;?&gt;&gt; eventTypes = lookupAllEventTypes(eventClass);\n        int countTypes = eventTypes.size();\n        for (int h = 0; h &lt; countTypes; h++) {\n            Class&lt;?&gt; clazz = eventTypes.get(h);\n            //当前类和父类有一个没收到就算失败\n            subscriptionFound |= postSingleEventForEventType(event, postingState, clazz);\n        }\n    } else {\n        subscriptionFound = postSingleEventForEventType(event, postingState, eventClass);\n    }\n    if (!subscriptionFound) {\n        if (logNoSubscriberMessages) {\n            logger.log(Level.FINE, &quot;No subscribers registered for event &quot; + eventClass);\n        }\n        //兜底方案，发送一个通知事件，告诉订阅者刚才的事件没发送成功\n        if (sendNoSubscriberEvent &amp;&amp; eventClass != NoSubscriberEvent.class &amp;&amp;\n                eventClass != SubscriberExceptionEvent.class) {\n            post(new NoSubscriberEvent(this, event));\n        }\n    }\n}</code></pre>\n<p>通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作</p>\n<pre><code class=\"java\">private boolean postSingleEventForEventType(Object event, PostingThreadState postingState, Class&lt;?&gt; eventClass) {\n    CopyOnWriteArrayList&lt;Subscription&gt; subscriptions;\n    synchronized (this) {\n        //通过单事件，找到所有观察者\n        subscriptions = subscriptionsByEventType.get(eventClass);\n    }\n    if (subscriptions != null &amp;&amp; !subscriptions.isEmpty()) {\n        for (Subscription subscription : subscriptions) {\n            //存入线程\n            postingState.event = event;\n            postingState.subscription = subscription;\n            boolean aborted;\n            try {\n                postToSubscription(subscription, event, postingState.isMainThread);\n                aborted = postingState.canceled;\n            } finally {\n                //重置状态\n                postingState.event = null;\n                postingState.subscription = null;\n                postingState.canceled = false;\n            }\n            if (aborted) {\n                break;\n            }\n        }\n        return true;\n    }\n    return false;\n}</code></pre>\n<p>发布时会根据订阅者的线程模型做出不同处理</p>\n<pre><code class=\"java\">//发布到订阅\nprivate void postToSubscription(Subscription subscription, Object event, boolean isMainThread) {\n    //根据线程模型不同处理\n    switch (subscription.subscriberMethod.threadMode) {\n        case POSTING: //订阅和发布是同一个线程\n            invokeSubscriber(subscription, event);\n            break;\n        case MAIN: //订阅在主线程\n            if (isMainThread) {\n                invokeSubscriber(subscription, event);\n            } else {\n                //通过Handler 发送到主线程\n                mainThreadPoster.enqueue(subscription, event);\n            }\n            break;\n        case MAIN_ORDERED: //订阅在主线程排队\n            if (mainThreadPoster != null) {\n                mainThreadPoster.enqueue(subscription, event);\n            } else {\n                //临时：技术上不正确，因为海报没有与订阅者分离\n                // temporary: technically not correct as poster not decoupled from subscriber\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        case BACKGROUND:////如果发帖线程非主线程则订阅者的处理会在工作线程中执行否则和发布者同一个线程处理。\n            if (isMainThread) {\n                backgroundPoster.enqueue(subscription, event);\n            } else {\n                invokeSubscriber(subscription, event);\n            }\n            break;\n        case ASYNC://无论事件在哪个线程发布，订阅者都会在新建的工作线程中执行。\n            asyncPoster.enqueue(subscription, event);\n            break;\n        default:\n            throw new IllegalStateException(&quot;Unknown thread mode: &quot; + subscription.subscriberMethod.threadMode);\n    }\n}</code></pre>\n<p>三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  对应四种线程模型</p>\n<p>反射调用观察者</p>\n<pre><code class=\"java\">//同一个线程执行订阅者方法\nvoid invokeSubscriber(Subscription subscription, Object event) {\n    try {\n        //方法、类、参数\n        subscription.subscriberMethod.method.invoke(subscription.subscriber, event);\n    } catch (InvocationTargetException e) {\n        handleSubscriberException(subscription, event, e.getCause());\n    } catch (IllegalAccessException e) {\n        throw new IllegalStateException(&quot;Unexpected exception&quot;, e);\n    }\n}</code></pre>\n<h5 id=\"事件发布流程总结\"><a href=\"#事件发布流程总结\" class=\"headerlink\" title=\"事件发布流程总结\"></a>事件发布流程总结</h5><p>发布事件通过ThreadLocal保证发送时的同步问题，粘性事件就是发布前存到一个map中，当订阅者注册时会遍历该map执行粘性事件的发布，事件发布时默认会考虑事件的继承关系即订阅事件的父类的订阅者也会收到事件。</p>\n<p>具体发布过程为：通过单事件，找到所有观察者，遍历所有观察该事件的观察者，执行发布操作，发布时会根据订阅者的线程模型做出不同处理，通过三个发布器 mainThreadPoster,backgroundPoster,asyncPoster  完成四种线程模型的切换，最后通过反射调用观察者。</p>\n<h4 id=\"10-2-4-注销订阅者\"><a href=\"#10-2-4-注销订阅者\" class=\"headerlink\" title=\"10.2.4 注销订阅者\"></a>10.2.4 注销订阅者</h4><pre><code class=\"java\">public override fun onStop() {\n    super.onStop()\n    EventBus.getDefault().unregister(this)\n}</code></pre>\n<p>根据订阅者类找该类的所有事件</p>\n<pre><code class=\"java\">public synchronized void unregister(Object subscriber) {\n    //找到订阅者类对应的事件类列表\n    List&lt;Class&lt;?&gt;&gt; subscribedTypes = typesBySubscriber.get(subscriber);\n    if (subscribedTypes != null) {\n        //根据每个事件类解除每个订阅者\n        for (Class&lt;?&gt; eventType : subscribedTypes) {\n            unsubscribeByEventType(subscriber, eventType);\n        }\n        //从内存map 移除\n        typesBySubscriber.remove(subscriber);\n    } else {\n        logger.log(Level.WARNING, &quot;Subscriber to unregister was not registered before: &quot; + subscriber.getClass());\n    }\n}</code></pre>\n<p>根据每个事件找对应的所有订阅者，如果订阅者中的订阅者类和当前类一样才执行解除订阅</p>\n<pre><code class=\"java\">private void unsubscribeByEventType(Object subscriber, Class&lt;?&gt; eventType) {\n    //根据每个事件类找到所有该事件的订阅者\n    List&lt;Subscription&gt; subscriptions = subscriptionsByEventType.get(eventType);\n    if (subscriptions != null) {\n        int size = subscriptions.size();\n        for (int i = 0; i &lt; size; i++) {\n            //每个订阅者：类+方法\n            Subscription subscription = subscriptions.get(i);\n            //确认是当前类的订阅者\n            if (subscription.subscriber == subscriber) {\n                //修改解除订阅标志位\n                subscription.active = false;\n                subscriptions.remove(i);\n                i--; //防止越界\n                size--;\n            }\n        }\n    }\n}</code></pre>\n<h5 id=\"注销订阅者流程总结\"><a href=\"#注销订阅者流程总结\" class=\"headerlink\" title=\"注销订阅者流程总结\"></a>注销订阅者流程总结</h5><p>注销流程就是先通过订阅者类找所有事件，遍历每一个事件找所有订阅者，判断订阅者中的订阅者类是否和当前类一致，一致就将订阅者中的 active 标记为false 用来阻止继续发布事件，并从内存map中移除。</p>\n<h2 id=\"11-参考\"><a href=\"#11-参考\" class=\"headerlink\" title=\"11. 参考\"></a>11. 参考</h2><p><strong><a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"noopener\">Github | EventBus</a></strong></p>\n<p><a href=\"https://greenrobot.org/eventbus/documentation/\" target=\"_blank\" rel=\"noopener\">EventBus Documentation</a></p>\n<p><a href=\"https://time.geekbang.org/column/intro/250?code=Grxvvkczx9tydhzn0RhJfNfwaF2RgJA9qeUWd8orIYo%3D\" target=\"_blank\" rel=\"noopener\">极客时间| 设计模式之美</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1383971\" target=\"_blank\" rel=\"noopener\">EventBus 如何使用及一些常见场景</a></p>\n<p><a href=\"https://blog.csdn.net/f552126367/article/details/86571012\" target=\"_blank\" rel=\"noopener\">EventBus使用总结和使用场景</a></p>\n"},{"title":"Jetpack | Lifecycle 组件系详解第一篇：Lifecycle","date":"2021-05-21T06:16:55.000Z","cover":true,"summary":"Lifecycle 是什么，有什么，怎么用，应用场景，实现原理等","_content":"\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Jetpack | Lifecycle 组件系详解第一篇：Lifecycle\n\nLifecycle细组件主要包括：Lifecycle、LiveData、ViewModle、其它扩展组件(process 、service)等。\n\n<img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122005956.png\" alt=\"image-20211122005853174\" style=\"zoom:50%;\" />\n\n## 1. Lifecycle问题汇总\n\n- 什么是 Lifecycle\n- 如何使用 Lifecycle 观察宿主状态\n- Lifecycle 是如何分发宿状态的\n- Fragment 是如何实现 Lifecycle 的\n- Activity 是如何实现 Lifecycle 的\n- Application 是如何实现 Lifecycle 的\n- Service 是如何实现 Lifecycle 的\n- View 是如何实现观察宿主 Lifecycle 的\n- Lifecycle 涉及的依赖库是如何划分的\n-  Lifecycle 实现观察宿主状态有几种方式\n-  注解+反射/生成代码的方式为什么又被废弃了\n- Activity 的生命周期分发为何通过 ReportFragment 实现\n- Lifecycle Event 和 State 的关系\n- 在 onResume 方法中注册观察者，是否能观察到其它生命周期的回调\n- 分发宿状态过程中是如何同步 Event 和 State 的\n\n## 2. Lifecycle是什么\n\nLifecycle 是一个对宿主生命周期的变化具有感知能力的组件 (Lifecycle-Aware Components) ，在 Android 中目前提供的可观察的宿主组件有 Activity / Fragment / Service / Application 等，除了jetpack 组件中内置的可观察的宿主我们也可以借助 LifeCycle 的能力自己实现可观察的宿主，例如 SDK 中的 Activity 是没有实现Lifecycle 的，此时我们就可以根据业务需求自定时实现了。\n\nLifecycle 的核心实现思想是观察者模式，Jetpack 组件中的 Activity / Fragment 组件中都已经接入了 Lifecycle 中的被观察者者部分的代码，我们只需要实现自己的观察者然后在 Activity / Fragment 组件中注册我们的观察者就可以监听到生命周期事件的变化了。\n\n> 支持库 26.1.0 及更高版本中的 Fragment 和 Activity 已实现 [`LifecycleOwner`](https://developer.android.com/reference/androidx/lifecycle/LifecycleOwner) 接口。\n\n一种常见的应用场景是有些逻辑需要依赖在 Activity 和 Fragment 的生命周期方法中实现，通过 Lifecycle  组件就可以将这部分代码从生命周期方法中提取到单独的类中，达到解耦被观察者和观察者的目的，从而帮助开发者写出简洁易维护代码。\n\n> 观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）\n>\n> **观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。**\n>\n> 观察者模式属于行为型设计模式，行为型设计模式的目的是将不同的行为代码解耦，具体到观察者模式就是是将观察者和被观察者代码解耦。\n>\n> 观察者模式的实现一般分为两个角色：Observable、Observer，两个角色一般都提供抽象层。\n>\n> 被观察者部分的抽象层一般是抽象类，除了提供必要的抽象方法还提供添加、删除等复用的逻辑。\n>\n> 观察者部分的抽象层一般是一个SAM（Single Abstract Method）接口，观察者可以实现该方法做出更新操作。\n\n![image-20211120233538055](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211120233721.png)\n\nLifecycle 是如何结合观察者模式实现 Activity 和 Fragment 组件的生命周期感知能力的\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png)\n\nLifecycle 在实现被观察者时并没有采用传统的直接继承抽象类的方式，而是通过类似委托模式将被观察者的逻辑代码封装到了 LifecycleRegistry 类中，LifecycleRegistry 是真正的被观察者负责统一管理所有观察者的添加、删除、存储、分发等操作。当委托者（ Activity / Fragment）有生命周期事件产生时会通过受托者 LifecycleRegistry 执行具体的分发操作，从而实现委托者类的生命周期可感知能力。\n\n这样做的优势是符合单一原则，有利于被观察者侧的代码复用，也不用破坏 Activity/Fragment 组件的继承结构。\n\n\n\n## 3. Lifecycle 有什么\n\nandroidx.lifecycle 组下的组件,了解 lifecycle  有什么才能更好的运用。lifecycle 模块中除了自己实现观察者模式相关的代码\n\n| lifecycle-common <br />lifecycle-common-java8 <br />lifecycle-compiler<br />lifecycle-runtime <br />lifecycle-runtime-ktx <br />lifecycle-runtime-ktx- lint <br />lifecycle-runtime-testing | lifecycle-livedata <br />lifecycle-livedata-core <br />lifecycle-livedata-core-ktx<br />lifecycle-livedata-core-ktx-lint <br />lifecycle-livedata-core-truth  <br />lifecycle-livedata-ktx<br />lifecycle-reactivestreams <br />lifecycle-reactivestreams-ktx | lifecycle-viewmodel <br />lifecycle-viewmodel-compose <br />lifecycle-viewmodel-ktx <br />lifecycle-viewmodel-savedstate | lifecycle-process <br />lifecycle-service <br />lifecycle-extensions |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| lifecycle相关                                                | livedata 相关                                                | viewmodel相关                                                | 其它扩展组件相关                                             |\n| common-java8 已经废弃                                        | -                                                            | -                                                            | extensions 耦合重已经废弃                                    |\n\n再来看一下其中的几个核心组件之间的依赖关系\n\n![WechatIMG77](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122011323.jpeg)\n\n开发时按需添加 Lifecycle 的依赖项\n\n```groovy\ndef lifecycle_version = \"2.4.0\"\n// ViewModel\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n// ViewModel utilities for Compose\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version\"\n// LiveData\nimplementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n// Lifecycles only (without ViewModel or LiveData)\nimplementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n// Saved state module for ViewModel\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version\"\n// Annotation processor\nkapt \"androidx.lifecycle:lifecycle-compiler:$lifecycle_version\"\n// alternately - if using Java8, use the following instead of lifecycle-compiler\nimplementation \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n// optional - helpers for implementing LifecycleOwner in a Service\nimplementation \"androidx.lifecycle:lifecycle-service:$lifecycle_version\"\n// optional - ProcessLifecycleOwner provides a lifecycle for the whole application process\nimplementation \"androidx.lifecycle:lifecycle-process:$lifecycle_version\"\n// optional - ReactiveStreams support for LiveData\nimplementation \"androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version\"\n```\n\n其它组件对lifecycle的依赖情况\n\n```groovy\nimplementation 'androidx.core:core-ktx:1.7.0'\n```\n\ncore-ktx api 了 core \n\ncore api 了lifecycle-runtime\n\nlifecycle-runtime api 了 lifecycle-common\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.3.0'\n```\n\nappcompat api 了core、activity、fragment\n\nactivity api 了 core、lifecycle-runtime、lifecycle-viewmodel、lifecycle-viewmodel-savedstate\n\nfragment api 了core、activity、lifecycle-livedata-core、lifecycle-viewmodel、lifecycle-viewmodel-savedstate\n\nlifecycle-runtime api 了 lifecycle-common\n\nlifecycle-livedata-core api 了  lifecycle-livedata\n\n所以一般情况下我们新建的Android 项目默认都会提供core-ktx、appcompat 这两个组件而他们又间接依赖了 lifecycle 系的组件\n\n依赖 appcompat 间接依赖的 lifecycle 系组件\n\n![image-20211121131315450](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134326.png)\n\n依赖 core-ktx 间接依赖的 lifecycle 系组件\n\n![image-20211121131403284](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134339.png)\n\n\n\n## 4. Lifecycle 应用\n\n生命周期感知型组件可以实现在各种情况下更轻松地管理生命周期。下面列举几个例子：\n\n- 在粗粒度和细粒度位置更新之间切换。使用生命周期感知型组件可在位置应用可见时启用细粒度位置更新，并在应用位于后台时切换到粗粒度更新。\n- 停止和开始视频缓冲。使用生命周期感知型组件可尽快开始视频缓冲，但会推迟播放，直到应用完全启动。此外，应用销毁后，还可以使用生命周期感知型组件终止缓冲。\n- 开始和停止网络连接。借助生命周期感知型组件，可在应用位于前台时启用网络数据的实时更新（流式传输），并在应用进入后台时自动暂停。\n- 暂停和恢复动画可绘制资源。借助生命周期感知型组件，可在应用位于后台时暂停动画可绘制资源，并在应用位于前台后恢复可绘制资源。\n- Handler 的消息移除。\n- Presenter 的 attach&detach View 。\n- 为其他三方库加持生命周期感知的能力，例如：RxJava 、EventBus等。\n\n## 5. Lifecycle 怎么用\n\n### 5.1 观察者使用方式汇总\n\nLifecycle 的以下使用方式是以  Activity 或者 Fragment 为宿主举例。\n\n- 方式一：运行时注解+反射\n  - 自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举标注生命周期方法；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- 方式二：编译时注解+生成辅助类(XXX_LifecycleAdapter)\n  - 添加注解处理器组件：lifecycle-compiler\n  - 自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举 标注生命周期方法；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- 方式三：实现 FullLifecycleObserver (非公共方法，自己可以实现一个)\n  - 自定义 FullLifecycleObserver 观察者，FullLifecycleObserver 是普通接口需要实现其中定义的所有生命周期方法；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- 方式四：实现 LifecycleEventObserver(推荐方式)\n  - 自定义 LifecycleEventObserver 观察者，通过实现 onStateChanged(LifecycleOwner ,Lifecycle.Event) 方法自行判断生命周期方法的回调；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- **方式五：实现 DefaultLifecycleObserver (推荐方式)**\n  - 自定义 DefaultLifecycleObserver 观察者，DefaultLifecycleObserver 中通过java default 关键字都实现了方法体，所以只需实现需要的声明后期方法即可；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n\n> DefaultLifecycleObserver 接口中的 default 关键字\n>\n> default 关键字修饰的方法能够向接口添加新功能方法，必须提供方法体，并确保兼容实现这个接口的之前的类不用在接口的子类中进行逐个实现该方法。可以按需实现\n>\n> default是在需要给接口新增方法时，但是子类数量过多，或者子类没必要实现的场景下使用。 比如java8中的List接口，新增了sort()方法\n>\n> ```java\n> //@since 1.8\n> public interface List<E> extends Collection<E> {\n> ...\n> default void sort(Comparator<? super E> c) {\n>    Object[] a = this.toArray();\n>    Arrays.sort(a, (Comparator) c);\n>    ListIterator<E> i = this.listIterator();\n>    for (Object e : a) {\n>        i.next();\n>        i.set((E) e);\n>    }\n> }\n> \n> ```\n\n### 5.2 观察 Activity Lifecycle\n\n```kotlin\nclass MyLifecycleActivityObserver : DefaultLifecycleObserver {\n\n    override fun onStart(owner: LifecycleOwner) {\n        super.onStart(owner)\n        Log.d(\"MyLifecycleActivity\", \"onStart\")\n    }\n\n    override fun onStop(owner: LifecycleOwner) {\n        super.onStop(owner)\n        Log.d(\"MyLifecycleActivity\", \"onStop\")\n    }\n}\n```\n\n```kotlin\nclass MyLifecycleActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        addLifecycleObserver()\n    }\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MyLifecycleActivityObserver())\n    }\n}\n```\n\n### 5.3 观察 SDK Activity Lifecycle\n\n```kotlin\nclass MySdkActivity : Activity(), LifecycleOwner {\n\n    private lateinit var lifecycleRegistry: LifecycleRegistry\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycleRegistry = LifecycleRegistry(this)\n        addLifecycleObserver()\n        MySDKFragment.inject(this)\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MySDKActivityObserver())\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return lifecycleRegistry\n    }\n}\n\nclass MySDKActivityObserver : DefaultLifecycleObserver {\n\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        Log.i(\"SDKActivity\", \"Observer onPause\")\n    }\n\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        Log.i(\"SDKActivity\", \"Observer onResume\")\n\n    }\n}\n```\n\n### 5.4 观察 Fragment Lifecycle\n\n```kotlin\nclass MyLifecycleFragmentObserver : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun connectListener() {\n        Log.i(\"MyLifecycleFragment\", \"onResume\")\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun disconnectListener() {\n        Log.i(\"MyLifecycleFragment\", \"onPause\")\n\n    }\n}\n```\n\n```kotlin\nclass MyLifecycleFragment : Fragment() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        addLifecycleObserver()\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MyLifecycleFragmentObserver())\n    }\n  \n}\n```\n\n### 5.5 观察 SDK Fragment Lifecycle\n\n```kotlin\nclass MySDKFragment : Fragment(), LifecycleOwner {\n\n    private lateinit var lifecycleRegistry: LifecycleRegistry\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycleRegistry = LifecycleRegistry(this)\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE)\n        addLifecycleObserver()\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MySDKFragmentObserver())\n    }\n\n    companion object {\n        fun inject(activity: Activity) {\n            val manager = activity.fragmentManager\n            if (manager.findFragmentByTag(\"MyLifecycleFragment\") == null) {\n                manager.beginTransaction()\n                    .add(MySDKFragment(), \"MyLifecycleFragment\")\n                    .commit()\n                manager.executePendingTransactions()\n            }\n        }\n    }\n    \n    override fun onResume() {\n        super.onResume()\n        Log.i(\"SDKFragment\", \" onResume\")\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME)\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        Log.i(\"SDKFragment\", \" onPause\")\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return lifecycleRegistry\n    }\n\n}\n\nclass MySDKFragmentObserver : DefaultLifecycleObserver {\n\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        Log.i(\"SDKFragment\", \"Observer onPause\")\n    }\n\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        Log.i(\"SDKFragment\", \"Observer onResume\")\n\n    }\n}\n```\n\n### 5.6 观察 Service Lifecycle\n\n```kotlin\npublic class MyLifecycleServiceObserver implements LifecycleEventObserver {\n    \n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        if (event == Lifecycle.Event.ON_START) {\n            Log.d(\"MyLifecycleService\", \"onStart()\");\n        } else if (event == Lifecycle.Event.ON_DESTROY) {\n            Log.d(\"MyLifecycleService\", \"onDestroy()\");\n        }\n    }\n}\n```\n\n```kotlin\npublic class MyLifecycleService extends LifecycleService {\n    public MyLifecycleService() {\n        getLifecycle().addObserver(new MyLifecycleServiceObserver());\n    }\n}\n```\n\n### 5.7 观察 Application Lifecycle\n\n```kotlin\nclass MyLifecycleApplicationObserver(private val application: Application) :\n    LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun appInResumeState() {\n        Toast.makeText(application, \"In Foreground\", Toast.LENGTH_LONG).show()\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun appInPauseState() {\n        Toast.makeText(application, \"In Background\", Toast.LENGTH_LONG).show()\n    }\n}\n```\n\n```kotlin\npublic class MyLifecycleApplication extends MultiDexApplication {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        //饿汉式单例获取 ProcessLifecycleOwner\n        ProcessLifecycleOwner.get().getLifecycle().addObserver(new MyLifecycleApplicationObserver(this));\n    }\n}\n```\n\n### 5.8 View 观察 Lifecycle\n\n```kotlin\nclass MyLifecycleView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyle: Int = 0\n) : View(context, attrs, defStyle) {\n    init {\n        addOnAttachStateChangeListener(object : OnAttachStateChangeListener {\n            override fun onViewAttachedToWindow(v: View?) {\n                Log.d(\"MyLifecycleView\", \"onViewAttachedToWindow\")\n                findViewTreeLifecycleOwner()?.lifecycle\n                    ?.addObserver(object : LifecycleEventObserver {\n                        override fun onStateChanged(\n                            source: LifecycleOwner,\n                            event: Lifecycle.Event\n                        ) {\n                            Log.d(\"MyLifecycleView\", \"onStateChanged：source:$source, event: $event\")\n                        }\n                    })\n            }\n\n            override fun onViewDetachedFromWindow(v: View?) {\n                Log.d(\"MyLifecycleView\", \"onViewDetachedFromWindow\")\n\n            }\n\n        })\n\n    }\n}\n```\n\n### 5.9 各种方式的观察者的执行顺序\n\n- DefaultLifecycleObserver 所有方法将在 [LifecycleOwner] 的生命周期回调方法被调用之前被调用，这里需要注意Fragment 生命周期的回调时机。\n\n* LifecycleEventObserver onStateChanged 方法在当状态转换事件发生时调用。\n*  如果一个类同时实现了DefaultLifecycleObserver 和LifecycleEventObserver ，则首先调用DefaultLifecycleObserver方法，然后调用LifecycleEventObserver.onStateChanged(LifecycleOwner, Lifecycle.Event) 方法。\n*  如果一个类实现了这个接口并且同时使用了OnLifecycleEvent 注解，那么注解将被忽略。\n\n```kotlin\nD/Life_Owner: onCreate\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Owner: onStart\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onResume\nD/Life_Observer: onResume\nD/Life_Observer: onStateChanged,event:ON_RESUME\nD/Life_Observer: onPause\nD/Life_Observer: onStateChanged,event:ON_PAUSE\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy\n```\n\n在Activity 的onPause 方法注册观察者，当宿主执行onPause时 观察者也是会从 onCreate 开始直到对齐当前状态，Lifecycle 内部做了同步和对齐的处理。\n\n```\nD/Life_Owner: onCreate\nD/Life_Owner: onStart\nD/Life_Owner: onResume\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy\n```\n\n## 6. Lifecycle 最小原型设计\n\n![观察者模式](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png)\n\n#### 6.1 代码实现最小原型\n\n被观察者部分\n\n```kotlin\n//抽象接口层\nabstract class Lifecycle {\n    abstract fun addObserver(observer: LifecycleObserver)\n    abstract fun removeObserver(observer: LifecycleObserver)\n    enum class State {\n        DESTROYED,\n        INITIALIZED,\n        CREATED,\n        STARTED,\n        RESUMED;\n    }\n\n    enum class Event {\n        ON_CREATE,\n        ON_START,\n        ON_RESUME,\n        ON_PAUSE,\n        ON_STOP,\n        ON_DESTROY,\n        ON_ANY;\n    }\n}\n//受托方\nclass LifecycleRegistry(private val lifecycleOwner: LifecycleOwner) : Lifecycle() {\n\n    private var lifecycleObserver: LifecycleObserver? = null\n\n    private val lifecycleObservers = arrayListOf<LifecycleObserver>()\n\n    override fun addObserver(observer: LifecycleObserver) {\n        lifecycleObservers.add(observer)\n        lifecycleObserver = observer\n    }\n\n    override fun removeObserver(observer: LifecycleObserver) {\n        lifecycleObservers.remove(observer)\n    }\n\n    fun handleLifecycleEvent(event: Event) {\n        lifecycleObservers.forEach {\n            if (it is LifecycleEventObserver) {\n                it.onStateChanged(lifecycleOwner, event)\n            }\n        }\n    }\n\n}\n```\n\n观察者部分\n\n```kotlin\ninterface LifecycleObserver {}\ninterface LifecycleEventObserver : LifecycleObserver {\n    fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event)\n}\ninterface DefaultLifecycleObserver : FullLifecycleObserver {\n\n    override fun onCreate(owner: LifecycleOwner) {}\n\n    override fun onStart(owner: LifecycleOwner) = Unit\n\n    override fun onResume(owner: LifecycleOwner) {}\n\n    override fun onPause(owner: LifecycleOwner) {}\n\n    override fun onStop(owner: LifecycleOwner) {}\n\n    override fun onDestroy(owner: LifecycleOwner) {}\n\n}\n```\n\n测试被观察者部分\n\n```kotlin\nclass Activity : LifecycleOwner {\n\n    private val lifecycleRegistry: LifecycleRegistry = LifecycleRegistry(this)\n\n    init {\n        lifecycleRegistry.addObserver(ActivityObserver())\n    }\n\n    override fun getLifecycle(): Lifecycle = lifecycleRegistry\n\n    fun onStart() {\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START)\n    }\n\n    fun onStop() {\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP)\n    }\n\n}\n```\n\n测试观察者部分\n\n```kotlin\nclass ActivityObserver : LifecycleEventObserver {\n    override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n        println(\"source: $source, event: $event \")\n    }\n}\n//运行测试\nfun main() {\n    val app = Activity()\n    app.onStart()\n    app.onStop()\n}\n```\n\n\n\n## 7. Lifecycle 实现原理\n\n### 7.1 Fragment 的实现\n\njetpack 中的 Fragment 组件已经被观察部分的接口 LifecycleOwner\n\n```java\n//androidx.fragment.app.Fragment 中已经实现 LifecycleOwner \npublic class Fragment implements \n  \t\t\tComponentCallbacks, \n\t\t\t\tOnCreateContextMenuListener, \n\t\t\t\tLifecycleOwner,\n        ViewModelStoreOwner, \n\t\t\t\tHasDefaultViewModelProviderFactory, \n\t\t\t\tSavedStateRegistryOwner,\n        ActivityResultCaller {...}\n\t\t//通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类\n    @Override\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\n   LifecycleRegistry mLifecycleRegistry;\n\t//构造函数中进行了受托者 LifecycleRegistry 的初始化\n   public Fragment() initLifecycle();}\n   private void initLifecycle() {\n        mLifecycleRegistry = new LifecycleRegistry(this);\n    }\n\n\t//当发生生命周期事件时执通过委托类分发该事件到所有观察者中\n void performCreate(Bundle savedInstanceState) {\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n  }\n```\n\nFragment 的生命周期感知实现很简单，就是委托给 mLifecycleRegistry 全权负责\n\n### 7.2 Activity 实现\n\n```java\n//androidx.core.app.ComponentActivity，@hide标注，不对外使用，只做了 Lifecycle 和 KeyEvent 的封装\npublic class ComponentActivity extends Activity implements\n        LifecycleOwner,\n        KeyEventDispatcher.Component {...}\n```\n\n```java\n//androidx.activity.ComponentActivity，以上特性 + 集成了 Jitpack 的其它组件，例如：Lifecycle，ViewModel等\npublic class ComponentActivity extends androidx.core.app.ComponentActivity implements\n        ContextAware,\n        LifecycleOwner,\n        ViewModelStoreOwner,\n        HasDefaultViewModelProviderFactory,\n        SavedStateRegistryOwner,\n        OnBackPressedDispatcherOwner,\n        ActivityResultRegistryOwner,\n        ActivityResultCaller {\n        //通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类\n        private final LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\t\t\t \tpublic Lifecycle getLifecycle() {\n        \t\treturn mLifecycleRegistry;\n    \t\t}\n        protected void onCreate(@Nullable Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          \t// ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知\n            ReportFragment.injectIfNeededIn(this);\n            if (mContentLayoutId != 0) {\n                setContentView(mContentLayoutId);\n            }\n    }\n}\n```\n\n```java\n//androidx.fragment.app.FragmentActivity，以上特性 + 简化Fragment 的使用，例如：FragmentManager\npublic class FragmentActivity extends ComponentActivity implements\n        ActivityCompat.OnRequestPermissionsResultCallback,\n        ActivityCompat.RequestPermissionsRequestCodeValidator {...}\n```\n\n```java\n//androidx.appcompat.app.AppCompatActivity 以上特性 + 简化 Material 设计，例如主题、暗黑、导航条等\npublic class AppCompatActivity extends FragmentActivity implements \n  \t\t\tAppCompatCallback,\n        TaskStackBuilder.SupportParentable, \n\t\t\t\tActionBarDrawerToggle.DelegateProvider {...}\n```\n\nandroidx.activity 组件下的 **ComponentActivity** 可以说是 androidx 系或者说是 Jetpack 开发套件中的最顶层 Activity 基类了，可以看到 ComponentActivity 类中已经实现了 LifecycleOwner，所以和 Fragment 一样将被观察者的逻辑委托给了LifecycleRegistry。\n\n但是我们在ComponentActivity 生命周期的回调方法中并没有看到 LifecycleRegistry 执行的分发操作。在 onCreate 方法中我们看到ReportFragment.injectIfNeededIn(this); 这句代码，这里就是 Activity 声明周期可感知做的的兼容处理，ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知。\n\n#### ReportFragment\n\n```java\n\t\tpublic static void injectIfNeededIn(Activity activity) {\n        if (Build.VERSION.SDK_INT >= 29) {\n            // 在 API 29+ 上，可以直接注册 Activity 中的 registerActivityLifecycleCallbacks 回调方法获取Activity 的生命周期\t\t\t\t回调。\n            LifecycleCallbacks.registerIn(activity);\n        }\n        //在 API 29 之前和进程的宿主 ProcessLifecycleOwner 都是通过内嵌一个空的 Fragment 获间接取 Activity 的生命周期回调。\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n\t\t}\t\n\t\t//29以上分发的方式\n\t\t@RequiresApi(29)\n    static class LifecycleCallbacks implements Application.ActivityLifecycleCallbacks {\n        static void registerIn(Activity activity) {\n            activity.registerActivityLifecycleCallbacks(new LifecycleCallbacks());\n        }\n\n        @Override\n        public void onActivityPostCreated(@NonNull Activity activity,\n                @Nullable Bundle savedInstanceState) {\n            dispatch(activity, Lifecycle.Event.ON_CREATE);\n        }\n\n        @Override\n        public void onActivityPostStarted(@NonNull Activity activity) {\n            dispatch(activity, Lifecycle.Event.ON_START);\n        }\n        @Override\n        public void onActivityPreDestroyed(@NonNull Activity activity) {\n            dispatch(activity, Lifecycle.Event.ON_DESTROY);\n        }\n\n        @Override\n        public void onActivityDestroyed(@NonNull Activity activity) {\n        }\n    }\n\n\n\n\t\t//Fragment 声明周期方法触发是\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);// 进程29以下需要需要的\n        dispatch(Lifecycle.Event.ON_START);// 分发29以下 Avtivity \n    }\n\n   private void dispatch(@NonNull Lifecycle.Event event) {\n        if (Build.VERSION.SDK_INT < 29) {\n            dispatch(getActivity(), event);\n        }\n    }\n    static void dispatch(@NonNull Activity activity, @NonNull Lifecycle.Event event) {\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event); // 29以下最终的分发方法\n            }\n        }\n    }\n\n```\n\n总的来说 Activity 将生命周期方法通知给订阅者的方式有别于 Fragment 的直接在生命周期回调中委托给 mLifecycleRegistry 全权负责。Activity 的方式显现复杂，搞复杂的主要原因也是为了兼容低版本和方便移植不得不做的。\n\n根据SDK版本可分为两种方式，大于等于29(Androi 10) 以上是通过  activity.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks) 方式注册生命周期回调方法的方式获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。\n\n29(Androi 10) 以下是通过内嵌一个空的 Fragment 获间接获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。\n\n### 7.3 LifecycleRegistry-真正的被观察者\n\nLifecycleRegistry 通常被 Fragments 和 Activity 组件使用。 如果有自定义 LifecycleOwner的需求也可以直接使用它。\n\nLifecycleRegistry  可以看做是Fragment 和 Activity 实现生命周期可感知的受托方。所有的被观察的逻辑都在这里实现。\n\n#### 构造方法\n\n```java\nprivate LifecycleRegistry(@NonNull LifecycleOwner provider, boolean enforceMainThread) {\n    mLifecycleOwner = new WeakReference<>(provider); // 宿主类通过弱引用包裹\n    mState = INITIALIZED;\n    mEnforceMainThread = enforceMainThread;\n}\nLifecycleOwner lifecycleOwner = mLifecycleOwner.get();\nif (lifecycleOwner == null) {\n    throw new IllegalStateException(\"LifecycleOwner of this LifecycleRegistry is already\"\n            + \"garbage collected. It is too late to change lifecycle state.\");\n}\n```\n\n宿主类通过弱引用包裹，当方式GC时会回收宿主类避免内存泄漏的产生，每次获取宿主时都会先判空，如果被GC了是不会继续执行的。\n\n#### 添加观察者\n\n```java\n//宿主中向LifecycleRegistry 中添加观察者\nlifecycle.addObserver(MyLifecycleActivityObserver())\n```\n\n```java\n//缓存观察者的数据容器\nprivate FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n\n//对分发事件的封装\nstatic class ObserverWithState {\n    State mState;\n    LifecycleEventObserver mLifecycleObserver;\n\n    ObserverWithState(LifecycleObserver observer, State initialState) {\n        mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);\n        mState = initialState;\n    }\n\n    void dispatchEvent(LifecycleOwner owner, Event event) {\n      \t//根据事件获取状态\n        State newState = event.getTargetState();\n        mState = min(mState, newState);\n        mLifecycleObserver.onStateChanged(owner, event); //分发\n        mState = newState; //前进一个状态\n    }\n}\n\n@Override\npublic void addObserver(@NonNull LifecycleObserver observer) {\n  \t//初始值状态为：mState = INITIALIZED;\n    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n  \t//包装观察者\n    ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\t\t//之前缓存过了，直接返回\n    if (previous != null) {\n        return;\n    }\n  \t//宿主被GC了\n    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n    if (lifecycleOwner == null) {\n        // it is null we should be destroyed. Fallback quickly\n        return;\n    }\n\t\t//\n    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n    State targetState = calculateTargetState(observer);//计算出宿主当前的状态\n    mAddingObserverCounter++;\n  \t//同步到宿主当前的状态，例如在 onResume 方法注册的观察者，之前的生命周期方法也会回调\n    while ((statefulObserver.mState.compareTo(targetState) < 0 //比较状态，是否小于宿主的状态,枚举类根据 ordinal 序号进行比较，越靠后的序号越大\n            && mObserverMap.contains(observer))) {\n        pushParentState(statefulObserver.mState);\n      \t//向前移动一个生命周期方法，ON_CREATE-ON_START-ON_RESUME 知道对齐宿主\n        final Event event = Event.upFrom(statefulObserver.mState);\n        if (event == null) {\n            throw new IllegalStateException(\"no event up from \" + statefulObserver.mState);\n        }\n      \t//每次向前移动一个生命周期方法就分发落后的生命周期方法\n        statefulObserver.dispatchEvent(lifecycleOwner, event);\n        popParentState();\n        // mState / subling may have been changed recalculate\n        targetState = calculateTargetState(observer);\n    }\n\n    if (!isReentrance) {\n        // we do sync only on the top level.\n        sync();\n    }\n    mAddingObserverCounter--;\n}\n\n@Nullable\npublic static Event upFrom(@NonNull State state) {\n    switch (state) {\n        case INITIALIZED:\n            return ON_CREATE;\n        case CREATED:\n            return ON_START;\n        case STARTED:\n            return ON_RESUME;\n        default:\n            return null;\n    }\n}\n\n```\n\n向前同步时：先根据状态推倒事件，分发是根据事件推导出状态，再更新状态。\n\n假设宿主中是在onResume 方法中注册的观察者，那么他的同步流程应该是怎样的呢？\n\n观察者最终会受到onCreate-onStart-onRsume 三个回到方法。\n\n####  State 和 Event\n\n针对Lifecycle 中 State 和 Event 的对应关系我们通过官方提供的流转图分析一下。\n\nLifecycle 接口中提供两个枚举：State表示宿主状态，Event表示宿主生命周期事件。\n\n```java\nenum class State {\n    DESTROYED,\n    INITIALIZED,\n    CREATED,\n    STARTED,\n    RESUMED;\n}\nenum class Event {\n    ON_CREATE,\n    ON_START,\n    ON_RESUME,\n    ON_PAUSE,\n    ON_STOP,\n    ON_DESTROY,\n    ON_ANY;\n}\n```\n\n两个过程：前进和后腿\n\n前进：INITIALIZED-ON_CREATE-CREATED-ON_START-STARTED-ON_RESUME-RESUMED\n\n倒退：RESUMED-ON_PAUSE-STARTED-ON_STOP-CREATED-ON_DESTROY-DESTROYED\n\n\n\n![生命周期状态示意图](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121224101.svg)\n\n状态是图中的节点，事件可以看作这些节点之间的边。\n\n通过事件获取状态\n\n```java\npublic State getTargetState() {\n    switch (this) {\n        case ON_CREATE:\n        case ON_STOP:\n            return State.CREATED;\n        case ON_START:\n        case ON_PAUSE:\n            return State.STARTED;\n        case ON_RESUME:\n            return State.RESUMED;\n        case ON_DESTROY:\n            return State.DESTROYED;\n        case ON_ANY:\n            break;\n    }\n    throw new IllegalArgumentException(this + \" has no target state\");\n}\n```\n\n如果上面的图看不太明白，看看下面这个就清除它们的对应关系了。\n\n![img](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211027015118.jpeg)\n\n\n\n#### 通知观察者\n\n```java\npublic void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n    enforceMainThreadIfNeeded(\"handleLifecycleEvent\");\n  \t//根据事件推导状态，再执行移动\n    moveToState(event.getTargetState());\n}\n//条件的判断\nprivate void moveToState(State next) {\n    if (mState == next) {\n        return;\n    }\n    mState = next;\n    if (mHandlingEvent || mAddingObserverCounter != 0) {\n        mNewEventOccurred = true;\n        // we will figure out what to do on upper level.\n        return;\n    }\n    mHandlingEvent = true;\n    sync();\n    mHandlingEvent = false;\n}\n\nprivate void sync() {\n    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n    if (lifecycleOwner == null) {\n        throw new IllegalStateException(\"LifecycleOwner of this LifecycleRegistry is already\"\n                + \"garbage collected. It is too late to change lifecycle state.\");\n    }\n    while (!isSynced()) {\n        mNewEventOccurred = false;\n        // mState 表示宿主的状态，比观察者的小说明是后腿流程 onPause-onStop\n        if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n            backwardPass(lifecycleOwner);\n        }\n        Map.Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n        // 前进流程\n      \tif (!mNewEventOccurred && newest != null\n                && mState.compareTo(newest.getValue().mState) > 0) {\n            forwardPass(lifecycleOwner);\n        }\n    }\n    mNewEventOccurred = false;\n}\n//while 循环的条件，是否都同步完了\nprivate boolean isSynced() {\n    if (mObserverMap.size() == 0) {\n        return true;\n    }\n    State eldestObserverState = mObserverMap.eldest().getValue().mState;\n    State newestObserverState = mObserverMap.newest().getValue().mState;\n    return eldestObserverState == newestObserverState && mState == newestObserverState;\n}\n```\n\n\n\n前进和后腿\n\n```java\n\nprivate void backwardPass(LifecycleOwner lifecycleOwner) {\n    Iterator<Map.Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n            mObserverMap.descendingIterator();\n    while (descendingIterator.hasNext() && !mNewEventOccurred) {\n        Map.Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n        ObserverWithState observer = entry.getValue();\n        while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                && mObserverMap.contains(entry.getKey()))) {\n            Event event = Event.downFrom(observer.mState); //循环倒退\n            if (event == null) {\n                throw new IllegalStateException(\"no event down from \" + observer.mState);\n            }\n            pushParentState(event.getTargetState());\n          \t//分发生命周期方法\n            observer.dispatchEvent(lifecycleOwner, event);\n            popParentState();\n        }\n    }\n}\npublic static Event downFrom(@NonNull State state) {\n    switch (state) {\n        case CREATED:\n            return ON_DESTROY;\n        case STARTED:\n            return ON_STOP;\n        case RESUMED:\n            return ON_PAUSE;\n        default:\n            return null;\n    }\n}\n\n\nprivate void forwardPass(LifecycleOwner lifecycleOwner) {\n    Iterator<Map.Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n            mObserverMap.iteratorWithAdditions();\n    while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n        Map.Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n        ObserverWithState observer = entry.getValue();\n        while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                && mObserverMap.contains(entry.getKey()))) {\n            pushParentState(observer.mState);\n            final Event event = Event.upFrom(observer.mState);\n            if (event == null) {\n                throw new IllegalStateException(\"no event up from \" + observer.mState);\n            }\n          \t//分发生命周期方法\n            observer.dispatchEvent(lifecycleOwner, event);\n            popParentState();\n        }\n    }\n}\n\npublic static Event upFrom(@NonNull State state) {\n    switch (state) {\n        case INITIALIZED:\n            return ON_CREATE;\n        case CREATED:\n            return ON_START;\n        case STARTED:\n            return ON_RESUME;\n        default:\n            return null;\n    }\n}\n```\n\n#### 区分观察者类型-Lifecycling\n\n结论是无论哪种方式的观察者都通过适配器模式转换为LifecycleEventObserver类型，当分发事件时，只要执行  mLifecycleObserver.onStateChanged(owner, event); Lifecycling适配的多种类型都会得到相应的分发执行。\n\n```java\nObserverWithState(LifecycleObserver observer, State initialState) {\n    mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);\n    mState = initialState;\n}\nvoid dispatchEvent(LifecycleOwner owner, Event event) {\n    State newState = event.getTargetState();\n    mState = min(mState, newState);\n    mLifecycleObserver.onStateChanged(owner, event);\n    mState = newState;\n}\n```\n\n适配器模式转换观察者包装成 LifecycleEventObserver\n\n```java\nstatic LifecycleEventObserver lifecycleEventObserver(Object object) {\n    boolean isLifecycleEventObserver = object instanceof LifecycleEventObserver;\n    boolean isFullLifecycleObserver = object instanceof FullLifecycleObserver;\n  \t//实现了这个连个接口\n    if (isLifecycleEventObserver && isFullLifecycleObserver) {\n        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object,\n                (LifecycleEventObserver) object);\n    }\n    if (isFullLifecycleObserver) {\n        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object, null);\n    }\n\n    if (isLifecycleEventObserver) {\n        return (LifecycleEventObserver) object;\n    }\n  \t//实现的LifecycleObserver + 注解的方式，最新版本已经废弃，存在拖慢编译速度，反射效率低的问题\n    final Class<?> klass = object.getClass();\n    int type = getObserverConstructorType(klass); // 通过反射apt 生成的 adapter 类是否发生ClassNotFoundException异常来判断是否采用了apt\n    if (type == GENERATED_CALLBACK) { // 采用的 apt 的方式\n      //GeneratedAdapter 是生成类的接口\n        List<Constructor<? extends GeneratedAdapter>> constructors =\n                sClassToAdapters.get(klass);\n        if (constructors.size() == 1) {\n            GeneratedAdapter generatedAdapter = createGeneratedAdapter(\n                    constructors.get(0), object);\n            return new SingleGeneratedAdapterObserver(generatedAdapter);\n        }\n        GeneratedAdapter[] adapters = new GeneratedAdapter[constructors.size()];\n        for (int i = 0; i < constructors.size(); i++) {\n            adapters[i] = createGeneratedAdapter(constructors.get(i), object);\n        }\n        return new CompositeGeneratedAdaptersObserver(adapters);\n    }\n    return new ReflectiveGenericLifecycleObserver(object); // 运行时反射的方式\n}\n```\n\n适配器转换为 LifecycleEventObserver 类型\n\n```java\nclass FullLifecycleObserverAdapter implements LifecycleEventObserver {\n\n    private final FullLifecycleObserver mFullLifecycleObserver;\n    private final LifecycleEventObserver mLifecycleEventObserver;\n\n    FullLifecycleObserverAdapter(FullLifecycleObserver fullLifecycleObserver,\n            LifecycleEventObserver lifecycleEventObserver) {\n        mFullLifecycleObserver = fullLifecycleObserver;\n        mLifecycleEventObserver = lifecycleEventObserver;\n    }\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        switch (event) {\n            case ON_CREATE:\n                mFullLifecycleObserver.onCreate(source);\n                break;\n            case ON_START:\n                mFullLifecycleObserver.onStart(source);\n                break;\n            case ON_RESUME:\n                mFullLifecycleObserver.onResume(source);\n                break;\n            case ON_PAUSE:\n                mFullLifecycleObserver.onPause(source);\n                break;\n            case ON_STOP:\n                mFullLifecycleObserver.onStop(source);\n                break;\n            case ON_DESTROY:\n                mFullLifecycleObserver.onDestroy(source);\n                break;\n            case ON_ANY:\n                throw new IllegalArgumentException(\"ON_ANY must not been send by anybody\");\n        }\n        if (mLifecycleEventObserver != null) {\n            mLifecycleEventObserver.onStateChanged(source, event);\n        }\n    }\n}\n```\n\napt 生成的方式转换为 LifecycleEventObserver类型\n\n```java\nclass SingleGeneratedAdapterObserver implements LifecycleEventObserver {\n\n    private final GeneratedAdapter mGeneratedAdapter;\n\n    SingleGeneratedAdapterObserver(GeneratedAdapter generatedAdapter) {\n        mGeneratedAdapter = generatedAdapter;\n    }\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        mGeneratedAdapter.callMethods(source, event, false, null);\n        mGeneratedAdapter.callMethods(source, event, true, null);\n    }\n}\n\nclass CompositeGeneratedAdaptersObserver implements LifecycleEventObserver {\n\n    private final GeneratedAdapter[] mGeneratedAdapters;\n\n    CompositeGeneratedAdaptersObserver(GeneratedAdapter[] generatedAdapters) {\n        mGeneratedAdapters = generatedAdapters;\n    }\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        MethodCallsLogger logger = new MethodCallsLogger();\n        for (GeneratedAdapter mGenerated: mGeneratedAdapters) {\n            mGenerated.callMethods(source, event, false, logger);\n        }\n        for (GeneratedAdapter mGenerated: mGeneratedAdapters) {\n            mGenerated.callMethods(source, event, true, logger);\n        }\n    }\n}\n```\n\n### 7.4 Application 实现\n\n注册\n\n```java\nclass MyLifecycleApplication : MultiDexApplication() {\n    override fun onCreate() {\n        super.onCreate()\n        //饿汉式单例获取 ProcessLifecycleOwner\n        ProcessLifecycleOwner.get().lifecycle.addObserver(MyLifecycleApplicationObserver(this))\n    }\n}\n```\n\n通过 startup 初始化ProcessLifecycleInitializer\n\n```xml\n<provider\n    android:name=\"androidx.startup.InitializationProvider\"\n    android:authorities=\"${applicationId}.androidx-startup\"\n    android:exported=\"false\"\n    tools:node=\"merge\" >\n    <meta-data\n        android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\"\n        android:value=\"androidx.startup\" />\n</provider>\n```\n\nProcessLifecycleInitializer\n\n```java\npublic final class ProcessLifecycleInitializer implements Initializer<LifecycleOwner> {\n\n    @NonNull\n    @Override\n    public LifecycleOwner create(@NonNull Context context) {\n        LifecycleDispatcher.init(context);\n        ProcessLifecycleOwner.init(context);\n        return ProcessLifecycleOwner.get();\n    }\n\n    @NonNull\n    @Override\n    public List<Class<? extends Initializer<?>>> dependencies() {\n        return Collections.emptyList();\n    }\n}\n```\n\nProcessLifecycleOwner 用于今天Application 的生命周期的变化\n\n```java\n\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    @VisibleForTesting\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ground truth counters\n    private int mStartedCounter = 0;\n    private int mResumedCounter = 0;\n\n    private boolean mPauseSent = true;\n    private boolean mStopSent = true;\n\n    private Handler mHandler;\n    private final LifecycleRegistry mRegistry = new LifecycleRegistry(this);\n\n    private Runnable mDelayedPauseRunnable = new Runnable() {\n        @Override\n        public void run() {\n            dispatchPauseIfNeeded();\n            dispatchStopIfNeeded();\n        }\n    };\n\n    ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    private static final ProcessLifecycleOwner sInstance = new ProcessLifecycleOwner();\n\n    /**\n     * The LifecycleOwner for the whole application process. Note that if your application\n     * has multiple processes, this provider does not know about other processes.\n     *\n     * @return {@link LifecycleOwner} for the whole application.\n     */\n    @NonNull\n    public static LifecycleOwner get() {\n        return sInstance;\n    }\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 && mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void dispatchPauseIfNeeded() {\n        if (mResumedCounter == 0) {\n            mPauseSent = true;\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);\n        }\n    }\n\n    void dispatchStopIfNeeded() {\n        if (mStartedCounter == 0 && mPauseSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);\n            mStopSent = true;\n        }\n    }\n\n    private ProcessLifecycleOwner() {\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @RequiresApi(29)\n            @Override\n            public void onActivityPreCreated(@NonNull Activity activity,\n                    @Nullable Bundle savedInstanceState) {\n                // We need the ProcessLifecycleOwner to get ON_START and ON_RESUME precisely\n                // before the first activity gets its LifecycleOwner started/resumed.\n                // The activity's LifecycleOwner gets started/resumed via an activity registered\n                // callback added in onCreate(). By adding our own activity registered callback in\n                // onActivityPreCreated(), we get our callbacks first while still having the\n                // right relative order compared to the Activity's onStart()/onResume() callbacks.\n                activity.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n                    @Override\n                    public void onActivityPostStarted(@NonNull Activity activity) {\n                        activityStarted();\n                    }\n\n                    @Override\n                    public void onActivityPostResumed(@NonNull Activity activity) {\n                        activityResumed();\n                    }\n                });\n            }\n\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                // Only use ReportFragment pre API 29 - after that, we can use the\n                // onActivityPostStarted and onActivityPostResumed callbacks registered in\n                // onActivityPreCreated()\n                if (Build.VERSION.SDK_INT < 29) {\n                    ReportFragment.get(activity).setProcessListener(mInitializationListener);\n                }\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n\n    @NonNull\n    @Override\n    public Lifecycle getLifecycle() {\n        return mRegistry;\n    }\n}\n```\n\nLifecycleDispatcher 用于为所有 Activity 注入ReportFragment，这样之后对于SDK 中的 Activity 只要实现 LifecycleOwner 就能实现生命周期可观察的能力。\n\n```java\nclass LifecycleDispatcher {\n\n    private static AtomicBoolean sInitialized = new AtomicBoolean(false);\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    @SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n        }\n    }\n\n    private LifecycleDispatcher() {\n    }\n}\n```\n\n### 7.5 Service 实现\n\n```java\nclass MyLifecycleService : LifecycleService() {\n    init {\n        lifecycle.addObserver(MyLifecycleServiceObserver())\n    }\n}\n```\n\nLifecycleService \n\n```java\npublic class LifecycleService extends Service implements LifecycleOwner {\n\n    private final ServiceLifecycleDispatcher mDispatcher = new ServiceLifecycleDispatcher(this);\n\n    @CallSuper\n    @Override\n    public void onCreate() {\n        mDispatcher.onServicePreSuperOnCreate();\n        super.onCreate();\n    }\n\n    @CallSuper\n    @Nullable\n    @Override\n    public IBinder onBind(@NonNull Intent intent) {\n        mDispatcher.onServicePreSuperOnBind();\n        return null;\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @CallSuper\n    @Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        mDispatcher.onServicePreSuperOnStart();\n        super.onStart(intent, startId);\n    }\n\n    // this method is added only to annotate it with @CallSuper.\n    // In usual service super.onStartCommand is no-op, but in LifecycleService\n    // it results in mDispatcher.onServicePreSuperOnStart() call, because\n    // super.onStartCommand calls onStart().\n    @CallSuper\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @CallSuper\n    @Override\n    public void onDestroy() {\n        mDispatcher.onServicePreSuperOnDestroy();\n        super.onDestroy();\n    }\n\n    @Override\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mDispatcher.getLifecycle();\n    }\n}\n```\n\nServiceLifecycleDispatcher\n\n```java\npublic class ServiceLifecycleDispatcher {\n    private final LifecycleRegistry mRegistry;\n    private final Handler mHandler;\n    private DispatchRunnable mLastDispatchRunnable;\n\n    /**\n     * @param provider {@link LifecycleOwner} for a service, usually it is a service itself\n     */\n    @SuppressWarnings(\"deprecation\")\n    public ServiceLifecycleDispatcher(@NonNull LifecycleOwner provider) {\n        mRegistry = new LifecycleRegistry(provider);\n        mHandler = new Handler();\n    }\n\n    private void postDispatchRunnable(Lifecycle.Event event) {\n        if (mLastDispatchRunnable != null) {\n            mLastDispatchRunnable.run();\n        }\n        mLastDispatchRunnable = new DispatchRunnable(mRegistry, event);\n        mHandler.postAtFrontOfQueue(mLastDispatchRunnable);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onCreate()} method, even before super.onCreate call.\n     */\n    public void onServicePreSuperOnCreate() {\n        postDispatchRunnable(Lifecycle.Event.ON_CREATE);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onBind(Intent)} method, even before super.onBind\n     * call.\n     */\n    public void onServicePreSuperOnBind() {\n        postDispatchRunnable(Lifecycle.Event.ON_START);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onStart(Intent, int)} or\n     * {@link Service#onStartCommand(Intent, int, int)} methods, even before\n     * a corresponding super call.\n     */\n    public void onServicePreSuperOnStart() {\n        postDispatchRunnable(Lifecycle.Event.ON_START);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onDestroy()} method, even before super.OnDestroy\n     * call.\n     */\n    public void onServicePreSuperOnDestroy() {\n        postDispatchRunnable(Lifecycle.Event.ON_STOP);\n        postDispatchRunnable(Lifecycle.Event.ON_DESTROY);\n    }\n\n    /**\n     * @return {@link Lifecycle} for the given {@link LifecycleOwner}\n     */\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mRegistry;\n    }\n\n    static class DispatchRunnable implements Runnable {\n        private final LifecycleRegistry mRegistry;\n        final Lifecycle.Event mEvent;\n        private boolean mWasExecuted = false;\n\n        DispatchRunnable(@NonNull LifecycleRegistry registry, Lifecycle.Event event) {\n            mRegistry = registry;\n            mEvent = event;\n        }\n\n        @Override\n        public void run() {\n            if (!mWasExecuted) {\n                mRegistry.handleLifecycleEvent(mEvent);\n                mWasExecuted = true;\n            }\n        }\n    }\n}\n```\n\n\n\n## 8. 链接\n\n- [Github | Lifecycle](https://github.com/androidx/androidx/tree/androidx-main/lifecycle)\n\n- [Android 开发者 | Lifecycle](https://developer.android.com/jetpack/androidx/releases/lifecycle)\n\n- [用户指南](https://developer.android.com/topic/libraries/architecture/lifecycle) \n\n- [代码示例](https://github.com/android/architecture-components-samples) \n\n- [Codelab](https://codelabs.developers.google.com/codelabs/android-lifecycles/index.html?index=#0)\n- [Lifecycle 版本说明](https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies)\n- [googlecodelabs | android-lifecycles](https://github.com/googlecodelabs/android-lifecycles)\n- [What is lifecycle observer and how to use it correctly?](https://stackoverflow.com/questions/52369540/what-is-lifecycle-observer-and-how-to-use-it-correctly)\n","source":"_posts/jetpack_lifecycle.md","raw":"---\ntitle: Jetpack | Lifecycle 组件系详解第一篇：Lifecycle\ndate: 2021-05-21 14:16:55\ncover: true\ntags: \n    - Jetpack\n    - Lifecycle\ncategory: \n\t- Jetpack\nsummary: Lifecycle 是什么，有什么，怎么用，应用场景，实现原理等\n\n\n\n\n\n---\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png)\n\n# Jetpack | Lifecycle 组件系详解第一篇：Lifecycle\n\nLifecycle细组件主要包括：Lifecycle、LiveData、ViewModle、其它扩展组件(process 、service)等。\n\n<img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122005956.png\" alt=\"image-20211122005853174\" style=\"zoom:50%;\" />\n\n## 1. Lifecycle问题汇总\n\n- 什么是 Lifecycle\n- 如何使用 Lifecycle 观察宿主状态\n- Lifecycle 是如何分发宿状态的\n- Fragment 是如何实现 Lifecycle 的\n- Activity 是如何实现 Lifecycle 的\n- Application 是如何实现 Lifecycle 的\n- Service 是如何实现 Lifecycle 的\n- View 是如何实现观察宿主 Lifecycle 的\n- Lifecycle 涉及的依赖库是如何划分的\n-  Lifecycle 实现观察宿主状态有几种方式\n-  注解+反射/生成代码的方式为什么又被废弃了\n- Activity 的生命周期分发为何通过 ReportFragment 实现\n- Lifecycle Event 和 State 的关系\n- 在 onResume 方法中注册观察者，是否能观察到其它生命周期的回调\n- 分发宿状态过程中是如何同步 Event 和 State 的\n\n## 2. Lifecycle是什么\n\nLifecycle 是一个对宿主生命周期的变化具有感知能力的组件 (Lifecycle-Aware Components) ，在 Android 中目前提供的可观察的宿主组件有 Activity / Fragment / Service / Application 等，除了jetpack 组件中内置的可观察的宿主我们也可以借助 LifeCycle 的能力自己实现可观察的宿主，例如 SDK 中的 Activity 是没有实现Lifecycle 的，此时我们就可以根据业务需求自定时实现了。\n\nLifecycle 的核心实现思想是观察者模式，Jetpack 组件中的 Activity / Fragment 组件中都已经接入了 Lifecycle 中的被观察者者部分的代码，我们只需要实现自己的观察者然后在 Activity / Fragment 组件中注册我们的观察者就可以监听到生命周期事件的变化了。\n\n> 支持库 26.1.0 及更高版本中的 Fragment 和 Activity 已实现 [`LifecycleOwner`](https://developer.android.com/reference/androidx/lifecycle/LifecycleOwner) 接口。\n\n一种常见的应用场景是有些逻辑需要依赖在 Activity 和 Fragment 的生命周期方法中实现，通过 Lifecycle  组件就可以将这部分代码从生命周期方法中提取到单独的类中，达到解耦被观察者和观察者的目的，从而帮助开发者写出简洁易维护代码。\n\n> 观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）\n>\n> **观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。**\n>\n> 观察者模式属于行为型设计模式，行为型设计模式的目的是将不同的行为代码解耦，具体到观察者模式就是是将观察者和被观察者代码解耦。\n>\n> 观察者模式的实现一般分为两个角色：Observable、Observer，两个角色一般都提供抽象层。\n>\n> 被观察者部分的抽象层一般是抽象类，除了提供必要的抽象方法还提供添加、删除等复用的逻辑。\n>\n> 观察者部分的抽象层一般是一个SAM（Single Abstract Method）接口，观察者可以实现该方法做出更新操作。\n\n![image-20211120233538055](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211120233721.png)\n\nLifecycle 是如何结合观察者模式实现 Activity 和 Fragment 组件的生命周期感知能力的\n\n![](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png)\n\nLifecycle 在实现被观察者时并没有采用传统的直接继承抽象类的方式，而是通过类似委托模式将被观察者的逻辑代码封装到了 LifecycleRegistry 类中，LifecycleRegistry 是真正的被观察者负责统一管理所有观察者的添加、删除、存储、分发等操作。当委托者（ Activity / Fragment）有生命周期事件产生时会通过受托者 LifecycleRegistry 执行具体的分发操作，从而实现委托者类的生命周期可感知能力。\n\n这样做的优势是符合单一原则，有利于被观察者侧的代码复用，也不用破坏 Activity/Fragment 组件的继承结构。\n\n\n\n## 3. Lifecycle 有什么\n\nandroidx.lifecycle 组下的组件,了解 lifecycle  有什么才能更好的运用。lifecycle 模块中除了自己实现观察者模式相关的代码\n\n| lifecycle-common <br />lifecycle-common-java8 <br />lifecycle-compiler<br />lifecycle-runtime <br />lifecycle-runtime-ktx <br />lifecycle-runtime-ktx- lint <br />lifecycle-runtime-testing | lifecycle-livedata <br />lifecycle-livedata-core <br />lifecycle-livedata-core-ktx<br />lifecycle-livedata-core-ktx-lint <br />lifecycle-livedata-core-truth  <br />lifecycle-livedata-ktx<br />lifecycle-reactivestreams <br />lifecycle-reactivestreams-ktx | lifecycle-viewmodel <br />lifecycle-viewmodel-compose <br />lifecycle-viewmodel-ktx <br />lifecycle-viewmodel-savedstate | lifecycle-process <br />lifecycle-service <br />lifecycle-extensions |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| lifecycle相关                                                | livedata 相关                                                | viewmodel相关                                                | 其它扩展组件相关                                             |\n| common-java8 已经废弃                                        | -                                                            | -                                                            | extensions 耦合重已经废弃                                    |\n\n再来看一下其中的几个核心组件之间的依赖关系\n\n![WechatIMG77](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122011323.jpeg)\n\n开发时按需添加 Lifecycle 的依赖项\n\n```groovy\ndef lifecycle_version = \"2.4.0\"\n// ViewModel\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n// ViewModel utilities for Compose\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version\"\n// LiveData\nimplementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\n// Lifecycles only (without ViewModel or LiveData)\nimplementation \"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"\n// Saved state module for ViewModel\nimplementation \"androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version\"\n// Annotation processor\nkapt \"androidx.lifecycle:lifecycle-compiler:$lifecycle_version\"\n// alternately - if using Java8, use the following instead of lifecycle-compiler\nimplementation \"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"\n// optional - helpers for implementing LifecycleOwner in a Service\nimplementation \"androidx.lifecycle:lifecycle-service:$lifecycle_version\"\n// optional - ProcessLifecycleOwner provides a lifecycle for the whole application process\nimplementation \"androidx.lifecycle:lifecycle-process:$lifecycle_version\"\n// optional - ReactiveStreams support for LiveData\nimplementation \"androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version\"\n```\n\n其它组件对lifecycle的依赖情况\n\n```groovy\nimplementation 'androidx.core:core-ktx:1.7.0'\n```\n\ncore-ktx api 了 core \n\ncore api 了lifecycle-runtime\n\nlifecycle-runtime api 了 lifecycle-common\n\n```groovy\nimplementation 'androidx.appcompat:appcompat:1.3.0'\n```\n\nappcompat api 了core、activity、fragment\n\nactivity api 了 core、lifecycle-runtime、lifecycle-viewmodel、lifecycle-viewmodel-savedstate\n\nfragment api 了core、activity、lifecycle-livedata-core、lifecycle-viewmodel、lifecycle-viewmodel-savedstate\n\nlifecycle-runtime api 了 lifecycle-common\n\nlifecycle-livedata-core api 了  lifecycle-livedata\n\n所以一般情况下我们新建的Android 项目默认都会提供core-ktx、appcompat 这两个组件而他们又间接依赖了 lifecycle 系的组件\n\n依赖 appcompat 间接依赖的 lifecycle 系组件\n\n![image-20211121131315450](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134326.png)\n\n依赖 core-ktx 间接依赖的 lifecycle 系组件\n\n![image-20211121131403284](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134339.png)\n\n\n\n## 4. Lifecycle 应用\n\n生命周期感知型组件可以实现在各种情况下更轻松地管理生命周期。下面列举几个例子：\n\n- 在粗粒度和细粒度位置更新之间切换。使用生命周期感知型组件可在位置应用可见时启用细粒度位置更新，并在应用位于后台时切换到粗粒度更新。\n- 停止和开始视频缓冲。使用生命周期感知型组件可尽快开始视频缓冲，但会推迟播放，直到应用完全启动。此外，应用销毁后，还可以使用生命周期感知型组件终止缓冲。\n- 开始和停止网络连接。借助生命周期感知型组件，可在应用位于前台时启用网络数据的实时更新（流式传输），并在应用进入后台时自动暂停。\n- 暂停和恢复动画可绘制资源。借助生命周期感知型组件，可在应用位于后台时暂停动画可绘制资源，并在应用位于前台后恢复可绘制资源。\n- Handler 的消息移除。\n- Presenter 的 attach&detach View 。\n- 为其他三方库加持生命周期感知的能力，例如：RxJava 、EventBus等。\n\n## 5. Lifecycle 怎么用\n\n### 5.1 观察者使用方式汇总\n\nLifecycle 的以下使用方式是以  Activity 或者 Fragment 为宿主举例。\n\n- 方式一：运行时注解+反射\n  - 自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举标注生命周期方法；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- 方式二：编译时注解+生成辅助类(XXX_LifecycleAdapter)\n  - 添加注解处理器组件：lifecycle-compiler\n  - 自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举 标注生命周期方法；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- 方式三：实现 FullLifecycleObserver (非公共方法，自己可以实现一个)\n  - 自定义 FullLifecycleObserver 观察者，FullLifecycleObserver 是普通接口需要实现其中定义的所有生命周期方法；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- 方式四：实现 LifecycleEventObserver(推荐方式)\n  - 自定义 LifecycleEventObserver 观察者，通过实现 onStateChanged(LifecycleOwner ,Lifecycle.Event) 方法自行判断生命周期方法的回调；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n- **方式五：实现 DefaultLifecycleObserver (推荐方式)**\n  - 自定义 DefaultLifecycleObserver 观察者，DefaultLifecycleObserver 中通过java default 关键字都实现了方法体，所以只需实现需要的声明后期方法即可；\n  - 在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；\n\n> DefaultLifecycleObserver 接口中的 default 关键字\n>\n> default 关键字修饰的方法能够向接口添加新功能方法，必须提供方法体，并确保兼容实现这个接口的之前的类不用在接口的子类中进行逐个实现该方法。可以按需实现\n>\n> default是在需要给接口新增方法时，但是子类数量过多，或者子类没必要实现的场景下使用。 比如java8中的List接口，新增了sort()方法\n>\n> ```java\n> //@since 1.8\n> public interface List<E> extends Collection<E> {\n> ...\n> default void sort(Comparator<? super E> c) {\n>    Object[] a = this.toArray();\n>    Arrays.sort(a, (Comparator) c);\n>    ListIterator<E> i = this.listIterator();\n>    for (Object e : a) {\n>        i.next();\n>        i.set((E) e);\n>    }\n> }\n> \n> ```\n\n### 5.2 观察 Activity Lifecycle\n\n```kotlin\nclass MyLifecycleActivityObserver : DefaultLifecycleObserver {\n\n    override fun onStart(owner: LifecycleOwner) {\n        super.onStart(owner)\n        Log.d(\"MyLifecycleActivity\", \"onStart\")\n    }\n\n    override fun onStop(owner: LifecycleOwner) {\n        super.onStop(owner)\n        Log.d(\"MyLifecycleActivity\", \"onStop\")\n    }\n}\n```\n\n```kotlin\nclass MyLifecycleActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        addLifecycleObserver()\n    }\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MyLifecycleActivityObserver())\n    }\n}\n```\n\n### 5.3 观察 SDK Activity Lifecycle\n\n```kotlin\nclass MySdkActivity : Activity(), LifecycleOwner {\n\n    private lateinit var lifecycleRegistry: LifecycleRegistry\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycleRegistry = LifecycleRegistry(this)\n        addLifecycleObserver()\n        MySDKFragment.inject(this)\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MySDKActivityObserver())\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return lifecycleRegistry\n    }\n}\n\nclass MySDKActivityObserver : DefaultLifecycleObserver {\n\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        Log.i(\"SDKActivity\", \"Observer onPause\")\n    }\n\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        Log.i(\"SDKActivity\", \"Observer onResume\")\n\n    }\n}\n```\n\n### 5.4 观察 Fragment Lifecycle\n\n```kotlin\nclass MyLifecycleFragmentObserver : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun connectListener() {\n        Log.i(\"MyLifecycleFragment\", \"onResume\")\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun disconnectListener() {\n        Log.i(\"MyLifecycleFragment\", \"onPause\")\n\n    }\n}\n```\n\n```kotlin\nclass MyLifecycleFragment : Fragment() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        addLifecycleObserver()\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MyLifecycleFragmentObserver())\n    }\n  \n}\n```\n\n### 5.5 观察 SDK Fragment Lifecycle\n\n```kotlin\nclass MySDKFragment : Fragment(), LifecycleOwner {\n\n    private lateinit var lifecycleRegistry: LifecycleRegistry\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycleRegistry = LifecycleRegistry(this)\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE)\n        addLifecycleObserver()\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MySDKFragmentObserver())\n    }\n\n    companion object {\n        fun inject(activity: Activity) {\n            val manager = activity.fragmentManager\n            if (manager.findFragmentByTag(\"MyLifecycleFragment\") == null) {\n                manager.beginTransaction()\n                    .add(MySDKFragment(), \"MyLifecycleFragment\")\n                    .commit()\n                manager.executePendingTransactions()\n            }\n        }\n    }\n    \n    override fun onResume() {\n        super.onResume()\n        Log.i(\"SDKFragment\", \" onResume\")\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME)\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        Log.i(\"SDKFragment\", \" onPause\")\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return lifecycleRegistry\n    }\n\n}\n\nclass MySDKFragmentObserver : DefaultLifecycleObserver {\n\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        Log.i(\"SDKFragment\", \"Observer onPause\")\n    }\n\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        Log.i(\"SDKFragment\", \"Observer onResume\")\n\n    }\n}\n```\n\n### 5.6 观察 Service Lifecycle\n\n```kotlin\npublic class MyLifecycleServiceObserver implements LifecycleEventObserver {\n    \n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        if (event == Lifecycle.Event.ON_START) {\n            Log.d(\"MyLifecycleService\", \"onStart()\");\n        } else if (event == Lifecycle.Event.ON_DESTROY) {\n            Log.d(\"MyLifecycleService\", \"onDestroy()\");\n        }\n    }\n}\n```\n\n```kotlin\npublic class MyLifecycleService extends LifecycleService {\n    public MyLifecycleService() {\n        getLifecycle().addObserver(new MyLifecycleServiceObserver());\n    }\n}\n```\n\n### 5.7 观察 Application Lifecycle\n\n```kotlin\nclass MyLifecycleApplicationObserver(private val application: Application) :\n    LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun appInResumeState() {\n        Toast.makeText(application, \"In Foreground\", Toast.LENGTH_LONG).show()\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun appInPauseState() {\n        Toast.makeText(application, \"In Background\", Toast.LENGTH_LONG).show()\n    }\n}\n```\n\n```kotlin\npublic class MyLifecycleApplication extends MultiDexApplication {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        //饿汉式单例获取 ProcessLifecycleOwner\n        ProcessLifecycleOwner.get().getLifecycle().addObserver(new MyLifecycleApplicationObserver(this));\n    }\n}\n```\n\n### 5.8 View 观察 Lifecycle\n\n```kotlin\nclass MyLifecycleView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyle: Int = 0\n) : View(context, attrs, defStyle) {\n    init {\n        addOnAttachStateChangeListener(object : OnAttachStateChangeListener {\n            override fun onViewAttachedToWindow(v: View?) {\n                Log.d(\"MyLifecycleView\", \"onViewAttachedToWindow\")\n                findViewTreeLifecycleOwner()?.lifecycle\n                    ?.addObserver(object : LifecycleEventObserver {\n                        override fun onStateChanged(\n                            source: LifecycleOwner,\n                            event: Lifecycle.Event\n                        ) {\n                            Log.d(\"MyLifecycleView\", \"onStateChanged：source:$source, event: $event\")\n                        }\n                    })\n            }\n\n            override fun onViewDetachedFromWindow(v: View?) {\n                Log.d(\"MyLifecycleView\", \"onViewDetachedFromWindow\")\n\n            }\n\n        })\n\n    }\n}\n```\n\n### 5.9 各种方式的观察者的执行顺序\n\n- DefaultLifecycleObserver 所有方法将在 [LifecycleOwner] 的生命周期回调方法被调用之前被调用，这里需要注意Fragment 生命周期的回调时机。\n\n* LifecycleEventObserver onStateChanged 方法在当状态转换事件发生时调用。\n*  如果一个类同时实现了DefaultLifecycleObserver 和LifecycleEventObserver ，则首先调用DefaultLifecycleObserver方法，然后调用LifecycleEventObserver.onStateChanged(LifecycleOwner, Lifecycle.Event) 方法。\n*  如果一个类实现了这个接口并且同时使用了OnLifecycleEvent 注解，那么注解将被忽略。\n\n```kotlin\nD/Life_Owner: onCreate\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Owner: onStart\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onResume\nD/Life_Observer: onResume\nD/Life_Observer: onStateChanged,event:ON_RESUME\nD/Life_Observer: onPause\nD/Life_Observer: onStateChanged,event:ON_PAUSE\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy\n```\n\n在Activity 的onPause 方法注册观察者，当宿主执行onPause时 观察者也是会从 onCreate 开始直到对齐当前状态，Lifecycle 内部做了同步和对齐的处理。\n\n```\nD/Life_Owner: onCreate\nD/Life_Owner: onStart\nD/Life_Owner: onResume\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy\n```\n\n## 6. Lifecycle 最小原型设计\n\n![观察者模式](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png)\n\n#### 6.1 代码实现最小原型\n\n被观察者部分\n\n```kotlin\n//抽象接口层\nabstract class Lifecycle {\n    abstract fun addObserver(observer: LifecycleObserver)\n    abstract fun removeObserver(observer: LifecycleObserver)\n    enum class State {\n        DESTROYED,\n        INITIALIZED,\n        CREATED,\n        STARTED,\n        RESUMED;\n    }\n\n    enum class Event {\n        ON_CREATE,\n        ON_START,\n        ON_RESUME,\n        ON_PAUSE,\n        ON_STOP,\n        ON_DESTROY,\n        ON_ANY;\n    }\n}\n//受托方\nclass LifecycleRegistry(private val lifecycleOwner: LifecycleOwner) : Lifecycle() {\n\n    private var lifecycleObserver: LifecycleObserver? = null\n\n    private val lifecycleObservers = arrayListOf<LifecycleObserver>()\n\n    override fun addObserver(observer: LifecycleObserver) {\n        lifecycleObservers.add(observer)\n        lifecycleObserver = observer\n    }\n\n    override fun removeObserver(observer: LifecycleObserver) {\n        lifecycleObservers.remove(observer)\n    }\n\n    fun handleLifecycleEvent(event: Event) {\n        lifecycleObservers.forEach {\n            if (it is LifecycleEventObserver) {\n                it.onStateChanged(lifecycleOwner, event)\n            }\n        }\n    }\n\n}\n```\n\n观察者部分\n\n```kotlin\ninterface LifecycleObserver {}\ninterface LifecycleEventObserver : LifecycleObserver {\n    fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event)\n}\ninterface DefaultLifecycleObserver : FullLifecycleObserver {\n\n    override fun onCreate(owner: LifecycleOwner) {}\n\n    override fun onStart(owner: LifecycleOwner) = Unit\n\n    override fun onResume(owner: LifecycleOwner) {}\n\n    override fun onPause(owner: LifecycleOwner) {}\n\n    override fun onStop(owner: LifecycleOwner) {}\n\n    override fun onDestroy(owner: LifecycleOwner) {}\n\n}\n```\n\n测试被观察者部分\n\n```kotlin\nclass Activity : LifecycleOwner {\n\n    private val lifecycleRegistry: LifecycleRegistry = LifecycleRegistry(this)\n\n    init {\n        lifecycleRegistry.addObserver(ActivityObserver())\n    }\n\n    override fun getLifecycle(): Lifecycle = lifecycleRegistry\n\n    fun onStart() {\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START)\n    }\n\n    fun onStop() {\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP)\n    }\n\n}\n```\n\n测试观察者部分\n\n```kotlin\nclass ActivityObserver : LifecycleEventObserver {\n    override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n        println(\"source: $source, event: $event \")\n    }\n}\n//运行测试\nfun main() {\n    val app = Activity()\n    app.onStart()\n    app.onStop()\n}\n```\n\n\n\n## 7. Lifecycle 实现原理\n\n### 7.1 Fragment 的实现\n\njetpack 中的 Fragment 组件已经被观察部分的接口 LifecycleOwner\n\n```java\n//androidx.fragment.app.Fragment 中已经实现 LifecycleOwner \npublic class Fragment implements \n  \t\t\tComponentCallbacks, \n\t\t\t\tOnCreateContextMenuListener, \n\t\t\t\tLifecycleOwner,\n        ViewModelStoreOwner, \n\t\t\t\tHasDefaultViewModelProviderFactory, \n\t\t\t\tSavedStateRegistryOwner,\n        ActivityResultCaller {...}\n\t\t//通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类\n    @Override\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\n   LifecycleRegistry mLifecycleRegistry;\n\t//构造函数中进行了受托者 LifecycleRegistry 的初始化\n   public Fragment() initLifecycle();}\n   private void initLifecycle() {\n        mLifecycleRegistry = new LifecycleRegistry(this);\n    }\n\n\t//当发生生命周期事件时执通过委托类分发该事件到所有观察者中\n void performCreate(Bundle savedInstanceState) {\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n  }\n```\n\nFragment 的生命周期感知实现很简单，就是委托给 mLifecycleRegistry 全权负责\n\n### 7.2 Activity 实现\n\n```java\n//androidx.core.app.ComponentActivity，@hide标注，不对外使用，只做了 Lifecycle 和 KeyEvent 的封装\npublic class ComponentActivity extends Activity implements\n        LifecycleOwner,\n        KeyEventDispatcher.Component {...}\n```\n\n```java\n//androidx.activity.ComponentActivity，以上特性 + 集成了 Jitpack 的其它组件，例如：Lifecycle，ViewModel等\npublic class ComponentActivity extends androidx.core.app.ComponentActivity implements\n        ContextAware,\n        LifecycleOwner,\n        ViewModelStoreOwner,\n        HasDefaultViewModelProviderFactory,\n        SavedStateRegistryOwner,\n        OnBackPressedDispatcherOwner,\n        ActivityResultRegistryOwner,\n        ActivityResultCaller {\n        //通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类\n        private final LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n\t\t\t \tpublic Lifecycle getLifecycle() {\n        \t\treturn mLifecycleRegistry;\n    \t\t}\n        protected void onCreate(@Nullable Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n          \t// ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知\n            ReportFragment.injectIfNeededIn(this);\n            if (mContentLayoutId != 0) {\n                setContentView(mContentLayoutId);\n            }\n    }\n}\n```\n\n```java\n//androidx.fragment.app.FragmentActivity，以上特性 + 简化Fragment 的使用，例如：FragmentManager\npublic class FragmentActivity extends ComponentActivity implements\n        ActivityCompat.OnRequestPermissionsResultCallback,\n        ActivityCompat.RequestPermissionsRequestCodeValidator {...}\n```\n\n```java\n//androidx.appcompat.app.AppCompatActivity 以上特性 + 简化 Material 设计，例如主题、暗黑、导航条等\npublic class AppCompatActivity extends FragmentActivity implements \n  \t\t\tAppCompatCallback,\n        TaskStackBuilder.SupportParentable, \n\t\t\t\tActionBarDrawerToggle.DelegateProvider {...}\n```\n\nandroidx.activity 组件下的 **ComponentActivity** 可以说是 androidx 系或者说是 Jetpack 开发套件中的最顶层 Activity 基类了，可以看到 ComponentActivity 类中已经实现了 LifecycleOwner，所以和 Fragment 一样将被观察者的逻辑委托给了LifecycleRegistry。\n\n但是我们在ComponentActivity 生命周期的回调方法中并没有看到 LifecycleRegistry 执行的分发操作。在 onCreate 方法中我们看到ReportFragment.injectIfNeededIn(this); 这句代码，这里就是 Activity 声明周期可感知做的的兼容处理，ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知。\n\n#### ReportFragment\n\n```java\n\t\tpublic static void injectIfNeededIn(Activity activity) {\n        if (Build.VERSION.SDK_INT >= 29) {\n            // 在 API 29+ 上，可以直接注册 Activity 中的 registerActivityLifecycleCallbacks 回调方法获取Activity 的生命周期\t\t\t\t回调。\n            LifecycleCallbacks.registerIn(activity);\n        }\n        //在 API 29 之前和进程的宿主 ProcessLifecycleOwner 都是通过内嵌一个空的 Fragment 获间接取 Activity 的生命周期回调。\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n\t\t}\t\n\t\t//29以上分发的方式\n\t\t@RequiresApi(29)\n    static class LifecycleCallbacks implements Application.ActivityLifecycleCallbacks {\n        static void registerIn(Activity activity) {\n            activity.registerActivityLifecycleCallbacks(new LifecycleCallbacks());\n        }\n\n        @Override\n        public void onActivityPostCreated(@NonNull Activity activity,\n                @Nullable Bundle savedInstanceState) {\n            dispatch(activity, Lifecycle.Event.ON_CREATE);\n        }\n\n        @Override\n        public void onActivityPostStarted(@NonNull Activity activity) {\n            dispatch(activity, Lifecycle.Event.ON_START);\n        }\n        @Override\n        public void onActivityPreDestroyed(@NonNull Activity activity) {\n            dispatch(activity, Lifecycle.Event.ON_DESTROY);\n        }\n\n        @Override\n        public void onActivityDestroyed(@NonNull Activity activity) {\n        }\n    }\n\n\n\n\t\t//Fragment 声明周期方法触发是\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);// 进程29以下需要需要的\n        dispatch(Lifecycle.Event.ON_START);// 分发29以下 Avtivity \n    }\n\n   private void dispatch(@NonNull Lifecycle.Event event) {\n        if (Build.VERSION.SDK_INT < 29) {\n            dispatch(getActivity(), event);\n        }\n    }\n    static void dispatch(@NonNull Activity activity, @NonNull Lifecycle.Event event) {\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event); // 29以下最终的分发方法\n            }\n        }\n    }\n\n```\n\n总的来说 Activity 将生命周期方法通知给订阅者的方式有别于 Fragment 的直接在生命周期回调中委托给 mLifecycleRegistry 全权负责。Activity 的方式显现复杂，搞复杂的主要原因也是为了兼容低版本和方便移植不得不做的。\n\n根据SDK版本可分为两种方式，大于等于29(Androi 10) 以上是通过  activity.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks) 方式注册生命周期回调方法的方式获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。\n\n29(Androi 10) 以下是通过内嵌一个空的 Fragment 获间接获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。\n\n### 7.3 LifecycleRegistry-真正的被观察者\n\nLifecycleRegistry 通常被 Fragments 和 Activity 组件使用。 如果有自定义 LifecycleOwner的需求也可以直接使用它。\n\nLifecycleRegistry  可以看做是Fragment 和 Activity 实现生命周期可感知的受托方。所有的被观察的逻辑都在这里实现。\n\n#### 构造方法\n\n```java\nprivate LifecycleRegistry(@NonNull LifecycleOwner provider, boolean enforceMainThread) {\n    mLifecycleOwner = new WeakReference<>(provider); // 宿主类通过弱引用包裹\n    mState = INITIALIZED;\n    mEnforceMainThread = enforceMainThread;\n}\nLifecycleOwner lifecycleOwner = mLifecycleOwner.get();\nif (lifecycleOwner == null) {\n    throw new IllegalStateException(\"LifecycleOwner of this LifecycleRegistry is already\"\n            + \"garbage collected. It is too late to change lifecycle state.\");\n}\n```\n\n宿主类通过弱引用包裹，当方式GC时会回收宿主类避免内存泄漏的产生，每次获取宿主时都会先判空，如果被GC了是不会继续执行的。\n\n#### 添加观察者\n\n```java\n//宿主中向LifecycleRegistry 中添加观察者\nlifecycle.addObserver(MyLifecycleActivityObserver())\n```\n\n```java\n//缓存观察者的数据容器\nprivate FastSafeIterableMap<LifecycleObserver, ObserverWithState> mObserverMap =\n            new FastSafeIterableMap<>();\n\n//对分发事件的封装\nstatic class ObserverWithState {\n    State mState;\n    LifecycleEventObserver mLifecycleObserver;\n\n    ObserverWithState(LifecycleObserver observer, State initialState) {\n        mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);\n        mState = initialState;\n    }\n\n    void dispatchEvent(LifecycleOwner owner, Event event) {\n      \t//根据事件获取状态\n        State newState = event.getTargetState();\n        mState = min(mState, newState);\n        mLifecycleObserver.onStateChanged(owner, event); //分发\n        mState = newState; //前进一个状态\n    }\n}\n\n@Override\npublic void addObserver(@NonNull LifecycleObserver observer) {\n  \t//初始值状态为：mState = INITIALIZED;\n    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n  \t//包装观察者\n    ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n\t\t//之前缓存过了，直接返回\n    if (previous != null) {\n        return;\n    }\n  \t//宿主被GC了\n    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n    if (lifecycleOwner == null) {\n        // it is null we should be destroyed. Fallback quickly\n        return;\n    }\n\t\t//\n    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n    State targetState = calculateTargetState(observer);//计算出宿主当前的状态\n    mAddingObserverCounter++;\n  \t//同步到宿主当前的状态，例如在 onResume 方法注册的观察者，之前的生命周期方法也会回调\n    while ((statefulObserver.mState.compareTo(targetState) < 0 //比较状态，是否小于宿主的状态,枚举类根据 ordinal 序号进行比较，越靠后的序号越大\n            && mObserverMap.contains(observer))) {\n        pushParentState(statefulObserver.mState);\n      \t//向前移动一个生命周期方法，ON_CREATE-ON_START-ON_RESUME 知道对齐宿主\n        final Event event = Event.upFrom(statefulObserver.mState);\n        if (event == null) {\n            throw new IllegalStateException(\"no event up from \" + statefulObserver.mState);\n        }\n      \t//每次向前移动一个生命周期方法就分发落后的生命周期方法\n        statefulObserver.dispatchEvent(lifecycleOwner, event);\n        popParentState();\n        // mState / subling may have been changed recalculate\n        targetState = calculateTargetState(observer);\n    }\n\n    if (!isReentrance) {\n        // we do sync only on the top level.\n        sync();\n    }\n    mAddingObserverCounter--;\n}\n\n@Nullable\npublic static Event upFrom(@NonNull State state) {\n    switch (state) {\n        case INITIALIZED:\n            return ON_CREATE;\n        case CREATED:\n            return ON_START;\n        case STARTED:\n            return ON_RESUME;\n        default:\n            return null;\n    }\n}\n\n```\n\n向前同步时：先根据状态推倒事件，分发是根据事件推导出状态，再更新状态。\n\n假设宿主中是在onResume 方法中注册的观察者，那么他的同步流程应该是怎样的呢？\n\n观察者最终会受到onCreate-onStart-onRsume 三个回到方法。\n\n####  State 和 Event\n\n针对Lifecycle 中 State 和 Event 的对应关系我们通过官方提供的流转图分析一下。\n\nLifecycle 接口中提供两个枚举：State表示宿主状态，Event表示宿主生命周期事件。\n\n```java\nenum class State {\n    DESTROYED,\n    INITIALIZED,\n    CREATED,\n    STARTED,\n    RESUMED;\n}\nenum class Event {\n    ON_CREATE,\n    ON_START,\n    ON_RESUME,\n    ON_PAUSE,\n    ON_STOP,\n    ON_DESTROY,\n    ON_ANY;\n}\n```\n\n两个过程：前进和后腿\n\n前进：INITIALIZED-ON_CREATE-CREATED-ON_START-STARTED-ON_RESUME-RESUMED\n\n倒退：RESUMED-ON_PAUSE-STARTED-ON_STOP-CREATED-ON_DESTROY-DESTROYED\n\n\n\n![生命周期状态示意图](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121224101.svg)\n\n状态是图中的节点，事件可以看作这些节点之间的边。\n\n通过事件获取状态\n\n```java\npublic State getTargetState() {\n    switch (this) {\n        case ON_CREATE:\n        case ON_STOP:\n            return State.CREATED;\n        case ON_START:\n        case ON_PAUSE:\n            return State.STARTED;\n        case ON_RESUME:\n            return State.RESUMED;\n        case ON_DESTROY:\n            return State.DESTROYED;\n        case ON_ANY:\n            break;\n    }\n    throw new IllegalArgumentException(this + \" has no target state\");\n}\n```\n\n如果上面的图看不太明白，看看下面这个就清除它们的对应关系了。\n\n![img](https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211027015118.jpeg)\n\n\n\n#### 通知观察者\n\n```java\npublic void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n    enforceMainThreadIfNeeded(\"handleLifecycleEvent\");\n  \t//根据事件推导状态，再执行移动\n    moveToState(event.getTargetState());\n}\n//条件的判断\nprivate void moveToState(State next) {\n    if (mState == next) {\n        return;\n    }\n    mState = next;\n    if (mHandlingEvent || mAddingObserverCounter != 0) {\n        mNewEventOccurred = true;\n        // we will figure out what to do on upper level.\n        return;\n    }\n    mHandlingEvent = true;\n    sync();\n    mHandlingEvent = false;\n}\n\nprivate void sync() {\n    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n    if (lifecycleOwner == null) {\n        throw new IllegalStateException(\"LifecycleOwner of this LifecycleRegistry is already\"\n                + \"garbage collected. It is too late to change lifecycle state.\");\n    }\n    while (!isSynced()) {\n        mNewEventOccurred = false;\n        // mState 表示宿主的状态，比观察者的小说明是后腿流程 onPause-onStop\n        if (mState.compareTo(mObserverMap.eldest().getValue().mState) < 0) {\n            backwardPass(lifecycleOwner);\n        }\n        Map.Entry<LifecycleObserver, ObserverWithState> newest = mObserverMap.newest();\n        // 前进流程\n      \tif (!mNewEventOccurred && newest != null\n                && mState.compareTo(newest.getValue().mState) > 0) {\n            forwardPass(lifecycleOwner);\n        }\n    }\n    mNewEventOccurred = false;\n}\n//while 循环的条件，是否都同步完了\nprivate boolean isSynced() {\n    if (mObserverMap.size() == 0) {\n        return true;\n    }\n    State eldestObserverState = mObserverMap.eldest().getValue().mState;\n    State newestObserverState = mObserverMap.newest().getValue().mState;\n    return eldestObserverState == newestObserverState && mState == newestObserverState;\n}\n```\n\n\n\n前进和后腿\n\n```java\n\nprivate void backwardPass(LifecycleOwner lifecycleOwner) {\n    Iterator<Map.Entry<LifecycleObserver, ObserverWithState>> descendingIterator =\n            mObserverMap.descendingIterator();\n    while (descendingIterator.hasNext() && !mNewEventOccurred) {\n        Map.Entry<LifecycleObserver, ObserverWithState> entry = descendingIterator.next();\n        ObserverWithState observer = entry.getValue();\n        while ((observer.mState.compareTo(mState) > 0 && !mNewEventOccurred\n                && mObserverMap.contains(entry.getKey()))) {\n            Event event = Event.downFrom(observer.mState); //循环倒退\n            if (event == null) {\n                throw new IllegalStateException(\"no event down from \" + observer.mState);\n            }\n            pushParentState(event.getTargetState());\n          \t//分发生命周期方法\n            observer.dispatchEvent(lifecycleOwner, event);\n            popParentState();\n        }\n    }\n}\npublic static Event downFrom(@NonNull State state) {\n    switch (state) {\n        case CREATED:\n            return ON_DESTROY;\n        case STARTED:\n            return ON_STOP;\n        case RESUMED:\n            return ON_PAUSE;\n        default:\n            return null;\n    }\n}\n\n\nprivate void forwardPass(LifecycleOwner lifecycleOwner) {\n    Iterator<Map.Entry<LifecycleObserver, ObserverWithState>> ascendingIterator =\n            mObserverMap.iteratorWithAdditions();\n    while (ascendingIterator.hasNext() && !mNewEventOccurred) {\n        Map.Entry<LifecycleObserver, ObserverWithState> entry = ascendingIterator.next();\n        ObserverWithState observer = entry.getValue();\n        while ((observer.mState.compareTo(mState) < 0 && !mNewEventOccurred\n                && mObserverMap.contains(entry.getKey()))) {\n            pushParentState(observer.mState);\n            final Event event = Event.upFrom(observer.mState);\n            if (event == null) {\n                throw new IllegalStateException(\"no event up from \" + observer.mState);\n            }\n          \t//分发生命周期方法\n            observer.dispatchEvent(lifecycleOwner, event);\n            popParentState();\n        }\n    }\n}\n\npublic static Event upFrom(@NonNull State state) {\n    switch (state) {\n        case INITIALIZED:\n            return ON_CREATE;\n        case CREATED:\n            return ON_START;\n        case STARTED:\n            return ON_RESUME;\n        default:\n            return null;\n    }\n}\n```\n\n#### 区分观察者类型-Lifecycling\n\n结论是无论哪种方式的观察者都通过适配器模式转换为LifecycleEventObserver类型，当分发事件时，只要执行  mLifecycleObserver.onStateChanged(owner, event); Lifecycling适配的多种类型都会得到相应的分发执行。\n\n```java\nObserverWithState(LifecycleObserver observer, State initialState) {\n    mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);\n    mState = initialState;\n}\nvoid dispatchEvent(LifecycleOwner owner, Event event) {\n    State newState = event.getTargetState();\n    mState = min(mState, newState);\n    mLifecycleObserver.onStateChanged(owner, event);\n    mState = newState;\n}\n```\n\n适配器模式转换观察者包装成 LifecycleEventObserver\n\n```java\nstatic LifecycleEventObserver lifecycleEventObserver(Object object) {\n    boolean isLifecycleEventObserver = object instanceof LifecycleEventObserver;\n    boolean isFullLifecycleObserver = object instanceof FullLifecycleObserver;\n  \t//实现了这个连个接口\n    if (isLifecycleEventObserver && isFullLifecycleObserver) {\n        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object,\n                (LifecycleEventObserver) object);\n    }\n    if (isFullLifecycleObserver) {\n        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object, null);\n    }\n\n    if (isLifecycleEventObserver) {\n        return (LifecycleEventObserver) object;\n    }\n  \t//实现的LifecycleObserver + 注解的方式，最新版本已经废弃，存在拖慢编译速度，反射效率低的问题\n    final Class<?> klass = object.getClass();\n    int type = getObserverConstructorType(klass); // 通过反射apt 生成的 adapter 类是否发生ClassNotFoundException异常来判断是否采用了apt\n    if (type == GENERATED_CALLBACK) { // 采用的 apt 的方式\n      //GeneratedAdapter 是生成类的接口\n        List<Constructor<? extends GeneratedAdapter>> constructors =\n                sClassToAdapters.get(klass);\n        if (constructors.size() == 1) {\n            GeneratedAdapter generatedAdapter = createGeneratedAdapter(\n                    constructors.get(0), object);\n            return new SingleGeneratedAdapterObserver(generatedAdapter);\n        }\n        GeneratedAdapter[] adapters = new GeneratedAdapter[constructors.size()];\n        for (int i = 0; i < constructors.size(); i++) {\n            adapters[i] = createGeneratedAdapter(constructors.get(i), object);\n        }\n        return new CompositeGeneratedAdaptersObserver(adapters);\n    }\n    return new ReflectiveGenericLifecycleObserver(object); // 运行时反射的方式\n}\n```\n\n适配器转换为 LifecycleEventObserver 类型\n\n```java\nclass FullLifecycleObserverAdapter implements LifecycleEventObserver {\n\n    private final FullLifecycleObserver mFullLifecycleObserver;\n    private final LifecycleEventObserver mLifecycleEventObserver;\n\n    FullLifecycleObserverAdapter(FullLifecycleObserver fullLifecycleObserver,\n            LifecycleEventObserver lifecycleEventObserver) {\n        mFullLifecycleObserver = fullLifecycleObserver;\n        mLifecycleEventObserver = lifecycleEventObserver;\n    }\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        switch (event) {\n            case ON_CREATE:\n                mFullLifecycleObserver.onCreate(source);\n                break;\n            case ON_START:\n                mFullLifecycleObserver.onStart(source);\n                break;\n            case ON_RESUME:\n                mFullLifecycleObserver.onResume(source);\n                break;\n            case ON_PAUSE:\n                mFullLifecycleObserver.onPause(source);\n                break;\n            case ON_STOP:\n                mFullLifecycleObserver.onStop(source);\n                break;\n            case ON_DESTROY:\n                mFullLifecycleObserver.onDestroy(source);\n                break;\n            case ON_ANY:\n                throw new IllegalArgumentException(\"ON_ANY must not been send by anybody\");\n        }\n        if (mLifecycleEventObserver != null) {\n            mLifecycleEventObserver.onStateChanged(source, event);\n        }\n    }\n}\n```\n\napt 生成的方式转换为 LifecycleEventObserver类型\n\n```java\nclass SingleGeneratedAdapterObserver implements LifecycleEventObserver {\n\n    private final GeneratedAdapter mGeneratedAdapter;\n\n    SingleGeneratedAdapterObserver(GeneratedAdapter generatedAdapter) {\n        mGeneratedAdapter = generatedAdapter;\n    }\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        mGeneratedAdapter.callMethods(source, event, false, null);\n        mGeneratedAdapter.callMethods(source, event, true, null);\n    }\n}\n\nclass CompositeGeneratedAdaptersObserver implements LifecycleEventObserver {\n\n    private final GeneratedAdapter[] mGeneratedAdapters;\n\n    CompositeGeneratedAdaptersObserver(GeneratedAdapter[] generatedAdapters) {\n        mGeneratedAdapters = generatedAdapters;\n    }\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        MethodCallsLogger logger = new MethodCallsLogger();\n        for (GeneratedAdapter mGenerated: mGeneratedAdapters) {\n            mGenerated.callMethods(source, event, false, logger);\n        }\n        for (GeneratedAdapter mGenerated: mGeneratedAdapters) {\n            mGenerated.callMethods(source, event, true, logger);\n        }\n    }\n}\n```\n\n### 7.4 Application 实现\n\n注册\n\n```java\nclass MyLifecycleApplication : MultiDexApplication() {\n    override fun onCreate() {\n        super.onCreate()\n        //饿汉式单例获取 ProcessLifecycleOwner\n        ProcessLifecycleOwner.get().lifecycle.addObserver(MyLifecycleApplicationObserver(this))\n    }\n}\n```\n\n通过 startup 初始化ProcessLifecycleInitializer\n\n```xml\n<provider\n    android:name=\"androidx.startup.InitializationProvider\"\n    android:authorities=\"${applicationId}.androidx-startup\"\n    android:exported=\"false\"\n    tools:node=\"merge\" >\n    <meta-data\n        android:name=\"androidx.lifecycle.ProcessLifecycleInitializer\"\n        android:value=\"androidx.startup\" />\n</provider>\n```\n\nProcessLifecycleInitializer\n\n```java\npublic final class ProcessLifecycleInitializer implements Initializer<LifecycleOwner> {\n\n    @NonNull\n    @Override\n    public LifecycleOwner create(@NonNull Context context) {\n        LifecycleDispatcher.init(context);\n        ProcessLifecycleOwner.init(context);\n        return ProcessLifecycleOwner.get();\n    }\n\n    @NonNull\n    @Override\n    public List<Class<? extends Initializer<?>>> dependencies() {\n        return Collections.emptyList();\n    }\n}\n```\n\nProcessLifecycleOwner 用于今天Application 的生命周期的变化\n\n```java\n\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    @VisibleForTesting\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ground truth counters\n    private int mStartedCounter = 0;\n    private int mResumedCounter = 0;\n\n    private boolean mPauseSent = true;\n    private boolean mStopSent = true;\n\n    private Handler mHandler;\n    private final LifecycleRegistry mRegistry = new LifecycleRegistry(this);\n\n    private Runnable mDelayedPauseRunnable = new Runnable() {\n        @Override\n        public void run() {\n            dispatchPauseIfNeeded();\n            dispatchStopIfNeeded();\n        }\n    };\n\n    ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    private static final ProcessLifecycleOwner sInstance = new ProcessLifecycleOwner();\n\n    /**\n     * The LifecycleOwner for the whole application process. Note that if your application\n     * has multiple processes, this provider does not know about other processes.\n     *\n     * @return {@link LifecycleOwner} for the whole application.\n     */\n    @NonNull\n    public static LifecycleOwner get() {\n        return sInstance;\n    }\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 && mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void dispatchPauseIfNeeded() {\n        if (mResumedCounter == 0) {\n            mPauseSent = true;\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);\n        }\n    }\n\n    void dispatchStopIfNeeded() {\n        if (mStartedCounter == 0 && mPauseSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);\n            mStopSent = true;\n        }\n    }\n\n    private ProcessLifecycleOwner() {\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @RequiresApi(29)\n            @Override\n            public void onActivityPreCreated(@NonNull Activity activity,\n                    @Nullable Bundle savedInstanceState) {\n                // We need the ProcessLifecycleOwner to get ON_START and ON_RESUME precisely\n                // before the first activity gets its LifecycleOwner started/resumed.\n                // The activity's LifecycleOwner gets started/resumed via an activity registered\n                // callback added in onCreate(). By adding our own activity registered callback in\n                // onActivityPreCreated(), we get our callbacks first while still having the\n                // right relative order compared to the Activity's onStart()/onResume() callbacks.\n                activity.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n                    @Override\n                    public void onActivityPostStarted(@NonNull Activity activity) {\n                        activityStarted();\n                    }\n\n                    @Override\n                    public void onActivityPostResumed(@NonNull Activity activity) {\n                        activityResumed();\n                    }\n                });\n            }\n\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                // Only use ReportFragment pre API 29 - after that, we can use the\n                // onActivityPostStarted and onActivityPostResumed callbacks registered in\n                // onActivityPreCreated()\n                if (Build.VERSION.SDK_INT < 29) {\n                    ReportFragment.get(activity).setProcessListener(mInitializationListener);\n                }\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n\n    @NonNull\n    @Override\n    public Lifecycle getLifecycle() {\n        return mRegistry;\n    }\n}\n```\n\nLifecycleDispatcher 用于为所有 Activity 注入ReportFragment，这样之后对于SDK 中的 Activity 只要实现 LifecycleOwner 就能实现生命周期可观察的能力。\n\n```java\nclass LifecycleDispatcher {\n\n    private static AtomicBoolean sInitialized = new AtomicBoolean(false);\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    @SuppressWarnings(\"WeakerAccess\")\n    @VisibleForTesting\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n        }\n    }\n\n    private LifecycleDispatcher() {\n    }\n}\n```\n\n### 7.5 Service 实现\n\n```java\nclass MyLifecycleService : LifecycleService() {\n    init {\n        lifecycle.addObserver(MyLifecycleServiceObserver())\n    }\n}\n```\n\nLifecycleService \n\n```java\npublic class LifecycleService extends Service implements LifecycleOwner {\n\n    private final ServiceLifecycleDispatcher mDispatcher = new ServiceLifecycleDispatcher(this);\n\n    @CallSuper\n    @Override\n    public void onCreate() {\n        mDispatcher.onServicePreSuperOnCreate();\n        super.onCreate();\n    }\n\n    @CallSuper\n    @Nullable\n    @Override\n    public IBinder onBind(@NonNull Intent intent) {\n        mDispatcher.onServicePreSuperOnBind();\n        return null;\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @CallSuper\n    @Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        mDispatcher.onServicePreSuperOnStart();\n        super.onStart(intent, startId);\n    }\n\n    // this method is added only to annotate it with @CallSuper.\n    // In usual service super.onStartCommand is no-op, but in LifecycleService\n    // it results in mDispatcher.onServicePreSuperOnStart() call, because\n    // super.onStartCommand calls onStart().\n    @CallSuper\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @CallSuper\n    @Override\n    public void onDestroy() {\n        mDispatcher.onServicePreSuperOnDestroy();\n        super.onDestroy();\n    }\n\n    @Override\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mDispatcher.getLifecycle();\n    }\n}\n```\n\nServiceLifecycleDispatcher\n\n```java\npublic class ServiceLifecycleDispatcher {\n    private final LifecycleRegistry mRegistry;\n    private final Handler mHandler;\n    private DispatchRunnable mLastDispatchRunnable;\n\n    /**\n     * @param provider {@link LifecycleOwner} for a service, usually it is a service itself\n     */\n    @SuppressWarnings(\"deprecation\")\n    public ServiceLifecycleDispatcher(@NonNull LifecycleOwner provider) {\n        mRegistry = new LifecycleRegistry(provider);\n        mHandler = new Handler();\n    }\n\n    private void postDispatchRunnable(Lifecycle.Event event) {\n        if (mLastDispatchRunnable != null) {\n            mLastDispatchRunnable.run();\n        }\n        mLastDispatchRunnable = new DispatchRunnable(mRegistry, event);\n        mHandler.postAtFrontOfQueue(mLastDispatchRunnable);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onCreate()} method, even before super.onCreate call.\n     */\n    public void onServicePreSuperOnCreate() {\n        postDispatchRunnable(Lifecycle.Event.ON_CREATE);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onBind(Intent)} method, even before super.onBind\n     * call.\n     */\n    public void onServicePreSuperOnBind() {\n        postDispatchRunnable(Lifecycle.Event.ON_START);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onStart(Intent, int)} or\n     * {@link Service#onStartCommand(Intent, int, int)} methods, even before\n     * a corresponding super call.\n     */\n    public void onServicePreSuperOnStart() {\n        postDispatchRunnable(Lifecycle.Event.ON_START);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onDestroy()} method, even before super.OnDestroy\n     * call.\n     */\n    public void onServicePreSuperOnDestroy() {\n        postDispatchRunnable(Lifecycle.Event.ON_STOP);\n        postDispatchRunnable(Lifecycle.Event.ON_DESTROY);\n    }\n\n    /**\n     * @return {@link Lifecycle} for the given {@link LifecycleOwner}\n     */\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mRegistry;\n    }\n\n    static class DispatchRunnable implements Runnable {\n        private final LifecycleRegistry mRegistry;\n        final Lifecycle.Event mEvent;\n        private boolean mWasExecuted = false;\n\n        DispatchRunnable(@NonNull LifecycleRegistry registry, Lifecycle.Event event) {\n            mRegistry = registry;\n            mEvent = event;\n        }\n\n        @Override\n        public void run() {\n            if (!mWasExecuted) {\n                mRegistry.handleLifecycleEvent(mEvent);\n                mWasExecuted = true;\n            }\n        }\n    }\n}\n```\n\n\n\n## 8. 链接\n\n- [Github | Lifecycle](https://github.com/androidx/androidx/tree/androidx-main/lifecycle)\n\n- [Android 开发者 | Lifecycle](https://developer.android.com/jetpack/androidx/releases/lifecycle)\n\n- [用户指南](https://developer.android.com/topic/libraries/architecture/lifecycle) \n\n- [代码示例](https://github.com/android/architecture-components-samples) \n\n- [Codelab](https://codelabs.developers.google.com/codelabs/android-lifecycles/index.html?index=#0)\n- [Lifecycle 版本说明](https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies)\n- [googlecodelabs | android-lifecycles](https://github.com/googlecodelabs/android-lifecycles)\n- [What is lifecycle observer and how to use it correctly?](https://stackoverflow.com/questions/52369540/what-is-lifecycle-observer-and-how-to-use-it-correctly)\n","slug":"jetpack_lifecycle","published":1,"updated":"2021-11-21T17:15:03.449Z","_id":"ckw9hy6690000ozxfcfhrgpfb","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Jetpack-Lifecycle-组件系详解第一篇：Lifecycle\"><a href=\"#Jetpack-Lifecycle-组件系详解第一篇：Lifecycle\" class=\"headerlink\" title=\"Jetpack | Lifecycle 组件系详解第一篇：Lifecycle\"></a>Jetpack | Lifecycle 组件系详解第一篇：Lifecycle</h1><p>Lifecycle细组件主要包括：Lifecycle、LiveData、ViewModle、其它扩展组件(process 、service)等。</p>\n<img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122005956.png\" alt=\"image-20211122005853174\" style=\"zoom:50%;\">\n\n<h2 id=\"1-Lifecycle问题汇总\"><a href=\"#1-Lifecycle问题汇总\" class=\"headerlink\" title=\"1. Lifecycle问题汇总\"></a>1. Lifecycle问题汇总</h2><ul>\n<li>什么是 Lifecycle</li>\n<li>如何使用 Lifecycle 观察宿主状态</li>\n<li>Lifecycle 是如何分发宿状态的</li>\n<li>Fragment 是如何实现 Lifecycle 的</li>\n<li>Activity 是如何实现 Lifecycle 的</li>\n<li>Application 是如何实现 Lifecycle 的</li>\n<li>Service 是如何实现 Lifecycle 的</li>\n<li>View 是如何实现观察宿主 Lifecycle 的</li>\n<li>Lifecycle 涉及的依赖库是如何划分的</li>\n<li>Lifecycle 实现观察宿主状态有几种方式</li>\n<li>注解+反射/生成代码的方式为什么又被废弃了</li>\n<li>Activity 的生命周期分发为何通过 ReportFragment 实现</li>\n<li>Lifecycle Event 和 State 的关系</li>\n<li>在 onResume 方法中注册观察者，是否能观察到其它生命周期的回调</li>\n<li>分发宿状态过程中是如何同步 Event 和 State 的</li>\n</ul>\n<h2 id=\"2-Lifecycle是什么\"><a href=\"#2-Lifecycle是什么\" class=\"headerlink\" title=\"2. Lifecycle是什么\"></a>2. Lifecycle是什么</h2><p>Lifecycle 是一个对宿主生命周期的变化具有感知能力的组件 (Lifecycle-Aware Components) ，在 Android 中目前提供的可观察的宿主组件有 Activity / Fragment / Service / Application 等，除了jetpack 组件中内置的可观察的宿主我们也可以借助 LifeCycle 的能力自己实现可观察的宿主，例如 SDK 中的 Activity 是没有实现Lifecycle 的，此时我们就可以根据业务需求自定时实现了。</p>\n<p>Lifecycle 的核心实现思想是观察者模式，Jetpack 组件中的 Activity / Fragment 组件中都已经接入了 Lifecycle 中的被观察者者部分的代码，我们只需要实现自己的观察者然后在 Activity / Fragment 组件中注册我们的观察者就可以监听到生命周期事件的变化了。</p>\n<blockquote>\n<p>支持库 26.1.0 及更高版本中的 Fragment 和 Activity 已实现 <a href=\"https://developer.android.com/reference/androidx/lifecycle/LifecycleOwner\" target=\"_blank\" rel=\"noopener\"><code>LifecycleOwner</code></a> 接口。</p>\n</blockquote>\n<p>一种常见的应用场景是有些逻辑需要依赖在 Activity 和 Fragment 的生命周期方法中实现，通过 Lifecycle  组件就可以将这部分代码从生命周期方法中提取到单独的类中，达到解耦被观察者和观察者的目的，从而帮助开发者写出简洁易维护代码。</p>\n<blockquote>\n<p>观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）</p>\n<p><strong>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。</strong></p>\n<p>观察者模式属于行为型设计模式，行为型设计模式的目的是将不同的行为代码解耦，具体到观察者模式就是是将观察者和被观察者代码解耦。</p>\n<p>观察者模式的实现一般分为两个角色：Observable、Observer，两个角色一般都提供抽象层。</p>\n<p>被观察者部分的抽象层一般是抽象类，除了提供必要的抽象方法还提供添加、删除等复用的逻辑。</p>\n<p>观察者部分的抽象层一般是一个SAM（Single Abstract Method）接口，观察者可以实现该方法做出更新操作。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211120233721.png\" alt=\"image-20211120233538055\"></p>\n<p>Lifecycle 是如何结合观察者模式实现 Activity 和 Fragment 组件的生命周期感知能力的</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png\" alt=\"\"></p>\n<p>Lifecycle 在实现被观察者时并没有采用传统的直接继承抽象类的方式，而是通过类似委托模式将被观察者的逻辑代码封装到了 LifecycleRegistry 类中，LifecycleRegistry 是真正的被观察者负责统一管理所有观察者的添加、删除、存储、分发等操作。当委托者（ Activity / Fragment）有生命周期事件产生时会通过受托者 LifecycleRegistry 执行具体的分发操作，从而实现委托者类的生命周期可感知能力。</p>\n<p>这样做的优势是符合单一原则，有利于被观察者侧的代码复用，也不用破坏 Activity/Fragment 组件的继承结构。</p>\n<h2 id=\"3-Lifecycle-有什么\"><a href=\"#3-Lifecycle-有什么\" class=\"headerlink\" title=\"3. Lifecycle 有什么\"></a>3. Lifecycle 有什么</h2><p>androidx.lifecycle 组下的组件,了解 lifecycle  有什么才能更好的运用。lifecycle 模块中除了自己实现观察者模式相关的代码</p>\n<table>\n<thead>\n<tr>\n<th>lifecycle-common <br>lifecycle-common-java8 <br>lifecycle-compiler<br>lifecycle-runtime <br>lifecycle-runtime-ktx <br>lifecycle-runtime-ktx- lint <br>lifecycle-runtime-testing</th>\n<th>lifecycle-livedata <br>lifecycle-livedata-core <br>lifecycle-livedata-core-ktx<br>lifecycle-livedata-core-ktx-lint <br>lifecycle-livedata-core-truth  <br>lifecycle-livedata-ktx<br>lifecycle-reactivestreams <br>lifecycle-reactivestreams-ktx</th>\n<th>lifecycle-viewmodel <br>lifecycle-viewmodel-compose <br>lifecycle-viewmodel-ktx <br>lifecycle-viewmodel-savedstate</th>\n<th>lifecycle-process <br>lifecycle-service <br>lifecycle-extensions</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lifecycle相关</td>\n<td>livedata 相关</td>\n<td>viewmodel相关</td>\n<td>其它扩展组件相关</td>\n</tr>\n<tr>\n<td>common-java8 已经废弃</td>\n<td>-</td>\n<td>-</td>\n<td>extensions 耦合重已经废弃</td>\n</tr>\n</tbody></table>\n<p>再来看一下其中的几个核心组件之间的依赖关系</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122011323.jpeg\" alt=\"WechatIMG77\"></p>\n<p>开发时按需添加 Lifecycle 的依赖项</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">def</span> lifecycle_version <span class=\"token operator\">=</span> <span class=\"token string\">\"2.4.0\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// ViewModel</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// ViewModel utilities for Compose</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// LiveData</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// Lifecycles only (without ViewModel or LiveData)</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// Saved state module for ViewModel</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// Annotation processor</span>\nkapt <span class=\"token string\">\"androidx.lifecycle:lifecycle-compiler:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// alternately - if using Java8, use the following instead of lifecycle-compiler</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-common-java8:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// optional - helpers for implementing LifecycleOwner in a Service</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-service:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// optional - ProcessLifecycleOwner provides a lifecycle for the whole application process</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-process:$lifecycle_version\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// optional - ReactiveStreams support for LiveData</span>\nimplementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version\"</span></code></pre>\n<p>其它组件对lifecycle的依赖情况</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'androidx.core:core-ktx:1.7.0'</span></code></pre>\n<p>core-ktx api 了 core </p>\n<p>core api 了lifecycle-runtime</p>\n<p>lifecycle-runtime api 了 lifecycle-common</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'androidx.appcompat:appcompat:1.3.0'</span></code></pre>\n<p>appcompat api 了core、activity、fragment</p>\n<p>activity api 了 core、lifecycle-runtime、lifecycle-viewmodel、lifecycle-viewmodel-savedstate</p>\n<p>fragment api 了core、activity、lifecycle-livedata-core、lifecycle-viewmodel、lifecycle-viewmodel-savedstate</p>\n<p>lifecycle-runtime api 了 lifecycle-common</p>\n<p>lifecycle-livedata-core api 了  lifecycle-livedata</p>\n<p>所以一般情况下我们新建的Android 项目默认都会提供core-ktx、appcompat 这两个组件而他们又间接依赖了 lifecycle 系的组件</p>\n<p>依赖 appcompat 间接依赖的 lifecycle 系组件</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134326.png\" alt=\"image-20211121131315450\"></p>\n<p>依赖 core-ktx 间接依赖的 lifecycle 系组件</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134339.png\" alt=\"image-20211121131403284\"></p>\n<h2 id=\"4-Lifecycle-应用\"><a href=\"#4-Lifecycle-应用\" class=\"headerlink\" title=\"4. Lifecycle 应用\"></a>4. Lifecycle 应用</h2><p>生命周期感知型组件可以实现在各种情况下更轻松地管理生命周期。下面列举几个例子：</p>\n<ul>\n<li>在粗粒度和细粒度位置更新之间切换。使用生命周期感知型组件可在位置应用可见时启用细粒度位置更新，并在应用位于后台时切换到粗粒度更新。</li>\n<li>停止和开始视频缓冲。使用生命周期感知型组件可尽快开始视频缓冲，但会推迟播放，直到应用完全启动。此外，应用销毁后，还可以使用生命周期感知型组件终止缓冲。</li>\n<li>开始和停止网络连接。借助生命周期感知型组件，可在应用位于前台时启用网络数据的实时更新（流式传输），并在应用进入后台时自动暂停。</li>\n<li>暂停和恢复动画可绘制资源。借助生命周期感知型组件，可在应用位于后台时暂停动画可绘制资源，并在应用位于前台后恢复可绘制资源。</li>\n<li>Handler 的消息移除。</li>\n<li>Presenter 的 attach&amp;detach View 。</li>\n<li>为其他三方库加持生命周期感知的能力，例如：RxJava 、EventBus等。</li>\n</ul>\n<h2 id=\"5-Lifecycle-怎么用\"><a href=\"#5-Lifecycle-怎么用\" class=\"headerlink\" title=\"5. Lifecycle 怎么用\"></a>5. Lifecycle 怎么用</h2><h3 id=\"5-1-观察者使用方式汇总\"><a href=\"#5-1-观察者使用方式汇总\" class=\"headerlink\" title=\"5.1 观察者使用方式汇总\"></a>5.1 观察者使用方式汇总</h3><p>Lifecycle 的以下使用方式是以  Activity 或者 Fragment 为宿主举例。</p>\n<ul>\n<li>方式一：运行时注解+反射<ul>\n<li>自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举标注生命周期方法；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li>方式二：编译时注解+生成辅助类(XXX_LifecycleAdapter)<ul>\n<li>添加注解处理器组件：lifecycle-compiler</li>\n<li>自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举 标注生命周期方法；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li>方式三：实现 FullLifecycleObserver (非公共方法，自己可以实现一个)<ul>\n<li>自定义 FullLifecycleObserver 观察者，FullLifecycleObserver 是普通接口需要实现其中定义的所有生命周期方法；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li>方式四：实现 LifecycleEventObserver(推荐方式)<ul>\n<li>自定义 LifecycleEventObserver 观察者，通过实现 onStateChanged(LifecycleOwner ,Lifecycle.Event) 方法自行判断生命周期方法的回调；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li><strong>方式五：实现 DefaultLifecycleObserver (推荐方式)</strong><ul>\n<li>自定义 DefaultLifecycleObserver 观察者，DefaultLifecycleObserver 中通过java default 关键字都实现了方法体，所以只需实现需要的声明后期方法即可；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>DefaultLifecycleObserver 接口中的 default 关键字</p>\n<p>default 关键字修饰的方法能够向接口添加新功能方法，必须提供方法体，并确保兼容实现这个接口的之前的类不用在接口的子类中进行逐个实现该方法。可以按需实现</p>\n<p>default是在需要给接口新增方法时，但是子类数量过多，或者子类没必要实现的场景下使用。 比如java8中的List接口，新增了sort()方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//@since 1.8</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Collection</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>Comparator<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> E<span class=\"token operator\">></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Comparator<span class=\"token punctuation\">)</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   ListIterator<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> i <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Object e <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       i<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       i<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</blockquote>\n<h3 id=\"5-2-观察-Activity-Lifecycle\"><a href=\"#5-2-观察-Activity-Lifecycle\" class=\"headerlink\" title=\"5.2 观察 Activity Lifecycle\"></a>5.2 观察 Activity Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MyLifecycleActivityObserver <span class=\"token operator\">:</span> DefaultLifecycleObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onStart\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onStop\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MyLifecycleActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyLifecycleActivityObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-3-观察-SDK-Activity-Lifecycle\"><a href=\"#5-3-观察-SDK-Activity-Lifecycle\" class=\"headerlink\" title=\"5.3 观察 SDK Activity Lifecycle\"></a>5.3 观察 SDK Activity Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MySdkActivity <span class=\"token operator\">:</span> <span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LifecycleOwner <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> lifecycleRegistry<span class=\"token operator\">:</span> LifecycleRegistry\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        lifecycleRegistry <span class=\"token operator\">=</span> <span class=\"token function\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        MySDKFragment<span class=\"token punctuation\">.</span><span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MySDKActivityObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lifecycle <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lifecycleRegistry\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MySDKActivityObserver <span class=\"token operator\">:</span> DefaultLifecycleObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDKActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Observer onPause\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDKActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Observer onResume\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-4-观察-Fragment-Lifecycle\"><a href=\"#5-4-观察-Fragment-Lifecycle\" class=\"headerlink\" title=\"5.4 观察 Fragment Lifecycle\"></a>5.4 观察 Fragment Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MyLifecycleFragmentObserver <span class=\"token operator\">:</span> LifecycleObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_RESUME<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">connectListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleFragment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onResume\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_PAUSE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">disconnectListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleFragment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onPause\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MyLifecycleFragment <span class=\"token operator\">:</span> <span class=\"token function\">Fragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyLifecycleFragmentObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-5-观察-SDK-Fragment-Lifecycle\"><a href=\"#5-5-观察-SDK-Fragment-Lifecycle\" class=\"headerlink\" title=\"5.5 观察 SDK Fragment Lifecycle\"></a>5.5 观察 SDK Fragment Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MySDKFragment <span class=\"token operator\">:</span> <span class=\"token function\">Fragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LifecycleOwner <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> lifecycleRegistry<span class=\"token operator\">:</span> LifecycleRegistry\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        lifecycleRegistry <span class=\"token operator\">=</span> <span class=\"token function\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n        lifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">addLifecycleObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MySDKFragmentObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span>activity<span class=\"token operator\">:</span> Activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">val</span> manager <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span>fragmentManager\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentByTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleFragment\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                manager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">MySDKFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyLifecycleFragment\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                manager<span class=\"token punctuation\">.</span><span class=\"token function\">executePendingTransactions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDKFragment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" onResume\"</span><span class=\"token punctuation\">)</span>\n        lifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_RESUME<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDKFragment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" onPause\"</span><span class=\"token punctuation\">)</span>\n        lifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_PAUSE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lifecycle <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lifecycleRegistry\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> MySDKFragmentObserver <span class=\"token operator\">:</span> DefaultLifecycleObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDKFragment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Observer onPause\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">)</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SDKFragment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Observer onResume\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-6-观察-Service-Lifecycle\"><a href=\"#5-6-观察-Service-Lifecycle\" class=\"headerlink\" title=\"5.6 观察 Service Lifecycle\"></a>5.6 观察 Service Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> MyLifecycleServiceObserver implements LifecycleEventObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation builtin\">@NonNull</span> LifecycleOwner source<span class=\"token punctuation\">,</span> <span class=\"token annotation builtin\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleService\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onStart()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_DESTROY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleService\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onDestroy()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> MyLifecycleService extends LifecycleService <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyLifecycleService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">MyLifecycleServiceObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-7-观察-Application-Lifecycle\"><a href=\"#5-7-观察-Application-Lifecycle\" class=\"headerlink\" title=\"5.7 观察 Application Lifecycle\"></a>5.7 观察 Application Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">MyLifecycleApplicationObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> application<span class=\"token operator\">:</span> Application<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n    LifecycleObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_RESUME<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">appInResumeState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> <span class=\"token string\">\"In Foreground\"</span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation builtin\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_PAUSE<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">appInPauseState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span>application<span class=\"token punctuation\">,</span> <span class=\"token string\">\"In Background\"</span><span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> MyLifecycleApplication extends MultiDexApplication <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation builtin\">@Override</span>\n    <span class=\"token keyword\">public</span> void <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//饿汉式单例获取 ProcessLifecycleOwner</span>\n        ProcessLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>new <span class=\"token function\">MyLifecycleApplicationObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-8-View-观察-Lifecycle\"><a href=\"#5-8-View-观察-Lifecycle\" class=\"headerlink\" title=\"5.8 View 观察 Lifecycle\"></a>5.8 View 观察 Lifecycle</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MyLifecycleView <span class=\"token annotation builtin\">@JvmOverloads</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span>\n    attrs<span class=\"token operator\">:</span> AttributeSet<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    defStyle<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">View</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> defStyle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">addOnAttachStateChangeListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> OnAttachStateChangeListener <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onViewAttachedToWindow</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> View<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleView\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onViewAttachedToWindow\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token function\">findViewTreeLifecycleOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>lifecycle\n                    <span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> LifecycleEventObserver <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>\n                            source<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">,</span>\n                            event<span class=\"token operator\">:</span> Lifecycle<span class=\"token punctuation\">.</span>Event\n                        <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleView\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onStateChanged：source:<span class=\"token interpolation variable\">$source</span>, event: <span class=\"token interpolation variable\">$event</span>\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onViewDetachedFromWindow</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> View<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLifecycleView\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onViewDetachedFromWindow\"</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5-9-各种方式的观察者的执行顺序\"><a href=\"#5-9-各种方式的观察者的执行顺序\" class=\"headerlink\" title=\"5.9 各种方式的观察者的执行顺序\"></a>5.9 各种方式的观察者的执行顺序</h3><ul>\n<li>DefaultLifecycleObserver 所有方法将在 [LifecycleOwner] 的生命周期回调方法被调用之前被调用，这里需要注意Fragment 生命周期的回调时机。</li>\n</ul>\n<ul>\n<li>LifecycleEventObserver onStateChanged 方法在当状态转换事件发生时调用。</li>\n<li>如果一个类同时实现了DefaultLifecycleObserver 和LifecycleEventObserver ，则首先调用DefaultLifecycleObserver方法，然后调用LifecycleEventObserver.onStateChanged(LifecycleOwner, Lifecycle.Event) 方法。</li>\n<li>如果一个类实现了这个接口并且同时使用了OnLifecycleEvent 注解，那么注解将被忽略。</li>\n</ul>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">D<span class=\"token operator\">/</span>Life_Owner<span class=\"token operator\">:</span> onCreate\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onCreate\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStateChanged<span class=\"token punctuation\">,</span>event<span class=\"token operator\">:</span>ON_CREATE\nD<span class=\"token operator\">/</span>Life_Owner<span class=\"token operator\">:</span> onStart\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStart\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStateChanged<span class=\"token punctuation\">,</span>event<span class=\"token operator\">:</span>ON_START\nD<span class=\"token operator\">/</span>Life_Owner<span class=\"token operator\">:</span> onResume\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onResume\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStateChanged<span class=\"token punctuation\">,</span>event<span class=\"token operator\">:</span>ON_RESUME\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onPause\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStateChanged<span class=\"token punctuation\">,</span>event<span class=\"token operator\">:</span>ON_PAUSE\nD<span class=\"token operator\">/</span>Life_Owner<span class=\"token operator\">:</span> onPause\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStop\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStateChanged<span class=\"token punctuation\">,</span>event<span class=\"token operator\">:</span>ON_STOP\nD<span class=\"token operator\">/</span>Life_Owner<span class=\"token operator\">:</span> onStop\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onDestroy\nD<span class=\"token operator\">/</span>Life_Observer<span class=\"token operator\">:</span> onStateChanged<span class=\"token punctuation\">,</span>event<span class=\"token operator\">:</span>ON_DESTROY\nD<span class=\"token operator\">/</span>Life_Owner<span class=\"token operator\">:</span> onDestroy</code></pre>\n<p>在Activity 的onPause 方法注册观察者，当宿主执行onPause时 观察者也是会从 onCreate 开始直到对齐当前状态，Lifecycle 内部做了同步和对齐的处理。</p>\n<pre><code>D/Life_Owner: onCreate\nD/Life_Owner: onStart\nD/Life_Owner: onResume\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy</code></pre><h2 id=\"6-Lifecycle-最小原型设计\"><a href=\"#6-Lifecycle-最小原型设计\" class=\"headerlink\" title=\"6. Lifecycle 最小原型设计\"></a>6. Lifecycle 最小原型设计</h2><p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png\" alt=\"观察者模式\"></p>\n<h4 id=\"6-1-代码实现最小原型\"><a href=\"#6-1-代码实现最小原型\" class=\"headerlink\" title=\"6.1 代码实现最小原型\"></a>6.1 代码实现最小原型</h4><p>被观察者部分</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//抽象接口层</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Lifecycle <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token operator\">:</span> LifecycleObserver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token operator\">:</span> LifecycleObserver<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> State <span class=\"token punctuation\">{</span>\n        DESTROYED<span class=\"token punctuation\">,</span>\n        INITIALIZED<span class=\"token punctuation\">,</span>\n        CREATED<span class=\"token punctuation\">,</span>\n        STARTED<span class=\"token punctuation\">,</span>\n        RESUMED<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> Event <span class=\"token punctuation\">{</span>\n        ON_CREATE<span class=\"token punctuation\">,</span>\n        ON_START<span class=\"token punctuation\">,</span>\n        ON_RESUME<span class=\"token punctuation\">,</span>\n        ON_PAUSE<span class=\"token punctuation\">,</span>\n        ON_STOP<span class=\"token punctuation\">,</span>\n        ON_DESTROY<span class=\"token punctuation\">,</span>\n        ON_ANY<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//受托方</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> lifecycleOwner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Lifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> lifecycleObserver<span class=\"token operator\">:</span> LifecycleObserver<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> lifecycleObservers <span class=\"token operator\">=</span> arrayListOf<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token operator\">:</span> LifecycleObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycleObservers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n        lifecycleObserver <span class=\"token operator\">=</span> observer\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">removeObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token operator\">:</span> LifecycleObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycleObservers<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> Event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycleObservers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token keyword\">is</span> LifecycleEventObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                it<span class=\"token punctuation\">.</span><span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>观察者部分</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> LifecycleObserver <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> LifecycleEventObserver <span class=\"token operator\">:</span> LifecycleObserver <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> DefaultLifecycleObserver <span class=\"token operator\">:</span> FullLifecycleObserver <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> Unit\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>测试被观察者部分</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Activity <span class=\"token operator\">:</span> LifecycleOwner <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> lifecycleRegistry<span class=\"token operator\">:</span> LifecycleRegistry <span class=\"token operator\">=</span> <span class=\"token function\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span>\n        lifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">ActivityObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Lifecycle <span class=\"token operator\">=</span> lifecycleRegistry\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        lifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_STOP<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>测试观察者部分</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> ActivityObserver <span class=\"token operator\">:</span> LifecycleEventObserver <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>source<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token operator\">:</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source: <span class=\"token interpolation variable\">$source</span>, event: <span class=\"token interpolation variable\">$event</span> \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//运行测试</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> app <span class=\"token operator\">=</span> <span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"7-Lifecycle-实现原理\"><a href=\"#7-Lifecycle-实现原理\" class=\"headerlink\" title=\"7. Lifecycle 实现原理\"></a>7. Lifecycle 实现原理</h2><h3 id=\"7-1-Fragment-的实现\"><a href=\"#7-1-Fragment-的实现\" class=\"headerlink\" title=\"7.1 Fragment 的实现\"></a>7.1 Fragment 的实现</h3><p>jetpack 中的 Fragment 组件已经被观察部分的接口 LifecycleOwner</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//androidx.fragment.app.Fragment 中已经实现 LifecycleOwner </span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Fragment</span> <span class=\"token keyword\">implements</span> \n              <span class=\"token class-name\">ComponentCallbacks</span><span class=\"token punctuation\">,</span> \n                OnCreateContextMenuListener<span class=\"token punctuation\">,</span> \n                LifecycleOwner<span class=\"token punctuation\">,</span>\n        ViewModelStoreOwner<span class=\"token punctuation\">,</span> \n                HasDefaultViewModelProviderFactory<span class=\"token punctuation\">,</span> \n                SavedStateRegistryOwner<span class=\"token punctuation\">,</span>\n        ActivityResultCaller <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">public</span> Lifecycle <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mLifecycleRegistry<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n   LifecycleRegistry mLifecycleRegistry<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//构造函数中进行了受托者 LifecycleRegistry 的初始化</span>\n   <span class=\"token keyword\">public</span> <span class=\"token function\">Fragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mLifecycleRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//当发生生命周期事件时执通过委托类分发该事件到所有观察者中</span>\n <span class=\"token keyword\">void</span> <span class=\"token function\">performCreate</span><span class=\"token punctuation\">(</span>Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mLifecycleRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>Fragment 的生命周期感知实现很简单，就是委托给 mLifecycleRegistry 全权负责</p>\n<h3 id=\"7-2-Activity-实现\"><a href=\"#7-2-Activity-实现\" class=\"headerlink\" title=\"7.2 Activity 实现\"></a>7.2 Activity 实现</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//androidx.core.app.ComponentActivity，@hide标注，不对外使用，只做了 Lifecycle 和 KeyEvent 的封装</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token keyword\">implements</span>\n        <span class=\"token class-name\">LifecycleOwner</span><span class=\"token punctuation\">,</span>\n        KeyEventDispatcher<span class=\"token punctuation\">.</span>Component <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//androidx.activity.ComponentActivity，以上特性 + 集成了 Jitpack 的其它组件，例如：Lifecycle，ViewModel等</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">androidx<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>ComponentActivity</span> <span class=\"token keyword\">implements</span>\n        <span class=\"token class-name\">ContextAware</span><span class=\"token punctuation\">,</span>\n        LifecycleOwner<span class=\"token punctuation\">,</span>\n        ViewModelStoreOwner<span class=\"token punctuation\">,</span>\n        HasDefaultViewModelProviderFactory<span class=\"token punctuation\">,</span>\n        SavedStateRegistryOwner<span class=\"token punctuation\">,</span>\n        OnBackPressedDispatcherOwner<span class=\"token punctuation\">,</span>\n        ActivityResultRegistryOwner<span class=\"token punctuation\">,</span>\n        ActivityResultCaller <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> LifecycleRegistry mLifecycleRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token keyword\">public</span> Lifecycle <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> mLifecycleRegistry<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">// ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知</span>\n            ReportFragment<span class=\"token punctuation\">.</span><span class=\"token function\">injectIfNeededIn</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mContentLayoutId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>mContentLayoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//androidx.fragment.app.FragmentActivity，以上特性 + 简化Fragment 的使用，例如：FragmentManager</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FragmentActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ComponentActivity</span> <span class=\"token keyword\">implements</span>\n        <span class=\"token class-name\">ActivityCompat<span class=\"token punctuation\">.</span>OnRequestPermissionsResultCallback</span><span class=\"token punctuation\">,</span>\n        ActivityCompat<span class=\"token punctuation\">.</span>RequestPermissionsRequestCodeValidator <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//androidx.appcompat.app.AppCompatActivity 以上特性 + 简化 Material 设计，例如主题、暗黑、导航条等</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FragmentActivity</span> <span class=\"token keyword\">implements</span> \n              <span class=\"token class-name\">AppCompatCallback</span><span class=\"token punctuation\">,</span>\n        TaskStackBuilder<span class=\"token punctuation\">.</span>SupportParentable<span class=\"token punctuation\">,</span> \n                ActionBarDrawerToggle<span class=\"token punctuation\">.</span>DelegateProvider <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre>\n<p>androidx.activity 组件下的 <strong>ComponentActivity</strong> 可以说是 androidx 系或者说是 Jetpack 开发套件中的最顶层 Activity 基类了，可以看到 ComponentActivity 类中已经实现了 LifecycleOwner，所以和 Fragment 一样将被观察者的逻辑委托给了LifecycleRegistry。</p>\n<p>但是我们在ComponentActivity 生命周期的回调方法中并没有看到 LifecycleRegistry 执行的分发操作。在 onCreate 方法中我们看到ReportFragment.injectIfNeededIn(this); 这句代码，这里就是 Activity 声明周期可感知做的的兼容处理，ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知。</p>\n<h4 id=\"ReportFragment\"><a href=\"#ReportFragment\" class=\"headerlink\" title=\"ReportFragment\"></a>ReportFragment</h4><pre class=\" language-java\"><code class=\"language-java\">        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">injectIfNeededIn</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">>=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 在 API 29+ 上，可以直接注册 Activity 中的 registerActivityLifecycleCallbacks 回调方法获取Activity 的生命周期                回调。</span>\n            LifecycleCallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">registerIn</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//在 API 29 之前和进程的宿主 ProcessLifecycleOwner 都是通过内嵌一个空的 Fragment 获间接取 Activity 的生命周期回调。</span>\n        android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>FragmentManager manager <span class=\"token operator\">=</span> activity<span class=\"token punctuation\">.</span><span class=\"token function\">getFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentByTag</span><span class=\"token punctuation\">(</span>REPORT_FRAGMENT_TAG<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            manager<span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ReportFragment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> REPORT_FRAGMENT_TAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            manager<span class=\"token punctuation\">.</span><span class=\"token function\">executePendingTransactions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>    \n        <span class=\"token comment\" spellcheck=\"true\">//29以上分发的方式</span>\n        <span class=\"token annotation punctuation\">@RequiresApi</span><span class=\"token punctuation\">(</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LifecycleCallbacks</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Application<span class=\"token punctuation\">.</span>ActivityLifecycleCallbacks</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerIn</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            activity<span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPostCreated</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">,</span>\n                <span class=\"token annotation punctuation\">@Nullable</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPostStarted</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPreDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">,</span> Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_DESTROY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityDestroyed</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n\n        <span class=\"token comment\" spellcheck=\"true\">//Fragment 声明周期方法触发是</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispatchStart</span><span class=\"token punctuation\">(</span>mProcessListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 进程29以下需要需要的</span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 分发29以下 Avtivity </span>\n    <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">&lt;</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LifecycleRegistryOwner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LifecycleRegistryOwner<span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LifecycleOwner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Lifecycle lifecycle <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LifecycleOwner<span class=\"token punctuation\">)</span> activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lifecycle <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>LifecycleRegistry<span class=\"token punctuation\">)</span> lifecycle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 29以下最终的分发方法</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>总的来说 Activity 将生命周期方法通知给订阅者的方式有别于 Fragment 的直接在生命周期回调中委托给 mLifecycleRegistry 全权负责。Activity 的方式显现复杂，搞复杂的主要原因也是为了兼容低版本和方便移植不得不做的。</p>\n<p>根据SDK版本可分为两种方式，大于等于29(Androi 10) 以上是通过  activity.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks) 方式注册生命周期回调方法的方式获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。</p>\n<p>29(Androi 10) 以下是通过内嵌一个空的 Fragment 获间接获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。</p>\n<h3 id=\"7-3-LifecycleRegistry-真正的被观察者\"><a href=\"#7-3-LifecycleRegistry-真正的被观察者\" class=\"headerlink\" title=\"7.3 LifecycleRegistry-真正的被观察者\"></a>7.3 LifecycleRegistry-真正的被观察者</h3><p>LifecycleRegistry 通常被 Fragments 和 Activity 组件使用。 如果有自定义 LifecycleOwner的需求也可以直接使用它。</p>\n<p>LifecycleRegistry  可以看做是Fragment 和 Activity 实现生命周期可感知的受托方。所有的被观察的逻辑都在这里实现。</p>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token function\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleOwner provider<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> enforceMainThread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mLifecycleOwner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 宿主类通过弱引用包裹</span>\n    mState <span class=\"token operator\">=</span> INITIALIZED<span class=\"token punctuation\">;</span>\n    mEnforceMainThread <span class=\"token operator\">=</span> enforceMainThread<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nLifecycleOwner lifecycleOwner <span class=\"token operator\">=</span> mLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lifecycleOwner <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LifecycleOwner of this LifecycleRegistry is already\"</span>\n            <span class=\"token operator\">+</span> <span class=\"token string\">\"garbage collected. It is too late to change lifecycle state.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>宿主类通过弱引用包裹，当方式GC时会回收宿主类避免内存泄漏的产生，每次获取宿主时都会先判空，如果被GC了是不会继续执行的。</p>\n<h4 id=\"添加观察者\"><a href=\"#添加观察者\" class=\"headerlink\" title=\"添加观察者\"></a>添加观察者</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//宿主中向LifecycleRegistry 中添加观察者</span>\nlifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyLifecycleActivityObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//缓存观察者的数据容器</span>\n<span class=\"token keyword\">private</span> FastSafeIterableMap<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token punctuation\">,</span> ObserverWithState<span class=\"token operator\">></span> mObserverMap <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">FastSafeIterableMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//对分发事件的封装</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObserverWithState</span> <span class=\"token punctuation\">{</span>\n    State mState<span class=\"token punctuation\">;</span>\n    LifecycleEventObserver mLifecycleObserver<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ObserverWithState</span><span class=\"token punctuation\">(</span>LifecycleObserver observer<span class=\"token punctuation\">,</span> State initialState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mLifecycleObserver <span class=\"token operator\">=</span> Lifecycling<span class=\"token punctuation\">.</span><span class=\"token function\">lifecycleEventObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>LifecycleOwner owner<span class=\"token punctuation\">,</span> Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">//根据事件获取状态</span>\n        State newState <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mState <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">,</span> newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//分发</span>\n        mState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//前进一个状态</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleObserver observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//初始值状态为：mState = INITIALIZED;</span>\n    State initialState <span class=\"token operator\">=</span> mState <span class=\"token operator\">==</span> DESTROYED <span class=\"token operator\">?</span> DESTROYED <span class=\"token operator\">:</span> INITIALIZED<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//包装观察者</span>\n    ObserverWithState statefulObserver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObserverWithState</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ObserverWithState previous <span class=\"token operator\">=</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">putIfAbsent</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">,</span> statefulObserver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//之前缓存过了，直接返回</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previous <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//宿主被GC了</span>\n    LifecycleOwner lifecycleOwner <span class=\"token operator\">=</span> mLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lifecycleOwner <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// it is null we should be destroyed. Fallback quickly</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//</span>\n    <span class=\"token keyword\">boolean</span> isReentrance <span class=\"token operator\">=</span> mAddingObserverCounter <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> mHandlingEvent<span class=\"token punctuation\">;</span>\n    State targetState <span class=\"token operator\">=</span> <span class=\"token function\">calculateTargetState</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//计算出宿主当前的状态</span>\n    mAddingObserverCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//同步到宿主当前的状态，例如在 onResume 方法注册的观察者，之前的生命周期方法也会回调</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>statefulObserver<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>targetState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token comment\" spellcheck=\"true\">//比较状态，是否小于宿主的状态,枚举类根据 ordinal 序号进行比较，越靠后的序号越大</span>\n            <span class=\"token operator\">&amp;&amp;</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">pushParentState</span><span class=\"token punctuation\">(</span>statefulObserver<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//向前移动一个生命周期方法，ON_CREATE-ON_START-ON_RESUME 知道对齐宿主</span>\n        <span class=\"token keyword\">final</span> Event event <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">.</span><span class=\"token function\">upFrom</span><span class=\"token punctuation\">(</span>statefulObserver<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no event up from \"</span> <span class=\"token operator\">+</span> statefulObserver<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n          <span class=\"token comment\" spellcheck=\"true\">//每次向前移动一个生命周期方法就分发落后的生命周期方法</span>\n        statefulObserver<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">popParentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// mState / subling may have been changed recalculate</span>\n        targetState <span class=\"token operator\">=</span> <span class=\"token function\">calculateTargetState</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isReentrance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// we do sync only on the top level.</span>\n        <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    mAddingObserverCounter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Nullable</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Event <span class=\"token function\">upFrom</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> State state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> INITIALIZED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_CREATE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> CREATED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_START<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> STARTED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_RESUME<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>向前同步时：先根据状态推倒事件，分发是根据事件推导出状态，再更新状态。</p>\n<p>假设宿主中是在onResume 方法中注册的观察者，那么他的同步流程应该是怎样的呢？</p>\n<p>观察者最终会受到onCreate-onStart-onRsume 三个回到方法。</p>\n<h4 id=\"State-和-Event\"><a href=\"#State-和-Event\" class=\"headerlink\" title=\"State 和 Event\"></a>State 和 Event</h4><p>针对Lifecycle 中 State 和 Event 的对应关系我们通过官方提供的流转图分析一下。</p>\n<p>Lifecycle 接口中提供两个枚举：State表示宿主状态，Event表示宿主生命周期事件。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n    DESTROYED<span class=\"token punctuation\">,</span>\n    INITIALIZED<span class=\"token punctuation\">,</span>\n    CREATED<span class=\"token punctuation\">,</span>\n    STARTED<span class=\"token punctuation\">,</span>\n    RESUMED<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n    ON_CREATE<span class=\"token punctuation\">,</span>\n    ON_START<span class=\"token punctuation\">,</span>\n    ON_RESUME<span class=\"token punctuation\">,</span>\n    ON_PAUSE<span class=\"token punctuation\">,</span>\n    ON_STOP<span class=\"token punctuation\">,</span>\n    ON_DESTROY<span class=\"token punctuation\">,</span>\n    ON_ANY<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>两个过程：前进和后腿</p>\n<p>前进：INITIALIZED-ON_CREATE-CREATED-ON_START-STARTED-ON_RESUME-RESUMED</p>\n<p>倒退：RESUMED-ON_PAUSE-STARTED-ON_STOP-CREATED-ON_DESTROY-DESTROYED</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121224101.svg\" alt=\"生命周期状态示意图\"></p>\n<p>状态是图中的节点，事件可以看作这些节点之间的边。</p>\n<p>通过事件获取状态</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> State <span class=\"token function\">getTargetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> ON_CREATE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> ON_STOP<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> State<span class=\"token punctuation\">.</span>CREATED<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ON_START<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">case</span> ON_PAUSE<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> State<span class=\"token punctuation\">.</span>STARTED<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ON_RESUME<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> State<span class=\"token punctuation\">.</span>RESUMED<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ON_DESTROY<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> State<span class=\"token punctuation\">.</span>DESTROYED<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ON_ANY<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" has no target state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>如果上面的图看不太明白，看看下面这个就清除它们的对应关系了。</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211027015118.jpeg\" alt=\"img\"></p>\n<h4 id=\"通知观察者\"><a href=\"#通知观察者\" class=\"headerlink\" title=\"通知观察者\"></a>通知观察者</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">enforceMainThreadIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handleLifecycleEvent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//根据事件推导状态，再执行移动</span>\n    <span class=\"token function\">moveToState</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//条件的判断</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">moveToState</span><span class=\"token punctuation\">(</span>State next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mState <span class=\"token operator\">==</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    mState <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mHandlingEvent <span class=\"token operator\">||</span> mAddingObserverCounter <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mNewEventOccurred <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// we will figure out what to do on upper level.</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    mHandlingEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mHandlingEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    LifecycleOwner lifecycleOwner <span class=\"token operator\">=</span> mLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lifecycleOwner <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LifecycleOwner of this LifecycleRegistry is already\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"garbage collected. It is too late to change lifecycle state.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isSynced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mNewEventOccurred <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// mState 表示宿主的状态，比观察者的小说明是后腿流程 onPause-onStop</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">eldest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">backwardPass</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token punctuation\">,</span> ObserverWithState<span class=\"token operator\">></span> newest <span class=\"token operator\">=</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">newest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 前进流程</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mNewEventOccurred <span class=\"token operator\">&amp;&amp;</span> newest <span class=\"token operator\">!=</span> null\n                <span class=\"token operator\">&amp;&amp;</span> mState<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>newest<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">forwardPass</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    mNewEventOccurred <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//while 循环的条件，是否都同步完了</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isSynced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    State eldestObserverState <span class=\"token operator\">=</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">eldest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">;</span>\n    State newestObserverState <span class=\"token operator\">=</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">newest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> eldestObserverState <span class=\"token operator\">==</span> newestObserverState <span class=\"token operator\">&amp;&amp;</span> mState <span class=\"token operator\">==</span> newestObserverState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>前进和后腿</p>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">backwardPass</span><span class=\"token punctuation\">(</span>LifecycleOwner lifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Iterator<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token punctuation\">,</span> ObserverWithState<span class=\"token operator\">>></span> descendingIterator <span class=\"token operator\">=</span>\n            mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">descendingIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>descendingIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mNewEventOccurred<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token punctuation\">,</span> ObserverWithState<span class=\"token operator\">></span> entry <span class=\"token operator\">=</span> descendingIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ObserverWithState observer <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mNewEventOccurred\n                <span class=\"token operator\">&amp;&amp;</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Event event <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">.</span><span class=\"token function\">downFrom</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//循环倒退</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no event down from \"</span> <span class=\"token operator\">+</span> observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">pushParentState</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token comment\" spellcheck=\"true\">//分发生命周期方法</span>\n            observer<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">popParentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Event <span class=\"token function\">downFrom</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> State state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> CREATED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_DESTROY<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> STARTED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_STOP<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> RESUMED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_PAUSE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forwardPass</span><span class=\"token punctuation\">(</span>LifecycleOwner lifecycleOwner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Iterator<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token punctuation\">,</span> ObserverWithState<span class=\"token operator\">>></span> ascendingIterator <span class=\"token operator\">=</span>\n            mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">iteratorWithAdditions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ascendingIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mNewEventOccurred<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>LifecycleObserver<span class=\"token punctuation\">,</span> ObserverWithState<span class=\"token operator\">></span> entry <span class=\"token operator\">=</span> ascendingIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ObserverWithState observer <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>mNewEventOccurred\n                <span class=\"token operator\">&amp;&amp;</span> mObserverMap<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">pushParentState</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">final</span> Event event <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">.</span><span class=\"token function\">upFrom</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no event up from \"</span> <span class=\"token operator\">+</span> observer<span class=\"token punctuation\">.</span>mState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n              <span class=\"token comment\" spellcheck=\"true\">//分发生命周期方法</span>\n            observer<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">popParentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Event <span class=\"token function\">upFrom</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> State state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> INITIALIZED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_CREATE<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> CREATED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_START<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> STARTED<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> ON_RESUME<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"区分观察者类型-Lifecycling\"><a href=\"#区分观察者类型-Lifecycling\" class=\"headerlink\" title=\"区分观察者类型-Lifecycling\"></a>区分观察者类型-Lifecycling</h4><p>结论是无论哪种方式的观察者都通过适配器模式转换为LifecycleEventObserver类型，当分发事件时，只要执行  mLifecycleObserver.onStateChanged(owner, event); Lifecycling适配的多种类型都会得到相应的分发执行。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token function\">ObserverWithState</span><span class=\"token punctuation\">(</span>LifecycleObserver observer<span class=\"token punctuation\">,</span> State initialState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    mLifecycleObserver <span class=\"token operator\">=</span> Lifecycling<span class=\"token punctuation\">.</span><span class=\"token function\">lifecycleEventObserver</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mState <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>LifecycleOwner owner<span class=\"token punctuation\">,</span> Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    State newState <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mState <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>mState<span class=\"token punctuation\">,</span> newState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mState <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>适配器模式转换观察者包装成 LifecycleEventObserver</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> LifecycleEventObserver <span class=\"token function\">lifecycleEventObserver</span><span class=\"token punctuation\">(</span>Object object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">boolean</span> isLifecycleEventObserver <span class=\"token operator\">=</span> object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">LifecycleEventObserver</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> isFullLifecycleObserver <span class=\"token operator\">=</span> object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">FullLifecycleObserver</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//实现了这个连个接口</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLifecycleEventObserver <span class=\"token operator\">&amp;&amp;</span> isFullLifecycleObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FullLifecycleObserverAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>FullLifecycleObserver<span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>LifecycleEventObserver<span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFullLifecycleObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FullLifecycleObserverAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>FullLifecycleObserver<span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isLifecycleEventObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>LifecycleEventObserver<span class=\"token punctuation\">)</span> object<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">//实现的LifecycleObserver + 注解的方式，最新版本已经废弃，存在拖慢编译速度，反射效率低的问题</span>\n    <span class=\"token keyword\">final</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> klass <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> <span class=\"token function\">getObserverConstructorType</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 通过反射apt 生成的 adapter 类是否发生ClassNotFoundException异常来判断是否采用了apt</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> GENERATED_CALLBACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 采用的 apt 的方式</span>\n      <span class=\"token comment\" spellcheck=\"true\">//GeneratedAdapter 是生成类的接口</span>\n        List<span class=\"token operator\">&lt;</span>Constructor<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">GeneratedAdapter</span><span class=\"token operator\">>></span> constructors <span class=\"token operator\">=</span>\n                sClassToAdapters<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>klass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constructors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            GeneratedAdapter generatedAdapter <span class=\"token operator\">=</span> <span class=\"token function\">createGeneratedAdapter</span><span class=\"token punctuation\">(</span>\n                    constructors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleGeneratedAdapterObserver</span><span class=\"token punctuation\">(</span>generatedAdapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        GeneratedAdapter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> adapters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GeneratedAdapter</span><span class=\"token punctuation\">[</span>constructors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> constructors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            adapters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">createGeneratedAdapter</span><span class=\"token punctuation\">(</span>constructors<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeGeneratedAdaptersObserver</span><span class=\"token punctuation\">(</span>adapters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReflectiveGenericLifecycleObserver</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 运行时反射的方式</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>适配器转换为 LifecycleEventObserver 类型</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FullLifecycleObserverAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleEventObserver</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> FullLifecycleObserver mFullLifecycleObserver<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> LifecycleEventObserver mLifecycleEventObserver<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">FullLifecycleObserverAdapter</span><span class=\"token punctuation\">(</span>FullLifecycleObserver fullLifecycleObserver<span class=\"token punctuation\">,</span>\n            LifecycleEventObserver lifecycleEventObserver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mFullLifecycleObserver <span class=\"token operator\">=</span> fullLifecycleObserver<span class=\"token punctuation\">;</span>\n        mLifecycleEventObserver <span class=\"token operator\">=</span> lifecycleEventObserver<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleOwner source<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> ON_CREATE<span class=\"token operator\">:</span>\n                mFullLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ON_START<span class=\"token operator\">:</span>\n                mFullLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ON_RESUME<span class=\"token operator\">:</span>\n                mFullLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ON_PAUSE<span class=\"token operator\">:</span>\n                mFullLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ON_STOP<span class=\"token operator\">:</span>\n                mFullLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ON_DESTROY<span class=\"token operator\">:</span>\n                mFullLifecycleObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> ON_ANY<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ON_ANY must not been send by anybody\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mLifecycleEventObserver <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mLifecycleEventObserver<span class=\"token punctuation\">.</span><span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>apt 生成的方式转换为 LifecycleEventObserver类型</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleGeneratedAdapterObserver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleEventObserver</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> GeneratedAdapter mGeneratedAdapter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">SingleGeneratedAdapterObserver</span><span class=\"token punctuation\">(</span>GeneratedAdapter generatedAdapter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mGeneratedAdapter <span class=\"token operator\">=</span> generatedAdapter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleOwner source<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mGeneratedAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">callMethods</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mGeneratedAdapter<span class=\"token punctuation\">.</span><span class=\"token function\">callMethods</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CompositeGeneratedAdaptersObserver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleEventObserver</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> GeneratedAdapter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> mGeneratedAdapters<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">CompositeGeneratedAdaptersObserver</span><span class=\"token punctuation\">(</span>GeneratedAdapter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> generatedAdapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mGeneratedAdapters <span class=\"token operator\">=</span> generatedAdapters<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStateChanged</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleOwner source<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@NonNull</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        MethodCallsLogger logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MethodCallsLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>GeneratedAdapter mGenerated<span class=\"token operator\">:</span> mGeneratedAdapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mGenerated<span class=\"token punctuation\">.</span><span class=\"token function\">callMethods</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>GeneratedAdapter mGenerated<span class=\"token operator\">:</span> mGeneratedAdapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mGenerated<span class=\"token punctuation\">.</span><span class=\"token function\">callMethods</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"7-4-Application-实现\"><a href=\"#7-4-Application-实现\" class=\"headerlink\" title=\"7.4 Application 实现\"></a>7.4 Application 实现</h3><p>注册</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLifecycleApplication</span> <span class=\"token operator\">:</span> <span class=\"token function\">MultiDexApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    override fun <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//饿汉式单例获取 ProcessLifecycleOwner</span>\n        ProcessLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyLifecycleApplicationObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>通过 startup 初始化ProcessLifecycleInitializer</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>provider</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>androidx.startup.InitializationProvider<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>authorities</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>${applicationId}.androidx-startup<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>node</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>merge<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta-data</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>androidx.lifecycle.ProcessLifecycleInitializer<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>androidx.startup<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>provider</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>ProcessLifecycleInitializer</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessLifecycleInitializer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Initializer</span><span class=\"token operator\">&lt;</span>LifecycleOwner<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> LifecycleOwner <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LifecycleDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ProcessLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> ProcessLifecycleOwner<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> List<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Initializer</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">>>></span> <span class=\"token function\">dependencies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>ProcessLifecycleOwner 用于今天Application 的生命周期的变化</p>\n<pre class=\" language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProcessLifecycleOwner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleOwner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@VisibleForTesting</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> TIMEOUT_MS <span class=\"token operator\">=</span> <span class=\"token number\">700</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//mls</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// ground truth counters</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> mStartedCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> mResumedCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> mPauseSent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> mStopSent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Handler mHandler<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> LifecycleRegistry mRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Runnable mDelayedPauseRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dispatchPauseIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dispatchStopIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    ActivityInitializationListener mInitializationListener <span class=\"token operator\">=</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActivityInitializationListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">activityStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onResume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">activityResumed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> ProcessLifecycleOwner sInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProcessLifecycleOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * The LifecycleOwner for the whole application process. Note that if your application\n     * has multiple processes, this provider does not know about other processes.\n     *\n     * @return {@link LifecycleOwner} for the whole application.\n     */</span>\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> LifecycleOwner <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> sInstance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sInstance<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">activityStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mStartedCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mStartedCounter <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> mStopSent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mStopSent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">activityResumed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mResumedCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mResumedCounter <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mPauseSent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_RESUME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mPauseSent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">removeCallbacks</span><span class=\"token punctuation\">(</span>mDelayedPauseRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">activityPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mResumedCounter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mResumedCounter <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">postDelayed</span><span class=\"token punctuation\">(</span>mDelayedPauseRunnable<span class=\"token punctuation\">,</span> TIMEOUT_MS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">activityStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mStartedCounter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dispatchStopIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchPauseIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mResumedCounter <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mPauseSent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_PAUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">dispatchStopIfNeeded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mStartedCounter <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> mPauseSent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_STOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mStopSent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">ProcessLifecycleOwner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">attach</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Application app <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        app<span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token annotation punctuation\">@RequiresApi</span><span class=\"token punctuation\">(</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPreCreated</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">,</span>\n                    <span class=\"token annotation punctuation\">@Nullable</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// We need the ProcessLifecycleOwner to get ON_START and ON_RESUME precisely</span>\n                <span class=\"token comment\" spellcheck=\"true\">// before the first activity gets its LifecycleOwner started/resumed.</span>\n                <span class=\"token comment\" spellcheck=\"true\">// The activity's LifecycleOwner gets started/resumed via an activity registered</span>\n                <span class=\"token comment\" spellcheck=\"true\">// callback added in onCreate(). By adding our own activity registered callback in</span>\n                <span class=\"token comment\" spellcheck=\"true\">// onActivityPreCreated(), we get our callbacks first while still having the</span>\n                <span class=\"token comment\" spellcheck=\"true\">// right relative order compared to the Activity's onStart()/onResume() callbacks.</span>\n                activity<span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EmptyActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPostStarted</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">activityStarted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPostResumed</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">activityResumed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityCreated</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">,</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// Only use ReportFragment pre API 29 - after that, we can use the</span>\n                <span class=\"token comment\" spellcheck=\"true\">// onActivityPostStarted and onActivityPostResumed callbacks registered in</span>\n                <span class=\"token comment\" spellcheck=\"true\">// onActivityPreCreated()</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SDK_INT <span class=\"token operator\">&lt;</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    ReportFragment<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProcessListener</span><span class=\"token punctuation\">(</span>mInitializationListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityPaused</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">activityPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityStopped</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">activityStopped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> Lifecycle <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mRegistry<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>LifecycleDispatcher 用于为所有 Activity 注入ReportFragment，这样之后对于SDK 中的 Activity 只要实现 LifecycleOwner 就能实现生命周期可观察的能力。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LifecycleDispatcher</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> AtomicBoolean sInitialized <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicBoolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sInitialized<span class=\"token punctuation\">.</span><span class=\"token function\">getAndSet</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">registerActivityLifecycleCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatcherActivityCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"WeakerAccess\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@VisibleForTesting</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatcherActivityCallback</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EmptyActivityLifecycleCallbacks</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityCreated</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">,</span> Bundle savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ReportFragment<span class=\"token punctuation\">.</span><span class=\"token function\">injectIfNeededIn</span><span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivityStopped</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onActivitySaveInstanceState</span><span class=\"token punctuation\">(</span>Activity activity<span class=\"token punctuation\">,</span> Bundle outState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">LifecycleDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"7-5-Service-实现\"><a href=\"#7-5-Service-实现\" class=\"headerlink\" title=\"7.5 Service 实现\"></a>7.5 Service 实现</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLifecycleService</span> <span class=\"token operator\">:</span> <span class=\"token function\">LifecycleService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    init <span class=\"token punctuation\">{</span>\n        lifecycle<span class=\"token punctuation\">.</span><span class=\"token function\">addObserver</span><span class=\"token punctuation\">(</span><span class=\"token function\">MyLifecycleServiceObserver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>LifecycleService </p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LifecycleService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Service</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LifecycleOwner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> ServiceLifecycleDispatcher mDispatcher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceLifecycleDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@CallSuper</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">onServicePreSuperOnCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@CallSuper</span>\n    <span class=\"token annotation punctuation\">@Nullable</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> IBinder <span class=\"token function\">onBind</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> Intent intent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">onServicePreSuperOnBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token annotation punctuation\">@CallSuper</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Intent intent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">onServicePreSuperOnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> startId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// this method is added only to annotate it with @CallSuper.</span>\n    <span class=\"token comment\" spellcheck=\"true\">// In usual service super.onStartCommand is no-op, but in LifecycleService</span>\n    <span class=\"token comment\" spellcheck=\"true\">// it results in mDispatcher.onServicePreSuperOnStart() call, because</span>\n    <span class=\"token comment\" spellcheck=\"true\">// super.onStartCommand calls onStart().</span>\n    <span class=\"token annotation punctuation\">@CallSuper</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">onStartCommand</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Nullable</span> Intent intent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> startId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onStartCommand</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> startId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@CallSuper</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">onServicePreSuperOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">public</span> Lifecycle <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mDispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>ServiceLifecycleDispatcher</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceLifecycleDispatcher</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> LifecycleRegistry mRegistry<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Handler mHandler<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> DispatchRunnable mLastDispatchRunnable<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * @param provider {@link LifecycleOwner} for a service, usually it is a service itself\n     */</span>\n    <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"deprecation\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ServiceLifecycleDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleOwner provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LifecycleRegistry</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postDispatchRunnable</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mLastDispatchRunnable <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mLastDispatchRunnable<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        mLastDispatchRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DispatchRunnable</span><span class=\"token punctuation\">(</span>mRegistry<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mHandler<span class=\"token punctuation\">.</span><span class=\"token function\">postAtFrontOfQueue</span><span class=\"token punctuation\">(</span>mLastDispatchRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Must be a first call in {@link Service#onCreate()} method, even before super.onCreate call.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onServicePreSuperOnCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">postDispatchRunnable</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Must be a first call in {@link Service#onBind(Intent)} method, even before super.onBind\n     * call.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onServicePreSuperOnBind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">postDispatchRunnable</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Must be a first call in {@link Service#onStart(Intent, int)} or\n     * {@link Service#onStartCommand(Intent, int, int)} methods, even before\n     * a corresponding super call.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onServicePreSuperOnStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">postDispatchRunnable</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_START<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Must be a first call in {@link Service#onDestroy()} method, even before super.OnDestroy\n     * call.\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onServicePreSuperOnDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">postDispatchRunnable</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_STOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">postDispatchRunnable</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_DESTROY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * @return {@link Lifecycle} for the given {@link LifecycleOwner}\n     */</span>\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">public</span> Lifecycle <span class=\"token function\">getLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mRegistry<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DispatchRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> LifecycleRegistry mRegistry<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">final</span> Lifecycle<span class=\"token punctuation\">.</span>Event mEvent<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> mWasExecuted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">DispatchRunnable</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> LifecycleRegistry registry<span class=\"token punctuation\">,</span> Lifecycle<span class=\"token punctuation\">.</span>Event event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mRegistry <span class=\"token operator\">=</span> registry<span class=\"token punctuation\">;</span>\n            mEvent <span class=\"token operator\">=</span> event<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mWasExecuted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">handleLifecycleEvent</span><span class=\"token punctuation\">(</span>mEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                mWasExecuted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"8-链接\"><a href=\"#8-链接\" class=\"headerlink\" title=\"8. 链接\"></a>8. 链接</h2><ul>\n<li><p><a href=\"https://github.com/androidx/androidx/tree/androidx-main/lifecycle\" target=\"_blank\" rel=\"noopener\">Github | Lifecycle</a></p>\n</li>\n<li><p><a href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle\" target=\"_blank\" rel=\"noopener\">Android 开发者 | Lifecycle</a></p>\n</li>\n<li><p><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">用户指南</a> </p>\n</li>\n<li><p><a href=\"https://github.com/android/architecture-components-samples\" target=\"_blank\" rel=\"noopener\">代码示例</a> </p>\n</li>\n<li><p><a href=\"https://codelabs.developers.google.com/codelabs/android-lifecycles/index.html?index=#0\" target=\"_blank\" rel=\"noopener\">Codelab</a></p>\n</li>\n<li><p><a href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies\" target=\"_blank\" rel=\"noopener\">Lifecycle 版本说明</a></p>\n</li>\n<li><p><a href=\"https://github.com/googlecodelabs/android-lifecycles\" target=\"_blank\" rel=\"noopener\">googlecodelabs | android-lifecycles</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/52369540/what-is-lifecycle-observer-and-how-to-use-it-correctly\" target=\"_blank\" rel=\"noopener\">What is lifecycle observer and how to use it correctly?</a></p>\n</li>\n</ul>\n","site":{"data":{".DS_Store":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000s\u0000o\u0000nlg1Sco\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nlg1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmoDDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nmodDblob\u0000\u0000\u0000\b��^�P��A\u0000\u0000\u0000\u0007\u0000f\u0000f\u0000.\u0000j\u0000s\u0000o\u0000nph1Scomp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000 \u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\b\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000�\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\b\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/post_banner_jay.png\" alt=\"\"></p>\n<h1 id=\"Jetpack-Lifecycle-组件系详解第一篇：Lifecycle\"><a href=\"#Jetpack-Lifecycle-组件系详解第一篇：Lifecycle\" class=\"headerlink\" title=\"Jetpack | Lifecycle 组件系详解第一篇：Lifecycle\"></a>Jetpack | Lifecycle 组件系详解第一篇：Lifecycle</h1><p>Lifecycle细组件主要包括：Lifecycle、LiveData、ViewModle、其它扩展组件(process 、service)等。</p>\n<img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122005956.png\" alt=\"image-20211122005853174\" style=\"zoom:50%;\" />\n\n<h2 id=\"1-Lifecycle问题汇总\"><a href=\"#1-Lifecycle问题汇总\" class=\"headerlink\" title=\"1. Lifecycle问题汇总\"></a>1. Lifecycle问题汇总</h2><ul>\n<li>什么是 Lifecycle</li>\n<li>如何使用 Lifecycle 观察宿主状态</li>\n<li>Lifecycle 是如何分发宿状态的</li>\n<li>Fragment 是如何实现 Lifecycle 的</li>\n<li>Activity 是如何实现 Lifecycle 的</li>\n<li>Application 是如何实现 Lifecycle 的</li>\n<li>Service 是如何实现 Lifecycle 的</li>\n<li>View 是如何实现观察宿主 Lifecycle 的</li>\n<li>Lifecycle 涉及的依赖库是如何划分的</li>\n<li>Lifecycle 实现观察宿主状态有几种方式</li>\n<li>注解+反射/生成代码的方式为什么又被废弃了</li>\n<li>Activity 的生命周期分发为何通过 ReportFragment 实现</li>\n<li>Lifecycle Event 和 State 的关系</li>\n<li>在 onResume 方法中注册观察者，是否能观察到其它生命周期的回调</li>\n<li>分发宿状态过程中是如何同步 Event 和 State 的</li>\n</ul>\n<h2 id=\"2-Lifecycle是什么\"><a href=\"#2-Lifecycle是什么\" class=\"headerlink\" title=\"2. Lifecycle是什么\"></a>2. Lifecycle是什么</h2><p>Lifecycle 是一个对宿主生命周期的变化具有感知能力的组件 (Lifecycle-Aware Components) ，在 Android 中目前提供的可观察的宿主组件有 Activity / Fragment / Service / Application 等，除了jetpack 组件中内置的可观察的宿主我们也可以借助 LifeCycle 的能力自己实现可观察的宿主，例如 SDK 中的 Activity 是没有实现Lifecycle 的，此时我们就可以根据业务需求自定时实现了。</p>\n<p>Lifecycle 的核心实现思想是观察者模式，Jetpack 组件中的 Activity / Fragment 组件中都已经接入了 Lifecycle 中的被观察者者部分的代码，我们只需要实现自己的观察者然后在 Activity / Fragment 组件中注册我们的观察者就可以监听到生命周期事件的变化了。</p>\n<blockquote>\n<p>支持库 26.1.0 及更高版本中的 Fragment 和 Activity 已实现 <a href=\"https://developer.android.com/reference/androidx/lifecycle/LifecycleOwner\" target=\"_blank\" rel=\"noopener\"><code>LifecycleOwner</code></a> 接口。</p>\n</blockquote>\n<p>一种常见的应用场景是有些逻辑需要依赖在 Activity 和 Fragment 的生命周期方法中实现，通过 Lifecycle  组件就可以将这部分代码从生命周期方法中提取到单独的类中，达到解耦被观察者和观察者的目的，从而帮助开发者写出简洁易维护代码。</p>\n<blockquote>\n<p>观察者模式（Observer Design Pattern）也被称为发布订阅模式（Publish-Subscribe Design Pattern）</p>\n<p><strong>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。一般情况下，被依赖的对象叫作被观察者（Observable），依赖的对象叫作观察者（Observer）。</strong></p>\n<p>观察者模式属于行为型设计模式，行为型设计模式的目的是将不同的行为代码解耦，具体到观察者模式就是是将观察者和被观察者代码解耦。</p>\n<p>观察者模式的实现一般分为两个角色：Observable、Observer，两个角色一般都提供抽象层。</p>\n<p>被观察者部分的抽象层一般是抽象类，除了提供必要的抽象方法还提供添加、删除等复用的逻辑。</p>\n<p>观察者部分的抽象层一般是一个SAM（Single Abstract Method）接口，观察者可以实现该方法做出更新操作。</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211120233721.png\" alt=\"image-20211120233538055\"></p>\n<p>Lifecycle 是如何结合观察者模式实现 Activity 和 Fragment 组件的生命周期感知能力的</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png\" alt=\"\"></p>\n<p>Lifecycle 在实现被观察者时并没有采用传统的直接继承抽象类的方式，而是通过类似委托模式将被观察者的逻辑代码封装到了 LifecycleRegistry 类中，LifecycleRegistry 是真正的被观察者负责统一管理所有观察者的添加、删除、存储、分发等操作。当委托者（ Activity / Fragment）有生命周期事件产生时会通过受托者 LifecycleRegistry 执行具体的分发操作，从而实现委托者类的生命周期可感知能力。</p>\n<p>这样做的优势是符合单一原则，有利于被观察者侧的代码复用，也不用破坏 Activity/Fragment 组件的继承结构。</p>\n<h2 id=\"3-Lifecycle-有什么\"><a href=\"#3-Lifecycle-有什么\" class=\"headerlink\" title=\"3. Lifecycle 有什么\"></a>3. Lifecycle 有什么</h2><p>androidx.lifecycle 组下的组件,了解 lifecycle  有什么才能更好的运用。lifecycle 模块中除了自己实现观察者模式相关的代码</p>\n<table>\n<thead>\n<tr>\n<th>lifecycle-common <br />lifecycle-common-java8 <br />lifecycle-compiler<br />lifecycle-runtime <br />lifecycle-runtime-ktx <br />lifecycle-runtime-ktx- lint <br />lifecycle-runtime-testing</th>\n<th>lifecycle-livedata <br />lifecycle-livedata-core <br />lifecycle-livedata-core-ktx<br />lifecycle-livedata-core-ktx-lint <br />lifecycle-livedata-core-truth  <br />lifecycle-livedata-ktx<br />lifecycle-reactivestreams <br />lifecycle-reactivestreams-ktx</th>\n<th>lifecycle-viewmodel <br />lifecycle-viewmodel-compose <br />lifecycle-viewmodel-ktx <br />lifecycle-viewmodel-savedstate</th>\n<th>lifecycle-process <br />lifecycle-service <br />lifecycle-extensions</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lifecycle相关</td>\n<td>livedata 相关</td>\n<td>viewmodel相关</td>\n<td>其它扩展组件相关</td>\n</tr>\n<tr>\n<td>common-java8 已经废弃</td>\n<td>-</td>\n<td>-</td>\n<td>extensions 耦合重已经废弃</td>\n</tr>\n</tbody></table>\n<p>再来看一下其中的几个核心组件之间的依赖关系</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211122011323.jpeg\" alt=\"WechatIMG77\"></p>\n<p>开发时按需添加 Lifecycle 的依赖项</p>\n<pre><code class=\"groovy\">def lifecycle_version = &quot;2.4.0&quot;\n// ViewModel\nimplementation &quot;androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version&quot;\n// ViewModel utilities for Compose\nimplementation &quot;androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version&quot;\n// LiveData\nimplementation &quot;androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version&quot;\n// Lifecycles only (without ViewModel or LiveData)\nimplementation &quot;androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version&quot;\n// Saved state module for ViewModel\nimplementation &quot;androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version&quot;\n// Annotation processor\nkapt &quot;androidx.lifecycle:lifecycle-compiler:$lifecycle_version&quot;\n// alternately - if using Java8, use the following instead of lifecycle-compiler\nimplementation &quot;androidx.lifecycle:lifecycle-common-java8:$lifecycle_version&quot;\n// optional - helpers for implementing LifecycleOwner in a Service\nimplementation &quot;androidx.lifecycle:lifecycle-service:$lifecycle_version&quot;\n// optional - ProcessLifecycleOwner provides a lifecycle for the whole application process\nimplementation &quot;androidx.lifecycle:lifecycle-process:$lifecycle_version&quot;\n// optional - ReactiveStreams support for LiveData\nimplementation &quot;androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version&quot;</code></pre>\n<p>其它组件对lifecycle的依赖情况</p>\n<pre><code class=\"groovy\">implementation &#39;androidx.core:core-ktx:1.7.0&#39;</code></pre>\n<p>core-ktx api 了 core </p>\n<p>core api 了lifecycle-runtime</p>\n<p>lifecycle-runtime api 了 lifecycle-common</p>\n<pre><code class=\"groovy\">implementation &#39;androidx.appcompat:appcompat:1.3.0&#39;</code></pre>\n<p>appcompat api 了core、activity、fragment</p>\n<p>activity api 了 core、lifecycle-runtime、lifecycle-viewmodel、lifecycle-viewmodel-savedstate</p>\n<p>fragment api 了core、activity、lifecycle-livedata-core、lifecycle-viewmodel、lifecycle-viewmodel-savedstate</p>\n<p>lifecycle-runtime api 了 lifecycle-common</p>\n<p>lifecycle-livedata-core api 了  lifecycle-livedata</p>\n<p>所以一般情况下我们新建的Android 项目默认都会提供core-ktx、appcompat 这两个组件而他们又间接依赖了 lifecycle 系的组件</p>\n<p>依赖 appcompat 间接依赖的 lifecycle 系组件</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134326.png\" alt=\"image-20211121131315450\"></p>\n<p>依赖 core-ktx 间接依赖的 lifecycle 系组件</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121134339.png\" alt=\"image-20211121131403284\"></p>\n<h2 id=\"4-Lifecycle-应用\"><a href=\"#4-Lifecycle-应用\" class=\"headerlink\" title=\"4. Lifecycle 应用\"></a>4. Lifecycle 应用</h2><p>生命周期感知型组件可以实现在各种情况下更轻松地管理生命周期。下面列举几个例子：</p>\n<ul>\n<li>在粗粒度和细粒度位置更新之间切换。使用生命周期感知型组件可在位置应用可见时启用细粒度位置更新，并在应用位于后台时切换到粗粒度更新。</li>\n<li>停止和开始视频缓冲。使用生命周期感知型组件可尽快开始视频缓冲，但会推迟播放，直到应用完全启动。此外，应用销毁后，还可以使用生命周期感知型组件终止缓冲。</li>\n<li>开始和停止网络连接。借助生命周期感知型组件，可在应用位于前台时启用网络数据的实时更新（流式传输），并在应用进入后台时自动暂停。</li>\n<li>暂停和恢复动画可绘制资源。借助生命周期感知型组件，可在应用位于后台时暂停动画可绘制资源，并在应用位于前台后恢复可绘制资源。</li>\n<li>Handler 的消息移除。</li>\n<li>Presenter 的 attach&amp;detach View 。</li>\n<li>为其他三方库加持生命周期感知的能力，例如：RxJava 、EventBus等。</li>\n</ul>\n<h2 id=\"5-Lifecycle-怎么用\"><a href=\"#5-Lifecycle-怎么用\" class=\"headerlink\" title=\"5. Lifecycle 怎么用\"></a>5. Lifecycle 怎么用</h2><h3 id=\"5-1-观察者使用方式汇总\"><a href=\"#5-1-观察者使用方式汇总\" class=\"headerlink\" title=\"5.1 观察者使用方式汇总\"></a>5.1 观察者使用方式汇总</h3><p>Lifecycle 的以下使用方式是以  Activity 或者 Fragment 为宿主举例。</p>\n<ul>\n<li>方式一：运行时注解+反射<ul>\n<li>自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举标注生命周期方法；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li>方式二：编译时注解+生成辅助类(XXX_LifecycleAdapter)<ul>\n<li>添加注解处理器组件：lifecycle-compiler</li>\n<li>自定义 LifecycleObserver 观察者，用 OnLifecycleEvent 注解配合 Lifecycle.Event 枚举 标注生命周期方法；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li>方式三：实现 FullLifecycleObserver (非公共方法，自己可以实现一个)<ul>\n<li>自定义 FullLifecycleObserver 观察者，FullLifecycleObserver 是普通接口需要实现其中定义的所有生命周期方法；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li>方式四：实现 LifecycleEventObserver(推荐方式)<ul>\n<li>自定义 LifecycleEventObserver 观察者，通过实现 onStateChanged(LifecycleOwner ,Lifecycle.Event) 方法自行判断生命周期方法的回调；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n<li><strong>方式五：实现 DefaultLifecycleObserver (推荐方式)</strong><ul>\n<li>自定义 DefaultLifecycleObserver 观察者，DefaultLifecycleObserver 中通过java default 关键字都实现了方法体，所以只需实现需要的声明后期方法即可；</li>\n<li>在宿主 Activity 或者 Fragment 中通过 getLifecycle().addObserver() 方法注册定义的观察者；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>DefaultLifecycleObserver 接口中的 default 关键字</p>\n<p>default 关键字修饰的方法能够向接口添加新功能方法，必须提供方法体，并确保兼容实现这个接口的之前的类不用在接口的子类中进行逐个实现该方法。可以按需实现</p>\n<p>default是在需要给接口新增方法时，但是子类数量过多，或者子类没必要实现的场景下使用。 比如java8中的List接口，新增了sort()方法</p>\n<pre><code class=\"java\">//@since 1.8\npublic interface List&lt;E&gt; extends Collection&lt;E&gt; {\n...\ndefault void sort(Comparator&lt;? super E&gt; c) {\n   Object[] a = this.toArray();\n   Arrays.sort(a, (Comparator) c);\n   ListIterator&lt;E&gt; i = this.listIterator();\n   for (Object e : a) {\n       i.next();\n       i.set((E) e);\n   }\n}\n</code></pre>\n</blockquote>\n<h3 id=\"5-2-观察-Activity-Lifecycle\"><a href=\"#5-2-观察-Activity-Lifecycle\" class=\"headerlink\" title=\"5.2 观察 Activity Lifecycle\"></a>5.2 观察 Activity Lifecycle</h3><pre><code class=\"kotlin\">class MyLifecycleActivityObserver : DefaultLifecycleObserver {\n\n    override fun onStart(owner: LifecycleOwner) {\n        super.onStart(owner)\n        Log.d(&quot;MyLifecycleActivity&quot;, &quot;onStart&quot;)\n    }\n\n    override fun onStop(owner: LifecycleOwner) {\n        super.onStop(owner)\n        Log.d(&quot;MyLifecycleActivity&quot;, &quot;onStop&quot;)\n    }\n}</code></pre>\n<pre><code class=\"kotlin\">class MyLifecycleActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        addLifecycleObserver()\n    }\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MyLifecycleActivityObserver())\n    }\n}</code></pre>\n<h3 id=\"5-3-观察-SDK-Activity-Lifecycle\"><a href=\"#5-3-观察-SDK-Activity-Lifecycle\" class=\"headerlink\" title=\"5.3 观察 SDK Activity Lifecycle\"></a>5.3 观察 SDK Activity Lifecycle</h3><pre><code class=\"kotlin\">class MySdkActivity : Activity(), LifecycleOwner {\n\n    private lateinit var lifecycleRegistry: LifecycleRegistry\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycleRegistry = LifecycleRegistry(this)\n        addLifecycleObserver()\n        MySDKFragment.inject(this)\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MySDKActivityObserver())\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return lifecycleRegistry\n    }\n}\n\nclass MySDKActivityObserver : DefaultLifecycleObserver {\n\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        Log.i(&quot;SDKActivity&quot;, &quot;Observer onPause&quot;)\n    }\n\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        Log.i(&quot;SDKActivity&quot;, &quot;Observer onResume&quot;)\n\n    }\n}</code></pre>\n<h3 id=\"5-4-观察-Fragment-Lifecycle\"><a href=\"#5-4-观察-Fragment-Lifecycle\" class=\"headerlink\" title=\"5.4 观察 Fragment Lifecycle\"></a>5.4 观察 Fragment Lifecycle</h3><pre><code class=\"kotlin\">class MyLifecycleFragmentObserver : LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun connectListener() {\n        Log.i(&quot;MyLifecycleFragment&quot;, &quot;onResume&quot;)\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun disconnectListener() {\n        Log.i(&quot;MyLifecycleFragment&quot;, &quot;onPause&quot;)\n\n    }\n}</code></pre>\n<pre><code class=\"kotlin\">class MyLifecycleFragment : Fragment() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        addLifecycleObserver()\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MyLifecycleFragmentObserver())\n    }\n\n}</code></pre>\n<h3 id=\"5-5-观察-SDK-Fragment-Lifecycle\"><a href=\"#5-5-观察-SDK-Fragment-Lifecycle\" class=\"headerlink\" title=\"5.5 观察 SDK Fragment Lifecycle\"></a>5.5 观察 SDK Fragment Lifecycle</h3><pre><code class=\"kotlin\">class MySDKFragment : Fragment(), LifecycleOwner {\n\n    private lateinit var lifecycleRegistry: LifecycleRegistry\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        lifecycleRegistry = LifecycleRegistry(this)\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE)\n        addLifecycleObserver()\n    }\n\n    private fun addLifecycleObserver() {\n        lifecycle.addObserver(MySDKFragmentObserver())\n    }\n\n    companion object {\n        fun inject(activity: Activity) {\n            val manager = activity.fragmentManager\n            if (manager.findFragmentByTag(&quot;MyLifecycleFragment&quot;) == null) {\n                manager.beginTransaction()\n                    .add(MySDKFragment(), &quot;MyLifecycleFragment&quot;)\n                    .commit()\n                manager.executePendingTransactions()\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        Log.i(&quot;SDKFragment&quot;, &quot; onResume&quot;)\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME)\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        Log.i(&quot;SDKFragment&quot;, &quot; onPause&quot;)\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    }\n\n    override fun getLifecycle(): Lifecycle {\n        return lifecycleRegistry\n    }\n\n}\n\nclass MySDKFragmentObserver : DefaultLifecycleObserver {\n\n    override fun onPause(owner: LifecycleOwner) {\n        super.onPause(owner)\n        Log.i(&quot;SDKFragment&quot;, &quot;Observer onPause&quot;)\n    }\n\n    override fun onResume(owner: LifecycleOwner) {\n        super.onResume(owner)\n        Log.i(&quot;SDKFragment&quot;, &quot;Observer onResume&quot;)\n\n    }\n}</code></pre>\n<h3 id=\"5-6-观察-Service-Lifecycle\"><a href=\"#5-6-观察-Service-Lifecycle\" class=\"headerlink\" title=\"5.6 观察 Service Lifecycle\"></a>5.6 观察 Service Lifecycle</h3><pre><code class=\"kotlin\">public class MyLifecycleServiceObserver implements LifecycleEventObserver {\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        if (event == Lifecycle.Event.ON_START) {\n            Log.d(&quot;MyLifecycleService&quot;, &quot;onStart()&quot;);\n        } else if (event == Lifecycle.Event.ON_DESTROY) {\n            Log.d(&quot;MyLifecycleService&quot;, &quot;onDestroy()&quot;);\n        }\n    }\n}</code></pre>\n<pre><code class=\"kotlin\">public class MyLifecycleService extends LifecycleService {\n    public MyLifecycleService() {\n        getLifecycle().addObserver(new MyLifecycleServiceObserver());\n    }\n}</code></pre>\n<h3 id=\"5-7-观察-Application-Lifecycle\"><a href=\"#5-7-观察-Application-Lifecycle\" class=\"headerlink\" title=\"5.7 观察 Application Lifecycle\"></a>5.7 观察 Application Lifecycle</h3><pre><code class=\"kotlin\">class MyLifecycleApplicationObserver(private val application: Application) :\n    LifecycleObserver {\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    fun appInResumeState() {\n        Toast.makeText(application, &quot;In Foreground&quot;, Toast.LENGTH_LONG).show()\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    fun appInPauseState() {\n        Toast.makeText(application, &quot;In Background&quot;, Toast.LENGTH_LONG).show()\n    }\n}</code></pre>\n<pre><code class=\"kotlin\">public class MyLifecycleApplication extends MultiDexApplication {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        //饿汉式单例获取 ProcessLifecycleOwner\n        ProcessLifecycleOwner.get().getLifecycle().addObserver(new MyLifecycleApplicationObserver(this));\n    }\n}</code></pre>\n<h3 id=\"5-8-View-观察-Lifecycle\"><a href=\"#5-8-View-观察-Lifecycle\" class=\"headerlink\" title=\"5.8 View 观察 Lifecycle\"></a>5.8 View 观察 Lifecycle</h3><pre><code class=\"kotlin\">class MyLifecycleView @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyle: Int = 0\n) : View(context, attrs, defStyle) {\n    init {\n        addOnAttachStateChangeListener(object : OnAttachStateChangeListener {\n            override fun onViewAttachedToWindow(v: View?) {\n                Log.d(&quot;MyLifecycleView&quot;, &quot;onViewAttachedToWindow&quot;)\n                findViewTreeLifecycleOwner()?.lifecycle\n                    ?.addObserver(object : LifecycleEventObserver {\n                        override fun onStateChanged(\n                            source: LifecycleOwner,\n                            event: Lifecycle.Event\n                        ) {\n                            Log.d(&quot;MyLifecycleView&quot;, &quot;onStateChanged：source:$source, event: $event&quot;)\n                        }\n                    })\n            }\n\n            override fun onViewDetachedFromWindow(v: View?) {\n                Log.d(&quot;MyLifecycleView&quot;, &quot;onViewDetachedFromWindow&quot;)\n\n            }\n\n        })\n\n    }\n}</code></pre>\n<h3 id=\"5-9-各种方式的观察者的执行顺序\"><a href=\"#5-9-各种方式的观察者的执行顺序\" class=\"headerlink\" title=\"5.9 各种方式的观察者的执行顺序\"></a>5.9 各种方式的观察者的执行顺序</h3><ul>\n<li>DefaultLifecycleObserver 所有方法将在 [LifecycleOwner] 的生命周期回调方法被调用之前被调用，这里需要注意Fragment 生命周期的回调时机。</li>\n</ul>\n<ul>\n<li>LifecycleEventObserver onStateChanged 方法在当状态转换事件发生时调用。</li>\n<li>如果一个类同时实现了DefaultLifecycleObserver 和LifecycleEventObserver ，则首先调用DefaultLifecycleObserver方法，然后调用LifecycleEventObserver.onStateChanged(LifecycleOwner, Lifecycle.Event) 方法。</li>\n<li>如果一个类实现了这个接口并且同时使用了OnLifecycleEvent 注解，那么注解将被忽略。</li>\n</ul>\n<pre><code class=\"kotlin\">D/Life_Owner: onCreate\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Owner: onStart\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onResume\nD/Life_Observer: onResume\nD/Life_Observer: onStateChanged,event:ON_RESUME\nD/Life_Observer: onPause\nD/Life_Observer: onStateChanged,event:ON_PAUSE\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy</code></pre>\n<p>在Activity 的onPause 方法注册观察者，当宿主执行onPause时 观察者也是会从 onCreate 开始直到对齐当前状态，Lifecycle 内部做了同步和对齐的处理。</p>\n<pre><code>D/Life_Owner: onCreate\nD/Life_Owner: onStart\nD/Life_Owner: onResume\nD/Life_Observer: onCreate\nD/Life_Observer: onStateChanged,event:ON_CREATE\nD/Life_Observer: onStart\nD/Life_Observer: onStateChanged,event:ON_START\nD/Life_Owner: onPause\nD/Life_Observer: onStop\nD/Life_Observer: onStateChanged,event:ON_STOP\nD/Life_Owner: onStop\nD/Life_Observer: onDestroy\nD/Life_Observer: onStateChanged,event:ON_DESTROY\nD/Life_Owner: onDestroy</code></pre><h2 id=\"6-Lifecycle-最小原型设计\"><a href=\"#6-Lifecycle-最小原型设计\" class=\"headerlink\" title=\"6. Lifecycle 最小原型设计\"></a>6. Lifecycle 最小原型设计</h2><p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121181816.png\" alt=\"观察者模式\"></p>\n<h4 id=\"6-1-代码实现最小原型\"><a href=\"#6-1-代码实现最小原型\" class=\"headerlink\" title=\"6.1 代码实现最小原型\"></a>6.1 代码实现最小原型</h4><p>被观察者部分</p>\n<pre><code class=\"kotlin\">//抽象接口层\nabstract class Lifecycle {\n    abstract fun addObserver(observer: LifecycleObserver)\n    abstract fun removeObserver(observer: LifecycleObserver)\n    enum class State {\n        DESTROYED,\n        INITIALIZED,\n        CREATED,\n        STARTED,\n        RESUMED;\n    }\n\n    enum class Event {\n        ON_CREATE,\n        ON_START,\n        ON_RESUME,\n        ON_PAUSE,\n        ON_STOP,\n        ON_DESTROY,\n        ON_ANY;\n    }\n}\n//受托方\nclass LifecycleRegistry(private val lifecycleOwner: LifecycleOwner) : Lifecycle() {\n\n    private var lifecycleObserver: LifecycleObserver? = null\n\n    private val lifecycleObservers = arrayListOf&lt;LifecycleObserver&gt;()\n\n    override fun addObserver(observer: LifecycleObserver) {\n        lifecycleObservers.add(observer)\n        lifecycleObserver = observer\n    }\n\n    override fun removeObserver(observer: LifecycleObserver) {\n        lifecycleObservers.remove(observer)\n    }\n\n    fun handleLifecycleEvent(event: Event) {\n        lifecycleObservers.forEach {\n            if (it is LifecycleEventObserver) {\n                it.onStateChanged(lifecycleOwner, event)\n            }\n        }\n    }\n\n}</code></pre>\n<p>观察者部分</p>\n<pre><code class=\"kotlin\">interface LifecycleObserver {}\ninterface LifecycleEventObserver : LifecycleObserver {\n    fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event)\n}\ninterface DefaultLifecycleObserver : FullLifecycleObserver {\n\n    override fun onCreate(owner: LifecycleOwner) {}\n\n    override fun onStart(owner: LifecycleOwner) = Unit\n\n    override fun onResume(owner: LifecycleOwner) {}\n\n    override fun onPause(owner: LifecycleOwner) {}\n\n    override fun onStop(owner: LifecycleOwner) {}\n\n    override fun onDestroy(owner: LifecycleOwner) {}\n\n}</code></pre>\n<p>测试被观察者部分</p>\n<pre><code class=\"kotlin\">class Activity : LifecycleOwner {\n\n    private val lifecycleRegistry: LifecycleRegistry = LifecycleRegistry(this)\n\n    init {\n        lifecycleRegistry.addObserver(ActivityObserver())\n    }\n\n    override fun getLifecycle(): Lifecycle = lifecycleRegistry\n\n    fun onStart() {\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START)\n    }\n\n    fun onStop() {\n        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP)\n    }\n\n}</code></pre>\n<p>测试观察者部分</p>\n<pre><code class=\"kotlin\">class ActivityObserver : LifecycleEventObserver {\n    override fun onStateChanged(source: LifecycleOwner, event: Lifecycle.Event) {\n        println(&quot;source: $source, event: $event &quot;)\n    }\n}\n//运行测试\nfun main() {\n    val app = Activity()\n    app.onStart()\n    app.onStop()\n}</code></pre>\n<h2 id=\"7-Lifecycle-实现原理\"><a href=\"#7-Lifecycle-实现原理\" class=\"headerlink\" title=\"7. Lifecycle 实现原理\"></a>7. Lifecycle 实现原理</h2><h3 id=\"7-1-Fragment-的实现\"><a href=\"#7-1-Fragment-的实现\" class=\"headerlink\" title=\"7.1 Fragment 的实现\"></a>7.1 Fragment 的实现</h3><p>jetpack 中的 Fragment 组件已经被观察部分的接口 LifecycleOwner</p>\n<pre><code class=\"java\">//androidx.fragment.app.Fragment 中已经实现 LifecycleOwner \npublic class Fragment implements \n              ComponentCallbacks, \n                OnCreateContextMenuListener, \n                LifecycleOwner,\n        ViewModelStoreOwner, \n                HasDefaultViewModelProviderFactory, \n                SavedStateRegistryOwner,\n        ActivityResultCaller {...}\n        //通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类\n    @Override\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mLifecycleRegistry;\n    }\n\n   LifecycleRegistry mLifecycleRegistry;\n    //构造函数中进行了受托者 LifecycleRegistry 的初始化\n   public Fragment() initLifecycle();}\n   private void initLifecycle() {\n        mLifecycleRegistry = new LifecycleRegistry(this);\n    }\n\n    //当发生生命周期事件时执通过委托类分发该事件到所有观察者中\n void performCreate(Bundle savedInstanceState) {\n        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n  }</code></pre>\n<p>Fragment 的生命周期感知实现很简单，就是委托给 mLifecycleRegistry 全权负责</p>\n<h3 id=\"7-2-Activity-实现\"><a href=\"#7-2-Activity-实现\" class=\"headerlink\" title=\"7.2 Activity 实现\"></a>7.2 Activity 实现</h3><pre><code class=\"java\">//androidx.core.app.ComponentActivity，@hide标注，不对外使用，只做了 Lifecycle 和 KeyEvent 的封装\npublic class ComponentActivity extends Activity implements\n        LifecycleOwner,\n        KeyEventDispatcher.Component {...}</code></pre>\n<pre><code class=\"java\">//androidx.activity.ComponentActivity，以上特性 + 集成了 Jitpack 的其它组件，例如：Lifecycle，ViewModel等\npublic class ComponentActivity extends androidx.core.app.ComponentActivity implements\n        ContextAware,\n        LifecycleOwner,\n        ViewModelStoreOwner,\n        HasDefaultViewModelProviderFactory,\n        SavedStateRegistryOwner,\n        OnBackPressedDispatcherOwner,\n        ActivityResultRegistryOwner,\n        ActivityResultCaller {\n        //通过覆写 LifecycleOwner 的 getLifecycle 方法向外暴露宿主的生命周期管理类\n        private final LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);\n                 public Lifecycle getLifecycle() {\n                return mLifecycleRegistry;\n            }\n        protected void onCreate(@Nullable Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n              // ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知\n            ReportFragment.injectIfNeededIn(this);\n            if (mContentLayoutId != 0) {\n                setContentView(mContentLayoutId);\n            }\n    }\n}</code></pre>\n<pre><code class=\"java\">//androidx.fragment.app.FragmentActivity，以上特性 + 简化Fragment 的使用，例如：FragmentManager\npublic class FragmentActivity extends ComponentActivity implements\n        ActivityCompat.OnRequestPermissionsResultCallback,\n        ActivityCompat.RequestPermissionsRequestCodeValidator {...}</code></pre>\n<pre><code class=\"java\">//androidx.appcompat.app.AppCompatActivity 以上特性 + 简化 Material 设计，例如主题、暗黑、导航条等\npublic class AppCompatActivity extends FragmentActivity implements \n              AppCompatCallback,\n        TaskStackBuilder.SupportParentable, \n                ActionBarDrawerToggle.DelegateProvider {...}</code></pre>\n<p>androidx.activity 组件下的 <strong>ComponentActivity</strong> 可以说是 androidx 系或者说是 Jetpack 开发套件中的最顶层 Activity 基类了，可以看到 ComponentActivity 类中已经实现了 LifecycleOwner，所以和 Fragment 一样将被观察者的逻辑委托给了LifecycleRegistry。</p>\n<p>但是我们在ComponentActivity 生命周期的回调方法中并没有看到 LifecycleRegistry 执行的分发操作。在 onCreate 方法中我们看到ReportFragment.injectIfNeededIn(this); 这句代码，这里就是 Activity 声明周期可感知做的的兼容处理，ReportFragment 是继承自 sdk 中的 Fragment, 所以这里可以兼容 SDK 中的 Activity 也能实现声明周期感知。</p>\n<h4 id=\"ReportFragment\"><a href=\"#ReportFragment\" class=\"headerlink\" title=\"ReportFragment\"></a>ReportFragment</h4><pre><code class=\"java\">        public static void injectIfNeededIn(Activity activity) {\n        if (Build.VERSION.SDK_INT &gt;= 29) {\n            // 在 API 29+ 上，可以直接注册 Activity 中的 registerActivityLifecycleCallbacks 回调方法获取Activity 的生命周期                回调。\n            LifecycleCallbacks.registerIn(activity);\n        }\n        //在 API 29 之前和进程的宿主 ProcessLifecycleOwner 都是通过内嵌一个空的 Fragment 获间接取 Activity 的生命周期回调。\n        android.app.FragmentManager manager = activity.getFragmentManager();\n        if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) {\n            manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();\n            manager.executePendingTransactions();\n        }\n        }    \n        //29以上分发的方式\n        @RequiresApi(29)\n    static class LifecycleCallbacks implements Application.ActivityLifecycleCallbacks {\n        static void registerIn(Activity activity) {\n            activity.registerActivityLifecycleCallbacks(new LifecycleCallbacks());\n        }\n\n        @Override\n        public void onActivityPostCreated(@NonNull Activity activity,\n                @Nullable Bundle savedInstanceState) {\n            dispatch(activity, Lifecycle.Event.ON_CREATE);\n        }\n\n        @Override\n        public void onActivityPostStarted(@NonNull Activity activity) {\n            dispatch(activity, Lifecycle.Event.ON_START);\n        }\n        @Override\n        public void onActivityPreDestroyed(@NonNull Activity activity) {\n            dispatch(activity, Lifecycle.Event.ON_DESTROY);\n        }\n\n        @Override\n        public void onActivityDestroyed(@NonNull Activity activity) {\n        }\n    }\n\n\n\n        //Fragment 声明周期方法触发是\n    @Override\n    public void onStart() {\n        super.onStart();\n        dispatchStart(mProcessListener);// 进程29以下需要需要的\n        dispatch(Lifecycle.Event.ON_START);// 分发29以下 Avtivity \n    }\n\n   private void dispatch(@NonNull Lifecycle.Event event) {\n        if (Build.VERSION.SDK_INT &lt; 29) {\n            dispatch(getActivity(), event);\n        }\n    }\n    static void dispatch(@NonNull Activity activity, @NonNull Lifecycle.Event event) {\n        if (activity instanceof LifecycleRegistryOwner) {\n            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);\n            return;\n        }\n\n        if (activity instanceof LifecycleOwner) {\n            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();\n            if (lifecycle instanceof LifecycleRegistry) {\n                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event); // 29以下最终的分发方法\n            }\n        }\n    }\n</code></pre>\n<p>总的来说 Activity 将生命周期方法通知给订阅者的方式有别于 Fragment 的直接在生命周期回调中委托给 mLifecycleRegistry 全权负责。Activity 的方式显现复杂，搞复杂的主要原因也是为了兼容低版本和方便移植不得不做的。</p>\n<p>根据SDK版本可分为两种方式，大于等于29(Androi 10) 以上是通过  activity.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks) 方式注册生命周期回调方法的方式获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。</p>\n<p>29(Androi 10) 以下是通过内嵌一个空的 Fragment 获间接获取 Activity 的生命周期回调，然后再回调中在通过mLifecycleRegistry 通知订阅者。</p>\n<h3 id=\"7-3-LifecycleRegistry-真正的被观察者\"><a href=\"#7-3-LifecycleRegistry-真正的被观察者\" class=\"headerlink\" title=\"7.3 LifecycleRegistry-真正的被观察者\"></a>7.3 LifecycleRegistry-真正的被观察者</h3><p>LifecycleRegistry 通常被 Fragments 和 Activity 组件使用。 如果有自定义 LifecycleOwner的需求也可以直接使用它。</p>\n<p>LifecycleRegistry  可以看做是Fragment 和 Activity 实现生命周期可感知的受托方。所有的被观察的逻辑都在这里实现。</p>\n<h4 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h4><pre><code class=\"java\">private LifecycleRegistry(@NonNull LifecycleOwner provider, boolean enforceMainThread) {\n    mLifecycleOwner = new WeakReference&lt;&gt;(provider); // 宿主类通过弱引用包裹\n    mState = INITIALIZED;\n    mEnforceMainThread = enforceMainThread;\n}\nLifecycleOwner lifecycleOwner = mLifecycleOwner.get();\nif (lifecycleOwner == null) {\n    throw new IllegalStateException(&quot;LifecycleOwner of this LifecycleRegistry is already&quot;\n            + &quot;garbage collected. It is too late to change lifecycle state.&quot;);\n}</code></pre>\n<p>宿主类通过弱引用包裹，当方式GC时会回收宿主类避免内存泄漏的产生，每次获取宿主时都会先判空，如果被GC了是不会继续执行的。</p>\n<h4 id=\"添加观察者\"><a href=\"#添加观察者\" class=\"headerlink\" title=\"添加观察者\"></a>添加观察者</h4><pre><code class=\"java\">//宿主中向LifecycleRegistry 中添加观察者\nlifecycle.addObserver(MyLifecycleActivityObserver())</code></pre>\n<pre><code class=\"java\">//缓存观察者的数据容器\nprivate FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =\n            new FastSafeIterableMap&lt;&gt;();\n\n//对分发事件的封装\nstatic class ObserverWithState {\n    State mState;\n    LifecycleEventObserver mLifecycleObserver;\n\n    ObserverWithState(LifecycleObserver observer, State initialState) {\n        mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);\n        mState = initialState;\n    }\n\n    void dispatchEvent(LifecycleOwner owner, Event event) {\n          //根据事件获取状态\n        State newState = event.getTargetState();\n        mState = min(mState, newState);\n        mLifecycleObserver.onStateChanged(owner, event); //分发\n        mState = newState; //前进一个状态\n    }\n}\n\n@Override\npublic void addObserver(@NonNull LifecycleObserver observer) {\n      //初始值状态为：mState = INITIALIZED;\n    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;\n      //包装观察者\n    ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);\n    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);\n        //之前缓存过了，直接返回\n    if (previous != null) {\n        return;\n    }\n      //宿主被GC了\n    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n    if (lifecycleOwner == null) {\n        // it is null we should be destroyed. Fallback quickly\n        return;\n    }\n        //\n    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;\n    State targetState = calculateTargetState(observer);//计算出宿主当前的状态\n    mAddingObserverCounter++;\n      //同步到宿主当前的状态，例如在 onResume 方法注册的观察者，之前的生命周期方法也会回调\n    while ((statefulObserver.mState.compareTo(targetState) &lt; 0 //比较状态，是否小于宿主的状态,枚举类根据 ordinal 序号进行比较，越靠后的序号越大\n            &amp;&amp; mObserverMap.contains(observer))) {\n        pushParentState(statefulObserver.mState);\n          //向前移动一个生命周期方法，ON_CREATE-ON_START-ON_RESUME 知道对齐宿主\n        final Event event = Event.upFrom(statefulObserver.mState);\n        if (event == null) {\n            throw new IllegalStateException(&quot;no event up from &quot; + statefulObserver.mState);\n        }\n          //每次向前移动一个生命周期方法就分发落后的生命周期方法\n        statefulObserver.dispatchEvent(lifecycleOwner, event);\n        popParentState();\n        // mState / subling may have been changed recalculate\n        targetState = calculateTargetState(observer);\n    }\n\n    if (!isReentrance) {\n        // we do sync only on the top level.\n        sync();\n    }\n    mAddingObserverCounter--;\n}\n\n@Nullable\npublic static Event upFrom(@NonNull State state) {\n    switch (state) {\n        case INITIALIZED:\n            return ON_CREATE;\n        case CREATED:\n            return ON_START;\n        case STARTED:\n            return ON_RESUME;\n        default:\n            return null;\n    }\n}\n</code></pre>\n<p>向前同步时：先根据状态推倒事件，分发是根据事件推导出状态，再更新状态。</p>\n<p>假设宿主中是在onResume 方法中注册的观察者，那么他的同步流程应该是怎样的呢？</p>\n<p>观察者最终会受到onCreate-onStart-onRsume 三个回到方法。</p>\n<h4 id=\"State-和-Event\"><a href=\"#State-和-Event\" class=\"headerlink\" title=\"State 和 Event\"></a>State 和 Event</h4><p>针对Lifecycle 中 State 和 Event 的对应关系我们通过官方提供的流转图分析一下。</p>\n<p>Lifecycle 接口中提供两个枚举：State表示宿主状态，Event表示宿主生命周期事件。</p>\n<pre><code class=\"java\">enum class State {\n    DESTROYED,\n    INITIALIZED,\n    CREATED,\n    STARTED,\n    RESUMED;\n}\nenum class Event {\n    ON_CREATE,\n    ON_START,\n    ON_RESUME,\n    ON_PAUSE,\n    ON_STOP,\n    ON_DESTROY,\n    ON_ANY;\n}</code></pre>\n<p>两个过程：前进和后腿</p>\n<p>前进：INITIALIZED-ON_CREATE-CREATED-ON_START-STARTED-ON_RESUME-RESUMED</p>\n<p>倒退：RESUMED-ON_PAUSE-STARTED-ON_STOP-CREATED-ON_DESTROY-DESTROYED</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211121224101.svg\" alt=\"生命周期状态示意图\"></p>\n<p>状态是图中的节点，事件可以看作这些节点之间的边。</p>\n<p>通过事件获取状态</p>\n<pre><code class=\"java\">public State getTargetState() {\n    switch (this) {\n        case ON_CREATE:\n        case ON_STOP:\n            return State.CREATED;\n        case ON_START:\n        case ON_PAUSE:\n            return State.STARTED;\n        case ON_RESUME:\n            return State.RESUMED;\n        case ON_DESTROY:\n            return State.DESTROYED;\n        case ON_ANY:\n            break;\n    }\n    throw new IllegalArgumentException(this + &quot; has no target state&quot;);\n}</code></pre>\n<p>如果上面的图看不太明白，看看下面这个就清除它们的对应关系了。</p>\n<p><img src=\"https://raw.githubusercontent.com/jaydroid1024/jay_image_repo/main/img/20211027015118.jpeg\" alt=\"img\"></p>\n<h4 id=\"通知观察者\"><a href=\"#通知观察者\" class=\"headerlink\" title=\"通知观察者\"></a>通知观察者</h4><pre><code class=\"java\">public void handleLifecycleEvent(@NonNull Lifecycle.Event event) {\n    enforceMainThreadIfNeeded(&quot;handleLifecycleEvent&quot;);\n      //根据事件推导状态，再执行移动\n    moveToState(event.getTargetState());\n}\n//条件的判断\nprivate void moveToState(State next) {\n    if (mState == next) {\n        return;\n    }\n    mState = next;\n    if (mHandlingEvent || mAddingObserverCounter != 0) {\n        mNewEventOccurred = true;\n        // we will figure out what to do on upper level.\n        return;\n    }\n    mHandlingEvent = true;\n    sync();\n    mHandlingEvent = false;\n}\n\nprivate void sync() {\n    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();\n    if (lifecycleOwner == null) {\n        throw new IllegalStateException(&quot;LifecycleOwner of this LifecycleRegistry is already&quot;\n                + &quot;garbage collected. It is too late to change lifecycle state.&quot;);\n    }\n    while (!isSynced()) {\n        mNewEventOccurred = false;\n        // mState 表示宿主的状态，比观察者的小说明是后腿流程 onPause-onStop\n        if (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; 0) {\n            backwardPass(lifecycleOwner);\n        }\n        Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();\n        // 前进流程\n          if (!mNewEventOccurred &amp;&amp; newest != null\n                &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; 0) {\n            forwardPass(lifecycleOwner);\n        }\n    }\n    mNewEventOccurred = false;\n}\n//while 循环的条件，是否都同步完了\nprivate boolean isSynced() {\n    if (mObserverMap.size() == 0) {\n        return true;\n    }\n    State eldestObserverState = mObserverMap.eldest().getValue().mState;\n    State newestObserverState = mObserverMap.newest().getValue().mState;\n    return eldestObserverState == newestObserverState &amp;&amp; mState == newestObserverState;\n}</code></pre>\n<p>前进和后腿</p>\n<pre><code class=\"java\">\nprivate void backwardPass(LifecycleOwner lifecycleOwner) {\n    Iterator&lt;Map.Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =\n            mObserverMap.descendingIterator();\n    while (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) {\n        Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();\n        ObserverWithState observer = entry.getValue();\n        while ((observer.mState.compareTo(mState) &gt; 0 &amp;&amp; !mNewEventOccurred\n                &amp;&amp; mObserverMap.contains(entry.getKey()))) {\n            Event event = Event.downFrom(observer.mState); //循环倒退\n            if (event == null) {\n                throw new IllegalStateException(&quot;no event down from &quot; + observer.mState);\n            }\n            pushParentState(event.getTargetState());\n              //分发生命周期方法\n            observer.dispatchEvent(lifecycleOwner, event);\n            popParentState();\n        }\n    }\n}\npublic static Event downFrom(@NonNull State state) {\n    switch (state) {\n        case CREATED:\n            return ON_DESTROY;\n        case STARTED:\n            return ON_STOP;\n        case RESUMED:\n            return ON_PAUSE;\n        default:\n            return null;\n    }\n}\n\n\nprivate void forwardPass(LifecycleOwner lifecycleOwner) {\n    Iterator&lt;Map.Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =\n            mObserverMap.iteratorWithAdditions();\n    while (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) {\n        Map.Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();\n        ObserverWithState observer = entry.getValue();\n        while ((observer.mState.compareTo(mState) &lt; 0 &amp;&amp; !mNewEventOccurred\n                &amp;&amp; mObserverMap.contains(entry.getKey()))) {\n            pushParentState(observer.mState);\n            final Event event = Event.upFrom(observer.mState);\n            if (event == null) {\n                throw new IllegalStateException(&quot;no event up from &quot; + observer.mState);\n            }\n              //分发生命周期方法\n            observer.dispatchEvent(lifecycleOwner, event);\n            popParentState();\n        }\n    }\n}\n\npublic static Event upFrom(@NonNull State state) {\n    switch (state) {\n        case INITIALIZED:\n            return ON_CREATE;\n        case CREATED:\n            return ON_START;\n        case STARTED:\n            return ON_RESUME;\n        default:\n            return null;\n    }\n}</code></pre>\n<h4 id=\"区分观察者类型-Lifecycling\"><a href=\"#区分观察者类型-Lifecycling\" class=\"headerlink\" title=\"区分观察者类型-Lifecycling\"></a>区分观察者类型-Lifecycling</h4><p>结论是无论哪种方式的观察者都通过适配器模式转换为LifecycleEventObserver类型，当分发事件时，只要执行  mLifecycleObserver.onStateChanged(owner, event); Lifecycling适配的多种类型都会得到相应的分发执行。</p>\n<pre><code class=\"java\">ObserverWithState(LifecycleObserver observer, State initialState) {\n    mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);\n    mState = initialState;\n}\nvoid dispatchEvent(LifecycleOwner owner, Event event) {\n    State newState = event.getTargetState();\n    mState = min(mState, newState);\n    mLifecycleObserver.onStateChanged(owner, event);\n    mState = newState;\n}</code></pre>\n<p>适配器模式转换观察者包装成 LifecycleEventObserver</p>\n<pre><code class=\"java\">static LifecycleEventObserver lifecycleEventObserver(Object object) {\n    boolean isLifecycleEventObserver = object instanceof LifecycleEventObserver;\n    boolean isFullLifecycleObserver = object instanceof FullLifecycleObserver;\n      //实现了这个连个接口\n    if (isLifecycleEventObserver &amp;&amp; isFullLifecycleObserver) {\n        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object,\n                (LifecycleEventObserver) object);\n    }\n    if (isFullLifecycleObserver) {\n        return new FullLifecycleObserverAdapter((FullLifecycleObserver) object, null);\n    }\n\n    if (isLifecycleEventObserver) {\n        return (LifecycleEventObserver) object;\n    }\n      //实现的LifecycleObserver + 注解的方式，最新版本已经废弃，存在拖慢编译速度，反射效率低的问题\n    final Class&lt;?&gt; klass = object.getClass();\n    int type = getObserverConstructorType(klass); // 通过反射apt 生成的 adapter 类是否发生ClassNotFoundException异常来判断是否采用了apt\n    if (type == GENERATED_CALLBACK) { // 采用的 apt 的方式\n      //GeneratedAdapter 是生成类的接口\n        List&lt;Constructor&lt;? extends GeneratedAdapter&gt;&gt; constructors =\n                sClassToAdapters.get(klass);\n        if (constructors.size() == 1) {\n            GeneratedAdapter generatedAdapter = createGeneratedAdapter(\n                    constructors.get(0), object);\n            return new SingleGeneratedAdapterObserver(generatedAdapter);\n        }\n        GeneratedAdapter[] adapters = new GeneratedAdapter[constructors.size()];\n        for (int i = 0; i &lt; constructors.size(); i++) {\n            adapters[i] = createGeneratedAdapter(constructors.get(i), object);\n        }\n        return new CompositeGeneratedAdaptersObserver(adapters);\n    }\n    return new ReflectiveGenericLifecycleObserver(object); // 运行时反射的方式\n}</code></pre>\n<p>适配器转换为 LifecycleEventObserver 类型</p>\n<pre><code class=\"java\">class FullLifecycleObserverAdapter implements LifecycleEventObserver {\n\n    private final FullLifecycleObserver mFullLifecycleObserver;\n    private final LifecycleEventObserver mLifecycleEventObserver;\n\n    FullLifecycleObserverAdapter(FullLifecycleObserver fullLifecycleObserver,\n            LifecycleEventObserver lifecycleEventObserver) {\n        mFullLifecycleObserver = fullLifecycleObserver;\n        mLifecycleEventObserver = lifecycleEventObserver;\n    }\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        switch (event) {\n            case ON_CREATE:\n                mFullLifecycleObserver.onCreate(source);\n                break;\n            case ON_START:\n                mFullLifecycleObserver.onStart(source);\n                break;\n            case ON_RESUME:\n                mFullLifecycleObserver.onResume(source);\n                break;\n            case ON_PAUSE:\n                mFullLifecycleObserver.onPause(source);\n                break;\n            case ON_STOP:\n                mFullLifecycleObserver.onStop(source);\n                break;\n            case ON_DESTROY:\n                mFullLifecycleObserver.onDestroy(source);\n                break;\n            case ON_ANY:\n                throw new IllegalArgumentException(&quot;ON_ANY must not been send by anybody&quot;);\n        }\n        if (mLifecycleEventObserver != null) {\n            mLifecycleEventObserver.onStateChanged(source, event);\n        }\n    }\n}</code></pre>\n<p>apt 生成的方式转换为 LifecycleEventObserver类型</p>\n<pre><code class=\"java\">class SingleGeneratedAdapterObserver implements LifecycleEventObserver {\n\n    private final GeneratedAdapter mGeneratedAdapter;\n\n    SingleGeneratedAdapterObserver(GeneratedAdapter generatedAdapter) {\n        mGeneratedAdapter = generatedAdapter;\n    }\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        mGeneratedAdapter.callMethods(source, event, false, null);\n        mGeneratedAdapter.callMethods(source, event, true, null);\n    }\n}\n\nclass CompositeGeneratedAdaptersObserver implements LifecycleEventObserver {\n\n    private final GeneratedAdapter[] mGeneratedAdapters;\n\n    CompositeGeneratedAdaptersObserver(GeneratedAdapter[] generatedAdapters) {\n        mGeneratedAdapters = generatedAdapters;\n    }\n\n    @Override\n    public void onStateChanged(@NonNull LifecycleOwner source, @NonNull Lifecycle.Event event) {\n        MethodCallsLogger logger = new MethodCallsLogger();\n        for (GeneratedAdapter mGenerated: mGeneratedAdapters) {\n            mGenerated.callMethods(source, event, false, logger);\n        }\n        for (GeneratedAdapter mGenerated: mGeneratedAdapters) {\n            mGenerated.callMethods(source, event, true, logger);\n        }\n    }\n}</code></pre>\n<h3 id=\"7-4-Application-实现\"><a href=\"#7-4-Application-实现\" class=\"headerlink\" title=\"7.4 Application 实现\"></a>7.4 Application 实现</h3><p>注册</p>\n<pre><code class=\"java\">class MyLifecycleApplication : MultiDexApplication() {\n    override fun onCreate() {\n        super.onCreate()\n        //饿汉式单例获取 ProcessLifecycleOwner\n        ProcessLifecycleOwner.get().lifecycle.addObserver(MyLifecycleApplicationObserver(this))\n    }\n}</code></pre>\n<p>通过 startup 初始化ProcessLifecycleInitializer</p>\n<pre><code class=\"xml\">&lt;provider\n    android:name=&quot;androidx.startup.InitializationProvider&quot;\n    android:authorities=&quot;${applicationId}.androidx-startup&quot;\n    android:exported=&quot;false&quot;\n    tools:node=&quot;merge&quot; &gt;\n    &lt;meta-data\n        android:name=&quot;androidx.lifecycle.ProcessLifecycleInitializer&quot;\n        android:value=&quot;androidx.startup&quot; /&gt;\n&lt;/provider&gt;</code></pre>\n<p>ProcessLifecycleInitializer</p>\n<pre><code class=\"java\">public final class ProcessLifecycleInitializer implements Initializer&lt;LifecycleOwner&gt; {\n\n    @NonNull\n    @Override\n    public LifecycleOwner create(@NonNull Context context) {\n        LifecycleDispatcher.init(context);\n        ProcessLifecycleOwner.init(context);\n        return ProcessLifecycleOwner.get();\n    }\n\n    @NonNull\n    @Override\n    public List&lt;Class&lt;? extends Initializer&lt;?&gt;&gt;&gt; dependencies() {\n        return Collections.emptyList();\n    }\n}</code></pre>\n<p>ProcessLifecycleOwner 用于今天Application 的生命周期的变化</p>\n<pre><code class=\"java\">\npublic class ProcessLifecycleOwner implements LifecycleOwner {\n\n    @VisibleForTesting\n    static final long TIMEOUT_MS = 700; //mls\n\n    // ground truth counters\n    private int mStartedCounter = 0;\n    private int mResumedCounter = 0;\n\n    private boolean mPauseSent = true;\n    private boolean mStopSent = true;\n\n    private Handler mHandler;\n    private final LifecycleRegistry mRegistry = new LifecycleRegistry(this);\n\n    private Runnable mDelayedPauseRunnable = new Runnable() {\n        @Override\n        public void run() {\n            dispatchPauseIfNeeded();\n            dispatchStopIfNeeded();\n        }\n    };\n\n    ActivityInitializationListener mInitializationListener =\n            new ActivityInitializationListener() {\n                @Override\n                public void onCreate() {\n                }\n\n                @Override\n                public void onStart() {\n                    activityStarted();\n                }\n\n                @Override\n                public void onResume() {\n                    activityResumed();\n                }\n            };\n\n    private static final ProcessLifecycleOwner sInstance = new ProcessLifecycleOwner();\n\n    /**\n     * The LifecycleOwner for the whole application process. Note that if your application\n     * has multiple processes, this provider does not know about other processes.\n     *\n     * @return {@link LifecycleOwner} for the whole application.\n     */\n    @NonNull\n    public static LifecycleOwner get() {\n        return sInstance;\n    }\n\n    static void init(Context context) {\n        sInstance.attach(context);\n    }\n\n    void activityStarted() {\n        mStartedCounter++;\n        if (mStartedCounter == 1 &amp;&amp; mStopSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);\n            mStopSent = false;\n        }\n    }\n\n    void activityResumed() {\n        mResumedCounter++;\n        if (mResumedCounter == 1) {\n            if (mPauseSent) {\n                mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME);\n                mPauseSent = false;\n            } else {\n                mHandler.removeCallbacks(mDelayedPauseRunnable);\n            }\n        }\n    }\n\n    void activityPaused() {\n        mResumedCounter--;\n        if (mResumedCounter == 0) {\n            mHandler.postDelayed(mDelayedPauseRunnable, TIMEOUT_MS);\n        }\n    }\n\n    void activityStopped() {\n        mStartedCounter--;\n        dispatchStopIfNeeded();\n    }\n\n    void dispatchPauseIfNeeded() {\n        if (mResumedCounter == 0) {\n            mPauseSent = true;\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE);\n        }\n    }\n\n    void dispatchStopIfNeeded() {\n        if (mStartedCounter == 0 &amp;&amp; mPauseSent) {\n            mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_STOP);\n            mStopSent = true;\n        }\n    }\n\n    private ProcessLifecycleOwner() {\n    }\n\n    @SuppressWarnings(&quot;deprecation&quot;)\n    void attach(Context context) {\n        mHandler = new Handler();\n        mRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE);\n        Application app = (Application) context.getApplicationContext();\n        app.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n            @RequiresApi(29)\n            @Override\n            public void onActivityPreCreated(@NonNull Activity activity,\n                    @Nullable Bundle savedInstanceState) {\n                // We need the ProcessLifecycleOwner to get ON_START and ON_RESUME precisely\n                // before the first activity gets its LifecycleOwner started/resumed.\n                // The activity&#39;s LifecycleOwner gets started/resumed via an activity registered\n                // callback added in onCreate(). By adding our own activity registered callback in\n                // onActivityPreCreated(), we get our callbacks first while still having the\n                // right relative order compared to the Activity&#39;s onStart()/onResume() callbacks.\n                activity.registerActivityLifecycleCallbacks(new EmptyActivityLifecycleCallbacks() {\n                    @Override\n                    public void onActivityPostStarted(@NonNull Activity activity) {\n                        activityStarted();\n                    }\n\n                    @Override\n                    public void onActivityPostResumed(@NonNull Activity activity) {\n                        activityResumed();\n                    }\n                });\n            }\n\n            @Override\n            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n                // Only use ReportFragment pre API 29 - after that, we can use the\n                // onActivityPostStarted and onActivityPostResumed callbacks registered in\n                // onActivityPreCreated()\n                if (Build.VERSION.SDK_INT &lt; 29) {\n                    ReportFragment.get(activity).setProcessListener(mInitializationListener);\n                }\n            }\n\n            @Override\n            public void onActivityPaused(Activity activity) {\n                activityPaused();\n            }\n\n            @Override\n            public void onActivityStopped(Activity activity) {\n                activityStopped();\n            }\n        });\n    }\n\n    @NonNull\n    @Override\n    public Lifecycle getLifecycle() {\n        return mRegistry;\n    }\n}</code></pre>\n<p>LifecycleDispatcher 用于为所有 Activity 注入ReportFragment，这样之后对于SDK 中的 Activity 只要实现 LifecycleOwner 就能实现生命周期可观察的能力。</p>\n<pre><code class=\"java\">class LifecycleDispatcher {\n\n    private static AtomicBoolean sInitialized = new AtomicBoolean(false);\n\n    static void init(Context context) {\n        if (sInitialized.getAndSet(true)) {\n            return;\n        }\n        ((Application) context.getApplicationContext())\n                .registerActivityLifecycleCallbacks(new DispatcherActivityCallback());\n    }\n\n    @SuppressWarnings(&quot;WeakerAccess&quot;)\n    @VisibleForTesting\n    static class DispatcherActivityCallback extends EmptyActivityLifecycleCallbacks {\n\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {\n            ReportFragment.injectIfNeededIn(activity);\n        }\n\n        @Override\n        public void onActivityStopped(Activity activity) {\n        }\n\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {\n        }\n    }\n\n    private LifecycleDispatcher() {\n    }\n}</code></pre>\n<h3 id=\"7-5-Service-实现\"><a href=\"#7-5-Service-实现\" class=\"headerlink\" title=\"7.5 Service 实现\"></a>7.5 Service 实现</h3><pre><code class=\"java\">class MyLifecycleService : LifecycleService() {\n    init {\n        lifecycle.addObserver(MyLifecycleServiceObserver())\n    }\n}</code></pre>\n<p>LifecycleService </p>\n<pre><code class=\"java\">public class LifecycleService extends Service implements LifecycleOwner {\n\n    private final ServiceLifecycleDispatcher mDispatcher = new ServiceLifecycleDispatcher(this);\n\n    @CallSuper\n    @Override\n    public void onCreate() {\n        mDispatcher.onServicePreSuperOnCreate();\n        super.onCreate();\n    }\n\n    @CallSuper\n    @Nullable\n    @Override\n    public IBinder onBind(@NonNull Intent intent) {\n        mDispatcher.onServicePreSuperOnBind();\n        return null;\n    }\n\n    @SuppressWarnings(&quot;deprecation&quot;)\n    @CallSuper\n    @Override\n    public void onStart(@Nullable Intent intent, int startId) {\n        mDispatcher.onServicePreSuperOnStart();\n        super.onStart(intent, startId);\n    }\n\n    // this method is added only to annotate it with @CallSuper.\n    // In usual service super.onStartCommand is no-op, but in LifecycleService\n    // it results in mDispatcher.onServicePreSuperOnStart() call, because\n    // super.onStartCommand calls onStart().\n    @CallSuper\n    @Override\n    public int onStartCommand(@Nullable Intent intent, int flags, int startId) {\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @CallSuper\n    @Override\n    public void onDestroy() {\n        mDispatcher.onServicePreSuperOnDestroy();\n        super.onDestroy();\n    }\n\n    @Override\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mDispatcher.getLifecycle();\n    }\n}</code></pre>\n<p>ServiceLifecycleDispatcher</p>\n<pre><code class=\"java\">public class ServiceLifecycleDispatcher {\n    private final LifecycleRegistry mRegistry;\n    private final Handler mHandler;\n    private DispatchRunnable mLastDispatchRunnable;\n\n    /**\n     * @param provider {@link LifecycleOwner} for a service, usually it is a service itself\n     */\n    @SuppressWarnings(&quot;deprecation&quot;)\n    public ServiceLifecycleDispatcher(@NonNull LifecycleOwner provider) {\n        mRegistry = new LifecycleRegistry(provider);\n        mHandler = new Handler();\n    }\n\n    private void postDispatchRunnable(Lifecycle.Event event) {\n        if (mLastDispatchRunnable != null) {\n            mLastDispatchRunnable.run();\n        }\n        mLastDispatchRunnable = new DispatchRunnable(mRegistry, event);\n        mHandler.postAtFrontOfQueue(mLastDispatchRunnable);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onCreate()} method, even before super.onCreate call.\n     */\n    public void onServicePreSuperOnCreate() {\n        postDispatchRunnable(Lifecycle.Event.ON_CREATE);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onBind(Intent)} method, even before super.onBind\n     * call.\n     */\n    public void onServicePreSuperOnBind() {\n        postDispatchRunnable(Lifecycle.Event.ON_START);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onStart(Intent, int)} or\n     * {@link Service#onStartCommand(Intent, int, int)} methods, even before\n     * a corresponding super call.\n     */\n    public void onServicePreSuperOnStart() {\n        postDispatchRunnable(Lifecycle.Event.ON_START);\n    }\n\n    /**\n     * Must be a first call in {@link Service#onDestroy()} method, even before super.OnDestroy\n     * call.\n     */\n    public void onServicePreSuperOnDestroy() {\n        postDispatchRunnable(Lifecycle.Event.ON_STOP);\n        postDispatchRunnable(Lifecycle.Event.ON_DESTROY);\n    }\n\n    /**\n     * @return {@link Lifecycle} for the given {@link LifecycleOwner}\n     */\n    @NonNull\n    public Lifecycle getLifecycle() {\n        return mRegistry;\n    }\n\n    static class DispatchRunnable implements Runnable {\n        private final LifecycleRegistry mRegistry;\n        final Lifecycle.Event mEvent;\n        private boolean mWasExecuted = false;\n\n        DispatchRunnable(@NonNull LifecycleRegistry registry, Lifecycle.Event event) {\n            mRegistry = registry;\n            mEvent = event;\n        }\n\n        @Override\n        public void run() {\n            if (!mWasExecuted) {\n                mRegistry.handleLifecycleEvent(mEvent);\n                mWasExecuted = true;\n            }\n        }\n    }\n}</code></pre>\n<h2 id=\"8-链接\"><a href=\"#8-链接\" class=\"headerlink\" title=\"8. 链接\"></a>8. 链接</h2><ul>\n<li><p><a href=\"https://github.com/androidx/androidx/tree/androidx-main/lifecycle\" target=\"_blank\" rel=\"noopener\">Github | Lifecycle</a></p>\n</li>\n<li><p><a href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle\" target=\"_blank\" rel=\"noopener\">Android 开发者 | Lifecycle</a></p>\n</li>\n<li><p><a href=\"https://developer.android.com/topic/libraries/architecture/lifecycle\" target=\"_blank\" rel=\"noopener\">用户指南</a> </p>\n</li>\n<li><p><a href=\"https://github.com/android/architecture-components-samples\" target=\"_blank\" rel=\"noopener\">代码示例</a> </p>\n</li>\n<li><p><a href=\"https://codelabs.developers.google.com/codelabs/android-lifecycles/index.html?index=#0\" target=\"_blank\" rel=\"noopener\">Codelab</a></p>\n</li>\n<li><p><a href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies\" target=\"_blank\" rel=\"noopener\">Lifecycle 版本说明</a></p>\n</li>\n<li><p><a href=\"https://github.com/googlecodelabs/android-lifecycles\" target=\"_blank\" rel=\"noopener\">googlecodelabs | android-lifecycles</a></p>\n</li>\n<li><p><a href=\"https://stackoverflow.com/questions/52369540/what-is-lifecycle-observer-and-how-to-use-it-correctly\" target=\"_blank\" rel=\"noopener\">What is lifecycle observer and how to use it correctly?</a></p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckrre08ha0000hxxf10x6e2ni","category_id":"ckrrnczno0002ezxf1dtg93ad","_id":"ckrrncznp0005ezxf3p2nests"},{"post_id":"ckrrn6h3u0000dkxf5ykp8xvf","category_id":"ckrrnebsw0000ftxf12kq5zul","_id":"ckrrnebt00001ftxf28xqfzhj"},{"post_id":"ckrswgm600000fexf3041f3xr","category_id":"ckrswgm680001fexfc4q7bdiu","_id":"ckrswgm6a0004fexfcldf8pft"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","category_id":"ckrswgm680001fexfc4q7bdiu","_id":"ckrsz27pd0002moxf20j386fm"},{"post_id":"ckrt0rg170000s7xf5t0466lx","category_id":"ckrswgm680001fexfc4q7bdiu","_id":"ckrt0rg1c0002s7xf51ro0m9z"},{"post_id":"ckrtie1pq00009ixf2l7ac6tb","category_id":"ckrtie1py00019ixfaq7aekpr","_id":"ckrtie1q200049ixf8q173jnm"},{"post_id":"cks96doyj0000kcxf9uvzcjrt","category_id":"cks96jcmo0000lexfe7z8bsm8","_id":"cks96jcmt0003lexf9zfr6p2a"},{"post_id":"ckspbsrbw0000pxxf5qum639j","category_id":"ckrrnczno0002ezxf1dtg93ad","_id":"ckspbsrc10002pxxf7bylcfnb"},{"post_id":"ckssof6um0000unfygb7kdxhl","category_id":"ckssof6ut0001unfya221ge9q","_id":"ckssof6ux0004unfy19ej0n0p"},{"post_id":"cktbcrlsy0000fxxf94pwenjm","category_id":"cktbcrlt80001fxxf3qkqeyja","_id":"cktbcrltc0004fxxfh7by98ps"},{"post_id":"cktq3gnz70000ccxf3n92ais6","category_id":"cktq3gnzg0001ccxfd318b8h1","_id":"cktq3gnzn0004ccxf3d0y8m4m"},{"post_id":"ckvjra5in0000w8xfdqm20mff","category_id":"ckvjrt0q70000zxxf0jpz7jeb","_id":"ckvjrt0qd0003zxxf9khi5mlu"},{"post_id":"ckw6q26n400004zxf72td75j8","category_id":"ckrrnczno0002ezxf1dtg93ad","_id":"ckw6q26nb00024zxff5069adw"},{"post_id":"ckw9hy6690000ozxfcfhrgpfb","category_id":"cktbcrlt80001fxxf3qkqeyja","_id":"ckw9hy66l0002ozxf44figss5"}],"PostTag":[{"post_id":"ckrre08ha0000hxxf10x6e2ni","tag_id":"ckrre08hj0001hxxf3r57hiko","_id":"ckrre08hn0002hxxf42zpescj"},{"post_id":"ckrrn6h3u0000dkxf5ykp8xvf","tag_id":"ckrrncznl0000ezxf19z75xcv","_id":"ckrrncznm0001ezxf5m2sapnn"},{"post_id":"ckrre08ha0000hxxf10x6e2ni","tag_id":"ckrrnczno0003ezxf1dr2621y","_id":"ckrrncznq0008ezxfbqfn3ez4"},{"post_id":"ckrre08ha0000hxxf10x6e2ni","tag_id":"ckrrncznp0004ezxfa9r34ljl","_id":"ckrrncznq0009ezxf0a7weu3r"},{"post_id":"ckrre08ha0000hxxf10x6e2ni","tag_id":"ckrrncznp0006ezxfc5ex3qq6","_id":"ckrrncznq000aezxfh5zm92ff"},{"post_id":"ckrre08ha0000hxxf10x6e2ni","tag_id":"ckrrncznq0007ezxf8xmmb6uk","_id":"ckrrncznq000bezxf0iko3kmx"},{"post_id":"ckrswgm600000fexf3041f3xr","tag_id":"ckrswgm690002fexffvi7f9s0","_id":"ckrswgm6b0008fexfawvlc30x"},{"post_id":"ckrswgm600000fexf3041f3xr","tag_id":"ckrswgm6a0003fexf36uvgycw","_id":"ckrswgm6b0009fexf7a361qyv"},{"post_id":"ckrswgm600000fexf3041f3xr","tag_id":"ckrswgm6a0005fexfgvk87w5y","_id":"ckrswgm6b000afexfg6mz1jaq"},{"post_id":"ckrswgm600000fexf3041f3xr","tag_id":"ckrswgm6b0006fexfc0tc110x","_id":"ckrswgm6b000bfexfghvm35nr"},{"post_id":"ckrswgm600000fexf3041f3xr","tag_id":"ckrswgm6b0007fexf4npg2hmp","_id":"ckrswgm6c000cfexf2fnwgqi3"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrswgm690002fexffvi7f9s0","_id":"ckrsz27pf0008moxffq6e9m5s"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrsz27pa0001moxf1h1sg6wh","_id":"ckrsz27pf0009moxfafmlak51"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrsz27pd0003moxf64kfhuwz","_id":"ckrsz27pf000amoxfcma7eawv"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrsz27pd0004moxfc94e8rjz","_id":"ckrsz27pf000bmoxf2d8fg3x2"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrsz27pe0005moxfev6ke0f5","_id":"ckrsz27pf000cmoxfbw6gb11n"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrsz27pe0006moxf20lpamiv","_id":"ckrsz27pf000dmoxfh8cd6f01"},{"post_id":"ckrsz27oz0000moxf3qz9c79j","tag_id":"ckrsz27pe0007moxf69o1ed6e","_id":"ckrsz27pf000emoxf019t8ms7"},{"post_id":"ckrt0rg170000s7xf5t0466lx","tag_id":"ckrswgm690002fexffvi7f9s0","_id":"ckrt0rg1d0007s7xf8nxy935r"},{"post_id":"ckrt0rg170000s7xf5t0466lx","tag_id":"ckrt0rg1a0001s7xf3dw4a8dl","_id":"ckrt0rg1e0008s7xf4vk07r5g"},{"post_id":"ckrt0rg170000s7xf5t0466lx","tag_id":"ckrt0rg1c0003s7xf4d7yamnv","_id":"ckrt0rg1e0009s7xffmmcfro6"},{"post_id":"ckrt0rg170000s7xf5t0466lx","tag_id":"ckrt0rg1d0004s7xf49pwgl7p","_id":"ckrt0rg1e000as7xf1nomarfd"},{"post_id":"ckrt0rg170000s7xf5t0466lx","tag_id":"ckrt0rg1d0005s7xf5msnggwl","_id":"ckrt0rg1e000bs7xfbv5kc39z"},{"post_id":"ckrt0rg170000s7xf5t0466lx","tag_id":"ckrt0rg1d0006s7xf62ncc5uc","_id":"ckrt0rg1e000cs7xf64rte8yp"},{"post_id":"ckrtie1pq00009ixf2l7ac6tb","tag_id":"ckrtie1q000029ixf7p7ahwlm","_id":"ckrtie1q200059ixfagy03k8k"},{"post_id":"ckrtie1pq00009ixf2l7ac6tb","tag_id":"ckrtie1q100039ixfff134h9h","_id":"ckrtie1q200069ixf8jwhapct"},{"post_id":"cks96doyj0000kcxf9uvzcjrt","tag_id":"cks96jcmr0001lexfbkplg9sh","_id":"cks96jcms0002lexfd7hic0dz"},{"post_id":"ckspbsrbw0000pxxf5qum639j","tag_id":"ckspbsrbz0001pxxf8fd1620w","_id":"ckspbsrc20003pxxfgs3w2qye"},{"post_id":"ckssof6um0000unfygb7kdxhl","tag_id":"ckrre08hj0001hxxf3r57hiko","_id":"ckssof6ux0006unfyaoumggqx"},{"post_id":"ckssof6um0000unfygb7kdxhl","tag_id":"ckssof6uw0002unfy8rw17iz6","_id":"ckssof6uy0007unfyak3u7yqw"},{"post_id":"ckssof6um0000unfygb7kdxhl","tag_id":"ckssof6uw0003unfy2g3wf2kb","_id":"ckssof6uy0008unfy8ys44hcg"},{"post_id":"ckssof6um0000unfygb7kdxhl","tag_id":"ckssof6ux0005unfy4rtsgkkv","_id":"ckssof6uy0009unfyfx523rl1"},{"post_id":"cktbcrlsy0000fxxf94pwenjm","tag_id":"cktbcrltb0002fxxf3xi49b70","_id":"cktbcrlte0006fxxf2o7dexzp"},{"post_id":"cktbcrlsy0000fxxf94pwenjm","tag_id":"cktbcrltc0003fxxfbayc2qhz","_id":"cktbcrlte0007fxxfbf2ibkfg"},{"post_id":"cktbcrlsy0000fxxf94pwenjm","tag_id":"cktbcrltd0005fxxfgs0727j0","_id":"cktbcrlte0008fxxf3f6u3zsj"},{"post_id":"cktq3gnz70000ccxf3n92ais6","tag_id":"cktq3gnzk0002ccxf9hqedi2h","_id":"cktq3gnzp0006ccxfazxr9igv"},{"post_id":"cktq3gnz70000ccxf3n92ais6","tag_id":"cktq3gnzn0003ccxf5wey2a6x","_id":"cktq3gnzq0007ccxf14tj3yz6"},{"post_id":"cktq3gnz70000ccxf3n92ais6","tag_id":"cktbcrltc0003fxxfbayc2qhz","_id":"cktq3gnzq0008ccxfh3ofgrer"},{"post_id":"cktq3gnz70000ccxf3n92ais6","tag_id":"cktq3gnzp0005ccxf8qvtgq2u","_id":"cktq3gnzq0009ccxfe8ik8nex"},{"post_id":"ckvjra5in0000w8xfdqm20mff","tag_id":"ckvjrt0qc0001zxxf2k8o26of","_id":"ckvjrt0qd0002zxxf3f6eatld"},{"post_id":"ckw6q26n400004zxf72td75j8","tag_id":"ckw6q26n600014zxf1yql2tzx","_id":"ckw6q26nd00064zxfffoxdv1j"},{"post_id":"ckw6q26n400004zxf72td75j8","tag_id":"ckw6q26nb00034zxf8vhlageq","_id":"ckw6q26nd00074zxf23ag9g6t"},{"post_id":"ckw6q26n400004zxf72td75j8","tag_id":"ckw6q26nc00044zxfgk83aan3","_id":"ckw6q26ne00084zxf7v031exf"},{"post_id":"ckw6q26n400004zxf72td75j8","tag_id":"ckw6q26nc00054zxfh4tg8iu0","_id":"ckw6q26ne00094zxf3au215ix"},{"post_id":"ckw9hy6690000ozxfcfhrgpfb","tag_id":"cktbcrltb0002fxxf3xi49b70","_id":"ckw9hy66l0003ozxffgl9853l"},{"post_id":"ckw9hy6690000ozxfcfhrgpfb","tag_id":"ckw9hy66h0001ozxf1a5u2i90","_id":"ckw9hy66l0004ozxf8nik7d2a"}],"Tag":[{"name":"H","_id":"ckpxvpkni0005ruxf9eag66nr"},{"name":"W","_id":"ckpxvpknz0008ruxf571j7bsn"},{"name":"组件化","_id":"ckrre08hj0001hxxf3r57hiko"},{"name":"Hexo","_id":"ckrrlvakx000142xf8oxodzhi"},{"name":"Hexo - Matery","_id":"ckrrncznl0000ezxf19z75xcv"},{"name":"注解","_id":"ckrrnczno0003ezxf1dr2621y"},{"name":"Gradle Plugin","_id":"ckrrncznp0004ezxfa9r34ljl"},{"name":"ASM","_id":"ckrrncznp0006ezxfc5ex3qq6"},{"name":"APT","_id":"ckrrncznq0007ezxf8xmmb6uk"},{"name":"计算机基础","_id":"ckrswgm690002fexffvi7f9s0"},{"name":"组成原理","_id":"ckrswgm6a0003fexf36uvgycw"},{"name":"CPU","_id":"ckrswgm6a0005fexfgvk87w5y"},{"name":"存储器","_id":"ckrswgm6b0006fexfc0tc110x"},{"name":"位运算","_id":"ckrswgm6b0007fexf4npg2hmp"},{"name":"操作系统","_id":"ckrsz27pa0001moxf1h1sg6wh"},{"name":"Linux","_id":"ckrsz27pd0003moxf64kfhuwz"},{"name":"进程","_id":"ckrsz27pd0004moxfc94e8rjz"},{"name":"线程","_id":"ckrsz27pe0005moxfev6ke0f5"},{"name":"作业管理","_id":"ckrsz27pe0006moxf20lpamiv"},{"name":"文件管理","_id":"ckrsz27pe0007moxf69o1ed6e"},{"name":"计算机网络","_id":"ckrt0rg1a0001s7xf3dw4a8dl"},{"name":"TCP/IP","_id":"ckrt0rg1c0003s7xf4d7yamnv"},{"name":"HTTP/HTTPS","_id":"ckrt0rg1d0004s7xf49pwgl7p"},{"name":"OSI七层模型","_id":"ckrt0rg1d0005s7xf5msnggwl"},{"name":"DNS","_id":"ckrt0rg1d0006s7xf62ncc5uc"},{"name":"Android","_id":"ckrtie1q000029ixf7p7ahwlm"},{"name":"Java","_id":"ckrtie1q100039ixfff134h9h"},{"name":"设计模式","_id":"cks96jcmr0001lexfbkplg9sh"},{"name":"JVM","_id":"ckspbsrbz0001pxxf8fd1620w"},{"name":"Maven","_id":"ckssof6uw0002unfy8rw17iz6"},{"name":"aar化","_id":"ckssof6uw0003unfy2g3wf2kb"},{"name":"编译优化","_id":"ckssof6ux0005unfy4rtsgkkv"},{"name":"Jetpack","_id":"cktbcrltb0002fxxf3xi49b70"},{"name":"ViewBinding","_id":"cktbcrltc0003fxxfbayc2qhz"},{"name":"VBHelper","_id":"cktbcrltd0005fxxfgs0727j0"},{"name":"Kotlin 委托","_id":"cktq3gnzk0002ccxf9hqedi2h"},{"name":"属性委托","_id":"cktq3gnzn0003ccxf5wey2a6x"},{"name":"ViewModel","_id":"cktq3gnzp0005ccxf8qvtgq2u"},{"name":"算法","_id":"ckvjrt0qc0001zxxf2k8o26of"},{"name":"观察者模式","_id":"ckw6q26n600014zxf1yql2tzx"},{"name":"EventBus","_id":"ckw6q26nb00034zxf8vhlageq"},{"name":"事件总线","_id":"ckw6q26nc00044zxfgk83aan3"},{"name":"框架","_id":"ckw6q26nc00054zxfh4tg8iu0"},{"name":"Lifecycle","_id":"ckw9hy66h0001ozxf1a5u2i90"}]}}